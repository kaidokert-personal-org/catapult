{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc980dd_12e6bcde",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1559627
      },
      "writtenOn": "2023-07-12T16:43:51Z",
      "side": 1,
      "message": "Love this! Just one nit comment. Instead of creating 1 CL encompassing all services, do we want the tool to do 1 CL per service instead? We can specify the service name as an arg to the cmd",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 61
      },
      "revId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9129d60_2e01b0fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-07-12T16:56:37Z",
      "side": 1,
      "message": "This cl includes a `-service-id` flag (line 32) that tells the command to just update a single service\u0027s yaml file.\n\nThe demonstration CL is shows what it does if you omit that flag (updates all yaml files).  \n\nAnd if you do not pass a `-checkout-base` flag to the command it just does a dry run (prints out what versions it would have updated in the yaml file(s)).",
      "parentUuid": "4bc980dd_12e6bcde",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 61
      },
      "revId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22b34f0c_5932cf60",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-07-12T17:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9129d60_2e01b0fd",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 61
      },
      "revId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5e361c6_d0e32807",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-07-11T22:07:22Z",
      "side": 1,
      "message": "the Deployment section in the oncall rotation includes some manual copy/paste steps that I stumbled on this morning; I think we can automate at least the \"figure out which version to update each service to\" part with something like the command in this CL.\n\nNote: The catapult repo doesn\u0027t support Go development very well AFAICT. I don\u0027t know if CI will even verify that this code builds.  I thought about putting this in skia/buildbot, but it really doesn\u0027t belong there since it\u0027s so specific to problems that only catapult/dashboard has.",
      "revId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c91dfb9e4c4f4b7d3d5a484bd965e7da40099a53",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}