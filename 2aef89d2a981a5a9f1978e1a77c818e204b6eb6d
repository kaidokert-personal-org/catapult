{
  "comments": [
    {
      "key": {
        "uuid": "18b2b5a1_dc3fc358",
        "filename": "telemetry/telemetry/internal/results/story_run.py",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-08-16T09:49:33Z",
      "side": 1,
      "message": "Is there an expectation for keys to be unique? From the proto definition it sounds like it\u0027s fine for a key to appear multiple times, but want to double check.",
      "revId": "2aef89d2a981a5a9f1978e1a77c818e204b6eb6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bed0873b_16c5b1b9",
        "filename": "telemetry/telemetry/internal/results/story_run.py",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2019-08-16T14:00:18Z",
      "side": 1,
      "message": "yep, clarified that tag keys do not have to be unique in the design doc.\n\nnote that the proto uses {\"key\": key, \"value\": value} instead of colon-separated string, but i am not opposed to colon-separated. I think we will be using colon-separated string internally anyway, and a single string is easier than a dict. What are your thoughts on this?",
      "parentUuid": "18b2b5a1_dc3fc358",
      "revId": "2aef89d2a981a5a9f1978e1a77c818e204b6eb6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "689c16f8_00d65777",
        "filename": "telemetry/telemetry/internal/results/story_run.py",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-08-16T14:10:27Z",
      "side": 1,
      "message": "Don\u0027t have a strong preference either.\n\nLeaning a bit *slightly* towards making them dicts, because that seems a bit more \"semantically accurate\", and there is no \"parsing\" involved to later extract the values.\n\nBut the amount of parsing is trivial anyway, and I can also see the case being made for a more compact representation.\n\nSo, don\u0027t know. Happy to go either way. :)\n\nAny thoughts Mikhail?",
      "parentUuid": "bed0873b_16c5b1b9",
      "revId": "2aef89d2a981a5a9f1978e1a77c818e204b6eb6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8376d336_6a7eef4e",
        "filename": "telemetry/telemetry/internal/results/story_run.py",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-08-16T14:16:46Z",
      "side": 1,
      "message": "I would prefer strings mainly because they\u0027re simpler.\n\nDict would be appropriate if there were multiple keys per tag, but a tag should be a pretty simple thing, so I don\u0027t think that a dict makes sense here.",
      "parentUuid": "bed0873b_16c5b1b9",
      "revId": "2aef89d2a981a5a9f1978e1a77c818e204b6eb6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "651a8eea_76169893",
        "filename": "telemetry/telemetry/internal/results/story_run.py",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-08-16T14:20:10Z",
      "side": 1,
      "message": "sgtm\n\nI guess they can also be translated to dict (or proto) at the last minute before being uploaded to LUCI services.",
      "parentUuid": "8376d336_6a7eef4e",
      "revId": "2aef89d2a981a5a9f1978e1a77c818e204b6eb6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70709208_7e05b046",
        "filename": "telemetry/telemetry/internal/results/story_run.py",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2019-08-16T18:18:10Z",
      "side": 1,
      "message": "Mikhail: note that dicts here are [{\"key\": key, \"value\": value}, {\"key\": key2, \"value\": value2}], not {key: value, key2: value2}, so the key uniqueness is irrelevant for this decision.\n\nsplitting a string \":\" is easy in Python, but not SQL. Swarming BQ uses strings, I have to extract values like this:\n\n  (SELECT REPLACE(t, \u0027my_key:\u0027, \u0027\u0027) FROM tags t WHERE t LIKE \u0027my_key:%\u0027) as my_key\n\nThis is error prone. In contrast, in buildbucket BQ uses {\"key\": key, \"value\": value} dicts, so SQL looks like this\n\n  (SELECT value FROM tags WHERE key \u003d \u0027my_key\u0027) as my_key\n\npresence check with strings\n\n  \"my_key:my_value\" in UNNEST(tags)\n\nwith dicts:\n\n  STRUCT(\"my_key\", \"my_value\") IN UNNEST(tags)\n\n--\n\ni think my personal preference stays with dicts",
      "parentUuid": "651a8eea_76169893",
      "revId": "2aef89d2a981a5a9f1978e1a77c818e204b6eb6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}