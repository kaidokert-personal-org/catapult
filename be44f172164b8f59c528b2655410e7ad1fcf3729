{
  "comments": [
    {
      "key": {
        "uuid": "df359f62_93858905",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "This param name looks like it\u0027s a fixed value, but it\u0027s actually a callable, so `key_func` or `key_callable` would be a clearer name.\n\nBut also, see next comment.",
      "range": {
        "startLine": 166,
        "startChar": 60,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d46434df_9b111ef4",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df359f62_93858905",
      "range": {
        "startLine": 166,
        "startChar": 60,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a7cf77f_ebf7c88b",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "Given that only subclasses are setting this parameter it seems like a more natural contract for subclassing would be to have a method to override?\n\nOverriding a method would also have the benefit of making the type of `key` self-documenting.  E.g.:\n\nclass DispatchEvaluatorBase(object):\n  …\n  def _key(self, task, event):\n    \"\"\"Extract the key for a given task \u0026 event.\"\"\"\n    raise NotImplementedError(\"Must be overridden by subclasses\")\n\nclass DispatchByTaskStatus(DispatchEvaluatorBase):\n  \n  def _key(self, task, event):\n    return task.status\n\n# etc.\n\n(Perhaps decorated with @classmethod or @staticmethod if that seems clearer?)",
      "range": {
        "startLine": 190,
        "startChar": 59,
        "endLine": 190,
        "endChar": 78
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4bb447f_2a405a6a",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a7cf77f_ebf7c88b",
      "range": {
        "startLine": 190,
        "startChar": 59,
        "endLine": 190,
        "endChar": 78
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "810e413f_f8d8e0f1",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "Nit: The previous line already verified this key exists, so just use []:\n\n  modification \u003d local_accumulator[\u0027state\u0027]",
      "range": {
        "startLine": 146,
        "startChar": 21,
        "endLine": 146,
        "endChar": 51
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37bcde8e_cf935c88",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "810e413f_f8d8e0f1",
      "range": {
        "startLine": 146,
        "startChar": 21,
        "endLine": 146,
        "endChar": 51
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ad11f00_e774b619",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "This is buggy.  [x].__mul__(n) doesn\u0027t give you a list with n copies of x.  It gives you a list with the same instance of x, n times.  So [{}] * 5 is like:\n\n  \u003e\u003e\u003e x \u003d {}; n \u003d 5; l \u003d []\n  \u003e\u003e\u003e for _ in range(n): l.append(x)\n  ...\n\nMutating any element of that list will mutate all of them, because they\u0027re all the same object.\n\nE.g.:\n\n  \u003e\u003e\u003e l \u003d []\n  \u003e\u003e\u003e l.extend([{\u0027x\u0027: []}] * 3)\n  \u003e\u003e\u003e l[0][\u0027x\u0027]\n  []\n  \u003e\u003e\u003e l[0][\u0027x\u0027].append(\u0027foo\u0027)\n  \u003e\u003e\u003e l\n  [{\u0027x\u0027: [\u0027foo\u0027]}, {\u0027x\u0027: [\u0027foo\u0027]}, {\u0027x\u0027: [\u0027foo\u0027]}]\n\n\nSo you\u0027re going to need a loop here (or a list comprehension, which is just more error-prone syntax for this sort of loop, so probably a loop is best.…).\n\n  while len(attempts) \u003c attempt_index:\n    attempts.append({\u0027executions\u0027: []})\n\nFortunately, this is actually more concise and easier to read, and in practice is probably basically as fast (modulo the extra allocations needed for the distinct dicts and lists for each element, but we want those).\n\nAlso: why didn\u0027t the tests catch this?  I assume you\u0027re missing some coverage.",
      "range": {
        "startLine": 178,
        "startChar": 26,
        "endLine": 180,
        "endChar": 14
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9556a546_2873e911",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "\u003e This is buggy.  [x].__mul__(n) doesn\u0027t give you a list with n copies of x.  It gives you a list with the same instance of x, n times.  So [{}] * 5 is like:\n\u003e \n\u003e   \u003e\u003e\u003e x \u003d {}; n \u003d 5; l \u003d []\n\u003e   \u003e\u003e\u003e for _ in range(n): l.append(x)\n\u003e   ...\n\u003e \n\u003e Mutating any element of that list will mutate all of them, because they\u0027re all the same object.\n\u003e \n\u003e E.g.:\n\u003e \n\u003e   \u003e\u003e\u003e l \u003d []\n\u003e   \u003e\u003e\u003e l.extend([{\u0027x\u0027: []}] * 3)\n\u003e   \u003e\u003e\u003e l[0][\u0027x\u0027]\n\u003e   []\n\u003e   \u003e\u003e\u003e l[0][\u0027x\u0027].append(\u0027foo\u0027)\n\u003e   \u003e\u003e\u003e l\n\u003e   [{\u0027x\u0027: [\u0027foo\u0027]}, {\u0027x\u0027: [\u0027foo\u0027]}, {\u0027x\u0027: [\u0027foo\u0027]}]\n\u003e \n\u003e \n\u003e So you\u0027re going to need a loop here (or a list comprehension, which is just more error-prone syntax for this sort of loop, so probably a loop is best.…).\n\u003e \n\u003e   while len(attempts) \u003c attempt_index:\n\u003e     attempts.append({\u0027executions\u0027: []})\n\u003e \n\u003e Fortunately, this is actually more concise and easier to read, and in practice is probably basically as fast (modulo the extra allocations needed for the distinct dicts and lists for each element, but we want those).\n\u003e \n\nGreat catch, thanks!\n\n\u003e Also: why didn\u0027t the tests catch this?  I assume you\u0027re missing some coverage.\n\nYeah, as explained offline, because of the way we\u0027ve set the graph up and the way it happens to be traversed, that we\u0027re almost always just extending these structures by 1 element. It might have been good to randomize the order in testing, for now the more robust code works well enough to not be too much of an issue to guard against.",
      "parentUuid": "2ad11f00_e774b619",
      "range": {
        "startLine": 178,
        "startChar": 26,
        "endLine": 180,
        "endChar": 14
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f634a03d_88c51590",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "In contrast this is fine, because None is immutable, so it doesn\u0027t matter that all the elements point to the same None object.  (Also None is a singleton object anyway, but it\u0027s the immutability that matters for this.)\n\nAlthough it does still have the awkward index arithmetic that is prone to off-by-one errors, so not clearly better than a loop.",
      "range": {
        "startLine": 183,
        "startChar": 28,
        "endLine": 183,
        "endChar": 38
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67f45be5_31433beb",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f634a03d_88c51590",
      "range": {
        "startLine": 183,
        "startChar": 28,
        "endLine": 183,
        "endChar": 38
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60fc9e28_d1ad943c",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "This is a relatively expensive operation.  Unfortunately python\u0027s logging package doesn\u0027t provide a convenient way to defer evaluation of expensive expressions until it is sure it will actually log them (at least that I know of, although I can imagine nasty hacks…).  So I guess leave this as is for now, but keep in mind that this might turn out to be a hotspot later.",
      "range": {
        "startLine": 201,
        "startChar": 41,
        "endLine": 201,
        "endChar": 69
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96aabf62_7fc101b6",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "Good point -- yeah, actually I needed this only when I was debugging, but now it\u0027s not that important to actually show in the logs. 😊",
      "parentUuid": "60fc9e28_d1ad943c",
      "range": {
        "startLine": 201,
        "startChar": 41,
        "endLine": 201,
        "endChar": 69
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b510bb68_3a23c82a",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 258,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "This usage isn\u0027t exactly an accumulation.  ;)\n\nI\u0027m starting to think the “accumulator” concept may be misnamed.",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 258,
        "endChar": 28
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4ce7c95_2ce22cff",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 258,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "Well... in assembly there\u0027s the accumulator register which is mutable and effectively global to every instruction. In this execution model the accumulator works almost exactly how an accumulator register does in assembly.\n\nIt could have well been called a scratch pad (in earlier computing terminology) or a tape (if you want to go all the way back to the Turing machine) and it\u0027s not strictly an input nor output structure either.\n\nSo, suggestions for naming would be welcome (either in the local sense or the global sense of the concept). 😊",
      "parentUuid": "b510bb68_3a23c82a",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 258,
        "endChar": 28
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef9bf543_05a75d20",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer.py",
        "patchSetId": 6
      },
      "lineNbr": 258,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-20T06:01:55Z",
      "side": 1,
      "message": "A discussed offline, I don\u0027t find the analogy to CPU registers particularly helpful in this context.\n\nTo bikeshed this name a little:\n\n“scratch pad“ to me implies throwaway state internal to an implementation and not part of the contract of an API.\n\nSomething like “context”, “state”, “data” or “payload” would make more sense to me.",
      "parentUuid": "d4ce7c95_2ce22cff",
      "range": {
        "startLine": 257,
        "startChar": 0,
        "endLine": 258,
        "endChar": 28
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78b845f6_98c69fe3",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer_test.py",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-20T06:01:55Z",
      "side": 1,
      "message": "If this final accumulator value is unused why assign it to any variable?  Does pylint complain if you don\u0027t explicitly assign this return value to something?",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 5
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a57e3bfc_8c434c60",
        "filename": "dashboard/dashboard/pinpoint/models/evaluators/job_serializer_test.py",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-20T06:01:55Z",
      "side": 1,
      "message": "I don\u0027t love the line break in these key-value pairs, but if pyformat or whatever automated tool prefers it then I won\u0027t argue.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 21
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19944736_de72b914",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/bisection_test.py",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-20T06:01:55Z",
      "side": 1,
      "message": "It\u0027s not immediately obvious to me what sort of compound (or compounding procedure) this name refers to, so this method needs a docstring.",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 23
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "872e9d2d_d467f589",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/bisection_test.py",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-20T06:01:55Z",
      "side": 1,
      "message": "This is almost too cute, even for test code.\n\nIf the tuple-ness of this object isn\u0027t important, then probably better to write this with nested functions, which is more typical Python:\n\n  def UpdateWrapper(job, task, new_state, payload):\n    def UpdateWrapperInner(_):\n      return task_module.UpdateTask(\n        job, task.id, new_state\u003dnew_state, payload\u003dpayload)\n    return UpdateWrapperInner\n\nIf the tuple-ness is significant, please leave a brief comment about it.\n\n(Same applies to the other namedtuple subclasses that only define __call__).\n\n(Edited to add: I belated realize much of this was pre-existing code moved from another file.  So while I still think the namedtuple-with-__call__ style is not justified, I\u0027m happy for you to defer that change to a later CL.)",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ef6368_c3215c3f",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 6
      },
      "lineNbr": 520,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-11-19T05:40:20Z",
      "side": 1,
      "message": "As this class has no state perhaps this should just be a function?\n\n(Same question applies to some of the other serializers too.)",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 520,
        "endChar": 43
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27855407_d8461704",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 6
      },
      "lineNbr": 520,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-11-20T03:25:56Z",
      "side": 1,
      "message": "Good catch. Done.",
      "parentUuid": "92ef6368_c3215c3f",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 520,
        "endChar": 43
      },
      "revId": "be44f172164b8f59c528b2655410e7ad1fcf3729",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}