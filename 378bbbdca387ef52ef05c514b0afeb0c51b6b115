{
  "comments": [
    {
      "key": {
        "uuid": "800a9237_bd5770d6",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 481,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-04-03T00:38:20Z",
      "side": 1,
      "message": "Side note: in retrospect, using a closure here is probably too clever.\n\nI\u0027d just change the places where we call add_tests(obj) below to call _test_adder(obj, test_set, classifier) instead.\n\nBut not in this CL.",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8111389f_1206d7f4",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 481,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-04-03T02:03:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "800a9237_bd5770d6",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e99cb7e_05416396",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 834,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-04-03T00:38:20Z",
      "side": 1,
      "message": "Nit: maybe call this \u0027should_filter\u0027?",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6459d41e_67e2119b",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 834,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-04-03T02:03:20Z",
      "side": 1,
      "message": "If we keep filtering through positional args and filtering through the test-filter arg then can we name one function should_filter_with_test_filter_arg and the other should_filter_with_positional_args?",
      "parentUuid": "0e99cb7e_05416396",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f65938a2_f50f85a8",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 834,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-04-03T23:48:07Z",
      "side": 1,
      "message": "You\u0027re getting at a good question, I think.\n\nThe way I\u0027ll answer it is that it seems like we shouldn\u0027t be exposing this distinction to callers. Specifically, it feels like they shouldn\u0027t have to know about the positional args at all, just as the default classifier doesn\u0027t need to know. I.e., I\u0027m thinking that the positional args are only used during test discovery. If that\u0027s not the case, though, then maybe I\u0027m wrong and need to think through this further.\n\nArguably, I kinda wonder why we\u0027d need to expose the test_filter and skip globs to the caller, either.\n\nMaybe they should pass us those args and let us implement them, and then only call the classifier on the stuff that survives that filtering? I\u0027m not sure if there\u0027s a great argument for why they need to pass us the args only to have them be passed back to them so that they can implement them.\n\nDoes this make sense?",
      "parentUuid": "6459d41e_67e2119b",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bb8ffc5_a559a6b5",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 834,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-04-04T00:42:49Z",
      "side": 1,
      "message": "That does make sense. The issue is that telemetry browser tests and telemetry unit tests use the args for different purposes. Telemetry unit tests check to see if a test filter arg was passed and if it was not then it uses the positional arg to filter tests. Telemetry browser tests uses only one of the positional args (the last positional arg) to find the test class that contains all the tests. It doesn\u0027t use the other positional args for anything. Also within the telemetry browser tests classifier, it filters out any test case that is not a subclass of the SeriallyExecutedBrowserTestCase before checking if it matches the skip globs. If we didn\u0027t have that filter before the skip globs then we may possibly have skip results for test cases that are not from sub classes of SeriallyExecutedBrowserTestCase. There also is the issue of sharding. Telemetry browser tests implemented some code to do sharding which involves test filtering. There is a command line option to  allows users to choose if they want to do test filter before or after sharding tests.",
      "parentUuid": "f65938a2_f50f85a8",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94521f31_725ac0e6",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 834,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-04-05T17:22:41Z",
      "side": 1,
      "message": "Hi I think I might have figured this out. Telemetry does not necessarily have to provide the positional args or test-filter arg to Typ. For browser tests, telemetry can only provide the test-filter arg. The should_filter function in Typ will only see the test filter arg and use that to filter tests. Telemetry unit tests can provide both positional args and test-filter args. The should_filter function in Typ will then filter if the test name matches either the test filter arg or positional arg.",
      "parentUuid": "5bb8ffc5_a559a6b5",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a44db7c_9c475a57",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 847,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-04-03T00:38:20Z",
      "side": 1,
      "message": "Nit: maybe call this \"should_isolate\"?",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c074855_5bdb0523",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 847,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-04-03T02:03:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a44db7c_9c475a57",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd3e5ad7_2197f718",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 854,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-04-03T00:38:20Z",
      "side": 1,
      "message": "Nit: \"should_skip\"?\n\nThough, in this case, maybe this should also be checking the expectations? Not sure here ... the interaction between the command line args and the expectations files is kinda weird, and it seems like we should only be using one approach or the other.\n\nThere\u0027s the same sort of overlap between --test-filter and the positional args, too.",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e761fa2_b5b87af2",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 854,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-04-03T02:03:20Z",
      "side": 1,
      "message": "Given the TODO comment starting at line 974, that actually sounds like a good idea. We can then remove skipping code from  _run_one_test. Also on subject of --test-filter and positional args, I noticed that in telemetry unittests if the --test-filter argument is passed then it ignores positional args. At the same time telemetry browser tests completely ignores positional args. It also. I think we should handle positional args and --test-filter in separate functions for now.",
      "parentUuid": "cd3e5ad7_2197f718",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ffba72f_a2b6344f",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 854,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-04-03T23:48:07Z",
      "side": 1,
      "message": "Also (as I noted in the other comment), we need to bear in mind that we need to still create Results for tests that are skipped, one way or another.",
      "parentUuid": "4e761fa2_b5b87af2",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e751cecd_bc29a6e1",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 7
      },
      "lineNbr": 854,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-04-04T00:03:19Z",
      "side": 1,
      "message": "We do. During test classification, a test that either matches the skip glob or has a skip expectation will be added to the skip_tests list in the TestSet object. Then the _skip_tests function at line 591 will create skip results for each test in that list.",
      "parentUuid": "7ffba72f_a2b6344f",
      "revId": "378bbbdca387ef52ef05c514b0afeb0c51b6b115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}