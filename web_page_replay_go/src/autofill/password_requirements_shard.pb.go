// Code generated by protoc-gen-go. DO NOT EDIT.
// source: password_requirements_shard.proto

package autofill

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A shard of password requirements for domains that can be served to Chrome
// clients.
type PasswordRequirementsShard struct {
	// A map that uses a domain suffix as a key and a PasswordRequirementsSpec as
	// a value.
	//
	// A key of "example.com" would mean the spec applies to "example.com",
	// "www.example.com" but not "some-example.com".
	//
	// It is valid to have one entry with key "www.example.com" and another entry
	// with key "example.com". In this case the most specific entry is applied by
	// Chrome.
	Specs                map[string]*PasswordRequirementsSpec `protobuf:"bytes,1,rep,name=specs" json:"specs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *PasswordRequirementsShard) Reset()         { *m = PasswordRequirementsShard{} }
func (m *PasswordRequirementsShard) String() string { return proto.CompactTextString(m) }
func (*PasswordRequirementsShard) ProtoMessage()    {}
func (*PasswordRequirementsShard) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ca4614fae430c60, []int{0}
}

func (m *PasswordRequirementsShard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordRequirementsShard.Unmarshal(m, b)
}
func (m *PasswordRequirementsShard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordRequirementsShard.Marshal(b, m, deterministic)
}
func (m *PasswordRequirementsShard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordRequirementsShard.Merge(m, src)
}
func (m *PasswordRequirementsShard) XXX_Size() int {
	return xxx_messageInfo_PasswordRequirementsShard.Size(m)
}
func (m *PasswordRequirementsShard) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordRequirementsShard.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordRequirementsShard proto.InternalMessageInfo

func (m *PasswordRequirementsShard) GetSpecs() map[string]*PasswordRequirementsSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

func init() {
	proto.RegisterType((*PasswordRequirementsShard)(nil), "autofill.PasswordRequirementsShard")
	proto.RegisterMapType((map[string]*PasswordRequirementsSpec)(nil), "autofill.PasswordRequirementsShard.SpecsEntry")
}

func init() { proto.RegisterFile("password_requirements_shard.proto", fileDescriptor_8ca4614fae430c60) }

var fileDescriptor_8ca4614fae430c60 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x48, 0x2c, 0x2e,
	0x2e, 0xcf, 0x2f, 0x4a, 0x89, 0x2f, 0x4a, 0x2d, 0x2c, 0xcd, 0x2c, 0x4a, 0xcd, 0x4d, 0xcd, 0x2b,
	0x29, 0x8e, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48,
	0x2c, 0x2d, 0xc9, 0x4f, 0xcb, 0xcc, 0xc9, 0x91, 0x92, 0xc6, 0xaa, 0x18, 0xa2, 0x4c, 0x69, 0x3f,
	0x23, 0x97, 0x64, 0x00, 0x54, 0x3e, 0x08, 0x49, 0x3a, 0x18, 0x64, 0x94, 0x90, 0x0b, 0x17, 0x6b,
	0x71, 0x41, 0x6a, 0x72, 0xb1, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x9e, 0x1e, 0xcc, 0x50,
	0x3d, 0x9c, 0x7a, 0xf4, 0x82, 0x41, 0x1a, 0x5c, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0x20, 0x9a, 0xa5,
	0x62, 0xb8, 0xb8, 0x10, 0x82, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x90, 0x05, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x93,
	0x02, 0xa3, 0x06, 0xb7, 0x91, 0x12, 0x01, 0x5b, 0x0a, 0x52, 0x93, 0x83, 0x20, 0x1a, 0xac, 0x98,
	0x2c, 0x18, 0x9d, 0x98, 0x3c, 0x98, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xd4, 0x58, 0xc4,
	0x10, 0x01, 0x00, 0x00,
}
