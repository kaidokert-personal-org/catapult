{
  "comments": [
    {
      "key": {
        "uuid": "7c046af9_70073be0",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "Do I understand the code correctly that this methods requires you to call viewSubGroups() first to setup nested_level_ and/or title_? If so we should probably do that in this method so users can\u0027t do the wrong thing.",
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2378ca03_3cbbe79d",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "Should this invalidate the cached viewSubGroups_?",
      "range": {
        "startLine": 75,
        "startChar": 6,
        "endLine": 75,
        "endChar": 29
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a75266eb_16618189",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "nit: I know you didn\u0027t touch this but while in this file you could clean this up to be:\n\nfor (const slice of slices)\n\nand same below with:\n\nfor (const subslice of subSlices)",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 91,
        "endChar": 52
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4fdfcf1_8763a9c1",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "nit: or -\u003e of the",
      "range": {
        "startLine": 145,
        "startChar": 27,
        "endLine": 145,
        "endChar": 29
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb61c70_0a18201f",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "Is this related to the comment on childEvents? (\"it is not expected for sub-slices to themselves have sub-sub-slices\") either way this seems comment worthy.",
      "range": {
        "startLine": 149,
        "startChar": 31,
        "endLine": 149,
        "endChar": 55
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3dd79d5_55561d5e",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "nit: It might be better to write this method:\n\nviewSubGroups() {\n  if (this.viewSubGroups_ !\u003d\u003d undefined) {\n    return this.viewSubGroups_;\n  }\n  \n  // Stuff to compute and set this.viewSubGroups_\n\n  return this.viewSubGroups_;\n}\n\nso the logic is less indented.",
      "range": {
        "startLine": 153,
        "startChar": 6,
        "endLine": 153,
        "endChar": 46
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a18b139_49b57674",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "Could be a Map?",
      "range": {
        "startLine": 159,
        "startChar": 14,
        "endLine": 159,
        "endChar": 30
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3a16a91_1d677e31",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "nit: subGroupsByTitle you can switch the if code and the else code to remove the ! and save the mental overhead for people reading the conditional :)",
      "range": {
        "startLine": 175,
        "startChar": 14,
        "endLine": 175,
        "endChar": 38
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce1302c9_8aeff670",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "I think this was clearer before:\n\nif (!subGroupsByTitle[title]) {\n  // ...\n  subGroupsByTitle[title] \u003d blah;\n}\nsubGroup.push(subGroupsByTitle[title]);\n\nRather than:\n\nlet subGroup;\nif (!subGroupsByTitle[title]) {\n  // ...\n  subGroup \u003d foo;\n  subGroupsByTitle[title] \u003d subGroup;\n} else {\n  subGroup \u003d subGroupsByTitle[title];\n}\nsubGroup.push(subGroup);",
      "range": {
        "startLine": 184,
        "startChar": 9,
        "endLine": 184,
        "endChar": 23
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ae51df5_477a54d4",
        "filename": "tracing/tracing/model/async_slice_group.html",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "Using the arrow notation I think this fits on one line:\nthis.viewSubGroups_.sort((a, b) \u003d\u003e a.title.localeCompare(b.title));",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 191,
        "endChar": 7
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0effba9_5dbf45cd",
        "filename": "tracing/tracing/ui/tracks/thread_track.html",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-11-01T15:08:13Z",
      "side": 1,
      "message": "nit: I think you can use the arrow function notation: subgroup \u003d\u003e {\n  // ...\n}\n\nTo avoid having to pass |this| to the forEach",
      "range": {
        "startLine": 123,
        "startChar": 9,
        "endLine": 123,
        "endChar": 13
      },
      "revId": "a2f652baee52170ba126b0fdc9032fc302539bd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}