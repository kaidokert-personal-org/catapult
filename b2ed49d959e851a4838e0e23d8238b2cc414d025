{
  "comments": [
    {
      "key": {
        "uuid": "44f126f2_70de4eee",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/encoder.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "As discussed offline, let\u0027s move this to a common/py_trace_event/third_party/ directory. Keep license info from the original files, and add a README.chromium file describing what you copied and what you changed. Look at catapult/third_party for some examples, e.g.:\n\nhttps://cs.chromium.org/chromium/src/third_party/catapult/third_party/gsutil/README.chromium\nhttps://cs.chromium.org/chromium/src/third_party/catapult/third_party/graphy/README.chromium",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b495f9ea_9bb222ff",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/encoder.py",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44f126f2_70de4eee",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72c8130e_5cde340d",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "nit: maybe call this `proto_format`?",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb58bd96_a0a9d046",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72c8130e_5cde340d",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26012c6f_a6192372",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "super nits: Two spaces between code and comment. Also comments should be sentence like: start with uppercase, end in period or other punctuation.",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fd12395_668660c4",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26012c6f_a6192372",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "187c1483_c80b86fe",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "Move up here the \"tid \u0026 0x7FFFFFFF\", with a comment that we do this because otherwise the value doesn\u0027t fit and the value is supposed to be meaningless anyway (just serves to distinguish threads from one another.\n\nActually, no, discard this comment. I see that the tid value is also used internally by perfetto_trace_writter for things other than just writing it to the trace. So let\u0027s send the original value unmodified like you already do.",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7979928e_3fd15574",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "187c1483_c80b86fe",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c4876c2_e2ce414b",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "ditto style nits",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1088e47_ed9a0e7d",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c4876c2_e2ce414b",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31e66cd3_c4e8fb79",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "Should also add a module docsting here at the top describing that this implements writing for the Chrometto trace protos, and point to the source where the original definitions can be found.",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae1e005_cf0d540d",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31e66cd3_c4e8fb79",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae546fb5_ae934407",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "Maybe all of these should be private and only be set as args to the constructor? Would it also make sense to assert (or assume) they are not None? Same for other classes.\n\nIt also sounds that we will always use these as immutable objects after they have been created. So maybe the could be subclass namedtuple?",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bbe6cd2_32a5b14a",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Some fields may be missing from some messages (e.g. not every packet contains interned_data), so we don\u0027t have to assert everything is not None.\n\nAs for the packet being immutable and created with a constructor, it depends on how we expect to use it. For me, more intuitive approach is to create an empty packet first, then fill it with data. This is also how genuine proto classes work.\n\nAnother approach is to create sub-messages first, then create TracePacket from them. I can\u0027t say that it\u0027s better or worse, just that it looks less intuitive to me. If you think it really has some advantages, I can make the corresponding changes.",
      "parentUuid": "ae546fb5_ae934407",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47aa8c14_9e5f05e0",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-28T09:17:15Z",
      "side": 1,
      "message": "Ok, I think the argument for keeping these close to \"how genuine proto classes work\" wins.\n\nI would just suggest then to split this file into two: one defining the proto classes (which we may replace entirely in the future with the \"real\" generated classes), and another with the external API (write_thread_descriptor, write_event) that you provide. The more we can make it so later the real proto classes are a drop-in replacement for these temporary ones, the better.",
      "parentUuid": "6bbe6cd2_32a5b14a",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee18693c_77f09f6e",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2019-03-25T17:28:16Z",
      "side": 1,
      "message": "hmm, would be nice to test this code. But then again, I wouldn\u0027t know how we\u0027d do that without also writing our own proto parser or comparing serialized byte strings :P",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 12
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12424779_738c97c1",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-26T09:24:26Z",
      "side": 1,
      "message": "I think we should go for comparing serialized byte strings. It\u0027s not pretty, but at least is something.",
      "parentUuid": "ee18693c_77f09f6e",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 12
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b741885_24351fad",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "I was thinking of hard-coding correct byte strings into tests for now. Later we can write proper parsing of traces when the issue with the libraries is solved.\n\nI will add the test as soon as I fix py_trace_event tests in general.",
      "parentUuid": "12424779_738c97c1",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 12
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cc3cb7f_01d490a4",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2019-03-27T08:13:37Z",
      "side": 1,
      "message": "Sounds good :)",
      "parentUuid": "2b741885_24351fad",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 12
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3147e40d_2a75e37d",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-27T18:00:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cc3cb7f_01d490a4",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 12
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14d63220_47836b95",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "Shouldn\u0027t be a TODO; as I had suggested above, just change the comment to indicate why we\u0027re making this and why it makes sense.",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e699496c_def30a8e",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14d63220_47836b95",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf9ec8b2_09411156",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-28T09:17:15Z",
      "side": 1,
      "message": "Looks good. Thanks!",
      "parentUuid": "e699496c_def30a8e",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8f3f37f_9eafc738",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "style nits",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96fe8996_e59db028",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8f3f37f_9eafc738",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5d115c3_b8f3d69c",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2019-03-25T17:28:16Z",
      "side": 1,
      "message": "the alternative here would be to encode such a timestamp as an absolute one. Your choice though - if there\u0027s no situation in which this can occur, feel free to leave it as-is :)",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 262,
        "endChar": 54
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29cf7d0e_2f96f67e",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-26T15:22:56Z",
      "side": 1,
      "message": "It\u0027s not clear from the comment in proto file [1] that delta timestamps can interchange with absolute ones. In the case when it happens, do delta timestamps encode the difference to the last delta timestamp, or to any last timestamp, be it delta or absolute?\n\n[1] https://android.googlesource.com/platform/external/perfetto/+/refs/heads/master/protos/perfetto/trace/track_event/track_event.proto#47",
      "parentUuid": "e5d115c3_b8f3d69c",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 262,
        "endChar": 54
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a50ec18_371b024a",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2019-03-27T08:13:37Z",
      "side": 1,
      "message": "Absolute timestamps don\u0027t affect deltas (\"This is a one-off value that does not affect delta timestamp computation in subsequent TrackEvents.\" from that code you linked ;)).\n\ni.e. you just ignore the absolute ones, delta timestamps are only relative to last deltas and thread descriptor reference value.",
      "parentUuid": "29cf7d0e_2f96f67e",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 262,
        "endChar": 54
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60cc3dd1_859a2748",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/perfetto_trace_writer.py",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-03-27T11:41:57Z",
      "side": 1,
      "message": "Ah, I see, thank you. I was confused by the line \"Delta timestamp value since the last TrackEvent\", because the last TrackEvent could actually contain an absolute timestamp.",
      "parentUuid": "1a50ec18_371b024a",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 262,
        "endChar": 54
      },
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fb0e92c_3da6bec6",
        "filename": "telemetry/telemetry/internal/platform/tracing_agent/telemetry_tracing_agent.py",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-25T17:02:12Z",
      "side": 1,
      "message": "Also as discussed offline, let\u0027s not add to Telemetry yet.",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b28dc8cc_730f4f5b",
        "filename": "telemetry/telemetry/internal/platform/tracing_agent/telemetry_tracing_agent.py",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-03-28T09:17:15Z",
      "side": 1,
      "message": "Reminder to remove the Telemetry changes.",
      "parentUuid": "7fb0e92c_3da6bec6",
      "revId": "b2ed49d959e851a4838e0e23d8238b2cc414d025",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}