{
  "comments": [
    {
      "key": {
        "uuid": "6a773d25_ee3037f0",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1342,
      "author": {
        "id": 1129011
      },
      "writtenOn": "2018-05-01T05:32:08Z",
      "side": 1,
      "message": "There is no need to have separate matcher - you can fold this into ANDROID_PATH_MATCHER and later check that \u0027name\u0027 ends with \u0027base.apk\u0027.",
      "range": {
        "startLine": 1342,
        "startChar": 0,
        "endLine": 1342,
        "endChar": 27
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a33b02b2_d0224ede",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1342,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2018-05-01T17:37:52Z",
      "side": 1,
      "message": "It feels unnecessary to match for exact string here accounting for all versions. All we really need to check is if it has chrome.so or chrome.apk. Also the chrome installed from app store does not match any of the patterns, it has /system/app/chrome.apk. So, it is sufficient to check if we have chrome apk or so.",
      "parentUuid": "6a773d25_ee3037f0",
      "range": {
        "startLine": 1342,
        "startChar": 0,
        "endLine": 1342,
        "endChar": 27
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ede6efe_f721d767",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1342,
      "author": {
        "id": 1129011
      },
      "writtenOn": "2018-05-01T17:54:35Z",
      "side": 1,
      "message": "My comment was more about not having two matchers. They are regexp, so it\u0027s a waste to have two, especially since we have to match both of them.\n\nThe reason why ANDROID_PATH_MATCHER is strict is because it\u0027s also used to detect Android traces. I.e. back then there was no other indication that the trace is from Android, hence HaveFilesFromAndroid() function.\n\nIf there is a simpler way to check for Android traces, then we don\u0027t actually need matchers at all - we can just get file name from path, and operate on it.",
      "parentUuid": "a33b02b2_d0224ede",
      "range": {
        "startLine": 1342,
        "startChar": 0,
        "endLine": 1342,
        "endChar": 27
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ba20846_8fb4daf4",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1342,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2018-05-01T17:57:38Z",
      "side": 1,
      "message": "okay I will try to remove the matchers.\n\nos-name: \"Android\" metadata in the traces. Were they not available in older traces or something?\nit seems to have existed for long time.",
      "parentUuid": "7ede6efe_f721d767",
      "range": {
        "startLine": 1342,
        "startChar": 0,
        "endLine": 1342,
        "endChar": 27
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9482cd9a_e2dd2b7c",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1353,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2018-05-01T14:16:25Z",
      "side": 1,
      "message": "can you add a sample trace to the end to end tests?",
      "range": {
        "startLine": 1353,
        "startChar": 22,
        "endLine": 1353,
        "endChar": 30
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8594feeb_52a87f9a",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1353,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2018-05-01T17:37:52Z",
      "side": 1,
      "message": "um all those tests are trying to download symbols from gcs. But that does not work for android. This cl only fixes local builds.",
      "parentUuid": "9482cd9a_e2dd2b7c",
      "range": {
        "startLine": 1353,
        "startChar": 22,
        "endLine": 1353,
        "endChar": 30
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29e21edf_1d9e0068",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1353,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2018-05-01T18:08:23Z",
      "side": 1,
      "message": "\u003e This cl only fixes local builds.\n\nAck.",
      "parentUuid": "8594feeb_52a87f9a",
      "range": {
        "startLine": 1353,
        "startChar": 22,
        "endLine": 1353,
        "endChar": 30
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "379f16b4_6e4d1bab",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1129011
      },
      "writtenOn": "2018-05-01T05:32:08Z",
      "side": 1,
      "message": "We need to handle case (log a warning?) where path is from base.apk, but chrome_soname is empty.",
      "range": {
        "startLine": 1360,
        "startChar": 61,
        "endLine": 1360,
        "endChar": 74
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "280e2091_d97983a8",
        "filename": "tracing/tracing/extras/symbolizer/symbolize_trace.py",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2018-05-01T17:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "379f16b4_6e4d1bab",
      "range": {
        "startLine": 1360,
        "startChar": 61,
        "endLine": 1360,
        "endChar": 74
      },
      "revId": "3c35b4c2780a601c39c0fa6c74613c4d380097a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}