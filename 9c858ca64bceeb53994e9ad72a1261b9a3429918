{
  "comments": [
    {
      "key": {
        "uuid": "f48494f9_8b7a9b8e",
        "filename": "common/py_utils/py_utils/cloud_storage.py",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2020-10-01T16:16:03Z",
      "side": 1,
      "message": "To avoid code duplication, I\u0027d suggest factoring out the common code between ListFiles and ListDirs into a helper function, something like \"ListNonRecursive\".",
      "revId": "9c858ca64bceeb53994e9ad72a1261b9a3429918",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "921e0521_5cb9b01f",
        "filename": "common/py_utils/py_utils/cloud_storage.py",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-10-01T16:55:23Z",
      "side": 1,
      "message": "As I mention in the comment below, we can\u0027t use \"-d\", so this function has more in common with the `List` function above. I thought again (sorry Julia, when we had our 1:1 I know I said something different) but I think all you need to do is add a optional second argument \"prefix\" or \"path\" or \"query\" to `List`. If you use ** in your prefix, you won\u0027t have to worry about directories [1] . This is what I get: \n\n$ gsutil ls \"gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry**\"\nOutput: \ngs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/logs.txt\ngs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace.html\ngs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/telemetry/tmps91z09.pb\ngs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/traceEvents/tmp945oqj.pb.gz\n\nNote that entries like \"://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/\" is automatically missing from the output.\n\nSo you can then do cloud_storage.List(\u0027chrome-telemetry-output\u0027, prefix\u003d\u002720200907T121136_19134/power.desktop/uol/retry**\u0027) or something like that to get to our trace file. \n\n---\n[1] https://cloud.google.com/storage/docs/gsutil/commands/ls#directory-by-directory,-flat,-and-recursive-listings\n\n^ This mentions using \"-r\", but I don\u0027t seem to need it when using wildcards. If we need the -r flag now (in case my local gsutil is too old  ¯\\_(ツ)_/¯), we can maybe add an optional \"recursive\" boolean flag to `List` as well.",
      "parentUuid": "f48494f9_8b7a9b8e",
      "revId": "9c858ca64bceeb53994e9ad72a1261b9a3429918",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5aeedc6_f52546b1",
        "filename": "common/py_utils/py_utils/cloud_storage.py",
        "patchSetId": 6
      },
      "lineNbr": 250,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2020-10-01T16:16:03Z",
      "side": 1,
      "message": "I think you still need -d here. Imagine the following bucket contents:\n\n  foo1/\n  foo1/file.txt\n  foo2/\n  foo2/file.txt\n  foo.txt\n\nWithout \u0027-d\u0027 option, ListFiles(bucket, \u0027foo*\u0027) will list not only foo.txt (which matches the pattern) but also foo1/file.txt and foo2/file.txt (which don\u0027t).",
      "revId": "9c858ca64bceeb53994e9ad72a1261b9a3429918",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e00c919_bedddffb",
        "filename": "common/py_utils/py_utils/cloud_storage.py",
        "patchSetId": 6
      },
      "lineNbr": 250,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-10-01T16:55:23Z",
      "side": 1,
      "message": "I think with the -d option, `gsutil ls` only lists directories, so we won\u0027t get back \"foo.txt.\"   I just tried this locally:\n\n$ gsutil ls gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/traceEvents/\n\u003e\u003e gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/traceEvents/tmp945oqj.pb.gz\n\n$ gsutil ls -d gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/traceEvents/\n\u003e\u003e # blank line\n\u003e\u003e gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/traceEvents/\n\nI think once you use wildcards, it is impossible to ask google cloud to be \"non-recursive\" since internally it has no concept of directories - all files exist in a flat namespace and the filenames just happen to have slashes in their name. Once you use foo*, it will always match all paths that start with foo*, no matter how many subdirectories deep.",
      "parentUuid": "c5aeedc6_f52546b1",
      "revId": "9c858ca64bceeb53994e9ad72a1261b9a3429918",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ced7dd_7a9f81b2",
        "filename": "common/py_utils/py_utils/cloud_storage.py",
        "patchSetId": 6
      },
      "lineNbr": 250,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2020-10-01T17:41:26Z",
      "side": 1,
      "message": "gsutil supports two different wildcards. The common wildcard \u0027*\u0027 follows the usual shell globbing rules. It matches only objects in one directory. The recursive wildcard \u0027**\u0027 matches everything including slashes, the way that you described.\n\nThe \u0027-d\u0027 option doesn\u0027t affect matching rules, it only affects what gsutil does with those objects that matched. With \u0027-d\u0027 option, gsutil just prints the path of the matched object, whether it\u0027s a file or a directory. Without this option, it additionally prints the contents of every matched directory.\n\nIn your example,\n\n  $ gsutil ls -d gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/traceEvents/\n\nlists only one object (the directory itself), because it\u0027s literally the only object that matched the supplied pattern. To list all files in the directory, you need to supply a pattern that matches those files:\n\n  $ gsutil ls -d gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_0/trace/traceEvents/*\n\nSo, with \u0027-d\u0027 option the ListFiles function will do exactly what\u0027s written in its description: list all files that match the pattern (whether it\u0027s a recursive pattern or not, doesn\u0027t matter). If you need a different behavior, feel free to disregard my comment, but please update the description of what this function should do.",
      "parentUuid": "6e00c919_bedddffb",
      "revId": "9c858ca64bceeb53994e9ad72a1261b9a3429918",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aa17394_3a53e9a5",
        "filename": "common/py_utils/py_utils/cloud_storage.py",
        "patchSetId": 6
      },
      "lineNbr": 250,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-10-01T19:08:48Z",
      "side": 1,
      "message": "Ah yes you\u0027re right! I didn\u0027t include * in my example and really confused myself. Sorry about that, and thank you for pointing this out.\n\nSince \"**\" already skips directories, I still don\u0027t think we need a ListFiles function that manually inspects filenames for ending slashes to skip directories. The one downside is that you can\u0027t make it list only things in the current directory and not recurse into subdirectories, but I believe for our use case all we need to do is something like \"gsutil ls \"gs://chrome-telemetry-output/20200907T121136_19134/power.desktop/uol/retry_*/trace/traceEvents/**\" to get the path to our proto trace file, so if we make `List` accept an optional second `path` argument, we will not need this ListFiles function.\n\nIf I\u0027m missing something, and we actually have a real need for a ListFiles function that lists only the files in a given directory, then factoring out the common bits into `ListNonRecursive` and having a separate `ListFiles` function SGTM.",
      "parentUuid": "14ced7dd_7a9f81b2",
      "revId": "9c858ca64bceeb53994e9ad72a1261b9a3429918",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}