{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cd02c5b8_2d5bc924",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2021-08-24T21:22:32Z",
      "side": 1,
      "message": "PTAL\n\nThis was prompted by one of the comments on this doc going over the current state of Telemetry browsers and what we need to do to make them 1:1 with Chromium targets. https://docs.google.com/document/d/1y3EO-_coGViQr1e7TXSizqEvoqCb64efLjR4-B6UjRg/edit?usp\u003dsharing",
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bf628de_d2bc5d09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2021-08-26T18:40:57Z",
      "side": 1,
      "message": "Ping on this",
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb5d5116_9090caf1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2021-08-27T07:21:17Z",
      "side": 1,
      "message": "FYI I\u0027m only available 2 days/week for at the moment, so you may want to seek review from someone else to get more timely responses.",
      "parentUuid": "3bf628de_d2bc5d09",
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36d1ef4c_2b6fc74f",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2021-08-27T07:21:17Z",
      "side": 1,
      "message": "Hmm, I think this change wouldn\u0027t roll out safely.  As a final state of the code it seems reasonable, but it could (and probably would) break some in-progress jobs when it got deployed.  Effectively this is a schema change for job state, but it\u0027s not backwards compatible.\n\nAs a temporary measure, I think you need to add code to read in the older schema too, e.g.:\n\n  if \u0027fallback_target\u0027 in arguments:\n    # TODO: Delete code to read/write fallback_target after 2021-10-01.\n    fallback_targets \u003d [arguments[\u0027fallback_target\u0027]]\n  else:\n    fallback_targets \u003d arguments.get(\u0027fallback_targets\u0027)\n    \nI picked the date arbitrarily far enough in the future to be confident no old jobs from before this version would still be executed, probably just 2 weeks would be plenty.\n\nAlso I wonder if this issue would affect re-running older jobs?  I forget the exact details of how the arguments are propagated in that case.  If so, probably we\u0027d want to keep backwards compatibility for long enough to be sure no-one is going to re-run with the older arguments schema.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 59
      },
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab3f1f5_f9fc7018",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2021-08-27T17:16:13Z",
      "side": 1,
      "message": "What about fallback_targets\u003darguments.get(\u0027fallback_targets\u0027, arguments.get(\u0027fallback_target\u0027)) ?\nAvoids the date, but allows both \u0027fallback_target\u0027 and \u0027fallback_targets\u0027. Since we handle both strings and lists (https://chromium-review.googlesource.com/c/catapult/+/3115684/1/dashboard/dashboard/pinpoint/models/quest/find_isolate.py#99), we shouldn\u0027t need to convert it to a list in FromDict().",
      "parentUuid": "36d1ef4c_2b6fc74f",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 59
      },
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5183329_cd27f5d3",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2021-09-02T21:10:34Z",
      "side": 1,
      "message": "Switched to my proposal and added a couple of tests for it.",
      "parentUuid": "eab3f1f5_f9fc7018",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 59
      },
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d8e9cf2_59f8057d",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2021-09-03T05:29:58Z",
      "side": 1,
      "message": "This isn\u0027t sufficient yet.  Rereading my original comment I realize conflated two different issues, sorry!  The two issues are:\n\n1) how to deal with requests from old clients that are still passing \u0027fallback_target\u0027 in arguments (that\u0027s handled by FromDict), and\n\n2) how to deal with old job states serialized by versions before this CL.\n\nYou\u0027re now handling 1, but you also need to handle 2, or else in-progress job executions will fail when this rolls out.  For 2 you need to update both FindIsolate and _FindIsolateExecution.\n\nThere\u0027s a limited example of how to handle this sort of issue in FindIsolate: the build_tags property, which carefully guards against the possibility that the _build_tags attribute is not present.  A similar approach could work well here:\n\n  @property\n  def fallback_targets(self):\n    if hasattr(self, \u0027_fallback_targets\u0027):\n      return self._fallback_targets\n    # Support the older attribute for this (before crrev.com/c/3115684).\n    if hasattr(self, \u0027_fallback_target\u0027):\n      return [self._fallback_target]\n    return []\n\n    \nAnd then always read these values via this property rather than the underscore-prefixed name.\n\n(You could probably also muck about with the __getstate__ hook, but IIRC it\u0027s more complex.)\n\nUnfortunately it\u0027s hard to convincingly unit test that a newer version of the code correctly deserializes objects serialized by an older version.",
      "parentUuid": "f5183329_cd27f5d3",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 59
      },
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "542193f2_b5e0f0b8",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2021-09-07T19:32:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d8e9cf2_59f8057d",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 59
      },
      "revId": "7ac1ad39e4abf6e2d8e455589d7306a40d045119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}