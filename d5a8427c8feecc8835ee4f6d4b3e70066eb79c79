{
  "comments": [
    {
      "key": {
        "uuid": "eb2ef68e_5e7ee023",
        "filename": "dashboard/dashboard/pinpoint/models/change/change.py",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Nit:\n\n  if data.get(\u0027patch\u0027) is not None:",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 53
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bdcfecf_ad7fef57",
        "filename": "dashboard/dashboard/pinpoint/models/change/change.py",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-10-08T17:05:08Z",
      "side": 1,
      "message": "Add a quick test to cover new functionality.",
      "range": {
        "startLine": 127,
        "startChar": 48,
        "endLine": 127,
        "endChar": 52
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87f912fe_223198b1",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "The long repetitive names definitely make this harder to read.\n\nHow about relying on namedtuples\u0027 `_asdict` method?:\n\n  def _CreateReadTaskOptions(\n    return read_value.TaskOptions(\n        test_options\u003drun_test.TaskOptions(\n            build_options\u003dfind_isolate.TaskOptions(\n                change\u003dchange,\n                **build_option_template._asdict()),\n            attempts\u003danalysis_options.min_attempts,\n            **test_option_template._asdict()),\n        **read_option_template._asdict())\n    \n\nI tried removing some of the repetition but staying explicit about the keys with a helper but I don\u0027t think it is a net win:\n\n  def CopyKeys(d, *keys_to_copy):\n    \"\"\"Returns partial copy of a dict including only specified keys.\"\"\"\n    return {k:v for k,v in d.items() if k in keys_to_copy}\n  return read_value.TaskOptions(\n      test_options\u003drun_test.TaskOptions(\n          build_options\u003dfind_isolate.TaskOptions(\n              change\u003dchange,\n              **CopyKeys(build_option_template, \u0027builder\u0027, \u0027target\u0027, \u0027bucket\u0027)),\n          attempts\u003danalysis_options.min_attempts,\n          **CopyKeys(test_option_template,\n              \u0027swarming_server\u0027, \u0027dimensions\u0027, \u0027extra_args\u0027)),\n      **CopyKeys(read_option_template,\n          \u0027benchmark\u0027, \u0027histogram_options\u0027, \u0027graph_json_options\u0027, \u0027mode\u0027))\n\n\nIf we had pytype that might be a nice option, because it provides a clear way to keep the type explicit without needing a super verbose variable name:\n\n  def _CreateReadTaskOptions(\n      build_ot: BuildOptionTemplate,\n      test_ot: TestOptionTemplate, \n      read_ot: ReadOptionTemplate,\n      analysis_options: AnalysisOptions,\n      change: change_module.Change):\n    return read_value.TaskOptions(\n        test_options\u003drun_test.TaskOptions(\n            build_options\u003dfind_isolate.TaskOptions(\n                builder\u003dbuild_ot.builder,\n                target\u003dbuild_ot.target,\n                bucket\u003dbuild_ot.bucket,\n                change\u003dchange),\n            …  # etc\n\nBut for now the `_asdict()` approach looks attractive to me.  What do you think?  As this is so core to our service it\u0027d be nice to have this code be really easy to read.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 52
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dde651fa_ba71b0eb",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "I think you want either:\n\n      vertices\u003dlist(itertools.chain(start_graph.vertices, end_subgraph,\n                                    [find_culprit_task])),\n\nOr:\n\n      vertices\u003dlist(start_graph.vertices) + list(end_subgraph)\n          + [find_culprit_task],\n\nThe iterable returned from itertools.chain is a one-shot iterator, so seemingly innocuous code like:\n\n  for vertex in g.vertices:\n    log.debug(\u0027vertex is %r\u0027, vertex)\n\nWill consume the iterator and later code will effectively get an empty collection (without an exception — for better or worse repeatedly calling .next() on a fully consumed itertools.chain keeps raising StopIteration rather than something more serious, so the bug won\u0027t necessarily be obvious.)",
      "range": {
        "startLine": 127,
        "startChar": 1,
        "endLine": 128,
        "endChar": 52
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f8a8d61_35a65857",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 129,
        "startChar": 6,
        "endLine": 129,
        "endChar": 28
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd81bf9b_afbac257",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 138,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Why __slots__?  Is the memory saving significant here?  If so, a comment justifying this is probably a good idea.\n\nThis an optimization that does have some tradeoffs, particularly that you can\u0027t make a weakref (unless you explicitly reserve a __weakref__ slot).  Or annotate the object with ad hoc members in tests as is occasionally helpful.  (There are other more esoteric issues, but in practice those are the main two I\u0027ve encountered, IIRC).",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 138,
        "endChar": 16
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b15e67fa_e687bbfa",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 151,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-10-08T17:05:08Z",
      "side": 1,
      "message": "FYI: All those AsDict/FromDict\u0027s also touch gitiles_service/repository_module unfortunately.",
      "range": {
        "startLine": 151,
        "startChar": 37,
        "endLine": 151,
        "endChar": 48
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03264a3d_d488b474",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-10-08T17:05:08Z",
      "side": 1,
      "message": "Although it\u0027s a short function, there\u0027s already an existing math_utils.py:Mean, consolidate these.",
      "range": {
        "startLine": 293,
        "startChar": 4,
        "endLine": 293,
        "endChar": 8
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75e65530_2ab54417",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "You probably want to allow instances of long here too (although python 3 thankfully loses the distinction between int and long).",
      "range": {
        "startLine": 294,
        "startChar": 48,
        "endLine": 294,
        "endChar": 51
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f59cd9c_bea3a942",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 330,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Not sure how our appengine environment is configured, but be aware that assert statements are not run in optimized builds.",
      "range": {
        "startLine": 329,
        "startChar": 1,
        "endLine": 330,
        "endChar": 12
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4adc535c_20efd331",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Nit: just\n\n  deps \u003d set(task.dependencies)",
      "range": {
        "startLine": 337,
        "startChar": 13,
        "endLine": 337,
        "endChar": 50
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92753da0_bc076bce",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 341,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-10-08T17:05:08Z",
      "side": 1,
      "message": "Probably more readable to move the items to a separate line, ie.\nfoop \u003d ...\nfor change, status, result_values in foop:",
      "range": {
        "startLine": 341,
        "startChar": 6,
        "endLine": 341,
        "endChar": 9
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e650bc2e_149ba404",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 347,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-10-08T17:05:08Z",
      "side": 1,
      "message": "fyi: Can use collections.defaultdict(list) and defaultdict(dict) below",
      "range": {
        "startLine": 347,
        "startChar": 26,
        "endLine": 347,
        "endChar": 36
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53a25c67_0834a616",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 351,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "You\u0027ve gone to the trouble of calling d.setdefault(change) on the previous line, so this can just be d[change].\n\nOr omit the setdefault call and use d.get(change, {}) here.",
      "range": {
        "startLine": 351,
        "startChar": 36,
        "endLine": 351,
        "endChar": 48
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ec0c9bb_71793a4a",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 365,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "FYI, for this sort of statement I think golang\u0027s preference for brief identifiers makes a lot of sense:\n\n      ordered_changes \u003d [c for c in all_changes if c in changes_with_data]",
      "range": {
        "startLine": 365,
        "startChar": 0,
        "endLine": 365,
        "endChar": 73
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a038d18d_2e254721",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 378,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-10-08T17:05:08Z",
      "side": 1,
      "message": "Do these have to be defined in local scope? It makes the __call__ function difficult to follow.",
      "range": {
        "startLine": 378,
        "startChar": 10,
        "endLine": 378,
        "endChar": 17
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65b21a92_8c04d5ea",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 413,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Typo: “determines”",
      "range": {
        "startLine": 413,
        "startChar": 43,
        "endLine": 413,
        "endChar": 52
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecef40d6_9bc1036c",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "I\u0027m not a fan of calling reduce with a function that has side-effects.  How about:\n\n  # From https://docs.python.org/2/library/itertools.html#recipes:\n  def pairwise(iterable):\n    \"\"\"s -\u003e (s0,s1), (s1,s2), (s2, s3), ...\"\"\"\n    a, b \u003d itertools.tee(iterable)\n    next(b, None)\n    return itertools.izip(a, b)\n\n  for a, b in pairwise(ordered_changes):\n    if DetectChange(a, b):\n      differences.append((a.AsDict(), b.AsDict())",
      "range": {
        "startLine": 475,
        "startChar": 0,
        "endLine": 475,
        "endChar": 65
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7a71fa7_11f764a4",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection_test.py",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Please add a docstring that briefly describes the task graph this populates.  In a test that calls self.PopulateTaskGraph() what properties can that test assume the graph has?\n\nAlso consider renaming this to be a little more specific.  PopulateSimpleBisectionGraph?",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 30
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "695f766b_a865e37e",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection_test.py",
        "patchSetId": 4
      },
      "lineNbr": 231,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-10-08T05:11:16Z",
      "side": 1,
      "message": "Please do :)",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 36
      },
      "revId": "d5a8427c8feecc8835ee4f6d4b3e70066eb79c79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}