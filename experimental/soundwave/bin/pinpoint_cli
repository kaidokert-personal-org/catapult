#!/usr/bin/env python
# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import csv
import json
import os
import posixpath
import sys

import oauth2client.tools

ROOT_PATH = os.path.normpath(os.path.join(os.path.dirname(__file__), '..'))
CATAPULT_PATH = os.path.normpath(os.path.join(ROOT_PATH, '..', '..'))
PY_UTILS_PATH = os.path.join(CATAPULT_PATH, 'common', 'py_utils')
TRACING_PATH = os.path.join(CATAPULT_PATH, 'tracing')

sys.path.append(ROOT_PATH)
sys.path.append(PY_UTILS_PATH)
sys.path.append(TRACING_PATH)

from common import utils
from pinpoint_cli import histograms_df
from pinpoint_cli import job_results
import services


def DownloadJobResultsAsCsv(api, job_id, output_file):
  job = api.pinpoint.Job(job_id, with_state=True)
  # TODO: Make this also work for jobs that ran on windows platform.
  results_file = posixpath.join(
      job['arguments']['benchmark'], 'perf_results.json')
  print 'Fetching results for %s job %s:' % (job['status'].lower(), job_id)
  with open(output_file, 'wb') as f:
    writer = csv.writer(f)
    writer.writerow(('change', 'isolate') + histograms_df.COLUMNS)
    num_rows = 0
    for change_id, isolate_hash in job_results.IterTestOutputIsolates(job):
      print '- isolate: %s ...' % isolate_hash
      histograms = api.isolate.RetrieveFile(isolate_hash, results_file)
      for row in histograms_df.IterRows(json.loads(histograms)):
        writer.writerow((change_id, isolate_hash) + row)
        num_rows += 1
  print 'Wrote data from %d histograms in %s.' % (num_rows, output_file)


def main():
  parser = argparse.ArgumentParser(parents=[oauth2client.tools.argparser])
  parser.add_argument(
      '-v', '--verbose', action='count', default=0,
      help='Increase verbosity level')
  subparsers = parser.add_subparsers(dest='action')
  subparsers.required = True
  # Subparser args for downloading the perf results of a job as a csv file.
  subparser = subparsers.add_parser('get-csv')
  subparser.add_argument(
      'job_id', metavar='JOB_ID',
      help='id of a pinpoint job for which to get results')
  subparser.add_argument(
      'output', metavar='OUTPUT_CSV',
      help='path to a file where to store perf results as a csv file')
  # Subparser args for creating a new job.
  subparser = subparsers.add_parser('new-job')
  subparser.add_argument('--repository', default='chromium')
  subparser.add_argument('--revision', required=True)
  subparser.add_argument('--patch', required=True)
  args = parser.parse_args()
  utils.ConfigureLogging(args.verbose)

  api = services.UserServices(args)

  if args.action == 'get-csv':
    return DownloadJobResultsAsCsv(api, args.job_id, args.output)
  elif args.action == 'new-job':
    print api.pinpoint.NewJob(
        name='Test job from command line',
        configuration='android-go-perf',
        target='performance_test_suite',
        benchmark='system_health.memory_mobile',
        extra_test_args='--story-tag-filter health_check',
        repository=args.repository,
        start_git_hash=args.revision,
        end_git_hash=args.revision,
        patch=args.patch)
  else:
    raise NotImplementedError(args.action)


if __name__ == '__main__':
  sys.exit(main())
