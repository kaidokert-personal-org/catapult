{
  "comments": [
    {
      "key": {
        "uuid": "ffadcdd6_1d284fd5",
        "filename": "experimental/v8_tools/dot_plotter_test.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2018-08-15T14:02:34Z",
      "side": 1,
      "message": "what happens if the converted keys conflict? e.g. \"key.\" and \"key@\"",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 39
      },
      "revId": "62ee0387ce98c0a640385fca57f27be41805c127",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdbc27a3_55c83071",
        "filename": "experimental/v8_tools/dot_plotter_test.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1293423
      },
      "writtenOn": "2018-08-15T14:43:31Z",
      "side": 1,
      "message": "Good point, how about converting the invalid characters to their ascii values instead of empty strings? Also, is it safe to assume that the raw input keys are unique?",
      "parentUuid": "ffadcdd6_1d284fd5",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 39
      },
      "revId": "62ee0387ce98c0a640385fca57f27be41805c127",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f77b4f11_21a03217",
        "filename": "experimental/v8_tools/dot_plotter_test.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2018-08-15T14:53:31Z",
      "side": 1,
      "message": "raw input keys have to be unique because they\u0027re keys on an object (which is semantically like a dictionary/map).\n\nAscii values (as hex?) sounds reasonable, maybe pad to 4 chars and prefix with _ (and escape _ to __), e.g. \" \" -\u003e \"_0020\"? That would make it a two-way encoding which might also be valuable.",
      "parentUuid": "bdbc27a3_55c83071",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 39
      },
      "revId": "62ee0387ce98c0a640385fca57f27be41805c127",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b8191fb_61db226a",
        "filename": "experimental/v8_tools/dot_plotter_test.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1293423
      },
      "writtenOn": "2018-08-15T15:06:20Z",
      "side": 1,
      "message": "Sure that sounds good, I\u0027ll update that then.",
      "parentUuid": "f77b4f11_21a03217",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 39
      },
      "revId": "62ee0387ce98c0a640385fca57f27be41805c127",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55c2b9ec_4d62e11a",
        "filename": "experimental/v8_tools/dot_plotter_test.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1293423
      },
      "writtenOn": "2018-08-15T15:48:04Z",
      "side": 1,
      "message": "Actually, looking at the spec it\u0027s possible to escape invalid characters with a \u0027\\\u0027. This would still be a two way encoding I think so shall I just go ahead and do that?",
      "parentUuid": "8b8191fb_61db226a",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 39
      },
      "revId": "62ee0387ce98c0a640385fca57f27be41805c127",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}