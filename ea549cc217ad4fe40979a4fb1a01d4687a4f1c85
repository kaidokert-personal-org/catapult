{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ec0872fe_733f2efe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2021-11-04T17:58:26Z",
      "side": 1,
      "message": "John and I discussed a solution for the cancel button. The plan is to not submit until he\u0027s returned from vacation. I left comments in areas where I wasn\u0027t sure of implementation details. ",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3a1d32_b6371631",
        "filename": "dashboard/dashboard/pinpoint/models/job.py",
        "patchSetId": 1
      },
      "lineNbr": 708,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2021-11-04T17:58:26Z",
      "side": 1,
      "message": "I\u0027m not sure if this is where this if statement should go.",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb34a37d_0e256c57",
        "filename": "dashboard/dashboard/pinpoint/models/job.py",
        "patchSetId": 1
      },
      "lineNbr": 708,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2021-11-04T23:41:50Z",
      "side": 1,
      "message": "IIUC (biiiig assumption ;) the race condition is something like \n\n```\n   Thread 1               | Thread 2             | ndb op | job.cancelled, as\n   handle /run            | handle /cancel       |        | stored in ndb\n--------------------------------------------------------------------------\n0: job \u003d key.get()        |                      | read   | false\n1: job.Run()              |                      |        | false\n2:                        | job \u003d key.get()      | read   | false\n3:                        | job.Cancel()         |        | false\n4: [never updates its     |                      |        | false\n   copy of job.cancelled] |                      |        | false\n5:                        | job.cancelled \u003d true |        | true\n6:                        | job.put()            | write  | true\n7: [its in-mem copy of    |                      |        | true\n   job.cancelled is still |                      |        | true\n   false]                 |                      |        | true\n8: job.put()              |                      | write  | false\n```\n\nI believe that adding an IsCancelled (even if it\u0027s @ndb.transactional) check here would be like having Thread 1 do an extra read somewhere arbitrarily in the range of lines (1, 8). This would still leave Thread 1 potentially unaware of any writes that Thread 2 has made before Thread 1 reaches line 8.\n\nI\u0027m not familiar enough with ndb transactions yet to answer this, but can the entire /run and /cancel handlers be made atomic? E.g. make it so either request thread\u0027s key.get() call will block or raise if the other thread already has read the key with a txn (locked job) and hasn\u0027t committed the txn (released job) yet? Or something like that?\n\nBacking up a bit, what do we *want* to happen if a user asks the server to cancel a job that\u0027s already started? If it\u0027s \"Reply with a `sorry, we can\u0027t actually cancel a job once it\u0027s started` message and disable the cancel button.\" that\u0027s probably easier than \"Actually have the server cancel the job and stop any distributed work already in progress on it.\"",
      "parentUuid": "9f3a1d32_b6371631",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bde155a7_07df8771",
        "filename": "dashboard/dashboard/pinpoint/models/job.py",
        "patchSetId": 1
      },
      "lineNbr": 708,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2021-11-05T18:32:02Z",
      "side": 1,
      "message": "Wow nice visual. \n\nFirst, we want to first see if we can \"fix\" the cancel button. We would like it if when you press the cancel button, the job somehow stops. If that\u0027s not possible, then we\u0027ll go with the alternative of showing an error message that says \"sorry, jobs only cancel if they are queued and not running\" \n\nSecond, I believe everything you said about threads, ndb op, and job.cancelled are correct. I am hoping that scheduler will track the job objects and their queued / running / cancelled status correctly regardless of race condition. Scheduler does not get overwritten by job.run (I think otherwise this solution would not work). \n\nThird, I don\u0027t know enough about ndb transactions either to know if it\u0027s possible to prevent threads from running while other functions are executing.",
      "parentUuid": "bb34a37d_0e256c57",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d39e0ea2_e9577846",
        "filename": "dashboard/dashboard/pinpoint/models/job.py",
        "patchSetId": 1
      },
      "lineNbr": 708,
      "author": {
        "id": 1181219
      },
      "writtenOn": "2021-11-10T22:57:07Z",
      "side": 1,
      "message": "I believe this \"if\" statement is at the right location. Its goal is not to avoid the race condition Sean mentioned, but to ensure that the job is really cancelled when the race conditions doesn\u0027t happen. We\u0027ll have to handle the race condition by some other means.\n\nHowever, the comments below are misleading. They seem to suggest that the new code would avoid the race condition, which is not true.",
      "parentUuid": "bde155a7_07df8771",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f257fff_22b2c429",
        "filename": "dashboard/dashboard/pinpoint/models/job.py",
        "patchSetId": 1
      },
      "lineNbr": 708,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2021-11-10T23:13:14Z",
      "side": 1,
      "message": "I see, I misinterpreted the CL description: \"Additional check necessary due to race condition.\" - does not actually imply this CL fixes the condition. I agree w/ John. This code change is appropriate for handling cancelled jobs correctly under non-race conditions, but the comment could be rewritten to make that clearer.",
      "parentUuid": "d39e0ea2_e9577846",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5df90475_be2f659d",
        "filename": "dashboard/dashboard/pinpoint/models/scheduler.py",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2021-11-04T17:58:26Z",
      "side": 1,
      "message": "Not sure if ndb.transactional is necessary here",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d773e57_e52dd687",
        "filename": "dashboard/dashboard/pinpoint/models/scheduler.py",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2021-11-04T23:41:50Z",
      "side": 1,
      "message": "I\u0027m not sure either.",
      "parentUuid": "5df90475_be2f659d",
      "revId": "ea549cc217ad4fe40979a4fb1a01d4687a4f1c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}