{
  "comments": [
    {
      "key": {
        "uuid": "66c924ce_82a2ad7a",
        "filename": "third_party/typ/run",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-07-18T00:26:42Z",
      "side": 1,
      "message": "I went down this path (of running things under both 2 and 3 at once) at one point when this was a standalone repo, but eventually decided it made life harder, not easier (e.g., if you just wanted to only run one version to test things).\n\nSo, I\u0027d skip all of this and leave this file alone.",
      "revId": "e0011c76e2828346aab90139a50c4d2aea9fc756",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "737a2e9d_9a31bcf9",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-07-18T00:26:42Z",
      "side": 1,
      "message": "This won\u0027t work in python 2 if reason is a unicode string. You probably don\u0027t want to prevent that. \n\nI think the convention we\u0027re moving to is:\n\n    isinstance(reason, str) or sys.version_info.major \u003d\u003d 2 and isinstance(reason, unicode)\n\n(which is way more awkward, admittedly)\n\nor doing something like we do in host_fake.py to redefine unicode",
      "revId": "e0011c76e2828346aab90139a50c4d2aea9fc756",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ba7a178_00cf9bce",
        "filename": "third_party/typ/typ/python_2_3_compat.py",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-07-18T00:26:42Z",
      "side": 1,
      "message": "I think this whole routine is either confused or just wrong; as written, it\u0027ll return a unicode string in python 2 and a bytestring in python3 (I think).\n\nI think you just want to unconditionally do:\n\n  def str_to_bytes(msg):\n    return msg.encode()\n\nYou could return msg unmodified in python2, but then you\u0027d have things that\u0027d pass in python 2 that\u0027d fail in python 3 if they were not valid utf8-encoded strings.",
      "revId": "e0011c76e2828346aab90139a50c4d2aea9fc756",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}