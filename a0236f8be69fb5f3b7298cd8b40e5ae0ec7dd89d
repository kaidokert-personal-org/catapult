{
  "comments": [
    {
      "key": {
        "uuid": "142dfb4d_a013b805",
        "filename": "telemetry/telemetry/core/tracing_controller.py",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-02T14:49:12Z",
      "side": 1,
      "message": "nits: \neither this doc should be: \n\"\"\"Stops tracing and returns a tuple of (TraceValue object, list of non fatal exceptions)\"\"\"\n\nor\n\"\"\"\nStops tracing and returns a tuple of (trace_value, nonfatal_exceptions_list)\n\nWhereas:\n  trace_value: an instance of trace_value.TraceValue\n  nonfatal_exceptions_list: a list of exceptions (type Exception).\n\"\"\"",
      "revId": "a0236f8be69fb5f3b7298cd8b40e5ae0ec7dd89d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c76b8a_f70b1ca9",
        "filename": "telemetry/telemetry/core/tracing_controller.py",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-02T17:59:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "142dfb4d_a013b805",
      "revId": "a0236f8be69fb5f3b7298cd8b40e5ae0ec7dd89d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2cb6e3e_179f9f43",
        "filename": "telemetry/telemetry/internal/platform/tracing_controller_backend.py",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-02T17:59:20Z",
      "side": 1,
      "message": "I went ahead and deleted this: none of the other methods in this class have comments (they all just defer to tracing_controller.py, presumably), so it seems silly to have one here.",
      "revId": "a0236f8be69fb5f3b7298cd8b40e5ae0ec7dd89d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33eaae61_6aec6586",
        "filename": "telemetry/telemetry/internal/platform/tracing_controller_backend_unittest.py",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-02T14:49:12Z",
      "side": 1,
      "message": "Can you add another test which the exception list is non empty?",
      "revId": "a0236f8be69fb5f3b7298cd8b40e5ae0ec7dd89d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fe7f2d4_9a5c1228",
        "filename": "telemetry/telemetry/internal/platform/tracing_controller_backend_unittest.py",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-02T17:59:20Z",
      "side": 1,
      "message": "That\u0027s actually not possible at the moment: all exception are still considered fatal, and this class is where we\u0027re going to hold the actual business logic that determines which exceptions are fatal and which aren\u0027t, so it doesn\u0027t make sense to fake/mock it. In a follow-up CL, where I look for BattOrErrors and add them to the list to make sure they\u0027re considered nonfatal, I\u0027ll make sure that I add a test verifying that BattOr errors are handled correctly.\n\nI would add a test case to tracing_controller_unittest.py, but it seems like tracing_controller is basically a very thin shim around tracing_controller_backend, and there\u0027s no obvious way to mock out the return values of its tracing_controller_backend.",
      "parentUuid": "33eaae61_6aec6586",
      "revId": "a0236f8be69fb5f3b7298cd8b40e5ae0ec7dd89d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dceaab3f_0a219366",
        "filename": "telemetry/telemetry/internal/platform/tracing_controller_backend_unittest.py",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-02T18:06:14Z",
      "side": 1,
      "message": "You can mock out the StopTracing method of a particular tracing_agent (see https://stackoverflow.com/a/8182480). If you hate mock, we can also make tracing_controller_backend\u0027s init take a list of tracing_agent objects so that you in test code, you can init it with your [FailedTracingAgent()]",
      "parentUuid": "9fe7f2d4_9a5c1228",
      "revId": "a0236f8be69fb5f3b7298cd8b40e5ae0ec7dd89d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}