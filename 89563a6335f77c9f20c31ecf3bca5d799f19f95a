{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "844e2b0c_1cb7ca79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2022-02-24T23:14:06Z",
      "side": 1,
      "message": "LGTM % remaining comment",
      "revId": "89563a6335f77c9f20c31ecf3bca5d799f19f95a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c76f71c5_1083d7a9",
        "filename": "telemetry/telemetry/internal/backends/chrome/cast_browser_backend.py",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2022-02-24T23:14:06Z",
      "side": 1,
      "message": "It might not make a difference in practice (i.e. we\u0027re already in the output dir on swarming), but it\u0027s probably best to store the current directory, change directory, create the process, and swap back afterwards. It doesn\u0027t seem like chdir can be used as a context manager, so do something like:\n\n```\noriginal_dir \u003d os.getcwd()\ntry:\n  os.chdir(self._output_dir)\n  self._cast_core_process \u003d ...\nfinally:\n  os.chdir(original_dir)\n```",
      "range": {
        "startLine": 119,
        "startChar": 4,
        "endLine": 119,
        "endChar": 30
      },
      "revId": "89563a6335f77c9f20c31ecf3bca5d799f19f95a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2d39d02_0edee666",
        "filename": "telemetry/telemetry/internal/backends/chrome/cast_browser_backend.py",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1364448
      },
      "writtenOn": "2022-02-24T23:19:33Z",
      "side": 1,
      "message": "Will address in the follow up cl. Thanks for the suggestion!",
      "parentUuid": "c76f71c5_1083d7a9",
      "range": {
        "startLine": 119,
        "startChar": 4,
        "endLine": 119,
        "endChar": 30
      },
      "revId": "89563a6335f77c9f20c31ecf3bca5d799f19f95a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "89563a6335f77c9f20c31ecf3bca5d799f19f95a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "89563a6335f77c9f20c31ecf3bca5d799f19f95a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "89563a6335f77c9f20c31ecf3bca5d799f19f95a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}