# These are the testing and deploy steps for the performance dashboard
# services. We re-use the docker-compose files in the dev_dockerfiles directory
# to ensure we're runing the same test and deploy cycle everytime.
timeout: 1800s  # Wait for 30 minutes for the whole process to finish.
options:
  diskSizeGb: 100
  machineType: 'N1_HIGHCPU_8'
steps:
- name: 'gcr.io/$PROJECT_ID/docker-compose'
  dir: '/workspace/dashboard'
  args: [
    '-f', 'dev_dockerfiles/cloud_build/docker-compose.yml',
    'build'
  ]
- name: 'gcr.io/$PROJECT_ID/docker-compose'
  dir: '/workspace/dashboard'
  args: [
    '-f', 'dev_dockerfiles/cloud_build/docker-compose.yml',
    'run', 'dashboard-tests'
  ]
# We need to provide the auth token that the service account is using to the
# container from which we're going to deploy the Dashboard services.
- name: 'gcr.io/$PROJECT_ID/docker-compose'
  dir: '/workspace/dashboard'
  args: [
    '-f', 'dev_dockerfiles/cloud_build/docker-compose.yml',
    'run',
    'deploy-dashboard',
  ]
- name: 'gcr.io/cloud-builders/gcloud'
  dir: '/workspace/deploy-dashboard'
  args: [
    app, deploy, '--promote', '--version', 'cloud-build-${SHORT_SHA}',
    # We enumerate the files we need to deploy just for the dashboard.
    # TODO(dberris): Figure out how we can include cron.yaml and dispatch.yaml
    # from this automation. This fails in production with the service account
    # used by cloud-build, so we've left it out for now.
    api.yaml,
    app.yaml,
    index.yaml,
    upload-processing.yaml,
    upload.yaml,
  ]
