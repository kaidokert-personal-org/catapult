main:
    params: [input]
    steps:
    - init:
        assign:
          - anomaly: ${input.anomaly}
          - mode: ${input.mode}
          - version: ${text.replace_all(sys.get_env("GOOGLE_CLOUD_WORKFLOW_ID"),
                "sandwich-verification-workflow-",
                "")}
          - get_function_url: ${"https://cloudfunctions.googleapis.com/v2/projects/"+sys.get_env("GOOGLE_CLOUD_PROJECT_ID")+"/locations/"+sys.get_env("GOOGLE_CLOUD_LOCATION")+"/functions/"}
          - job_id: null
          - status: null
          - error: null
          - statistic: null
          - decision: null
    - startPinpointJob:
        try:
          steps:
            - getFunctionStartPinpointJob:
                call: http.get
                args:
                  url: ${get_function_url+"start-pinpoint-job-"+version}
                  auth:
                    type: OAuth2
                result: functionResponse
            - postStartPinpointJob:
                call: http.post
                args:
                  url: ${functionResponse.body.serviceConfig.uri}
                  body:
                    anomaly: ${anomaly}
                  auth:
                    type: OIDC
                result: startPinpointJobResult
            - assignJobId:
                assign:
                  - job_id: ${startPinpointJobResult.body.job_id}
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 8
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2
        except:
          as: error
          steps:
            - errorStartPinpointJob:
                next: handlerCallback
    - pollPinpointJob:
        try:
          steps:
            - getFunctionPollPinpointJob:
                call: http.get
                args:
                  url: ${get_function_url+"poll-pinpoint-job-"+version}
                  auth:
                    type: OAuth2
                result: functionResponse
            - postPollPinpointJob:
                call: http.post
                args:
                  url: ${functionResponse.body.serviceConfig.uri}
                  body:
                    job_id: ${job_id}
                  auth:
                    type: OIDC
                result: pollPinpointJobResult
            - assignStatus:
                assign:
                  - status: ${pollPinpointJobResult.body.status}
            - checkIfJobDone:
                switch:
                  - condition: ${status == "Completed"}
                    next: getCabeAnalysis
                  - condition: ${status == "Failed"}
                    raise: "Pinpoint Job failed."
                  - condition: ${status == "Cancelled"}
                    raise: "Pinpoint Job cancelled."
            - wait:
                call: sys.sleep
                args:
                  seconds: 60
                next: pollPinpointJob
        except:
          as: error
          steps:
            - errorPollPinpointJob:
                next: handlerCallback
    - getCabeAnalysis:
        try:
          steps:
            - getFunctionGetCabeAnalysis:
                call: http.get
                args:
                  url: ${get_function_url+"get-cabe-analysis-"+version}
                  auth:
                    type: OAuth2
                result: functionResponse
            - postGetCabeAnalysis:
                call: http.post
                args:
                  url: ${functionResponse.body.serviceConfig.uri}
                  body:
                    anomaly: ${anomaly}
                    job_id: ${job_id}
                  auth:
                    type: OIDC
                result: getCabeAnalysisResult
            - assignStatistic:
                assign:
                  - statistic: ${getCabeAnalysisResult.body.statistic}
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 8
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2
        except:
          as: error
          steps:
            - errorGetCabeAnalysis:
                next: handlerCallback
    - regressionDetection:
        try:
          steps:
            - getFunctionRegressionDetection:
                call: http.get
                args:
                  url: ${get_function_url+"regression-detection-"+version}
                  auth:
                    type: OAuth2
                result: functionResponse
            - postRegressionDetection:
                call: http.post
                args:
                  url: ${functionResponse.body.serviceConfig.uri}
                  body:
                    statistic: ${statistic}
                  auth:
                    type: OIDC
                result: regressionDetectionResult
            - assignDecision:
                assign:
                  - decision: ${regressionDetectionResult.body.decision}
        except:
          as: error
          steps:
            - errorRegressionDetection:
                next: handlerCallback
    - handlerCallback:
        try:
          steps:
            - getFunctionHandlerCallback:
                call: http.get
                args:
                  url: ${get_function_url+"handler-callback-"+version}
                  auth:
                    type: OAuth2
                result: functionResponse
            - postHandlerCallback:
                call: http.post
                args:
                  url: ${functionResponse.body.serviceConfig.uri}
                  body:
                    mode: ${mode}
                    anomaly: ${anomaly}
                    decision: ${decision}
                    statistic: ${statistic}
                    error: ${error}
                    args: ${input}
                  auth:
                    type: OIDC
                result: handlerCallbackResult
            - completeExecution:
                return: ${handlerCallbackResult.body}
        retry:
          predicate: ${http.default_retry_predicate}
          max_retries: 8
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2
        except:
          as: error
          raise: ${error}

