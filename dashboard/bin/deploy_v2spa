#!/usr/bin/python
# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import re
import os
import shutil
import subprocess
import sys
import tempfile
import time


def _AddToPathIfNeeded(path):
  if path not in sys.path:
    sys.path.insert(0, path)

def _AddToEnvIfNeeded(key, value):
  if key not in os.environ:
    os.environ[key] = value

NODE_VULCANIZE = os.path.abspath(os.path.join(
  os.path.dirname(__file__), '..', '..',
  'common/node_runner/node_runner/node_modules/vulcanize/bin/vulcanize'))

MINIFY = os.path.abspath(os.path.join(
  os.path.dirname(__file__), '..', '..',
  'common/node_runner/node_runner/minify'))

WEBPACK = os.path.abspath(os.path.join(
  os.path.dirname(__file__), '..', '..',
  'common/node_runner/node_runner/node_modules/.bin/webpack-command'))


def _TimestampScript():
  # V2SPA displays its version as this timestamp in this format to make it easy
  # to check whether a change is visible.
  now = time.time()
  print 'vulcanized', time.strftime(
      '%Y-%m-%d %H:%M:%S', time.gmtime(now - (60 * 60 * 7)))
  return '<script>VULCANIZED_TIMESTAMP = new Date(%d);</script>' % (now * 1000)


def VulcanizeIndex(temp_dir, dashboard_path):
  filename = os.path.join(temp_dir, 'index.vulcanized.html')
  html = subprocess.check_output([
    NODE_VULCANIZE, '--strip-comments', '--inline-scripts', '-p', dashboard_path,
    'dashboard/spa/index.html',
  ])
  html += _TimestampScript()
  open(filename, 'w').write(html)
  subprocess.check_output([MINIFY, filename])
  return filename


def VulcanizeHistogramsViewer(temp_dir):
  from tracing_build import vulcanize_histograms_viewer
  viewer_dir_path = os.path.join(temp_dir, 'vulcanized_histograms_viewer')
  viewer_html_path = os.path.join(viewer_dir_path, 'vulcanized_histograms_viewer.html')
  os.mkdir(viewer_dir_path)
  with open(viewer_html_path, 'w') as f:
    s = vulcanize_histograms_viewer.VulcanizeHistogramsViewer()
    f.write(s.encode('utf-8'))
  return viewer_dir_path


def Webpack(temp_dir, spa_path):
  output_path = os.path.join(temp_dir, 'webpack')
  modules_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..',
      '..', 'common', 'node_runner', 'node_runner', 'node_modules'))
  third_party_path = os.path.abspath(os.path.join(os.path.dirname(__file__),
      '..', '..', 'third_party'))

  config_filename = os.path.join(spa_path, 'webpack.config.js')

  _AddToEnvIfNeeded('WEBPACK_OUTPUT_PATH', output_path);
  _AddToEnvIfNeeded('WEBPACK_NODE_MODULES', modules_path);
  _AddToEnvIfNeeded('WEBPACK_THIRD_PARTY', third_party_path);

  subprocess.call([ WEBPACK, '--config', config_filename ])
  subprocess.call([ 'ls', output_path ])
  return output_path


def Main():
  dashboard_path = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
  _AddToPathIfNeeded(dashboard_path)
  catapult_path = os.path.dirname(dashboard_path)
  _AddToPathIfNeeded(catapult_path)
  tracing_path = os.path.join(catapult_path, 'tracing')
  _AddToPathIfNeeded(tracing_path)
  spa_path = os.path.join(dashboard_path, 'dashboard', 'spa')
  import dashboard

  temp_dir = tempfile.mkdtemp()
  deployment_paths = dashboard.PathsForDeployment()
  deployment_paths.append(VulcanizeHistogramsViewer(temp_dir))
  deployment_paths.append(VulcanizeIndex(temp_dir, dashboard_path))
  deployment_paths.append(Webpack(temp_dir, spa_path))

  from catapult_build import appengine_deploy
  version = None
  if len(sys.argv) > 1:
    version = sys.argv[1]
  appengine_deploy.Deploy(deployment_paths, ['v2spa.yaml'], version)

  try:
    shutil.rmtree(temp_dir)
  except OSError as e:
    logging.error('Error cleaning up temp dir %s: %s', temp_dir, e)


if __name__ == '__main__':
  Main()
