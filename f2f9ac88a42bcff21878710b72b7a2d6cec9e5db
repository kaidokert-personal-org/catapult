{
  "comments": [
    {
      "key": {
        "uuid": "9618005a_bddec265",
        "filename": "dashboard/dashboard/sheriff_config/luci_config.py",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-05-23T01:36:05Z",
      "side": 1,
      "message": "Nit: consider using “(error,)” (with the trailing comma, i.e. 1-tuple syntax) so that the %-formatting operation doesn\u0027t fail when error is a tuple (or give a subtly incorrect result when error is 1-tuple).\n\nAlternatively, use str.format which doesn\u0027t have this pitfall:\n\n  \u0027Failed fetching project configs: {}\u0027.format(error)",
      "range": {
        "startLine": 35,
        "startChar": 65,
        "endLine": 35,
        "endChar": 72
      },
      "revId": "f2f9ac88a42bcff21878710b72b7a2d6cec9e5db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad6839f0_bb5d0c4a",
        "filename": "dashboard/dashboard/sheriff_config/luci_config.py",
        "patchSetId": 8
      },
      "lineNbr": 182,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-05-23T01:36:05Z",
      "side": 1,
      "message": "Why not simply “return”?",
      "revId": "f2f9ac88a42bcff21878710b72b7a2d6cec9e5db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99c9f791_4619a063",
        "filename": "dashboard/dashboard/sheriff_config/luci_config_test.py",
        "patchSetId": 8
      },
      "lineNbr": 20,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-05-23T01:36:05Z",
      "side": 1,
      "message": "Is the context manager useful here?  This is simpler:\n\n  discovery_response \u003d open(\u0027tests/config-discovery.json\u0027).read()",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 48
      },
      "revId": "f2f9ac88a42bcff21878710b72b7a2d6cec9e5db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27fb64cb_5ed8f821",
        "filename": "dashboard/dashboard/sheriff_config/tests/sheriff_config_test.py",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-05-23T01:36:05Z",
      "side": 1,
      "message": "This tearDown is redundant.  The only cleanup it does is clearing instance variables which are automatically cleared at the end of the test anyway (each test method is run in a fresh TestCase instance, unless you\u0027re using a buggy test loader/runner that doesn\u0027t conform to the xUnit-style protocol assumed by the stdlib\u0027s unittest module).",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 37,
        "endChar": 19
      },
      "revId": "f2f9ac88a42bcff21878710b72b7a2d6cec9e5db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ef27cde_ed335961",
        "filename": "dashboard/dashboard/sheriff_config/tests/test_e2e_cases.py",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-05-23T01:36:05Z",
      "side": 1,
      "message": "This tearDown is redundant.  Omit it.",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 19
      },
      "revId": "f2f9ac88a42bcff21878710b72b7a2d6cec9e5db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91f378b8_a0e794fe",
        "filename": "dashboard/dashboard/sheriff_config/tests/test_e2e_cases.py",
        "patchSetId": 8
      },
      "lineNbr": 167,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-05-23T01:36:05Z",
      "side": 1,
      "message": "I don\u0027t understand the _MatchProject*  helpers.  Or rather, it\u0027s harder than it ought to be to understand them.\n\nMy limited familiarity with this system doesn\u0027t help.  Is POSTing to /subscriptions/match here a read-only operation, or is this acting on the system?  I.e. are these helpers mixing actions on the system under test with assertions, or is this intended to be essentially an assertion helper?  Also, some of the logic is conditional, although on closer reading it appears to be just assertions that are conditional?\n\nA more explicit name than _MatchProject1 (perhaps starting with the word “assert” if it is essentially a flavour of assertion) and renaming the `code` param to `expected_code` might sufficiently mitigate these issues?\n\nBut at the moment the cognitive load to read a test and jump back to the helper definition to understand the meaning then jump back to the test to check the code param then jump back to the definition to trace the logic that\u0027s conditional on that param is a bit much!  And then jumping over to the sample configs test data files and comparing the values there…\n\nAnother question I have trying to understand the tests using these helpers: Is “Project1” short-hand for “Project numbered 1” or “Set of Projects numbered 1” or “Project Configuration State numbered 1”?",
      "revId": "f2f9ac88a42bcff21878710b72b7a2d6cec9e5db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}