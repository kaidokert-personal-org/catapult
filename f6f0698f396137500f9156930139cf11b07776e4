{
  "comments": [
    {
      "key": {
        "uuid": "1e70d78e_cd35537b",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-16T18:10:49Z",
      "side": 1,
      "message": "This file is already big (270 lines): I\u0027d strongly suggest moving this out into its own file.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 36
      },
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99c1b425_b69af179",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "Might want to add some error reporting to make sure that \"tags\" must be defined at the top of the file (i.e: before any expectation encountered)",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b02c84e8_62bfab78",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-15T23:51:18Z",
      "side": 1,
      "message": "There is a defacto check for this. Below (line 104) checks that all parsed tags are set in the file. I\u0027m not sure if they have a use case for not having all the tags defined at the beginning (I assume not) so I\u0027ll wait until we have them look at this to decide on how to proceed.",
      "parentUuid": "99c1b425_b69af179",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4802e697_5cc19c7e",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "nits: you can set TAGS_TOKEN \u003d \u0027# tags:\u0027\n\nthen write:  for word in line[len(TAGS_TOKEN):].split()",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a1ec473_4b77fab8",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "I suggest using regex instead.\n\nimport re\n\npattern \u003d re.compile(\u0027(.+) \\[(.+)\\] (.+) \\[(.+)\\]\u0027)\nm \u003d pattern.match(\u0027crbug.com/123 [ Win ] benchmark/story [ Skip ]\u0027)\n\nprint m.groups()\n\n# this prints: (\u0027crbug.com/123\u0027, \u0027 Win \u0027, \u0027benchmark/story\u0027, \u0027 Skip \u0027)",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e11aa25e_0f361eda",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-15T23:51:18Z",
      "side": 1,
      "message": "Doesn\u0027t that regex assume that all sections are guaranteed to be there?\nWe only are guaranteed that the test and results sections will be there, per the grammar at go/chromium-test-list-format The lack of the guarantee is why this code is as complicated as it is.\n\nI\u0027m.. not very good at regexes so I\u0027m assuming there is a good way to make a regex that will yield what we want, but dont know how. I\u0027ll see if I can create one that works.",
      "parentUuid": "6a1ec473_4b77fab8",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f817db76_74120edc",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:53:00Z",
      "side": 1,
      "message": "For our perf use case, I think we can assume a stricter subset of the general test grammar :-)",
      "parentUuid": "e11aa25e_0f361eda",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "685df841_12c6e403",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-16T00:01:26Z",
      "side": 1,
      "message": "Not necessarily. How will they represent a test disabled on all platforms? It could easily be:\n\ncrbug.com/123 [ All ] test [ Skip ]\nor\ncrbug.com/123 test [ Skip ]\n\nMaybe we should just go ahead and add them to the CL now.",
      "parentUuid": "f817db76_74120edc",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05d6ce47_04402495",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-16T00:04:36Z",
      "side": 1,
      "message": "IMO, \"crbug.com/123 [ All ] test [ Skip ]\" is easier for humans to look at \u0026 more consistent with other expectation lines.",
      "parentUuid": "685df841_12c6e403",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f862368_60eec6e6",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-16T00:07:53Z",
      "side": 1,
      "message": "I agree, but dont want to make an assumption. If they can promise us that the telemetry expectation file will always contain the [ condition ] section, I\u0027ll switch to the regex you gave.\n\nAdding them now.",
      "parentUuid": "05d6ce47_04402495",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20346044_f8a3a4bb",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-16T16:58:23Z",
      "side": 1,
      "message": "Oh, and the bug section is optional by the grammar as well, so we\u0027d have to have that guaranteed to switch to the regex as well.",
      "parentUuid": "6f862368_60eec6e6",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "945d1f41_30c8164c",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-16T18:10:49Z",
      "side": 1,
      "message": "Agree with Ned that I\u0027d prefer to use regexp and the stricter format if possible, but will wait for Dirk and Sean to chime in",
      "parentUuid": "6f862368_60eec6e6",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afb1baa7_aa5fbfc5",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2017-11-17T19:07:54Z",
      "side": 1,
      "message": "WRT to parsing code complexity, could you use the formal parsing expression grammar in the \"Syntax\" section to generate a parser automatically? https://docs.google.com/document/d/1Y4nwK4b3_xyc5Uh8-LwgpN5VKbBc6-2whof_yoNOalI/edit?pli\u003d1#heading\u003dh.takylyrs6wxr\n\nThat would be ideal, I think. I haven\u0027t tried it in Go yet but that would be my plan. The Go parser for the existing Test Expectation (not Dirk\u0027s proposal but the existing one) syntax was not particularly fun to write.",
      "parentUuid": "945d1f41_30c8164c",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73a48736_6754772d",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-17T19:08:38Z",
      "side": 1,
      "message": "For a regexp that works regardless of whether a platform is present, you can do:\n\n\u0027(\\S+) (?:(\\[.+\\]) )?(.+) \\[(.+)\\]\u0027\n\nIn order to document the regexp better, I might consider doing:\nr \u003d \u0027(\\S+) \u0027  # The bug field.\nr +\u003d \u0027(?:(\\[.+\\]) )?\u0027  # The label field (optional).\nr +\u003d \u0027(.+) \u0027  # The test path field.\nr +\u003d \u0027\\[(.+)\\]\u0027  # The expectation field.\n\n\u003e\u003e\u003e print re.match(\u0027(\\S+) (?:(\\[.+\\]) )?(.+) \\[(.+)\\]\u0027, \"crbug.com/12345 [Mac] b1/s1 [ Skip ]\").groups()\n(\u0027crbug.com/12345\u0027, \u0027[Mac]\u0027, \u0027b1/s1\u0027, \u0027 Skip \u0027)\n\n\u003e\u003e\u003e print re.match(\u0027(\\S+) (?:(\\[.+\\]) )?(.+) \\[(.+)\\]\u0027, \"crbug.com/12345 b1/s1 [ Skip ]\").groups()\n(\u0027crbug.com/12345\u0027, None, \u0027b1/s1\u0027, \u0027 Skip \u0027)\n\nWith this, you can just test whether groups[1] is None and, if it is, make it equivalent to story.expectations.ALL.\n\nThe trick with the regexp is to put \"(?:\" at the start of that part of the regexp, and \")\" at the end. This creates what\u0027s called a \"non-capturing group\" - basically a logical regexp group to which we can then attach the \"?\" afterwards in order to indicate \"this group may or may not exist in the regexp\". Inside of that non-capturing group, we put another \"(\" and \")\" around all the parts that we care about - basically everything but the space that needs to exist in between that group and the next one.",
      "parentUuid": "945d1f41_30c8164c",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dbf542c_550962c5",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-17T19:21:19Z",
      "side": 1,
      "message": "The reason why I didn\u0027t do that is because we dont have any libraries in chromium that can consume PEG formats and produce a parser (or at least thats what I\u0027ve been lead to believe. If there is one let me know). \n\nThis code was generated by me hand making a DFA on paper of the format given in Dirk\u0027s doc. I would not like to have to add a third party library to support this if its not necessary. its not a particularly hard parser to create. I am going to look into charlie\u0027s improved regex to simplify my code.",
      "parentUuid": "73a48736_6754772d",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84df59dd_73cbc12a",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "You may want to add another method like: ToExpectationString() which turn this object to string form of expectation. This is so that later we can use it for formatting (e.g: ensure the expectations are alphabetically ordered).",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62b3963a_ba6f2857",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-16T18:10:49Z",
      "side": 1,
      "message": "As mentioned offline, one thing that we\u0027re going to need to pay attention to here is that the way that multiple tags are combined in Telemetry is a logical OR, whereas the way that multiple tags are combined according to go/chromium-test-list-format is a logical AND.",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6a8fc9d_e84faf95",
        "filename": "telemetry/telemetry/story/expectations_unittest.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-16T18:10:49Z",
      "side": 1,
      "message": "I think across all python unit tests, it should be self.assert_____(actual, expected), whereas here you have assertEqual(expected, actual). The biggest ramification of this is that the messages given when a failure appears won\u0027t make sense\n\nSource: https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertItemsEqual\n\n(You also do it correctly elsewhere, so I\u0027m guessing this probably isn\u0027t news to you)",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734e5daa_3898f01f",
        "filename": "telemetry/telemetry/story/expectations_unittest.py",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-16T18:10:49Z",
      "side": 1,
      "message": "Probably makes sense to change this test example to be something other than \u0027Mac\u0027 \u0027Win\u0027 given that they shouldn\u0027t ever appear together.",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe60565f_0dd04cd2",
        "filename": "telemetry/telemetry/story/expectations_unittest.py",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-16T18:10:49Z",
      "side": 1,
      "message": "My vote is to just inline bad_data here and ditch the member variable. The conciseness gained by storing it in a constant elsewhere isn\u0027t a whole lot, whereas we lose some completeness for the test (discussed more at go/unit-test-best-practices#goals_1).\n\nUp to you what you ultimately do, though.",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "217f4cca_8ffa8f53",
        "filename": "telemetry/telemetry/story/expectations_unittest.py",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2017-11-16T18:10:49Z",
      "side": 1,
      "message": "Thanks for sending out a CL with great test coverage :-)",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}