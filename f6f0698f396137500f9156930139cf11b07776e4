{
  "comments": [
    {
      "key": {
        "uuid": "99c1b425_b69af179",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "Might want to add some error reporting to make sure that \"tags\" must be defined at the top of the file (i.e: before any expectation encountered)",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b02c84e8_62bfab78",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-15T23:51:18Z",
      "side": 1,
      "message": "There is a defacto check for this. Below (line 104) checks that all parsed tags are set in the file. I\u0027m not sure if they have a use case for not having all the tags defined at the beginning (I assume not) so I\u0027ll wait until we have them look at this to decide on how to proceed.",
      "parentUuid": "99c1b425_b69af179",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4802e697_5cc19c7e",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "nits: you can set TAGS_TOKEN \u003d \u0027# tags:\u0027\n\nthen write:  for word in line[len(TAGS_TOKEN):].split()",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a1ec473_4b77fab8",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "I suggest using regex instead.\n\nimport re\n\npattern \u003d re.compile(\u0027(.+) \\[(.+)\\] (.+) \\[(.+)\\]\u0027)\nm \u003d pattern.match(\u0027crbug.com/123 [ Win ] benchmark/story [ Skip ]\u0027)\n\nprint m.groups()\n\n# this prints: (\u0027crbug.com/123\u0027, \u0027 Win \u0027, \u0027benchmark/story\u0027, \u0027 Skip \u0027)",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e11aa25e_0f361eda",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-15T23:51:18Z",
      "side": 1,
      "message": "Doesn\u0027t that regex assume that all sections are guaranteed to be there?\nWe only are guaranteed that the test and results sections will be there, per the grammar at go/chromium-test-list-format The lack of the guarantee is why this code is as complicated as it is.\n\nI\u0027m.. not very good at regexes so I\u0027m assuming there is a good way to make a regex that will yield what we want, but dont know how. I\u0027ll see if I can create one that works.",
      "parentUuid": "6a1ec473_4b77fab8",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f817db76_74120edc",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:53:00Z",
      "side": 1,
      "message": "For our perf use case, I think we can assume a stricter subset of the general test grammar :-)",
      "parentUuid": "e11aa25e_0f361eda",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "685df841_12c6e403",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1132400
      },
      "writtenOn": "2017-11-16T00:01:26Z",
      "side": 1,
      "message": "Not necessarily. How will they represent a test disabled on all platforms? It could easily be:\n\ncrbug.com/123 [ All ] test [ Skip ]\nor\ncrbug.com/123 test [ Skip ]\n\nMaybe we should just go ahead and add them to the CL now.",
      "parentUuid": "f817db76_74120edc",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84df59dd_73cbc12a",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-15T23:37:10Z",
      "side": 1,
      "message": "You may want to add another method like: ToExpectationString() which turn this object to string form of expectation. This is so that later we can use it for formatting (e.g: ensure the expectations are alphabetically ordered).",
      "revId": "f6f0698f396137500f9156930139cf11b07776e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}