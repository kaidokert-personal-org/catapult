{
  "comments": [
    {
      "key": {
        "uuid": "766a03ca_2b4835da",
        "filename": "dashboard/dashboard/api/api_request_handler.py",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2018-11-07T18:00:50Z",
      "side": 1,
      "message": "This feels dangerous to me. Somebody could easily add a new handler without thinking about access control.\nWould it make sense to either require subclasses to override this (Explicit is better than implicit), or else make it restrictive by default (better safe than sorry)?\n\nEither way, please add a comment about what this method does, how it may raise some types of errors, and how subclasses should override it. It may be \"private\" (protected), but it\u0027s an important part of the API.",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17594867_347e19bb",
        "filename": "dashboard/dashboard/api/api_request_handler.py",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000093
      },
      "writtenOn": "2018-11-08T01:15:29Z",
      "side": 1,
      "message": "Done. Made _CheckUser() required and added a docstring.",
      "parentUuid": "766a03ca_2b4835da",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd3e6ecd_18c85f87",
        "filename": "dashboard/dashboard/api/api_request_handler_test.py",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-11-06T17:16:39Z",
      "side": 1,
      "message": "why was this change needed?",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f228699_732b351f",
        "filename": "dashboard/dashboard/api/api_request_handler_test.py",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000093
      },
      "writtenOn": "2018-11-06T23:44:29Z",
      "side": 1,
      "message": "Two reasons:\n* The \"options\" method skips the authentication stuff, and since this is a test of the CORS headers, it skips us having to mock out the authentication or create an additional TestApiRequestHandler.\n* The Content-Length is a brittle constant; changing the return value affects this number.",
      "parentUuid": "bd3e6ecd_18c85f87",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3380e80_b6a7bfe3",
        "filename": "dashboard/dashboard/api/api_request_handler_test.py",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-11-08T01:24:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6f228699_732b351f",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "213a9084_1488473b",
        "filename": "dashboard/dashboard/pinpoint/handlers/new.py",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-11-06T17:16:39Z",
      "side": 1,
      "message": "I\u0027m wondering whether an API that returns True/False instead of raising an error would be more natural and easy to read/write, e.g. something like:\n\n  def _AllowUserAccess(self):\n    return utils.IsLoggedIn() and utils.IsTryJobJuser()\n\nor in some of the above:\n\n  def _AllowUserAccess(self):\n    return utils.IsIpWhitelisted() or utils.IsInternalUser()\n\nthis also encourages encapsulating the logic for small units that check for \"types of users\" into methods with meaningful self-descriptive names.\n\nwdyt?",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "646866a2_5180c9ff",
        "filename": "dashboard/dashboard/pinpoint/handlers/new.py",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000093
      },
      "writtenOn": "2018-11-06T23:44:29Z",
      "side": 1,
      "message": "I do agree that would be more natural, and had originally written it that way, but found it to be inconsistent, since api_auth.Authorize() raises errors instead of returning True/False. And it has several kinds of errors, so it made more sense to treat them all the same way rather than treating ForbiddenError as a special case.",
      "parentUuid": "213a9084_1488473b",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd0b6dd5_af055352",
        "filename": "dashboard/dashboard/pinpoint/handlers/new.py",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2018-11-07T18:00:50Z",
      "side": 1,
      "message": "Raising errors feels right to me. It indicates that the normal flow of execution should stop. It seems safer than returning a status code, which risks allowing the caller to accidentally continue the normal flow of execution.\nBut if you want to keep considering returning some sort of status code for some reason, if not a boolean, then maybe an enum like _GetAuthorizationStatus?",
      "parentUuid": "646866a2_5180c9ff",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca91d732_c7fd23af",
        "filename": "dashboard/dashboard/pinpoint/handlers/new.py",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000093
      },
      "writtenOn": "2018-11-08T01:15:29Z",
      "side": 1,
      "message": "I\u0027m not super concerned about the safety here, since we have one centralized place for dealing with all the errors (`ApiRequestHandler.post()`). I don\u0027t have a strong preference for exceptions vs an enum, but exceptions are easier.",
      "parentUuid": "dd0b6dd5_af055352",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf6f0931_484ae3bc",
        "filename": "dashboard/dashboard/pinpoint/handlers/new.py",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-11-08T01:24:52Z",
      "side": 1,
      "message": "Yeah, after the discussions, I agree. Exceptions sgtm.",
      "parentUuid": "ca91d732_c7fd23af",
      "revId": "ad551b6953ee97c49ee0e254704fde386d421460",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}