{
  "comments": [
    {
      "key": {
        "uuid": "60bdb5b3_3fac9d61",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 528,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-16T04:29:32Z",
      "side": 1,
      "message": "```\ndef SlidingTriple(iterable):\n  \"\"\"s -\u003e (None, s0, s1), (s0, s1, s2), (s1, s2, s3), ...\"\"\"\n  p, c, n \u003d itertools.tee(iterable, 3)\n  p \u003d itertools.chain([None], p)\n  n \u003d itertools.chain(itertools.islice(n, 1, None), [None])\n  return itertools.izip(p, c, n)\n```\n\nInstead of tee twice, this may be easier for understanding (I don\u0027t need to maintain the iterators\u0027 state in my mind).",
      "revId": "c26e6df4f404f158519233bd0fcfb516f06be087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c16c4b1_4f95b481",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 528,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-16T04:40:35Z",
      "side": 1,
      "message": "Good catch, thanks! Fixed.",
      "parentUuid": "60bdb5b3_3fac9d61",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "c26e6df4f404f158519233bd0fcfb516f06be087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fe789cc_3f7f59d3",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 543,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-16T04:29:32Z",
      "side": 1,
      "message": "if `\u0027comparisons\u0027 not in task.payload`, the `task.payload.get` will return None, which still meets the condition. Is there any case that the first one return True but the seconed one return False? Or you can just remove `\u0027comparisons\u0027 not in task.payload`.",
      "revId": "c26e6df4f404f158519233bd0fcfb516f06be087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3576539a_b01f9c2c",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 543,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-16T04:40:35Z",
      "side": 1,
      "message": "Ah, good point. Done.",
      "parentUuid": "7fe789cc_3f7f59d3",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "c26e6df4f404f158519233bd0fcfb516f06be087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17169a39_f3b9b7ce",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 586,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-16T04:29:32Z",
      "side": 1,
      "message": "Another way to test subset is `bool(dependent_states - {\u0027failed\u0027, \u0027completed\u0027})`",
      "revId": "c26e6df4f404f158519233bd0fcfb516f06be087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "557c7f07_26daff0c",
        "filename": "dashboard/dashboard/pinpoint/models/tasks/performance_bisection.py",
        "patchSetId": 4
      },
      "lineNbr": 586,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-16T04:40:35Z",
      "side": 1,
      "message": "Almost -- we want to ensure that all the remaining states we find are in \u0027failed\u0027 or \u0027completed\u0027. I turned this into `not bool(dependent_states - {\u0027failed\u0027, \u0027completed\u0027})` ðŸ˜Š",
      "parentUuid": "17169a39_f3b9b7ce",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "c26e6df4f404f158519233bd0fcfb516f06be087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}