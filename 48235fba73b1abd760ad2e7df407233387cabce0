{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "01f99cf1_0cd5389e",
        "filename": "dashboard/dashboard/file_bug.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1368332
      },
      "writtenOn": "2024-09-10T21:31:56Z",
      "side": 1,
      "message": "Don\u0027t we normally use request headers for this kind of thing?\n\nie/ Content-Type: application/json",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 34
      },
      "revId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0901f1c0_4be201f2",
        "filename": "dashboard/dashboard/file_bug.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2024-09-10T22:06:06Z",
      "side": 1,
      "message": "The file_bug/ call always returns an object generated by RequestHandlerRenderHtml(\u0027bug_results.html\u0027, dict[]), which directly rendered the result page.\nMore precisely say, this CL skips the html logic and return the bug id directly in the response.",
      "parentUuid": "01f99cf1_0cd5389e",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 34
      },
      "revId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af7666c7_c30f5b6c",
        "filename": "dashboard/dashboard/file_bug.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1368332
      },
      "writtenOn": "2024-09-10T22:49:54Z",
      "side": 1,
      "message": "Sorry if my comment wasn\u0027t clear. I was referring to the way how this is actually checked. For example, my thought was that requests are usually sent with an Accept header (ie/ Accept: application/json) for the expected response type, but maybe this overcomplicates things.\n\nFor clarity, wdyt about s/json/responseType and then `if request.values.get(\u0027responseType\u0027) \u003d\u003d \u0027json\u0027:`",
      "parentUuid": "0901f1c0_4be201f2",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 34
      },
      "revId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe0334de_a2dbcb34",
        "filename": "dashboard/dashboard/file_bug.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2024-09-10T23:29:58Z",
      "side": 1,
      "message": "IICU, did you mean:\n - if the request is from the chromeperf UI, which is an html form, the responseType should not be json.\n - if the request is from skia/skia-bridge, we can send it as json request.\n \nSo that we can use the responseType from the request to tell where the request is from?",
      "parentUuid": "af7666c7_c30f5b6c",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 34
      },
      "revId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaff2082_a3aa4190",
        "filename": "dashboard/dashboard/file_bug.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1368332
      },
      "writtenOn": "2024-09-10T23:37:33Z",
      "side": 1,
      "message": "That\u0027s right",
      "parentUuid": "fe0334de_a2dbcb34",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 34
      },
      "revId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1127c70_4e72041b",
        "filename": "dashboard/dashboard/file_bug.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1368332
      },
      "writtenOn": "2024-09-10T23:39:08Z",
      "side": 1,
      "message": "Sorry, comment cut short. That\u0027s because in its current form, it\u0027d be \u0026json\u003dtrue, but in practicality, we\u0027re requesting \u0026returnType\u003djson, which is more flexible from a API standpoint.",
      "parentUuid": "eaff2082_a3aa4190",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 34
      },
      "revId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9da3c74_d7279cf2",
        "filename": "dashboard/dashboard/file_bug.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2024-09-16T17:09:29Z",
      "side": 1,
      "message": "Compared to adding new \u0027if\u0027, adding a similar but separated endpoint to used for skia could be a better option. Update in:\nhttps://chromium-review.googlesource.com/c/catapult/+/5862664",
      "parentUuid": "f1127c70_4e72041b",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 34
      },
      "revId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "48235fba73b1abd760ad2e7df407233387cabce0",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}