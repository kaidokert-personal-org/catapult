#!/usr/bin/env python
# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import json
import sys
import os

tracing_path = os.path.abspath(os.path.join(
  os.path.dirname(os.path.realpath(__file__)), '..'))
sys.path.append(tracing_path)
import tracing_project
tracing_project.UpdateSysPathIfNeeded()
from py_utils import camel_case
from tracing.value import histogram_set
from tracing.value import merge_histograms
from tracing.value.diagnostics import generic_set
from tracing.value.diagnostics import reserved_infos

def main():
  parser = argparse.ArgumentParser(
      description='Adds reserved diagnostics to a HistogramSet.',
      add_help=False)
  parser.add_argument('input_path',
                      help='HistogramSet JSON file path (input).')
  parser.add_argument(
      '--stdout',
      action='store_true',
      help='If present, will print the new HistogramSet instead of '
           'clobbering the file referenced by input_path.')
  parser.add_argument(
      '--output_path',
      help='If present, will write new HistogramSet to this file instead of '
           'clobbering the file referenced by input_path.')
  parser.add_argument('-h', '--help', action='help',
                      help='Show this help message and exit.')
  arg_names_to_infos = {}
  for info in reserved_infos.AllInfos():
    if info.type == 'GenericSet':
      name = camel_case.ToUnderscore(info.name)
      arg_names_to_infos[name] = info
      parser.add_argument('--%s' % name)

  args = parser.parse_args()

  names_to_values = {}
  for name, value in vars(args).iteritems():
    if name in arg_names_to_infos and value is not None:
      diagnostic_name = arg_names_to_infos[name].name
      ctor = arg_names_to_infos[name].entry_type
      names_to_values[diagnostic_name] = ctor(value)

  # We need to generate summary statistics for anything that had a story, so
  # filter out every histogram with no stories, then merge. If you keep the
  # histograms with no story, you end up with duplicates.
  with open(args.input_path, 'r') as f:
    dicts = json.loads(f.read())

  def _LoadHistogramSet(dicts):
    hs = histogram_set.HistogramSet()
    hs.ImportDicts(dicts)
    hs.ResolveRelatedHistograms()
    return hs

  hs_with_stories = _LoadHistogramSet(dicts)
  hs_with_stories.FilterHistograms(
      lambda h: not h.diagnostics.get(reserved_infos.STORIES.name, []))

  hs_with_no_stories = _LoadHistogramSet(dicts)
  hs_with_no_stories.FilterHistograms(
      lambda h: h.diagnostics.get(reserved_infos.STORIES.name, []))

  # TODO(#3987): Refactor recipes to call merge_histograms separately.
  with tempfile.NamedTemporaryFile() as temp:
    temp.write(json.dumps(hs_with_stories.AsDicts()))
    temp.flush()
    # This call combines all repetitions of a metric into a single histogram.
    dicts_across_repeats = merge_histograms.MergeHistograms(temp.name, (
        'name', 'stories'))
    # This call creates summary metrics across each set of stories.
    dicts_across_stories = merge_histograms.MergeHistograms(temp.name, (
        'name',))

  # Now load everything into one histogram set. First we load the summary
  # histograms, since we need to mark them with IS_SUMMARY.
  # After that we load the rest, and then apply all the diagnostics specified
  # on the command line. Finally, since we end up with a lot of diagnostics
  # that no histograms refer to, we make sure to prune those.
  histograms = histogram_set.HistogramSet()
  histograms.ImportDicts(dicts_across_stories)
  for h in histograms:
    h.diagnostics[
        reserved_infos.IS_SUMMARY.name] = generic_set.GenericSet([True])

  histograms.ImportDicts(dicts_across_repeats)
  histograms.ImportDicts(hs_with_no_stories.AsDicts())
  histograms.DeduplicateDiagnostics()
  for name, value in names_to_values.iteritems():
    histograms.AddSharedDiagnostic(name, generic_set.GenericSet([value]))
  histograms.RemoveOrphanedDiagnostics()

  results_json = json.dumps(histograms.AsDicts())

  if args.stdout:
    print results_json
  else:
    path = args.output_path or args.input_path
    with open(path, 'w') as f:
      f.write(results_json)

  return 0

if __name__ == '__main__':
  sys.exit(main())
