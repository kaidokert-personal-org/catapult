
// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/* WARNING: This file is auto generated.
 *
 * Do not edit directly.
 */


'use strict';

/**
 * The global object.
 * @type {!Object}
 * @const
 */
// const global = this.window || this.global;
var global = this;
var performance = {
  now: () => 0,
  mark: () => {},
  measure: () => {}
};

/** Platform, package, object property, and Event support. */
this.tr = (function() {
  // STRIP_FOR_CLOSURE
  if (global.tr) return global.tr;
  // END_STRIP_FOR_CLOSURE

  /**
   * Builds an object structure for the provided namespace path,
   * ensuring that names that already exist are not overwritten. For
   * example:
   * 'a.b.c' -> a = {};a.b={};a.b.c={};
   * @param {string} name Name of the object that this file defines.
   * @private
   */
  function exportPath(name) {
    const parts = name.split('.');
    let cur = global;

    for (let part; parts.length && (part = parts.shift());) {
      if (part in cur) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
    return cur;
  }

  function isExported(name) {
    const parts = name.split('.');
    let cur = global;

    for (let part; parts.length && (part = parts.shift());) {
      if (part in cur) {
        cur = cur[part];
      } else {
        return false;
      }
    }
    return true;
  }

  function isDefined(name) {
    const parts = name.split('.');

    let curObject = global;

    for (let i = 0; i < parts.length; i++) {
      const partName = parts[i];
      const nextObject = curObject[partName];
      if (nextObject === undefined) return false;
      curObject = nextObject;
    }
    return true;
  }

  let panicElement = undefined;
  const rawPanicMessages = [];
  function showPanicElementIfNeeded() {
    if (panicElement) return;

    const panicOverlay = document.createElement('div');
    panicOverlay.style.backgroundColor = 'white';
    panicOverlay.style.border = '3px solid red';
    panicOverlay.style.boxSizing = 'border-box';
    panicOverlay.style.color = 'black';
    panicOverlay.style.display = 'flex';
    panicOverlay.style.height = '100%';
    panicOverlay.style.left = 0;
    panicOverlay.style.padding = '8px';
    panicOverlay.style.position = 'fixed';
    panicOverlay.style.top = 0;
    panicOverlay.style.webkitFlexDirection = 'column';
    panicOverlay.style.width = '100%';

    panicElement = document.createElement('div');
    panicElement.style.webkitFlex = '1 1 auto';
    panicElement.style.overflow = 'auto';
    panicOverlay.appendChild(panicElement);

    if (!document.body) {
      setTimeout(function() {
        document.body.appendChild(panicOverlay);
      }, 150);
    } else {
      document.body.appendChild(panicOverlay);
    }
  }

  function showPanic(panicTitle, panicDetails) {
    if (tr.isHeadless) {
      if (panicDetails instanceof Error) throw panicDetails;
      throw new Error('Panic: ' + panicTitle + ':\n' + panicDetails);
    }

    if (panicDetails instanceof Error) {
      panicDetails = panicDetails.stack;
    }

    showPanicElementIfNeeded();
    const panicMessageEl = document.createElement('div');
    panicMessageEl.innerHTML =
        '<h2 id="message"></h2>' +
        '<pre id="details"></pre>';
    panicMessageEl.querySelector('#message').textContent = panicTitle;
    panicMessageEl.querySelector('#details').textContent = panicDetails;
    panicElement.appendChild(panicMessageEl);

    rawPanicMessages.push({
      title: panicTitle,
      details: panicDetails
    });
  }

  function hasPanic() {
    return rawPanicMessages.length !== 0;
  }
  function getPanicText() {
    return rawPanicMessages.map(function(msg) {
      return msg.title;
    }).join(', ');
  }

  function exportTo(namespace, fn) {
    const obj = exportPath(namespace);
    const exports = fn();

    for (const propertyName in exports) {
      // Maybe we should check the prototype chain here? The current usage
      // pattern is always using an object literal so we only care about own
      // properties.
      const propertyDescriptor = Object.getOwnPropertyDescriptor(exports,
          propertyName);
      if (propertyDescriptor) {
        Object.defineProperty(obj, propertyName, propertyDescriptor);
      }
    }
  }

  /**
   * Initialization which must be deferred until run-time.
   */
  function initialize() {
    if (global.isVinn) {
      tr.isVinn = true;
    } else if (global.process && global.process.versions.node) {
      tr.isNode = true;
    } else {
      tr.isVinn = false;
      tr.isNode = false;
      tr.doc = document;

      tr.isMac = /Mac/.test(navigator.platform);
      tr.isWindows = /Win/.test(navigator.platform);
      tr.isChromeOS = /CrOS/.test(navigator.userAgent);
      tr.isLinux = /Linux/.test(navigator.userAgent);
    }
    tr.isHeadless = tr.isVinn || tr.isNode;
  }

  return {
    initialize,

    exportTo,
    isExported,
    isDefined,

    showPanic,
    hasPanic,
    getPanicText,
  };
})();

tr.initialize();


'use strict';

tr.exportTo('tr.b', function() {
  function Base64() {
  }

  function b64ToUint6(nChr) {
    if (nChr > 64 && nChr < 91) return nChr - 65;
    if (nChr > 96 && nChr < 123) return nChr - 71;
    if (nChr > 47 && nChr < 58) return nChr + 4;
    if (nChr === 43) return 62;
    if (nChr === 47) return 63;
    return 0;
  }

  Base64.getDecodedBufferLength = function(input) {
    let pad = 0;
    if (input.substr(-2) === '==') {
      pad = 2;
    } else if (input.substr(-1) === '=') {
      pad = 1;
    }
    return ((input.length * 3 + 1) >> 2) - pad;
  };

  Base64.EncodeArrayBufferToString = function(input) {
    // http://stackoverflow.com/questions/9267899/
    let binary = '';
    const bytes = new Uint8Array(input);
    const len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  };

  Base64.DecodeToTypedArray = function(input, output) {
    const nInLen = input.length;
    const nOutLen = Base64.getDecodedBufferLength(input);
    let nMod3 = 0;
    let nMod4 = 0;
    let nUint24 = 0;
    let nOutIdx = 0;

    if (nOutLen > output.byteLength) {
      throw new Error('Output buffer too small to decode.');
    }

    for (let nInIdx = 0; nInIdx < nInLen; nInIdx++) {
      nMod4 = nInIdx & 3;
      nUint24 |= b64ToUint6(input.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
      if (nMod4 === 3 || nInLen - nInIdx === 1) {
        for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
          output.setUint8(nOutIdx, nUint24 >>> (16 >>> nMod3 & 24) & 255);
        }
        nUint24 = 0;
      }
    }
    return nOutLen;
  };

  /*
   * Wrapper of btoa
   * The reason is that window object has a builtin btoa,
   * but we also want to use btoa when it is headless.
   * For example we want to use it in a mapper
   */
  Base64.btoa = function(input) {
    // return btoa(input);
    var str = String(input);
    for (
        // Initialize result and counter.
        var block, charCode, idx = 0, map = chars, output = '';
        // If the next str index does not exist:
        //   change the mapping table to "="
        //   check if d has no fractional digits
        str.charAt(idx | 0) || (map = '=', idx % 1);
        // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8.
        output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
      charCode = str.charCodeAt(idx += 3 / 4);
      if (charCode > 0xFF) {
        throw new InvalidCharacterError(
            '\'btoa\' failed: The string to be encoded contains characters ' +
            'outside of the Latin1 range.');
      }
      block = block << 8 | charCode;
    }
    return output;
  };

  /*
   * Wrapper of atob
   * The reason is that window object has a builtin atob,
   * but we also want to use atob when it is headless.
   * For example we want to use it in a mapper
   */
  Base64.atob = function(input) {
    // return atob(input);
    var str = String(input).replace(/=+$/, '');
    if (str.length % 4 == 1) {
      throw new InvalidCharacterError(
          '\'atob\' failed: The string to be decoded is not ' +
          'correctly encoded.');
    }
    for (
        // Initialize result and counters.
        var bc = 0, bs, buffer, idx = 0, output = '';
        // Get next character.
        buffer = str.charAt(idx++);
        // Character found in table? initialize bit storage and add its
        // ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
            // And if not first of each 4 characters,
            // convert the first 8 bits to one ascii character.
            bc++ % 4) ? output += String.fromCharCode(
                  255 & bs >> (-2 * bc & 6)) : 0) {
      // Try to find character in table (0-63, not found => -1).
      buffer = chars.indexOf(buffer);
    }
    return output;
  };

  return {
    Base64,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  function clamp01(value) {
    return Math.max(0, Math.min(1, value));
  }

  function Color(opt_r, opt_g, opt_b, opt_a) {
    this.r = Math.floor(opt_r) || 0;
    this.g = Math.floor(opt_g) || 0;
    this.b = Math.floor(opt_b) || 0;
    this.a = opt_a;
  }

  Color.fromString = function(str) {
    let tmp;
    let values;
    if (str.substr(0, 4) === 'rgb(') {
      tmp = str.substr(4, str.length - 5);
      values = tmp.split(',').map(function(v) {
        return v.replace(/^\s+/, '', 'g');
      });
      if (values.length !== 3) {
        throw new Error('Malformatted rgb-expression');
      }
      return new Color(
          parseInt(values[0]),
          parseInt(values[1]),
          parseInt(values[2]));
    }
    if (str.substr(0, 5) === 'rgba(') {
      tmp = str.substr(5, str.length - 6);
      values = tmp.split(',').map(function(v) {
        return v.replace(/^\s+/, '', 'g');
      });
      if (values.length !== 4) {
        throw new Error('Malformatted rgb-expression');
      }
      return new Color(
          parseInt(values[0]),
          parseInt(values[1]),
          parseInt(values[2]),
          parseFloat(values[3]));
    }
    if (str[0] === '#' && str.length === 7) {
      return new Color(
          parseInt(str.substr(1, 2), 16),
          parseInt(str.substr(3, 2), 16),
          parseInt(str.substr(5, 2), 16));
    }
    throw new Error('Unrecognized string format.');
  };

  Color.lerp = function(a, b, percent) {
    if (a.a !== undefined && b.a !== undefined) {
      return Color.lerpRGBA(a, b, percent);
    }
    return Color.lerpRGB(a, b, percent);
  };

  Color.lerpRGB = function(a, b, percent) {
    return new Color(
        ((b.r - a.r) * percent) + a.r,
        ((b.g - a.g) * percent) + a.g,
        ((b.b - a.b) * percent) + a.b);
  };

  Color.lerpRGBA = function(a, b, percent) {
    return new Color(
        ((b.r - a.r) * percent) + a.r,
        ((b.g - a.g) * percent) + a.g,
        ((b.b - a.b) * percent) + a.b,
        ((b.a - a.a) * percent) + a.a);
  };

  Color.fromDict = function(dict) {
    return new Color(dict.r, dict.g, dict.b, dict.a);
  };

  /**
   * Converts an HSL triplet with alpha to an RGB color.
   * |h| Hue value in [0, 1].
   * |s| Saturation value in [0, 1].
   * |l| Lightness in [0, 1].
   * |a| Alpha in [0, 1]
   */
  Color.fromHSLExplicit = function(h, s, l, a) {
    let r;
    let g;
    let b;
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }

    if (s === 0) {
      r = g = b = l;
    } else {
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return new Color(Math.floor(r * 255),
                     Math.floor(g * 255),
                     Math.floor(b * 255), a);
  };

  Color.fromHSL = function(hsl) {
    return Color.fromHSLExplicit(hsl.h, hsl.s, hsl.l, hsl.a);
  };

  Color.prototype = {
    clone() {
      const c = new Color();
      c.r = this.r;
      c.g = this.g;
      c.b = this.b;
      c.a = this.a;
      return c;
    },

    blendOver(bgColor) {
      const oneMinusThisAlpha = 1 - this.a;
      const outA = this.a + bgColor.a * oneMinusThisAlpha;
      const bgBlend = (bgColor.a * oneMinusThisAlpha) / bgColor.a;
      return new Color(
          this.r * this.a + bgColor.r * bgBlend,
          this.g * this.a + bgColor.g * bgBlend,
          this.b * this.a + bgColor.b * bgBlend,
          outA);
    },

    brighten(opt_k) {
      const k = opt_k || 0.45;

      return new Color(
          Math.min(255, this.r + Math.floor(this.r * k)),
          Math.min(255, this.g + Math.floor(this.g * k)),
          Math.min(255, this.b + Math.floor(this.b * k)),
          this.a);
    },

    lighten(k, opt_maxL) {
      const maxL = opt_maxL !== undefined ? opt_maxL : 1.0;
      const hsl = this.toHSL();
      hsl.l = Math.min(hsl.l + k, maxL);
      return Color.fromHSL(hsl);
    },

    darken(opt_k) {
      let k;
      if (opt_k !== undefined) {
        k = opt_k;
      } else {
        k = 0.45;
      }

      return new Color(
          Math.min(255, this.r - Math.floor(this.r * k)),
          Math.min(255, this.g - Math.floor(this.g * k)),
          Math.min(255, this.b - Math.floor(this.b * k)),
          this.a);
    },

    desaturate(opt_desaturateFactor) {
      let desaturateFactor;
      if (opt_desaturateFactor !== undefined) {
        desaturateFactor = opt_desaturateFactor;
      } else {
        desaturateFactor = 1;
      }

      const hsl = this.toHSL();
      hsl.s = clamp01(hsl.s * (1 - desaturateFactor));
      return Color.fromHSL(hsl);
    },

    withAlpha(a) {
      return new Color(this.r, this.g, this.b, a);
    },

    toString() {
      if (this.a !== undefined) {
        return 'rgba(' +
            this.r + ',' + this.g + ',' +
            this.b + ',' + this.a + ')';
      }
      return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';
    },

    /**
     * Returns a dict {h, s, l, a} with:
     * |h| Hue value in [0, 1].
     * |s| Saturation value in [0, 1].
     * |l| Lightness in [0, 1].
     * |a| Alpha in [0, 1]
     */
    toHSL() {
      const r = this.r / 255;
      const g = this.g / 255;
      const b = this.b / 255;

      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);

      let h;
      let s;
      const l = (max + min) / 2;
      if (min === max) {
        h = 0;
        s = 0;
      } else {
        const delta = max - min;
        if (l > 0.5) {
          s = delta / (2 - max - min);
        } else {
          s = delta / (max + min);
        }

        if (r === max) {
          h = (g - b) / delta;
          if (g < b) h += 6;
        } else if (g === max) {
          h = 2 + ((b - r) / delta);
        } else {
          h = 4 + ((r - g) / delta);
        }
        h /= 6;
      }

      return {h, s, l, a: this.a};
    },

    toStringWithAlphaOverride(alpha) {
      return 'rgba(' +
          this.r + ',' + this.g + ',' +
          this.b + ',' + alpha + ')';
    }
  };

  return {
    Color,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  const URL_REGEX = /^(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b|file:\/\/)([-a-zA-Z0-9@:%_\+.~#?&//=]*)$/;  // eslint-disable-line max-len

  function deepCopy(value) {
    if (!(value instanceof Object)) {
      if (value === undefined || value === null) return value;
      if (typeof value === 'string') return value.substring();
      if (typeof value === 'boolean') return value;
      if (typeof value === 'number') return value;
      throw new Error('Unrecognized: ' + typeof value);
    }

    const object = value;
    if (object instanceof Array) {
      const res = new Array(object.length);
      for (let i = 0; i < object.length; i++) {
        res[i] = deepCopy(object[i]);
      }
      return res;
    }

    if (object.__proto__ !== Object.prototype) {
      throw new Error('Can only clone simple types');
    }
    const res = {};
    for (const key in object) {
      res[key] = deepCopy(object[key]);
    }
    return res;
  }

  function normalizeException(e) {
    if (e === undefined || e === null) {
      return {
        typeName: 'UndefinedError',
        message: 'Unknown: null or undefined exception',
        stack: 'Unknown'
      };
    }

    if (typeof(e) === 'string') {
      return {
        typeName: 'StringError',
        message: e,
        stack: [e]
      };
    }

    let typeName;
    if (e.name) {
      typeName = e.name;
    } else if (e.constructor) {
      if (e.constructor.name) {
        typeName = e.constructor.name;
      } else {
        typeName = 'AnonymousError';
      }
    } else {
      typeName = 'ErrorWithNoConstructor';
    }

    const msg = e.message ? e.message : 'Unknown';
    return {
      typeName,
      message: msg,
      stack: e.stack ? e.stack : [msg]
    };
  }

  function stackTraceAsString() {
    return new Error().stack + '';
  }
  function stackTrace() {
    let stack = stackTraceAsString();
    stack = stack.split('\n');
    return stack.slice(2);
  }

  function getUsingPath(path, fromDict) {
    const parts = path.split('.');
    let cur = fromDict;

    for (let part; parts.length && (part = parts.shift());) {
      if (!parts.length) {
        return cur[part];
      } else if (part in cur) {
        cur = cur[part];
      } else {
        return undefined;
      }
    }
    return undefined;
  }

  /**
   * Format date as a string "YYYY-MM-DD HH:mm:ss". The timezone is implicitly
   * UTC. This format is based on the ISO format, but without milliseconds and
   * the 'T' is replaced with a space for legibility.
   *
   * @param {!Date} date
   * @return {string}
   */
  function formatDate(date) {
    return date.toISOString().replace('T', ' ').slice(0, 19);
  }

  /**
   * Infinity and NaN are left out of JSON for security reasons that do not
   * apply to our use cases. This helper function allows serializing them
   * independently of null.
   *
   * @param {!number} n
   * @return {!(number|string)}
   */
  function numberToJson(n) {
    if (isNaN(n)) return 'NaN';
    if (n === Infinity) return 'Infinity';
    if (n === -Infinity) return '-Infinity';
    return n;
  }

  /**
   * Infinity and NaN are left out of JSON for security reasons that do not
   * apply to our use cases. This helper function allows deserializing them
   * independently of null.
   *
   * @param {!(number|string)} n
   * @return {!number}
   */
  function numberFromJson(n) {
    if (n === 'NaN' || n === null) return NaN;
    if (n === 'Infinity') return Infinity;
    if (n === '-Infinity') return -Infinity;
    return n;
  }

  /**
   * @param {Array.<T>} ary
   * @returns {Array.<Object.<T, number>>} The run length encoding of the array
   * as an array of {value, count} objects.
   * @template T
   */
  function runLengthEncoding(ary) {
    const encodedArray = [];
    for (const element of ary) {
      if (encodedArray.length === 0 ||
          encodedArray[encodedArray.length - 1].value !== element) {
        encodedArray.push({
          value: element,
          count: 1,
        });
      } else {
        encodedArray[encodedArray.length - 1].count += 1;
      }
    }
    return encodedArray;
  }

  /**
   * @param {string} s
   * @return {boolean}
   */
  function isUrl(s) {
    return typeof(s) === 'string' && s.match(URL_REGEX) !== null;
  }

  /**
   * Returns the only element in the iterable. If the iterable is empty or has
   * more than one element, an error is thrown.
   */
  function getOnlyElement(iterable) {
    const iterator = iterable[Symbol.iterator]();

    const firstIteration = iterator.next();
    if (firstIteration.done) {
      throw new Error('getOnlyElement was passed an empty iterable.');
    }

    const secondIteration = iterator.next();
    if (!secondIteration.done) {
      throw new Error(
          'getOnlyElement was passed an iterable with multiple elements.');
    }

    return firstIteration.value;
  }

  /**
   * Returns the first element in the iterable. If the iterable is empty, an
   * error is thrown.
   */
  function getFirstElement(iterable) {
    const iterator = iterable[Symbol.iterator]();
    const result = iterator.next();
    if (result.done) {
      throw new Error('getFirstElement was passed an empty iterable.');
    }

    return result.value;
  }

  function compareArrays(x, y, elementCmp) {
    const minLength = Math.min(x.length, y.length);
    let i;
    for (i = 0; i < minLength; i++) {
      const tmp = elementCmp(x[i], y[i]);
      if (tmp) return tmp;
    }
    if (x.length === y.length) return 0;

    if (x[i] === undefined) return -1;

    return 1;
  }

  /**
   * Returns a new Map with items grouped by the return value of the
   * specified function being called on each item.
   * @param {!Array.<!*>} ary The array being iterated through
   * @param {!function(!*):!*} callback The mapping function between the array
   * value and the map key.
   * @param {*=} opt_this
   */
  function groupIntoMap(ary, callback, opt_this, opt_arrayConstructor) {
    const arrayConstructor = opt_arrayConstructor || Array;
    const results = new Map();
    for (const element of ary) {
      const key = callback.call(opt_this, element);
      let items = results.get(key);
      if (items === undefined) {
        items = new arrayConstructor();
        results.set(key, items);
      }
      items.push(element);
    }
    return results;
  }

  function inPlaceFilter(array, predicate, opt_this) {
    opt_this = opt_this || this;
    let nextPosition = 0;
    for (let i = 0; i < array.length; i++) {
      if (!predicate.call(opt_this, array[i], i)) continue;
      if (nextPosition < i) {
        array[nextPosition] = array[i];  // Move elements only if necessary.
      }
      nextPosition++;
    }

    if (nextPosition < array.length) {
      array.length = nextPosition;  // Truncate the array only if necessary.
    }
  }

  /**
   * Convert an array of dictionaries to a dictionary of arrays.
   *
   * The keys of the resulting dictionary are a union of the keys of all
   * dictionaries in the provided array. Each array in the resulting dictionary
   * has the same length as the provided array and contains the values of its
   * key in the dictionaries in the provided array. Example:
   *
   *   INPUT:
   *
   *     [
   *       {a: 6, b: 5      },
   *       undefined,
   *       {a: 4, b: 3, c: 2},
   *       {      b: 1, c: 0}
   *     ]
   *
   *   OUTPUT:
   *
   *     {
   *       a: [6,         undefined, 4, undefined],
   *       b: [5,         undefined, 3, 1        ],
   *       c: [undefined, undefined, 2, 0        ]
   *     }
   *
   * @param {!Array} array Array of items to be inverted. If opt_dictGetter
   *     is not provided, all elements of the array must be either undefined,
   *     or dictionaries.
   * @param {?(function(*): (!Object|undefined))=} opt_dictGetter Optional
   *     function mapping defined elements of array to dictionaries.
   * @param {*=} opt_this Optional 'this' context for opt_dictGetter.
   */
  function invertArrayOfDicts(array, opt_dictGetter, opt_this) {
    opt_this = opt_this || this;
    const result = {};
    for (let i = 0; i < array.length; i++) {
      const item = array[i];
      if (item === undefined) continue;
      const dict = opt_dictGetter ? opt_dictGetter.call(opt_this, item) : item;
      if (dict === undefined) continue;
      for (const key in dict) {
        let valueList = result[key];
        if (valueList === undefined) {
          result[key] = valueList = new Array(array.length);
        }
        valueList[i] = dict[key];
      }
    }
    return result;
  }

  function setsEqual(a, b) {
    if (!(a instanceof Set) || !(b instanceof Set)) return false;
    if (a.size !== b.size) return false;
    // Avoid Array.from() here -- it creates garbage.
    for (const x of a) {
      if (!b.has(x)) return false;
    }
    return true;
  }

  /**
   * Finds the first index in the array whose value is >= loVal.
   *
   * The key for the search is defined by the mapFn. This array must
   * be prearranged such that ary.map(mapFn) would also be sorted in
   * ascending order.
   *
   * @param {Array} ary An array of arbitrary objects.
   * @param {function():*} mapFn Callback that produces a key value
   *     from an element in ary.
   * @param {number} loVal Value for which to search.
   * @return {Number} Offset o into ary where all ary[i] for i <= o
   *     are < loVal, or ary.length if loVal is greater than all elements in
   *     the array.
   */
  function findLowIndexInSortedArray(ary, mapFn, loVal) {
    if (ary.length === 0) return 1;

    let low = 0;
    let high = ary.length - 1;
    let i;
    let comparison;
    let hitPos = -1;
    while (low <= high) {
      i = Math.floor((low + high) / 2);
      comparison = mapFn(ary[i]) - loVal;
      if (comparison < 0) {
        low = i + 1; continue;
      } else if (comparison > 0) {
        high = i - 1; continue;
      } else {
        hitPos = i;
        high = i - 1;
      }
    }
    // return where we hit, or failing that the low pos
    return hitPos !== -1 ? hitPos : low;
  }

  /**
   * Finds an index in an array of intervals that either intersects
   * the provided loVal, or if no intersection is found, -1 or ary.length.
   *
   * The array of intervals is defined implicitly via two mapping functions
   * over the provided ary. mapLoFn determines the lower value of the interval,
   * mapWidthFn the width. Intersection is lower-inclusive, e.g. [lo,lo+w).
   *
   * The array of intervals formed by this mapping must be non-overlapping and
   * sorted in ascending order by loVal.
   *
   * @param {Array} ary An array of objects that can be converted into sorted
   *     nonoverlapping ranges [x,y) using the mapLoFn and mapWidth.
   * @param {function():*} mapLoFn Callback that produces the low value for the
   *     interval represented by an  element in the array.
   * @param {function():*} mapWidthFn Callback that produces the width for the
   *     interval represented by an  element in the array.
   * @param {number} loVal The low value for the search.
   * @return {Number} An index in the array that intersects or is first-above
   *     loVal, -1 if none found and loVal is below than all the intervals,
   *     ary.length if loVal is greater than all the intervals.
   */
  function findIndexInSortedIntervals(ary, mapLoFn, mapWidthFn, loVal) {
    const first = findLowIndexInSortedArray(ary, mapLoFn, loVal);
    if (first === 0) {
      if (loVal >= mapLoFn(ary[0]) &&
          loVal < mapLoFn(ary[0]) + mapWidthFn(ary[0], 0)) {
        return 0;
      }
      return -1;
    }

    if (first < ary.length) {
      if (loVal >= mapLoFn(ary[first]) &&
          loVal < mapLoFn(ary[first]) + mapWidthFn(ary[first], first)) {
        return first;
      }
      if (loVal >= mapLoFn(ary[first - 1]) &&
          loVal < mapLoFn(ary[first - 1]) +
          mapWidthFn(ary[first - 1], first - 1)) {
        return first - 1;
      }
      return ary.length;
    }

    if (first === ary.length) {
      if (loVal >= mapLoFn(ary[first - 1]) &&
          loVal < mapLoFn(ary[first - 1]) +
          mapWidthFn(ary[first - 1], first - 1)) {
        return first - 1;
      }
      return ary.length;
    }

    return ary.length;
  }

  /**
   * Finds an index in an array of sorted closed intervals that either
   * intersects the provided val, or if no intersection is found, -1 or
   *  ary.length.
   *
   * The array of intervals is defined implicitly via two mapping functions
   * over the provided ary. mapLoFn determines the lower value of the interval,
   * mapHiFn the high. Intersection is closed, e.g. [lo,hi], unlike with
   * findIndexInSortedIntervals, which is right-open.
   *
   * The array of intervals formed by this mapping must be non-overlapping, and
   * sorted in ascending order by val.
   *
   * @param {Array} ary An array of objects that can be converted into sorted
   *     nonoverlapping ranges [x,y) using the mapLoFn and mapWidth.
   * @param {function():*} mapLoFn Callback that produces the low value for the
   *     interval represented by an  element in the array.
   * @param {function():*} mapHiFn Callback that produces the high for the
   *     interval represented by an  element in the array.
   * @param {number} val The value for the search.
   * @return {Number} An index in the array that intersects or is first-above
   *     val, -1 if none found and val is below than all the intervals,
   *     ary.length if val is greater than all the intervals.
   */
  function findIndexInSortedClosedIntervals(ary, mapLoFn, mapHiFn, val) {
    const i = findLowIndexInSortedArray(ary, mapLoFn, val);
    if (i === 0) {
      if (val >= mapLoFn(ary[0], 0) &&
          val <= mapHiFn(ary[0], 0)) {
        return 0;
      }
      return -1;
    }

    if (i < ary.length) {
      if (val >= mapLoFn(ary[i - 1], i - 1) &&
          val <= mapHiFn(ary[i - 1], i - 1)) {
        return i - 1;
      }
      if (val >= mapLoFn(ary[i], i) &&
          val <= mapHiFn(ary[i], i)) {
        return i;
      }
      return ary.length;
    }

    if (i === ary.length) {
      if (val >= mapLoFn(ary[i - 1], i - 1) &&
          val <= mapHiFn(ary[i - 1], i - 1)) {
        return i - 1;
      }
      return ary.length;
    }

    return ary.length;
  }

  /**
   * Calls cb for all intervals in the implicit array of intervals
   * defnied by ary, mapLoFn and mapHiFn that intersect the range
   * [loVal,hiVal)
   *
   * This function uses the same scheme as findLowIndexInSortedArray
   * to define the intervals. The same restrictions on sortedness and
   * non-overlappingness apply.
   *
   * @param {Array} ary An array of objects that can be converted into sorted
   * nonoverlapping ranges [x,y) using the mapLoFn and mapWidth.
   * @param {function():*} mapLoFn Callback that produces the low value for the
   * interval represented by an element in the array.
   * @param {function():*} mapWidthFn Callback that produces the width for the
   * interval represented by an element in the array.
   * @param {number} loVal The low value for the search, inclusive.
   * @param {number} hiVal The high value for the search, non inclusive.
   * @param {function():*} cb The function to run for intersecting intervals.
   */
  function iterateOverIntersectingIntervals(ary, mapLoFn, mapWidthFn, loVal,
      hiVal, cb) {
    if (ary.length === 0) return;

    if (loVal > hiVal) return;

    let i = findLowIndexInSortedArray(ary, mapLoFn, loVal);
    if (i === -1) {
      return;
    }
    if (i > 0) {
      const hi = mapLoFn(ary[i - 1]) + mapWidthFn(ary[i - 1], i - 1);
      if (hi >= loVal) {
        cb(ary[i - 1], i - 1);
      }
    }
    if (i === ary.length) {
      return;
    }

    for (let n = ary.length; i < n; i++) {
      const lo = mapLoFn(ary[i]);
      if (lo >= hiVal) break;
      cb(ary[i], i);
    }
  }

  /**
   * Finds the element in the array whose value is closest to |val|.
   *
   * The same restrictions on sortedness as for findLowIndexInSortedArray apply.
   *
   * @param {Array} ary An array of arbitrary objects.
   * @param {function():*} mapFn Callback that produces a key value
   *     from an element in ary.
   * @param {number} val Value for which to search.
   * @param {number} maxDiff Maximum allowed difference in value between |val|
   *     and an element's value.
   * @return {object} Object in the array whose value is closest to |val|, or
   *     null if no object is within range.
   */
  function findClosestElementInSortedArray(ary, mapFn, val, maxDiff) {
    if (ary.length === 0) return null;

    let aftIdx = findLowIndexInSortedArray(ary, mapFn, val);
    const befIdx = aftIdx > 0 ? aftIdx - 1 : 0;

    if (aftIdx === ary.length) aftIdx -= 1;

    const befDiff = Math.abs(val - mapFn(ary[befIdx]));
    const aftDiff = Math.abs(val - mapFn(ary[aftIdx]));

    if (befDiff > maxDiff && aftDiff > maxDiff) return null;

    const idx = befDiff < aftDiff ? befIdx : aftIdx;
    return ary[idx];
  }

  /**
   * Finds the closest interval in the implicit array of intervals
   * defined by ary, mapLoFn and mapHiFn.
   *
   * This function uses the same scheme as findLowIndexInSortedArray
   * to define the intervals. The same restrictions on sortedness and
   * non-overlappingness apply.
   *
   * @param {Array} ary An array of objects that can be converted into sorted
   *     nonoverlapping ranges [x,y) using the mapLoFn and mapHiFn.
   * @param {function():*} mapLoFn Callback that produces the low value for the
   *     interval represented by an element in the array.
   * @param {function():*} mapHiFn Callback that produces the high for the
   *     interval represented by an element in the array.
   * @param {number} val The value for the search.
   * @param {number} maxDiff Maximum allowed difference in value between |val|
   *     and an interval's low or high value.
   * @return {interval} Interval in the array whose high or low value is closest
   *     to |val|, or null if no interval is within range.
   */
  function findClosestIntervalInSortedIntervals(ary, mapLoFn, mapHiFn, val,
      maxDiff) {
    if (ary.length === 0) return null;

    let idx = findLowIndexInSortedArray(ary, mapLoFn, val);
    if (idx > 0) idx -= 1;

    const hiInt = ary[idx];
    let loInt = hiInt;

    if (val > mapHiFn(hiInt) && idx + 1 < ary.length) {
      loInt = ary[idx + 1];
    }

    const loDiff = Math.abs(val - mapLoFn(loInt));
    const hiDiff = Math.abs(val - mapHiFn(hiInt));

    if (loDiff > maxDiff && hiDiff > maxDiff) return null;

    if (loDiff < hiDiff) return loInt;

    return hiInt;
  }

  /**
  * Returns first index i in |array| such that |test| is true for array[i].
  * Returns array.length if no such i is found. Assumes |test| is monotonic
  * boolean on |array|, i.e. if test(array[i]) is true, then test(array[i + 1])
  * is also true.
  *
  * @param {Array} array Array of elements to perform binary search on.
  * @param {function(*):boolean} test Monotonic boolean test function.
  */
  function findFirstTrueIndexInSortedArray(array, test) {
    let i0 = 0;
    let i1 = array.length;
    while (i0 < i1) {
      const i = Math.trunc((i0 + i1) / 2);
      if (test(array[i])) {
        i1 = i;  // Explore the left branch.
      } else {
        i0 = i + 1;  // Explore the right branch.
      }
    }
    return i1;
  }

  return {
    compareArrays,
    deepCopy,
    findClosestElementInSortedArray,
    findClosestIntervalInSortedIntervals,
    findFirstTrueIndexInSortedArray,
    findIndexInSortedClosedIntervals,
    findIndexInSortedIntervals,
    findLowIndexInSortedArray,
    formatDate,
    getFirstElement,
    getOnlyElement,
    getUsingPath,
    groupIntoMap,
    inPlaceFilter,
    invertArrayOfDicts,
    isUrl,
    iterateOverIntersectingIntervals,
    normalizeException,
    numberFromJson,
    numberToJson,
    runLengthEncoding,
    setsEqual,
    stackTrace,
    stackTraceAsString,
  };
});


'use strict';

/**
 * @fileoverview Provides color scheme related functions.
 */
tr.exportTo('tr.b', function() {
  // Basic constants...
  const generalPurposeColors = [
    new tr.b.Color(122, 98, 135),
    new tr.b.Color(150, 83, 105),
    new tr.b.Color(44, 56, 189),
    new tr.b.Color(99, 86, 147),
    new tr.b.Color(104, 129, 107),
    new tr.b.Color(130, 178, 55),
    new tr.b.Color(87, 109, 147),
    new tr.b.Color(111, 145, 88),
    new tr.b.Color(81, 152, 131),
    new tr.b.Color(142, 91, 111),
    new tr.b.Color(81, 163, 70),
    new tr.b.Color(148, 94, 86),
    new tr.b.Color(144, 89, 118),
    new tr.b.Color(83, 150, 97),
    new tr.b.Color(105, 94, 139),
    new tr.b.Color(89, 144, 122),
    new tr.b.Color(105, 119, 128),
    new tr.b.Color(96, 128, 137),
    new tr.b.Color(145, 88, 145),
    new tr.b.Color(88, 145, 144),
    new tr.b.Color(90, 100, 143),
    new tr.b.Color(121, 97, 136),
    new tr.b.Color(111, 160, 73),
    new tr.b.Color(112, 91, 142),
    new tr.b.Color(86, 147, 86),
    new tr.b.Color(63, 100, 170),
    new tr.b.Color(81, 152, 107),
    new tr.b.Color(60, 164, 173),
    new tr.b.Color(143, 72, 161),
    new tr.b.Color(159, 74, 86)];

  const reservedColorsByName = {
    thread_state_uninterruptible: new tr.b.Color(182, 125, 143),
    thread_state_iowait: new tr.b.Color(255, 140, 0),
    thread_state_running: new tr.b.Color(126, 200, 148),
    thread_state_runnable: new tr.b.Color(133, 160, 210),
    thread_state_sleeping: new tr.b.Color(240, 240, 240),
    thread_state_unknown: new tr.b.Color(199, 155, 125),

    background_memory_dump: new tr.b.Color(0, 180, 180),
    light_memory_dump: new tr.b.Color(0, 0, 180),
    detailed_memory_dump: new tr.b.Color(180, 0, 180),

    vsync_highlight_color: new tr.b.Color(0, 0, 255),
    generic_work: new tr.b.Color(125, 125, 125),

    good: new tr.b.Color(0, 125, 0),
    bad: new tr.b.Color(180, 125, 0),
    terrible: new tr.b.Color(180, 0, 0),

    black: new tr.b.Color(0, 0, 0),
    grey: new tr.b.Color(221, 221, 221),
    white: new tr.b.Color(255, 255, 255),
    yellow: new tr.b.Color(255, 255, 0),
    olive: new tr.b.Color(100, 100, 0),

    rail_response: new tr.b.Color(67, 135, 253),
    rail_animation: new tr.b.Color(244, 74, 63),
    rail_idle: new tr.b.Color(238, 142, 0),
    rail_load: new tr.b.Color(13, 168, 97),
    startup: new tr.b.Color(230, 230, 0),

    heap_dump_stack_frame: new tr.b.Color(128, 128, 128),
    heap_dump_object_type: new tr.b.Color(0, 0, 255),
    heap_dump_child_node_arrow: new tr.b.Color(204, 102, 0),

    cq_build_running: new tr.b.Color(255, 255, 119),
    cq_build_passed: new tr.b.Color(153, 238, 102),
    cq_build_failed: new tr.b.Color(238, 136, 136),
    cq_build_abandoned: new tr.b.Color(187, 187, 187),

    cq_build_attempt_runnig: new tr.b.Color(222, 222, 75),
    cq_build_attempt_passed: new tr.b.Color(103, 218, 35),
    cq_build_attempt_failed: new tr.b.Color(197, 81, 81)
  };

  // Some constants we'll need for later lookups.
  const numGeneralPurposeColorIds = generalPurposeColors.length;
  const numReservedColorIds = Object.keys(reservedColorsByName).length;
  const numColorsPerVariant = numGeneralPurposeColorIds + numReservedColorIds;

  function ColorScheme() {
  }

  /*
   * A flat array of tr.b.Color values of the palette, and their variants.
   *
   * This array is made up of a set of base colors, repeated N times to form
   * a set of variants on that base color.
   *
   * Within the base colors, there are "general purpose" colors,
   * which can be used for random color selection, and
   * reserved colors, which are used when specific colors
   * need to be used, e.g. where red is desired.
   *
   * The variants are automatically generated from the base colors. The 0th
   * variant is the default apeparance of the color, and the varaiants are
   * mutations of that color, e.g. several brightening levels and desaturations.
   *
   * For example, a very simple version of this array looks like the following:
   *     0: Generic Color 0
   *     1: Generic Color 1
   *     2: Named Color 'foo'
   *     3: Brightened Generic Color 0
   *     4: Brightened Generic Color 1
   *     5: Brightened Named Color 'foo'
   */
  const paletteBase = [];
  paletteBase.push.apply(paletteBase, generalPurposeColors);
  paletteBase.push.apply(paletteBase, Object.values(reservedColorsByName));
  ColorScheme.colors = [];
  ColorScheme.properties = {};
  ColorScheme.properties = {
    numColorsPerVariant,
  };

  function pushVariant(func) {
    const variantColors = paletteBase.map(func);
    ColorScheme.colors.push.apply(ColorScheme.colors, variantColors);
  }

  // Basic colors.
  pushVariant(function(c) { return c; });

  // Brightened variants.
  ColorScheme.properties.brightenedOffsets = [];
  ColorScheme.properties.brightenedOffsets.push(ColorScheme.colors.length);
  pushVariant(function(c) {
    return c.lighten(0.3, 0.8);
  });

  ColorScheme.properties.brightenedOffsets.push(ColorScheme.colors.length);
  pushVariant(function(c) {
    return c.lighten(0.48, 0.85);
  });

  ColorScheme.properties.brightenedOffsets.push(ColorScheme.colors.length);
  pushVariant(function(c) {
    return c.lighten(0.65, 0.9);
  });


  // Desaturated variants.
  ColorScheme.properties.dimmedOffsets = [];
  ColorScheme.properties.dimmedOffsets.push(ColorScheme.colors.length);
  pushVariant(function(c) {
    return c.desaturate();
  });
  ColorScheme.properties.dimmedOffsets.push(ColorScheme.colors.length);
  pushVariant(function(c) {
    return c.desaturate(0.5);
  });
  ColorScheme.properties.dimmedOffsets.push(ColorScheme.colors.length);
  pushVariant(function(c) {
    return c.desaturate(0.3);
  });

  /**
   * A toString'd representation of ColorScheme.colors.
   */
  ColorScheme.colorsAsStrings = ColorScheme.colors.map(function(c) {
    return c.toString();
  });

  // Build reservedColorNameToIdMap.
  const reservedColorNameToIdMap = (function() {
    const m = new Map();
    let i = generalPurposeColors.length;
    for (const key of Object.keys(reservedColorsByName)) {
      m.set(key, i++);
    }
    return m;
  })();

  /**
   * @param {String} name The color name.
   * @return {Number} The color ID for the given color name.
   */
  ColorScheme.getColorIdForReservedName = function(name) {
    const id = reservedColorNameToIdMap.get(name);
    if (id === undefined) {
      throw new Error('Unrecognized color ' + name);
    }
    return id;
  };

  ColorScheme.getColorForReservedNameAsString = function(reservedName) {
    const id = ColorScheme.getColorIdForReservedName(reservedName);
    return ColorScheme.colorsAsStrings[id];
  };

  /**
   * Computes a simplistic hashcode of the provide name. Used to chose colors
   * for slices.
   * @param {string} name The string to hash.
   */
  ColorScheme.getStringHash = function(name) {
    let hash = 0;
    for (let i = 0; i < name.length; ++i) {
      hash = (hash + 37 * hash + 11 * name.charCodeAt(i)) % 0xFFFFFFFF;
    }
    return hash;
  };

  // Previously computed string color IDs. They are based on a stable hash, so
  // it is safe to save them throughout the program time.
  const stringColorIdCache = new Map();

  /**
   * @return {Number} A color ID that is stably associated to the provided via
   * the getStringHash method. The color ID will be chosen from the general
   * purpose ID space only, e.g. no reserved ID will be used.
   */
  ColorScheme.getColorIdForGeneralPurposeString = function(string) {
    if (stringColorIdCache.get(string) === undefined) {
      const hash = ColorScheme.getStringHash(string);
      stringColorIdCache.set(string, hash % numGeneralPurposeColorIds);
    }
    return stringColorIdCache.get(string);
  };

  /**
   * @return {Number} A color id generated consistently from a |colorId| and
   * number |n|.
   */
  ColorScheme.getAnotherColorId = function(colorId, n) {
    return (colorId + n) % numColorsPerVariant;
  };

  /**
   * @return {Number} A color ID that the |offset| variant of |colorId|.
   */
  ColorScheme.getVariantColorId = function(colorId, offset) {
    return colorId + offset;
  };

  return {
    ColorScheme,
  };
});

/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.3.1
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define(n);else{var r=n();for(var a in r)("object"==typeof exports?exports:t)[a]=r[a]}}(this,function(){return function(t){function n(a){if(r[a])return r[a].exports;var e=r[a]={exports:{},id:a,loaded:!1};return t[a].call(e.exports,e,e.exports,n),e.loaded=!0,e.exports}var r={};return n.m=t,n.c=r,n.p="",n(0)}([function(t,n,r){n.glMatrix=r(1),n.mat2=r(2),n.mat2d=r(3),n.mat3=r(4),n.mat4=r(5),n.quat=r(6),n.vec2=r(9),n.vec3=r(7),n.vec4=r(8)},function(t,n,r){var a={};a.EPSILON=1e-6,a.ARRAY_TYPE="undefined"!=typeof Float32Array?Float32Array:Array,a.RANDOM=Math.random,a.setMatrixArrayType=function(t){GLMAT_ARRAY_TYPE=t};var e=Math.PI/180;a.toRadian=function(t){return t*e},t.exports=a},function(t,n,r){var a=r(1),e={};e.create=function(){var t=new a.ARRAY_TYPE(4);return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},e.clone=function(t){var n=new a.ARRAY_TYPE(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},e.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},e.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},e.transpose=function(t,n){if(t===n){var r=n[1];t[1]=n[2],t[2]=r}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t},e.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*u-e*a;return o?(o=1/o,t[0]=u*o,t[1]=-a*o,t[2]=-e*o,t[3]=r*o,t):null},e.adjoint=function(t,n){var r=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=r,t},e.determinant=function(t){return t[0]*t[3]-t[2]*t[1]},e.multiply=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],c=r[1],f=r[2],s=r[3];return t[0]=a*i+u*c,t[1]=e*i+o*c,t[2]=a*f+u*s,t[3]=e*f+o*s,t},e.mul=e.multiply,e.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=a*c+u*i,t[1]=e*c+o*i,t[2]=a*-i+u*c,t[3]=e*-i+o*c,t},e.scale=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],c=r[1];return t[0]=a*i,t[1]=e*i,t[2]=u*c,t[3]=o*c,t},e.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=-r,t[3]=a,t},e.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t},e.str=function(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},e.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))},e.LDU=function(t,n,r,a){return t[2]=a[2]/a[0],r[0]=a[0],r[1]=a[1],r[3]=a[3]-t[2]*r[1],[t,n,r]},t.exports=e},function(t,n,r){var a=r(1),e={};e.create=function(){var t=new a.ARRAY_TYPE(6);return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},e.clone=function(t){var n=new a.ARRAY_TYPE(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n},e.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t},e.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},e.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],c=r*u-a*e;return c?(c=1/c,t[0]=u*c,t[1]=-a*c,t[2]=-e*c,t[3]=r*c,t[4]=(e*i-u*o)*c,t[5]=(a*o-r*i)*c,t):null},e.determinant=function(t){return t[0]*t[3]-t[1]*t[2]},e.multiply=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=r[0],s=r[1],h=r[2],M=r[3],l=r[4],v=r[5];return t[0]=a*f+u*s,t[1]=e*f+o*s,t[2]=a*h+u*M,t[3]=e*h+o*M,t[4]=a*l+u*v+i,t[5]=e*l+o*v+c,t},e.mul=e.multiply,e.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=Math.sin(r),s=Math.cos(r);return t[0]=a*s+u*f,t[1]=e*s+o*f,t[2]=a*-f+u*s,t[3]=e*-f+o*s,t[4]=i,t[5]=c,t},e.scale=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=r[0],s=r[1];return t[0]=a*f,t[1]=e*f,t[2]=u*s,t[3]=o*s,t[4]=i,t[5]=c,t},e.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=r[0],s=r[1];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=a*f+u*s+i,t[5]=e*f+o*s+c,t},e.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=-r,t[3]=a,t[4]=0,t[5]=0,t},e.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t},e.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t},e.str=function(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"},e.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)},t.exports=e},function(t,n,r){var a=r(1),e={};e.create=function(){var t=new a.ARRAY_TYPE(9);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},e.fromMat4=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t},e.clone=function(t){var n=new a.ARRAY_TYPE(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n},e.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},e.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},e.transpose=function(t,n){if(t===n){var r=n[1],a=n[2],e=n[5];t[1]=n[3],t[2]=n[6],t[3]=r,t[5]=n[7],t[6]=a,t[7]=e}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t},e.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],c=n[6],f=n[7],s=n[8],h=s*o-i*f,M=-s*u+i*c,l=f*u-o*c,v=r*h+a*M+e*l;return v?(v=1/v,t[0]=h*v,t[1]=(-s*a+e*f)*v,t[2]=(i*a-e*o)*v,t[3]=M*v,t[4]=(s*r-e*c)*v,t[5]=(-i*r+e*u)*v,t[6]=l*v,t[7]=(-f*r+a*c)*v,t[8]=(o*r-a*u)*v,t):null},e.adjoint=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],c=n[6],f=n[7],s=n[8];return t[0]=o*s-i*f,t[1]=e*f-a*s,t[2]=a*i-e*o,t[3]=i*c-u*s,t[4]=r*s-e*c,t[5]=e*u-r*i,t[6]=u*f-o*c,t[7]=a*c-r*f,t[8]=r*o-a*u,t},e.determinant=function(t){var n=t[0],r=t[1],a=t[2],e=t[3],u=t[4],o=t[5],i=t[6],c=t[7],f=t[8];return n*(f*u-o*c)+r*(-f*e+o*i)+a*(c*e-u*i)},e.multiply=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=n[6],s=n[7],h=n[8],M=r[0],l=r[1],v=r[2],m=r[3],p=r[4],d=r[5],A=r[6],R=r[7],w=r[8];return t[0]=M*a+l*o+v*f,t[1]=M*e+l*i+v*s,t[2]=M*u+l*c+v*h,t[3]=m*a+p*o+d*f,t[4]=m*e+p*i+d*s,t[5]=m*u+p*c+d*h,t[6]=A*a+R*o+w*f,t[7]=A*e+R*i+w*s,t[8]=A*u+R*c+w*h,t},e.mul=e.multiply,e.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=n[6],s=n[7],h=n[8],M=r[0],l=r[1];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=i,t[5]=c,t[6]=M*a+l*o+f,t[7]=M*e+l*i+s,t[8]=M*u+l*c+h,t},e.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=n[6],s=n[7],h=n[8],M=Math.sin(r),l=Math.cos(r);return t[0]=l*a+M*o,t[1]=l*e+M*i,t[2]=l*u+M*c,t[3]=l*o-M*a,t[4]=l*i-M*e,t[5]=l*c-M*u,t[6]=f,t[7]=s,t[8]=h,t},e.scale=function(t,n,r){var a=r[0],e=r[1];return t[0]=a*n[0],t[1]=a*n[1],t[2]=a*n[2],t[3]=e*n[3],t[4]=e*n[4],t[5]=e*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},e.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t},e.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=0,t[3]=-r,t[4]=a,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},e.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},e.fromMat2d=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t},e.fromQuat=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r+r,i=a+a,c=e+e,f=r*o,s=a*o,h=a*i,M=e*o,l=e*i,v=e*c,m=u*o,p=u*i,d=u*c;return t[0]=1-h-v,t[3]=s-d,t[6]=M+p,t[1]=s+d,t[4]=1-f-v,t[7]=l-m,t[2]=M-p,t[5]=l+m,t[8]=1-f-h,t},e.normalFromMat4=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],c=n[6],f=n[7],s=n[8],h=n[9],M=n[10],l=n[11],v=n[12],m=n[13],p=n[14],d=n[15],A=r*i-a*o,R=r*c-e*o,w=r*f-u*o,q=a*c-e*i,Y=a*f-u*i,g=e*f-u*c,y=s*m-h*v,x=s*p-M*v,P=s*d-l*v,E=h*p-M*m,T=h*d-l*m,b=M*d-l*p,D=A*b-R*T+w*E+q*P-Y*x+g*y;return D?(D=1/D,t[0]=(i*b-c*T+f*E)*D,t[1]=(c*P-o*b-f*x)*D,t[2]=(o*T-i*P+f*y)*D,t[3]=(e*T-a*b-u*E)*D,t[4]=(r*b-e*P+u*x)*D,t[5]=(a*P-r*T-u*y)*D,t[6]=(m*g-p*Y+d*q)*D,t[7]=(p*w-v*g-d*R)*D,t[8]=(v*Y-m*w+d*A)*D,t):null},e.str=function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},e.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))},t.exports=e},function(t,n,r){var a=r(1),e={};e.create=function(){var t=new a.ARRAY_TYPE(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},e.clone=function(t){var n=new a.ARRAY_TYPE(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n},e.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},e.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},e.transpose=function(t,n){if(t===n){var r=n[1],a=n[2],e=n[3],u=n[6],o=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=a,t[9]=u,t[11]=n[14],t[12]=e,t[13]=o,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t},e.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],c=n[6],f=n[7],s=n[8],h=n[9],M=n[10],l=n[11],v=n[12],m=n[13],p=n[14],d=n[15],A=r*i-a*o,R=r*c-e*o,w=r*f-u*o,q=a*c-e*i,Y=a*f-u*i,g=e*f-u*c,y=s*m-h*v,x=s*p-M*v,P=s*d-l*v,E=h*p-M*m,T=h*d-l*m,b=M*d-l*p,D=A*b-R*T+w*E+q*P-Y*x+g*y;return D?(D=1/D,t[0]=(i*b-c*T+f*E)*D,t[1]=(e*T-a*b-u*E)*D,t[2]=(m*g-p*Y+d*q)*D,t[3]=(M*Y-h*g-l*q)*D,t[4]=(c*P-o*b-f*x)*D,t[5]=(r*b-e*P+u*x)*D,t[6]=(p*w-v*g-d*R)*D,t[7]=(s*g-M*w+l*R)*D,t[8]=(o*T-i*P+f*y)*D,t[9]=(a*P-r*T-u*y)*D,t[10]=(v*Y-m*w+d*A)*D,t[11]=(h*w-s*Y-l*A)*D,t[12]=(i*x-o*E-c*y)*D,t[13]=(r*E-a*x+e*y)*D,t[14]=(m*R-v*q-p*A)*D,t[15]=(s*q-h*R+M*A)*D,t):null},e.adjoint=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],c=n[6],f=n[7],s=n[8],h=n[9],M=n[10],l=n[11],v=n[12],m=n[13],p=n[14],d=n[15];return t[0]=i*(M*d-l*p)-h*(c*d-f*p)+m*(c*l-f*M),t[1]=-(a*(M*d-l*p)-h*(e*d-u*p)+m*(e*l-u*M)),t[2]=a*(c*d-f*p)-i*(e*d-u*p)+m*(e*f-u*c),t[3]=-(a*(c*l-f*M)-i*(e*l-u*M)+h*(e*f-u*c)),t[4]=-(o*(M*d-l*p)-s*(c*d-f*p)+v*(c*l-f*M)),t[5]=r*(M*d-l*p)-s*(e*d-u*p)+v*(e*l-u*M),t[6]=-(r*(c*d-f*p)-o*(e*d-u*p)+v*(e*f-u*c)),t[7]=r*(c*l-f*M)-o*(e*l-u*M)+s*(e*f-u*c),t[8]=o*(h*d-l*m)-s*(i*d-f*m)+v*(i*l-f*h),t[9]=-(r*(h*d-l*m)-s*(a*d-u*m)+v*(a*l-u*h)),t[10]=r*(i*d-f*m)-o*(a*d-u*m)+v*(a*f-u*i),t[11]=-(r*(i*l-f*h)-o*(a*l-u*h)+s*(a*f-u*i)),t[12]=-(o*(h*p-M*m)-s*(i*p-c*m)+v*(i*M-c*h)),t[13]=r*(h*p-M*m)-s*(a*p-e*m)+v*(a*M-e*h),t[14]=-(r*(i*p-c*m)-o*(a*p-e*m)+v*(a*c-e*i)),t[15]=r*(i*M-c*h)-o*(a*M-e*h)+s*(a*c-e*i),t},e.determinant=function(t){var n=t[0],r=t[1],a=t[2],e=t[3],u=t[4],o=t[5],i=t[6],c=t[7],f=t[8],s=t[9],h=t[10],M=t[11],l=t[12],v=t[13],m=t[14],p=t[15],d=n*o-r*u,A=n*i-a*u,R=n*c-e*u,w=r*i-a*o,q=r*c-e*o,Y=a*c-e*i,g=f*v-s*l,y=f*m-h*l,x=f*p-M*l,P=s*m-h*v,E=s*p-M*v,T=h*p-M*m;return d*T-A*E+R*P+w*x-q*y+Y*g},e.multiply=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=n[6],s=n[7],h=n[8],M=n[9],l=n[10],v=n[11],m=n[12],p=n[13],d=n[14],A=n[15],R=r[0],w=r[1],q=r[2],Y=r[3];return t[0]=R*a+w*i+q*h+Y*m,t[1]=R*e+w*c+q*M+Y*p,t[2]=R*u+w*f+q*l+Y*d,t[3]=R*o+w*s+q*v+Y*A,R=r[4],w=r[5],q=r[6],Y=r[7],t[4]=R*a+w*i+q*h+Y*m,t[5]=R*e+w*c+q*M+Y*p,t[6]=R*u+w*f+q*l+Y*d,t[7]=R*o+w*s+q*v+Y*A,R=r[8],w=r[9],q=r[10],Y=r[11],t[8]=R*a+w*i+q*h+Y*m,t[9]=R*e+w*c+q*M+Y*p,t[10]=R*u+w*f+q*l+Y*d,t[11]=R*o+w*s+q*v+Y*A,R=r[12],w=r[13],q=r[14],Y=r[15],t[12]=R*a+w*i+q*h+Y*m,t[13]=R*e+w*c+q*M+Y*p,t[14]=R*u+w*f+q*l+Y*d,t[15]=R*o+w*s+q*v+Y*A,t},e.mul=e.multiply,e.translate=function(t,n,r){var a,e,u,o,i,c,f,s,h,M,l,v,m=r[0],p=r[1],d=r[2];return n===t?(t[12]=n[0]*m+n[4]*p+n[8]*d+n[12],t[13]=n[1]*m+n[5]*p+n[9]*d+n[13],t[14]=n[2]*m+n[6]*p+n[10]*d+n[14],t[15]=n[3]*m+n[7]*p+n[11]*d+n[15]):(a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],c=n[5],f=n[6],s=n[7],h=n[8],M=n[9],l=n[10],v=n[11],t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=i,t[5]=c,t[6]=f,t[7]=s,t[8]=h,t[9]=M,t[10]=l,t[11]=v,t[12]=a*m+i*p+h*d+n[12],t[13]=e*m+c*p+M*d+n[13],t[14]=u*m+f*p+l*d+n[14],t[15]=o*m+s*p+v*d+n[15]),t},e.scale=function(t,n,r){var a=r[0],e=r[1],u=r[2];return t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a,t[3]=n[3]*a,t[4]=n[4]*e,t[5]=n[5]*e,t[6]=n[6]*e,t[7]=n[7]*e,t[8]=n[8]*u,t[9]=n[9]*u,t[10]=n[10]*u,t[11]=n[11]*u,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},e.rotate=function(t,n,r,e){var u,o,i,c,f,s,h,M,l,v,m,p,d,A,R,w,q,Y,g,y,x,P,E,T,b=e[0],D=e[1],L=e[2],_=Math.sqrt(b*b+D*D+L*L);return Math.abs(_)<a.EPSILON?null:(_=1/_,b*=_,D*=_,L*=_,u=Math.sin(r),o=Math.cos(r),i=1-o,c=n[0],f=n[1],s=n[2],h=n[3],M=n[4],l=n[5],v=n[6],m=n[7],p=n[8],d=n[9],A=n[10],R=n[11],w=b*b*i+o,q=D*b*i+L*u,Y=L*b*i-D*u,g=b*D*i-L*u,y=D*D*i+o,x=L*D*i+b*u,P=b*L*i+D*u,E=D*L*i-b*u,T=L*L*i+o,t[0]=c*w+M*q+p*Y,t[1]=f*w+l*q+d*Y,t[2]=s*w+v*q+A*Y,t[3]=h*w+m*q+R*Y,t[4]=c*g+M*y+p*x,t[5]=f*g+l*y+d*x,t[6]=s*g+v*y+A*x,t[7]=h*g+m*y+R*x,t[8]=c*P+M*E+p*T,t[9]=f*P+l*E+d*T,t[10]=s*P+v*E+A*T,t[11]=h*P+m*E+R*T,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)},e.rotateX=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[4],o=n[5],i=n[6],c=n[7],f=n[8],s=n[9],h=n[10],M=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=u*e+f*a,t[5]=o*e+s*a,t[6]=i*e+h*a,t[7]=c*e+M*a,t[8]=f*e-u*a,t[9]=s*e-o*a,t[10]=h*e-i*a,t[11]=M*e-c*a,t},e.rotateY=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[0],o=n[1],i=n[2],c=n[3],f=n[8],s=n[9],h=n[10],M=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*e-f*a,t[1]=o*e-s*a,t[2]=i*e-h*a,t[3]=c*e-M*a,t[8]=u*a+f*e,t[9]=o*a+s*e,t[10]=i*a+h*e,t[11]=c*a+M*e,t},e.rotateZ=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[0],o=n[1],i=n[2],c=n[3],f=n[4],s=n[5],h=n[6],M=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*e+f*a,t[1]=o*e+s*a,t[2]=i*e+h*a,t[3]=c*e+M*a,t[4]=f*e-u*a,t[5]=s*e-o*a,t[6]=h*e-i*a,t[7]=M*e-c*a,t},e.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t},e.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},e.fromRotation=function(t,n,r){var e,u,o,i=r[0],c=r[1],f=r[2],s=Math.sqrt(i*i+c*c+f*f);return Math.abs(s)<a.EPSILON?null:(s=1/s,i*=s,c*=s,f*=s,e=Math.sin(n),u=Math.cos(n),o=1-u,t[0]=i*i*o+u,t[1]=c*i*o+f*e,t[2]=f*i*o-c*e,t[3]=0,t[4]=i*c*o-f*e,t[5]=c*c*o+u,t[6]=f*c*o+i*e,t[7]=0,t[8]=i*f*o+c*e,t[9]=c*f*o-i*e,t[10]=f*f*o+u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)},e.fromXRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},e.fromYRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},e.fromZRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},e.fromRotationTranslation=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=a+a,c=e+e,f=u+u,s=a*i,h=a*c,M=a*f,l=e*c,v=e*f,m=u*f,p=o*i,d=o*c,A=o*f;return t[0]=1-(l+m),t[1]=h+A,t[2]=M-d,t[3]=0,t[4]=h-A,t[5]=1-(s+m),t[6]=v+p,t[7]=0,t[8]=M+d,t[9]=v-p,t[10]=1-(s+l),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},e.fromRotationTranslationScale=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=n[3],c=e+e,f=u+u,s=o+o,h=e*c,M=e*f,l=e*s,v=u*f,m=u*s,p=o*s,d=i*c,A=i*f,R=i*s,w=a[0],q=a[1],Y=a[2];return t[0]=(1-(v+p))*w,t[1]=(M+R)*w,t[2]=(l-A)*w,t[3]=0,t[4]=(M-R)*q,t[5]=(1-(h+p))*q,t[6]=(m+d)*q,t[7]=0,t[8]=(l+A)*Y,t[9]=(m-d)*Y,t[10]=(1-(h+v))*Y,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},e.fromRotationTranslationScaleOrigin=function(t,n,r,a,e){var u=n[0],o=n[1],i=n[2],c=n[3],f=u+u,s=o+o,h=i+i,M=u*f,l=u*s,v=u*h,m=o*s,p=o*h,d=i*h,A=c*f,R=c*s,w=c*h,q=a[0],Y=a[1],g=a[2],y=e[0],x=e[1],P=e[2];return t[0]=(1-(m+d))*q,t[1]=(l+w)*q,t[2]=(v-R)*q,t[3]=0,t[4]=(l-w)*Y,t[5]=(1-(M+d))*Y,t[6]=(p+A)*Y,t[7]=0,t[8]=(v+R)*g,t[9]=(p-A)*g,t[10]=(1-(M+m))*g,t[11]=0,t[12]=r[0]+y-(t[0]*y+t[4]*x+t[8]*P),t[13]=r[1]+x-(t[1]*y+t[5]*x+t[9]*P),t[14]=r[2]+P-(t[2]*y+t[6]*x+t[10]*P),t[15]=1,t},e.fromQuat=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r+r,i=a+a,c=e+e,f=r*o,s=a*o,h=a*i,M=e*o,l=e*i,v=e*c,m=u*o,p=u*i,d=u*c;return t[0]=1-h-v,t[1]=s+d,t[2]=M-p,t[3]=0,t[4]=s-d,t[5]=1-f-v,t[6]=l+m,t[7]=0,t[8]=M+p,t[9]=l-m,t[10]=1-f-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},e.frustum=function(t,n,r,a,e,u,o){var i=1/(r-n),c=1/(e-a),f=1/(u-o);return t[0]=2*u*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*u*c,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(e+a)*c,t[10]=(o+u)*f,t[11]=-1,t[12]=0,t[13]=0,t[14]=o*u*2*f,t[15]=0,t},e.perspective=function(t,n,r,a,e){var u=1/Math.tan(n/2),o=1/(a-e);return t[0]=u/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(e+a)*o,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*e*a*o,t[15]=0,t},e.perspectiveFromFieldOfView=function(t,n,r,a){var e=Math.tan(n.upDegrees*Math.PI/180),u=Math.tan(n.downDegrees*Math.PI/180),o=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),c=2/(o+i),f=2/(e+u);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=f,t[6]=0,t[7]=0,t[8]=-((o-i)*c*.5),t[9]=(e-u)*f*.5,t[10]=a/(r-a),t[11]=-1,t[12]=0,t[13]=0,t[14]=a*r/(r-a),t[15]=0,t},e.ortho=function(t,n,r,a,e,u,o){var i=1/(n-r),c=1/(a-e),f=1/(u-o);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*f,t[11]=0,t[12]=(n+r)*i,t[13]=(e+a)*c,t[14]=(o+u)*f,t[15]=1,t},e.lookAt=function(t,n,r,u){var o,i,c,f,s,h,M,l,v,m,p=n[0],d=n[1],A=n[2],R=u[0],w=u[1],q=u[2],Y=r[0],g=r[1],y=r[2];return Math.abs(p-Y)<a.EPSILON&&Math.abs(d-g)<a.EPSILON&&Math.abs(A-y)<a.EPSILON?e.identity(t):(M=p-Y,l=d-g,v=A-y,m=1/Math.sqrt(M*M+l*l+v*v),M*=m,l*=m,v*=m,o=w*v-q*l,i=q*M-R*v,c=R*l-w*M,m=Math.sqrt(o*o+i*i+c*c),m?(m=1/m,o*=m,i*=m,c*=m):(o=0,i=0,c=0),f=l*c-v*i,s=v*o-M*c,h=M*i-l*o,m=Math.sqrt(f*f+s*s+h*h),m?(m=1/m,f*=m,s*=m,h*=m):(f=0,s=0,h=0),t[0]=o,t[1]=f,t[2]=M,t[3]=0,t[4]=i,t[5]=s,t[6]=l,t[7]=0,t[8]=c,t[9]=h,t[10]=v,t[11]=0,t[12]=-(o*p+i*d+c*A),t[13]=-(f*p+s*d+h*A),t[14]=-(M*p+l*d+v*A),t[15]=1,t)},e.str=function(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"},e.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))},t.exports=e},function(t,n,r){var a=r(1),e=r(4),u=r(7),o=r(8),i={};i.create=function(){var t=new a.ARRAY_TYPE(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},i.rotationTo=function(){var t=u.create(),n=u.fromValues(1,0,0),r=u.fromValues(0,1,0);return function(a,e,o){var c=u.dot(e,o);return-.999999>c?(u.cross(t,n,e),u.length(t)<1e-6&&u.cross(t,r,e),u.normalize(t,t),i.setAxisAngle(a,t,Math.PI),a):c>.999999?(a[0]=0,a[1]=0,a[2]=0,a[3]=1,a):(u.cross(t,e,o),a[0]=t[0],a[1]=t[1],a[2]=t[2],a[3]=1+c,i.normalize(a,a))}}(),i.setAxes=function(){var t=e.create();return function(n,r,a,e){return t[0]=a[0],t[3]=a[1],t[6]=a[2],t[1]=e[0],t[4]=e[1],t[7]=e[2],t[2]=-r[0],t[5]=-r[1],t[8]=-r[2],i.normalize(n,i.fromMat3(n,t))}}(),i.clone=o.clone,i.fromValues=o.fromValues,i.copy=o.copy,i.set=o.set,i.identity=function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},i.setAxisAngle=function(t,n,r){r=.5*r;var a=Math.sin(r);return t[0]=a*n[0],t[1]=a*n[1],t[2]=a*n[2],t[3]=Math.cos(r),t},i.add=o.add,i.multiply=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],c=r[1],f=r[2],s=r[3];return t[0]=a*s+o*i+e*f-u*c,t[1]=e*s+o*c+u*i-a*f,t[2]=u*s+o*f+a*c-e*i,t[3]=o*s-a*i-e*c-u*f,t},i.mul=i.multiply,i.scale=o.scale,i.rotateX=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=a*c+o*i,t[1]=e*c+u*i,t[2]=u*c-e*i,t[3]=o*c-a*i,t},i.rotateY=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=a*c-u*i,t[1]=e*c+o*i,t[2]=u*c+a*i,t[3]=o*c-e*i,t},i.rotateZ=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=a*c+e*i,t[1]=e*c-a*i,t[2]=u*c+o*i,t[3]=o*c-u*i,t},i.calculateW=function(t,n){var r=n[0],a=n[1],e=n[2];return t[0]=r,t[1]=a,t[2]=e,t[3]=Math.sqrt(Math.abs(1-r*r-a*a-e*e)),t},i.dot=o.dot,i.lerp=o.lerp,i.slerp=function(t,n,r,a){var e,u,o,i,c,f=n[0],s=n[1],h=n[2],M=n[3],l=r[0],v=r[1],m=r[2],p=r[3];return u=f*l+s*v+h*m+M*p,0>u&&(u=-u,l=-l,v=-v,m=-m,p=-p),1-u>1e-6?(e=Math.acos(u),o=Math.sin(e),i=Math.sin((1-a)*e)/o,c=Math.sin(a*e)/o):(i=1-a,c=a),t[0]=i*f+c*l,t[1]=i*s+c*v,t[2]=i*h+c*m,t[3]=i*M+c*p,t},i.sqlerp=function(){var t=i.create(),n=i.create();return function(r,a,e,u,o,c){return i.slerp(t,a,o,c),i.slerp(n,e,u,c),i.slerp(r,t,n,2*c*(1-c)),r}}(),i.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*r+a*a+e*e+u*u,i=o?1/o:0;return t[0]=-r*i,t[1]=-a*i,t[2]=-e*i,t[3]=u*i,t},i.conjugate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t},i.length=o.length,i.len=i.length,i.squaredLength=o.squaredLength,i.sqrLen=i.squaredLength,i.normalize=o.normalize,i.fromMat3=function(t,n){var r,a=n[0]+n[4]+n[8];if(a>0)r=Math.sqrt(a+1),t[3]=.5*r,r=.5/r,t[0]=(n[5]-n[7])*r,t[1]=(n[6]-n[2])*r,t[2]=(n[1]-n[3])*r;else{var e=0;n[4]>n[0]&&(e=1),n[8]>n[3*e+e]&&(e=2);var u=(e+1)%3,o=(e+2)%3;r=Math.sqrt(n[3*e+e]-n[3*u+u]-n[3*o+o]+1),t[e]=.5*r,r=.5/r,t[3]=(n[3*u+o]-n[3*o+u])*r,t[u]=(n[3*u+e]+n[3*e+u])*r,t[o]=(n[3*o+e]+n[3*e+o])*r}return t},i.str=function(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},t.exports=i},function(t,n,r){var a=r(1),e={};e.create=function(){var t=new a.ARRAY_TYPE(3);return t[0]=0,t[1]=0,t[2]=0,t},e.clone=function(t){var n=new a.ARRAY_TYPE(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n},e.fromValues=function(t,n,r){var e=new a.ARRAY_TYPE(3);return e[0]=t,e[1]=n,e[2]=r,e},e.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t},e.set=function(t,n,r,a){return t[0]=n,t[1]=r,t[2]=a,t},e.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t},e.subtract=function(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t},e.sub=e.subtract,e.multiply=function(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t},e.mul=e.multiply,e.divide=function(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t},e.div=e.divide,e.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t},e.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t},e.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t},e.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t},e.distance=function(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2];return Math.sqrt(r*r+a*a+e*e)},e.dist=e.distance,e.squaredDistance=function(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2];return r*r+a*a+e*e},e.sqrDist=e.squaredDistance,e.length=function(t){var n=t[0],r=t[1],a=t[2];return Math.sqrt(n*n+r*r+a*a)},e.len=e.length,e.squaredLength=function(t){var n=t[0],r=t[1],a=t[2];return n*n+r*r+a*a},e.sqrLen=e.squaredLength,e.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t},e.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t},e.normalize=function(t,n){var r=n[0],a=n[1],e=n[2],u=r*r+a*a+e*e;return u>0&&(u=1/Math.sqrt(u),t[0]=n[0]*u,t[1]=n[1]*u,t[2]=n[2]*u),t},e.dot=function(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]},e.cross=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[0],i=r[1],c=r[2];return t[0]=e*c-u*i,t[1]=u*o-a*c,t[2]=a*i-e*o,t},e.lerp=function(t,n,r,a){var e=n[0],u=n[1],o=n[2];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t[2]=o+a*(r[2]-o),t},e.hermite=function(t,n,r,a,e,u){var o=u*u,i=o*(2*u-3)+1,c=o*(u-2)+u,f=o*(u-1),s=o*(3-2*u);return t[0]=n[0]*i+r[0]*c+a[0]*f+e[0]*s,t[1]=n[1]*i+r[1]*c+a[1]*f+e[1]*s,t[2]=n[2]*i+r[2]*c+a[2]*f+e[2]*s,t},e.bezier=function(t,n,r,a,e,u){var o=1-u,i=o*o,c=u*u,f=i*o,s=3*u*i,h=3*c*o,M=c*u;return t[0]=n[0]*f+r[0]*s+a[0]*h+e[0]*M,t[1]=n[1]*f+r[1]*s+a[1]*h+e[1]*M,t[2]=n[2]*f+r[2]*s+a[2]*h+e[2]*M,t},e.random=function(t,n){n=n||1;var r=2*a.RANDOM()*Math.PI,e=2*a.RANDOM()-1,u=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*u,t[1]=Math.sin(r)*u,t[2]=e*n,t},e.transformMat4=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[3]*a+r[7]*e+r[11]*u+r[15];return o=o||1,t[0]=(r[0]*a+r[4]*e+r[8]*u+r[12])/o,t[1]=(r[1]*a+r[5]*e+r[9]*u+r[13])/o,t[2]=(r[2]*a+r[6]*e+r[10]*u+r[14])/o,t},e.transformMat3=function(t,n,r){var a=n[0],e=n[1],u=n[2];return t[0]=a*r[0]+e*r[3]+u*r[6],t[1]=a*r[1]+e*r[4]+u*r[7],t[2]=a*r[2]+e*r[5]+u*r[8],t},e.transformQuat=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[0],i=r[1],c=r[2],f=r[3],s=f*a+i*u-c*e,h=f*e+c*a-o*u,M=f*u+o*e-i*a,l=-o*a-i*e-c*u;return t[0]=s*f+l*-o+h*-c-M*-i,t[1]=h*f+l*-i+M*-o-s*-c,t[2]=M*f+l*-c+s*-i-h*-o,t},e.rotateX=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[0],u[1]=e[1]*Math.cos(a)-e[2]*Math.sin(a),u[2]=e[1]*Math.sin(a)+e[2]*Math.cos(a),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},e.rotateY=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[2]*Math.sin(a)+e[0]*Math.cos(a),u[1]=e[1],u[2]=e[2]*Math.cos(a)-e[0]*Math.sin(a),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},e.rotateZ=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[0]*Math.cos(a)-e[1]*Math.sin(a),u[1]=e[0]*Math.sin(a)+e[1]*Math.cos(a),u[2]=e[2],t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},e.forEach=function(){var t=e.create();return function(n,r,a,e,u,o){var i,c;for(r||(r=3),a||(a=0),c=e?Math.min(e*r+a,n.length):n.length,i=a;c>i;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],u(t,t,o),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2];return n}}(),e.angle=function(t,n){var r=e.fromValues(t[0],t[1],t[2]),a=e.fromValues(n[0],n[1],n[2]);e.normalize(r,r),e.normalize(a,a);var u=e.dot(r,a);return u>1?0:Math.acos(u)},e.str=function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},t.exports=e},function(t,n,r){var a=r(1),e={};e.create=function(){var t=new a.ARRAY_TYPE(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t},e.clone=function(t){var n=new a.ARRAY_TYPE(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},e.fromValues=function(t,n,r,e){var u=new a.ARRAY_TYPE(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u},e.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},e.set=function(t,n,r,a,e){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t},e.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t},e.subtract=function(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t},e.sub=e.subtract,e.multiply=function(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t},e.mul=e.multiply,e.divide=function(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t},e.div=e.divide,e.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t},e.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t},e.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t},e.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t},e.distance=function(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2],u=n[3]-t[3];return Math.sqrt(r*r+a*a+e*e+u*u)},e.dist=e.distance,e.squaredDistance=function(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2],u=n[3]-t[3];return r*r+a*a+e*e+u*u},e.sqrDist=e.squaredDistance,e.length=function(t){var n=t[0],r=t[1],a=t[2],e=t[3];return Math.sqrt(n*n+r*r+a*a+e*e)},e.len=e.length,e.squaredLength=function(t){var n=t[0],r=t[1],a=t[2],e=t[3];return n*n+r*r+a*a+e*e},e.sqrLen=e.squaredLength,e.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t},e.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t},e.normalize=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*r+a*a+e*e+u*u;return o>0&&(o=1/Math.sqrt(o),t[0]=r*o,t[1]=a*o,t[2]=e*o,t[3]=u*o),t},e.dot=function(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]},e.lerp=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=n[3];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t[2]=o+a*(r[2]-o),t[3]=i+a*(r[3]-i),t},e.random=function(t,n){return n=n||1,t[0]=a.RANDOM(),t[1]=a.RANDOM(),t[2]=a.RANDOM(),t[3]=a.RANDOM(),e.normalize(t,t),e.scale(t,t,n),t},e.transformMat4=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3];return t[0]=r[0]*a+r[4]*e+r[8]*u+r[12]*o,t[1]=r[1]*a+r[5]*e+r[9]*u+r[13]*o,t[2]=r[2]*a+r[6]*e+r[10]*u+r[14]*o,t[3]=r[3]*a+r[7]*e+r[11]*u+r[15]*o,t},e.transformQuat=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[0],i=r[1],c=r[2],f=r[3],s=f*a+i*u-c*e,h=f*e+c*a-o*u,M=f*u+o*e-i*a,l=-o*a-i*e-c*u;return t[0]=s*f+l*-o+h*-c-M*-i,t[1]=h*f+l*-i+M*-o-s*-c,t[2]=M*f+l*-c+s*-i-h*-o,t[3]=n[3],t},e.forEach=function(){var t=e.create();return function(n,r,a,e,u,o){var i,c;for(r||(r=4),a||(a=0),c=e?Math.min(e*r+a,n.length):n.length,i=a;c>i;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],u(t,t,o),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}(),e.str=function(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},t.exports=e},function(t,n,r){var a=r(1),e={};e.create=function(){var t=new a.ARRAY_TYPE(2);return t[0]=0,t[1]=0,t},e.clone=function(t){var n=new a.ARRAY_TYPE(2);return n[0]=t[0],n[1]=t[1],n},e.fromValues=function(t,n){var r=new a.ARRAY_TYPE(2);return r[0]=t,r[1]=n,r},e.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t},e.set=function(t,n,r){return t[0]=n,t[1]=r,t},e.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t},e.subtract=function(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t},e.sub=e.subtract,e.multiply=function(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t},e.mul=e.multiply,e.divide=function(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t},e.div=e.divide,e.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t},e.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t},e.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t},e.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t},e.distance=function(t,n){var r=n[0]-t[0],a=n[1]-t[1];return Math.sqrt(r*r+a*a)},e.dist=e.distance,e.squaredDistance=function(t,n){var r=n[0]-t[0],a=n[1]-t[1];return r*r+a*a},e.sqrDist=e.squaredDistance,e.length=function(t){var n=t[0],r=t[1];return Math.sqrt(n*n+r*r)},e.len=e.length,e.squaredLength=function(t){var n=t[0],r=t[1];return n*n+r*r},e.sqrLen=e.squaredLength,e.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t},e.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t},e.normalize=function(t,n){var r=n[0],a=n[1],e=r*r+a*a;return e>0&&(e=1/Math.sqrt(e),t[0]=n[0]*e,t[1]=n[1]*e),t},e.dot=function(t,n){return t[0]*n[0]+t[1]*n[1]},e.cross=function(t,n,r){var a=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=a,t},e.lerp=function(t,n,r,a){var e=n[0],u=n[1];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t},e.random=function(t,n){n=n||1;var r=2*a.RANDOM()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t},e.transformMat2=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[2]*e,t[1]=r[1]*a+r[3]*e,t},e.transformMat2d=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[2]*e+r[4],t[1]=r[1]*a+r[3]*e+r[5],t},e.transformMat3=function(t,n,r){
var a=n[0],e=n[1];return t[0]=r[0]*a+r[3]*e+r[6],t[1]=r[1]*a+r[4]*e+r[7],t},e.transformMat4=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[4]*e+r[12],t[1]=r[1]*a+r[5]*e+r[13],t},e.forEach=function(){var t=e.create();return function(n,r,a,e,u,o){var i,c;for(r||(r=2),a||(a=0),c=e?Math.min(e*r+a,n.length):n.length,i=a;c>i;i+=r)t[0]=n[i],t[1]=n[i+1],u(t,t,o),n[i]=t[0],n[i+1]=t[1];return n}}(),e.str=function(t){return"vec2("+t[0]+", "+t[1]+")"},t.exports=e}])});

'use strict';

// In node, the script-src for gl-matrix-min above brings in glmatrix into
// a module, instead of into the global scope. Whereas, Tracing code
// assumes that glMatrix is in the global scope. So, in Node only, we
// require() it in, and then take all its exports and shove them into the
// global scope by hand.
(function(global) {
  if (tr.isNode) {
    const glMatrixAbsPath = HTMLImportsLoader.hrefToAbsolutePath(
        '/gl-matrix-min.js');
    const glMatrixModule = require(glMatrixAbsPath);
    for (const exportName in glMatrixModule) {
      global[exportName] = glMatrixModule[exportName];
    }
  }
})(this);


'use strict';

tr.exportTo('tr.b.math', function() {
  const PREFERRED_NUMBER_SERIES_MULTIPLIERS = [1, 2, 5, 10];

  /* Returns true when x and y are within delta of each other. */
  function approximately(x, y, delta) {
    if (delta === undefined) delta = 1e-9;
    return Math.abs(x - y) < delta;
  }

  function clamp(x, lo, hi) {
    return Math.min(Math.max(x, lo), hi);
  }

  function lerp(percentage, lo, hi) {
    const range = hi - lo;
    return lo + percentage * range;
  }

  function normalize(value, lo, hi) {
    return (value - lo) / (hi - lo);
  }

  function deg2rad(deg) {
    return (Math.PI * deg) / 180.0;
  }

  /* The Gauss error function gives the probability that a measurement (which is
   * under the influence of normally distributed errors with standard deviation
   * sigma = 1) is less than x from the mean value of the standard normal
   * distribution.
   * https://www.desmos.com/calculator/t1v4bdpske
   *
   * @param {number} x A tolerance for error.
   * @return {number} The probability that a measurement is less than |x| from
   * the mean value of the standard normal distribution.
   */
  function erf(x) {
    // save the sign of x
    // erf(-x) = -erf(x);
    const sign = (x >= 0) ? 1 : -1;
    x = Math.abs(x);

    // constants
    const a1 = 0.254829592;
    const a2 = -0.284496736;
    const a3 = 1.421413741;
    const a4 = -1.453152027;
    const a5 = 1.061405429;
    const p = 0.3275911;

    // Abramowitz and Stegun formula 7.1.26
    // maximum error: 1.5e-7
    const t = 1.0 / (1.0 + p * x);
    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *
      Math.exp(-x * x);
    return sign * y;
  }

  const tmpVec2 = vec2.create();
  const tmpVec2b = vec2.create();
  const tmpVec4 = vec4.create();
  const tmpMat2d = mat2d.create();

  vec2.createFromArray = function(arr) {
    if (arr.length !== 2) throw new Error('Should be length 2');
    const v = vec2.create();
    vec2.set(v, arr[0], arr[1]);
    return v;
  };

  vec2.createXY = function(x, y) {
    const v = vec2.create();
    vec2.set(v, x, y);
    return v;
  };

  vec2.toString = function(a) {
    return '[' + a[0] + ', ' + a[1] + ']';
  };

  vec2.addTwoScaledUnitVectors = function(out, u1, scale1, u2, scale2) {
    // out = u1 * scale1 + u2 * scale2
    vec2.scale(tmpVec2, u1, scale1);
    vec2.scale(tmpVec2b, u2, scale2);
    vec2.add(out, tmpVec2, tmpVec2b);
  };

  vec2.interpolatePiecewiseFunction = function(points, x) {
    if (x < points[0][0]) return points[0][1];
    for (let i = 1; i < points.length; ++i) {
      if (x < points[i][0]) {
        const percent = normalize(x, points[i - 1][0], points[i][0]);
        return lerp(percent, points[i - 1][1], points[i][1]);
      }
    }
    return points[points.length - 1][1];
  };

  vec3.createXYZ = function(x, y, z) {
    const v = vec3.create();
    vec3.set(v, x, y, z);
    return v;
  };

  vec3.toString = function(a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
  };

  mat2d.translateXY = function(out, x, y) {
    vec2.set(tmpVec2, x, y);
    mat2d.translate(out, out, tmpVec2);
  };

  mat2d.scaleXY = function(out, x, y) {
    vec2.set(tmpVec2, x, y);
    mat2d.scale(out, out, tmpVec2);
  };

  vec4.unitize = function(out, a) {
    out[0] = a[0] / a[3];
    out[1] = a[1] / a[3];
    out[2] = a[2] / a[3];
    out[3] = 1;
    return out;
  };

  vec2.copyFromVec4 = function(out, a) {
    vec4.unitize(tmpVec4, a);
    vec2.copy(out, tmpVec4);
  };

  /**
   * @param {number} x
   * @param {number=} opt_base Defaults to 10
   * @return {number}
   */
  function logOrLog10(x, base) {
    if (base === 10) return Math.log10(x);
    return Math.log(x) / Math.log(base);
  }

  /**
   * @param {number} x
   * @param {number=} opt_base Defaults to 10
   * @return {number}
   */
  function lesserPower(x, opt_base) {
    const base = opt_base || 10;
    return Math.pow(base, Math.floor(logOrLog10(x, base)));
  }

  /**
   * @param {number} x
   * @param {number=} opt_base Defaults to 10
   * @return {number}
   */
  function greaterPower(x, opt_base) {
    const base = opt_base || 10;
    return Math.pow(base, Math.ceil(logOrLog10(x, base)));
  }

  function lesserWholeNumber(x) {
    if (x === 0) return 0;
    const pow10 = (x < 0) ? -lesserPower(-x) : lesserPower(x);
    return pow10 * Math.floor(x / pow10);
  }

  function greaterWholeNumber(x) {
    if (x === 0) return 0;
    const pow10 = (x < 0) ? -lesserPower(-x) : lesserPower(x);
    return pow10 * Math.ceil(x / pow10);
  }

  /**
   *  Uses the 1-2-5 series to find the closest prefered number to min
   *  whose absolute value is at least the absolute value of |min|.
   *  https://en.wikipedia.org/wiki/Preferred_number
   */
  function preferredNumberLargerThanMin(min) {
    const absMin = Math.abs(min);
    // The conservative guess is the largest power of 10 less than
    // or equal to |absMin|.
    const conservativeGuess = tr.b.math.lesserPower(absMin);
    let minPreferedNumber = undefined;
    for (const multiplier of PREFERRED_NUMBER_SERIES_MULTIPLIERS) {
      const tightenedGuess = conservativeGuess * multiplier;
      if (tightenedGuess >= absMin) {
        minPreferedNumber = tightenedGuess;
        break;
      }
    }
    if (minPreferedNumber === undefined) {
      throw new Error('Could not compute preferred number for ' + min);
    }
    if (min < 0) minPreferedNumber *= -1;
    return minPreferedNumber;
  }

  return {
    approximately,
    clamp,
    lerp,
    normalize,
    deg2rad,
    erf,
    lesserPower,
    greaterPower,
    lesserWholeNumber,
    greaterWholeNumber,
    preferredNumberLargerThanMin,
  };
});


'use strict';

/**
 * @fileoverview Quick range computations.
 */
tr.exportTo('tr.b.math', function() {
  function Range() {
    this.isEmpty_ = true;
    this.min_ = undefined;
    this.max_ = undefined;
  }

  Range.prototype = {
    __proto__: Object.prototype,

    clone() {
      if (this.isEmpty) return new Range();
      return Range.fromExplicitRange(this.min_, this.max_);
    },

    reset() {
      this.isEmpty_ = true;
      this.min_ = undefined;
      this.max_ = undefined;
    },

    get isEmpty() {
      return this.isEmpty_;
    },

    addRange(range) {
      if (range.isEmpty) return;
      this.addValue(range.min);
      this.addValue(range.max);
    },

    addValue(value) {
      if (this.isEmpty_) {
        this.max_ = value;
        this.min_ = value;
        this.isEmpty_ = false;
        return;
      }
      this.max_ = Math.max(this.max_, value);
      this.min_ = Math.min(this.min_, value);
    },

    set min(min) {
      this.isEmpty_ = false;
      this.min_ = min;
    },

    get min() {
      if (this.isEmpty_) return undefined;
      return this.min_;
    },

    get max() {
      if (this.isEmpty_) return undefined;
      return this.max_;
    },

    set max(max) {
      this.isEmpty_ = false;
      this.max_ = max;
    },

    get range() {
      if (this.isEmpty_) return undefined;
      return this.max_ - this.min_;
    },

    get center() {
      return (this.min_ + this.max_) * 0.5;
    },

    get duration() {
      if (this.isEmpty_) return 0;
      return this.max_ - this.min_;
    },

    /**
     * Get a new Range spanning the powers (of opt_base || 10) that enclose
     * |this| Range.
     * If |this| is empty, returns a new empty Range.
     *
     * @param {number=} opt_base Defaults to 10.
     * @return {!Range}
     */
    enclosingPowers(opt_base) {
      if (this.isEmpty) return new Range();
      return Range.fromExplicitRange(
          tr.b.math.lesserPower(this.min_, opt_base),
          tr.b.math.greaterPower(this.max_, opt_base));
    },

    normalize(x) {
      return tr.b.math.normalize(x, this.min, this.max);
    },

    lerp(x) {
      return tr.b.math.lerp(x, this.min, this.max);
    },

    clamp(x) {
      return tr.b.math.clamp(x, this.min, this.max);
    },

    equals(that) {
      if (this.isEmpty && that.isEmpty) return true;
      if (this.isEmpty !== that.isEmpty) return false;
      return (tr.b.math.approximately(this.min, that.min) &&
          tr.b.math.approximately(this.max, that.max));
    },

    containsExplicitRangeInclusive(min, max) {
      if (this.isEmpty) return false;
      return this.min_ <= min && max <= this.max_;
    },

    containsExplicitRangeExclusive(min, max) {
      if (this.isEmpty) return false;
      return this.min_ < min && max < this.max_;
    },

    intersectsExplicitRangeInclusive(min, max) {
      if (this.isEmpty) return false;
      return this.min_ <= max && min <= this.max_;
    },

    intersectsExplicitRangeExclusive(min, max) {
      if (this.isEmpty) return false;
      return this.min_ < max && min < this.max_;
    },

    containsRangeInclusive(range) {
      if (range.isEmpty) return false;
      return this.containsExplicitRangeInclusive(range.min_, range.max_);
    },

    containsRangeExclusive(range) {
      if (range.isEmpty) return false;
      return this.containsExplicitRangeExclusive(range.min_, range.max_);
    },

    intersectsRangeInclusive(range) {
      if (range.isEmpty) return false;
      return this.intersectsExplicitRangeInclusive(range.min_, range.max_);
    },

    intersectsRangeExclusive(range) {
      if (range.isEmpty) return false;
      return this.intersectsExplicitRangeExclusive(range.min_, range.max_);
    },

    findExplicitIntersectionDuration(min, max) {
      min = Math.max(this.min, min);
      max = Math.min(this.max, max);
      if (max < min) return 0;
      return max - min;
    },

    findIntersection(range) {
      if (this.isEmpty || range.isEmpty) return new Range();

      const min = Math.max(this.min, range.min);
      const max = Math.min(this.max, range.max);

      if (max < min) return new Range();

      return Range.fromExplicitRange(min, max);
    },

    toJSON() {
      if (this.isEmpty_) return {isEmpty: true};
      return {
        isEmpty: false,
        max: this.max,
        min: this.min
      };
    },

    /**
     * Returns a slice of |sortedArray| that intersects with this range
     * inclusively.
     * If the range does not have a min, it is treated as unbounded from below.
     * Similarly, if max is undefined, the range is unbounded from above.
     *
     * @param {Array} sortedArray The sorted array of elements to be filtered.
     * @param {Funcation=} opt_keyFunc A function that extracts a numeric value,
     *        to be used in comparisons, from an element of the array. If not
     *        specified, array elements themselves will be used.
     * @param {Object=} opt_this An optional this argument to be passed to
     *        opt_keyFunc.
     */
    filterArray(sortedArray, opt_keyFunc, opt_this) {
      if (this.isEmpty_) return [];

      const keyFunc = opt_keyFunc || (x => x);
      function getValue(obj) {
        return keyFunc.call(opt_this, obj);
      }

      const first = tr.b.findFirstTrueIndexInSortedArray(sortedArray,
          obj => this.min_ === undefined || this.min_ <= getValue(obj));
      const last = tr.b.findFirstTrueIndexInSortedArray(sortedArray,
          obj => this.max_ !== undefined && this.max_ < getValue(obj));
      return sortedArray.slice(first, last);
    }
  };

  Range.fromDict = function(d) {
    if (d.isEmpty === true) return new Range();
    if (d.isEmpty === false) {
      const range = new Range();
      range.min = d.min;
      range.max = d.max;
      return range;
    }
    throw new Error('Not a range');
  };

  Range.fromExplicitRange = function(min, max) {
    const range = new Range();
    range.min = min;
    range.max = max;
    return range;
  };

  Range.compareByMinTimes = function(a, b) {
    if (!a.isEmpty && !b.isEmpty) return a.min_ - b.min_;

    if (a.isEmpty && !b.isEmpty) return -1;

    if (!a.isEmpty && b.isEmpty) return 1;

    return 0;
  };

  /**
  * Subtracts the intersection of |rangeA| and |rangeB| from |rangeA| and
  * returns the remaining ranges as return. |rangeA| and |rangeB| are
  * not changed during the subtraction.
  *
  * rangeA:       |==========|
  * rangeB:          |===|
  * result:       |==|   |===|
  *
  * @param {tr.b.math.Range} rangeA
  * @param {tr.b.math.Range} rangeB
  * @return {Array.<tr.b.math.Range>} An array of ranges which is the result of
  * the subtraction.
  */
  Range.findDifference = function(rangeA, rangeB) {
    if (!rangeA || rangeA.duration < 0 || !rangeB || rangeB.duration < 0) {
      throw new Error(`Couldn't subtract ranges`);
    }
    const resultRanges = [];

    if (rangeA.isEmpty) return resultRanges;
    if (rangeB.isEmpty) return [rangeA.clone()];

    const intersection = rangeA.findIntersection(rangeB);
    if (intersection.isEmpty) {
      return [rangeA.clone()];
    }
    if (rangeA.duration === 0 && rangeB.duration === 0) {
      if (intersection.empty) return [rangeA.clone()];
      else if (intersection.duration === 0) return resultRanges;
      throw new Error(`Two points' intersection can only be a point or empty`);
    }

    //  rangeA:       |==========|
    //  rangeB:          |===|
    //  result:       |==|   |===|
    const leftRange = tr.b.math.Range.fromExplicitRange(
        rangeA.min, intersection.min);
    if (leftRange.duration > 0) {
      resultRanges.push(leftRange);
    }
    const rightRange = tr.b.math.Range.fromExplicitRange(
        intersection.max, rangeA.max);
    if (rightRange.duration > 0) {
      resultRanges.push(rightRange);
    }
    return resultRanges;
  };

  Range.PERCENT_RANGE = Range.fromExplicitRange(0, 1);
  Object.freeze(Range.PERCENT_RANGE);

  return {
    Range,
  };
});


'use strict';

/**
 * @fileoverview This contains an implementation of the EventTarget interface
 * as defined by DOM Level 2 Events.
 */
tr.exportTo('tr.b', function() {
  /**
   * Creates a new EventTarget. This class implements the DOM level 2
   * EventTarget interface and can be used wherever those are used.
   * @constructor
   */
  function EventTarget() {
  }
  EventTarget.decorate = function(target) {
    for (const k in EventTarget.prototype) {
      if (k === 'decorate') continue;
      const v = EventTarget.prototype[k];
      if (typeof v !== 'function') continue;
      target[k] = v;
    }
  };

  EventTarget.prototype = {

    /**
     * Adds an event listener to the target.
     * @param {string} type The name of the event.
     * @param {!Function|{handleEvent:Function}} handler The handler for the
     *     event. This is called when the event is dispatched.
     */
    addEventListener(type, handler) {
      if (!this.listeners_) {
        this.listeners_ = Object.create(null);
      }
      if (!(type in this.listeners_)) {
        this.listeners_[type] = [handler];
      } else {
        const handlers = this.listeners_[type];
        if (handlers.indexOf(handler) < 0) {
          handlers.push(handler);
        }
      }
    },

    /**
     * Removes an event listener from the target.
     * @param {string} type The name of the event.
     * @param {!Function|{handleEvent:Function}} handler The handler for the
     *     event.
     */
    removeEventListener(type, handler) {
      if (!this.listeners_) return;
      if (type in this.listeners_) {
        const handlers = this.listeners_[type];
        const index = handlers.indexOf(handler);
        if (index >= 0) {
          // Clean up if this was the last listener.
          if (handlers.length === 1) {
            delete this.listeners_[type];
          } else {
            handlers.splice(index, 1);
          }
        }
      }
    },

    /**
     * Dispatches an event and calls all the listeners that are listening to
     * the type of the event.
     * @param {!cr.event.Event} event The event to dispatch.
     * @return {boolean} Whether the default action was prevented. If someone
     *     calls preventDefault on the event object then this returns false.
     */
    dispatchEvent(event) {
      if (!this.listeners_) return true;

      // Since we are using DOM Event objects we need to override some of the
      // properties and methods so that we can emulate this correctly.
      event.__defineGetter__('target', () => this);
      const realPreventDefault = event.preventDefault;
      event.preventDefault = function() {
        realPreventDefault.call(this);
        this.rawReturnValue = false;
      };

      const type = event.type;
      let prevented = 0;
      if (type in this.listeners_) {
        // Clone to prevent removal during dispatch
        const handlers = this.listeners_[type].concat();
        for (let i = 0, handler; handler = handlers[i]; i++) {
          if (handler.handleEvent) {
            prevented |= handler.handleEvent.call(handler, event) === false;
          } else {
            prevented |= handler.call(this, event) === false;
          }
        }
      }

      return !prevented && event.rawReturnValue;
    },

    async dispatchAsync(event) {
      if (!this.listeners_) return true;

      const listeners = this.listeners_[event.type];
      if (listeners === undefined) return;

      // Clone to prevent removal during dispatch
      await Promise.all(listeners.slice().map(listener => {
        if (listener.handleEvent) {
          return listener.handleEvent.call(listener, event);
        }
        return listener.call(this, event);
      }));
    },

    hasEventListener(type) {
      return (this.listeners_ !== undefined &&
              this.listeners_[type] !== undefined);
    }
  };

  return {
    EventTarget,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  let Event;
  if (tr.isHeadless) {
    /**
     * Creates a new event to be used with tr.b.EventTarget or DOM EventTarget
     * objects.
     * @param {string} type The name of the event.
     * @param {boolean=} opt_bubbles Whether the event bubbles.
     *     Default is false.
     * @param {boolean=} opt_preventable Whether the default action of the event
     *     can be prevented.
     * @constructor
     * @extends {Event}
     */
    function HeadlessEvent(type, opt_bubbles, opt_preventable) {
      this.type = type;
      this.bubbles = (opt_bubbles !== undefined ?
          !!opt_bubbles : false);
      this.cancelable = (opt_preventable !== undefined ?
          !!opt_preventable : false);

      this.defaultPrevented = false;
      this.cancelBubble = false;
    }

    HeadlessEvent.prototype = {
      preventDefault() {
        this.defaultPrevented = true;
      },

      stopPropagation() {
        this.cancelBubble = true;
      }
    };
    Event = HeadlessEvent;
  } else {
    /**
     * Creates a new event to be used with tr.b.EventTarget or DOM EventTarget
     * objects.
     * @param {string} type The name of the event.
     * @param {boolean=} opt_bubbles Whether the event bubbles.
     *     Default is false.
     * @param {boolean=} opt_preventable Whether the default action of the event
     *     can be prevented.
     * @constructor
     * @extends {Event}
     */
    function TrEvent(type, opt_bubbles, opt_preventable) {
      const e = tr.doc.createEvent('Event');
      e.initEvent(type, !!opt_bubbles, !!opt_preventable);
      e.__proto__ = global.Event.prototype;
      return e;
    }

    TrEvent.prototype = {
      __proto__: global.Event.prototype
    };
    Event = TrEvent;
  }

  /**
   * Dispatches a simple event on an event target.
   * @param {!EventTarget} target The event target to dispatch the event on.
   * @param {string} type The type of the event.
   * @param {boolean=} opt_bubbles Whether the event bubbles or not.
   * @param {boolean=} opt_cancelable Whether the default action of the event
   *     can be prevented.
   * @param {!Object=} opt_fields
   *
   * @return {boolean} If any of the listeners called {@code preventDefault}
   *     during the dispatch this will return false.
   */
  function dispatchSimpleEvent(target, type, opt_bubbles, opt_cancelable,
      opt_fields) {
    const e = new tr.b.Event(type, opt_bubbles, opt_cancelable);
    Object.assign(e, opt_fields);
    return target.dispatchEvent(e);
  }

  async function dispatchSimpleEventAsync(target, type, opt_fields) {
    const e = new tr.b.Event(type, false, false);
    Object.assign(e, opt_fields);
    return await target.dispatchAsync(e);
  }

  return {
    Event,
    dispatchSimpleEvent,
    dispatchSimpleEventAsync,
  };
});


'use strict';

const GREEK_SMALL_LETTER_MU = String.fromCharCode(956);

tr.exportTo('tr.b', function() {
  const SECONDS_IN_A_MINUTE = 60;
  const SECONDS_IN_AN_HOUR = SECONDS_IN_A_MINUTE * 60;
  const SECONDS_IN_A_DAY = SECONDS_IN_AN_HOUR * 24;
  const SECONDS_IN_A_WEEK = SECONDS_IN_A_DAY * 7;
  const SECONDS_IN_A_YEAR = SECONDS_IN_A_DAY * 365.2422;
  const SECONDS_IN_A_MONTH = SECONDS_IN_A_YEAR / 12;

  const UnitPrefixScale = {};
  const UnitScale = {};

  function defineUnitPrefixScale(name, prefixes) {
    if (UnitPrefixScale[name] !== undefined) {
      throw new Error('Unit prefix scale \'' + name + '\' already exists');
    }
    if (prefixes.AUTO !== undefined) {
      throw new Error('The \'AUTO\' unit prefix is not supported for unit' +
          'prefix scales and cannot be added to scale \'' + name + '\'');
    }

    UnitPrefixScale[name] = prefixes;
  }

  UnitScale.defineUnitScale = function(name, unitScale) {
    if (UnitScale[name] !== undefined) {
      throw new Error('Unit scale \'' + name + '\' already exists');
    }
    if (unitScale.AUTO !== undefined) {
      throw new Error('\'AUTO\' unit scale will be added automatically ' +
          'for unit scale \'' + name + '\'');
    }

    // The 'AUTO' unit scale is used in auto formatting Units. In units using
    // the 'BINARY' UnitScale the absolute formatted value closest to the
    // [1, 1024) interval as possible is used. So 1023 and 1024 bytes are
    // displayed as "1,023.0 B" and "1.0 KiB", respectively.
    unitScale.AUTO = Object.values(unitScale);
    unitScale.AUTO.sort((a, b) => a.value - b.value);

    if (name) UnitScale[name] = unitScale;
    return unitScale;
  };

  UnitScale.defineUnitScaleFromPrefixScale = function(
      baseSymbol, baseName, prefixScale, opt_scaleName) {
    if (baseSymbol === undefined) {
      throw new Error('Cannot create UnitScale with undefined baseSymbol.');
    }
    if (!baseName) {
      throw new Error('Cannot create UnitScale without a baseName.');
    }
    if (!prefixScale) {
      throw new Error('Cannot create UnitScale without a prefix scale.');
    }
    const unitScale = {};
    for (const curPrefix of Object.keys(prefixScale)) {
      const curScale = prefixScale[curPrefix];
      if (curScale.symbol === undefined || !curScale.value) {
        throw new Error(
            `Cannot convert PrefixScale with malformed prefix ${curScale}.`);
      }
      const name = curPrefix === 'NONE' ? baseName : `${curPrefix}_${baseName}`;
      unitScale[name] = {
        value: curScale.value,
        symbol: curScale.symbol + baseSymbol,
        baseSymbol
      };
    }
    return UnitScale.defineUnitScale(opt_scaleName, unitScale);
  };

 /**
  * Converts |value| from |fromScale| (e.g. kilo) to |toScale| (e.g. mega).
  *
  * Returns undefined if |value| is undefined.
  * |fromScale| and |toScale| need not come from the same UnitScale or
  * UnitPrefixScale. But if they are both UnitScales they must have matching
  * or undefined baseSymbol's.
  *
  * @param {(undefined|number)} value
  * @param {!object} fromScale
  * @param {!object} toScale
  * @return {(undefined|number)}
  */
  function convertUnit(value, fromScale, toScale) {
    if (value === undefined) return undefined;
    const fromScaleBase = fromScale.baseSymbol;
    const toScaleBase = toScale.baseSymbol;
    if (fromScaleBase !== undefined && toScaleBase !== undefined &&
        fromScaleBase !== toScaleBase) {
      throw new Error(
          'Cannot convert between units with different base symbols.');
    }
    return value * (fromScale.value / toScale.value);
  }

  // See https://en.wikipedia.org/wiki/Binary_prefix.
  defineUnitPrefixScale('BINARY', {
    NONE: { value: Math.pow(1024, 0), symbol: '' },
    KIBI: { value: Math.pow(1024, 1), symbol: 'Ki' },
    MEBI: { value: Math.pow(1024, 2), symbol: 'Mi' },
    GIBI: { value: Math.pow(1024, 3), symbol: 'Gi' },
    TEBI: { value: Math.pow(1024, 4), symbol: 'Ti' }
  });

  // See https://en.wikipedia.org/wiki/Metric_prefix.
  defineUnitPrefixScale('METRIC', {
    NANO: { value: 1e-9, symbol: 'n' },
    MICRO: { value: 1e-6, symbol: GREEK_SMALL_LETTER_MU },
    MILLI: { value: 1e-3, symbol: 'm' },
    NONE: { value: 1, symbol: ''},
    KILO: { value: 1e3, symbol: 'k'},
    MEGA: { value: 1e6, symbol: 'M'},
    GIGA: { value: 1e9, symbol: 'G'}
  });

  UnitScale.defineUnitScale('TIME', {
    NANO_SEC: { value: 1e-9, symbol: 'ns', baseSymbol: 's'},
    MICRO_SEC: { value: 1e-6, symbol: GREEK_SMALL_LETTER_MU + 's',
      baseSymbol: 's'},
    MILLI_SEC: { value: 1e-3, symbol: 'ms', baseSymbol: 's'},
    SEC: { value: 1, symbol: 's', baseSymbol: 's'},
    MINUTE: { value: SECONDS_IN_A_MINUTE, symbol: 'min', baseSymbol: 's'},
    HOUR: { value: SECONDS_IN_AN_HOUR, symbol: 'hr', baseSymbol: 's'},
    DAY: { value: SECONDS_IN_A_DAY, symbol: 'days', baseSymbol: 's'},
    WEEK: { value: SECONDS_IN_A_WEEK, symbol: 'weeks', baseSymbol: 's'},
    MONTH: { value: SECONDS_IN_A_MONTH, symbol: 'months', baseSymbol: 's'},
    YEAR: { value: SECONDS_IN_A_YEAR, symbol: 'years', baseSymbol: 's'}
  });

  UnitScale.defineUnitScaleFromPrefixScale(
      'B', 'BYTE', UnitPrefixScale.BINARY, 'MEMORY');

  return {
    UnitPrefixScale,
    UnitScale,
    convertUnit,
  };
});


'use strict';

/**
 * @fileoverview Time currentDisplayUnit
 */
tr.exportTo('tr.b', function() {
  const msDisplayMode = {
    scale: 1e-3,
    suffix: 'ms',
    // Compares a < b with adjustments to precision errors.
    roundedLess(a, b) {
      return Math.round(a * 1000) < Math.round(b * 1000);
    },
    formatSpec: {
      unitScale: [tr.b.UnitScale.TIME.MILLI_SEC],
      minimumFractionDigits: 3,
    }
  };

  const nsDisplayMode = {
    scale: 1e-9,
    suffix: 'ns',
    // Compares a < b with adjustments to precision errors.
    roundedLess(a, b) {
      return Math.round(a * 1000000) < Math.round(b * 1000000);
    },
    formatSpec: {
      unitScale: [tr.b.UnitScale.TIME.NANO_SEC],
      maximumFractionDigits: 0
    }
  };

  const TimeDisplayModes = {
    ns: nsDisplayMode,
    ms: msDisplayMode
  };

  return {
    TimeDisplayModes,
  };
});



'use strict';

tr.exportTo('tr.ui.b', function() {
  function iterateElementDeeplyImpl(element, cb, thisArg, includeElement) {
    if (includeElement && cb.call(thisArg, element)) return true;

    if (element.root &&
        element.root !== element &&
        iterateElementDeeplyImpl(element.root, cb, thisArg, false)) {
      // Some elements, most notably Polymer template dom-repeat='...'
      // elements, are their own shadow root. Make sure that we avoid infinite
      // recursion by avoiding these elements.
      return true;
    }
    const children = Polymer.dom(element).children;
    for (let i = 0; i < children.length; i++) {
      if (iterateElementDeeplyImpl(children[i], cb, thisArg, true)) {
        return true;
      }
    }

    return false;
  }

  function iterateElementDeeply(element, cb, thisArg) {
    iterateElementDeeplyImpl(element, cb, thisArg, false);
  }

  function findDeepElementMatchingPredicate(element, predicate) {
    let foundElement = undefined;
    function matches(element) {
      const match = predicate(element);
      if (!match) {
        return false;
      }
      foundElement = element;
      return true;
    }
    iterateElementDeeply(element, matches);
    return foundElement;
  }

  function findDeepElementsMatchingPredicate(element, predicate) {
    const foundElements = [];
    function matches(element) {
      const match = predicate(element);
      if (match) {
        foundElements.push(element);
      }
      return false;
    }
    iterateElementDeeply(element, matches);
    return foundElements;
  }

  function findDeepElementMatching(element, selector) {
    return findDeepElementMatchingPredicate(element, function(element) {
      return element.matches(selector);
    });
  }
  function findDeepElementsMatching(element, selector) {
    return findDeepElementsMatchingPredicate(element, function(element) {
      return element.matches(selector);
    });
  }
  function findDeepElementWithTextContent(element, re) {
    return findDeepElementMatchingPredicate(element, function(element) {
      if (element.children.length !== 0) return false;
      return re.test(Polymer.dom(element).textContent);
    });
  }

  return {
    findDeepElementMatching,
    findDeepElementsMatching,
    findDeepElementMatchingPredicate,
    findDeepElementsMatchingPredicate,
    findDeepElementWithTextContent,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  const TimeDisplayModes = tr.b.TimeDisplayModes;

  const PLUS_MINUS_SIGN = String.fromCharCode(177);

  const CACHED_FORMATTERS = {};
  function getNumberFormatter(minSpec, maxSpec, minCtx, maxCtx) {
    const key = minSpec + '-' + maxSpec + '-' + minCtx + '-' + maxCtx;
    let formatter = CACHED_FORMATTERS[key];
    if (formatter === undefined) {
      let minimumFractionDigits = minCtx !== undefined ? minCtx : minSpec;
      let maximumFractionDigits = maxCtx !== undefined ? maxCtx : maxSpec;

      // If the context overrides only one of the two |*FractionDigits|
      // properties and the other one is provided by the unit, we might need to
      // shift the other property so that
      // |minimumFractionDigits| <= |maximumFractionDigits|.
      if (minimumFractionDigits > maximumFractionDigits) {
        if (minCtx !== undefined && maxCtx === undefined) {
          // Only minimumFractionDigits was overriden by context.
          maximumFractionDigits = minimumFractionDigits;
        } else if (minCtx === undefined && maxCtx !== undefined) {
          // Only maximumFractionDigits was overriden by context.
          minimumFractionDigits = maximumFractionDigits;
        }
      }

      formatter = new Intl.NumberFormat(undefined, {
        minimumFractionDigits,
        maximumFractionDigits,
      });

      CACHED_FORMATTERS[key] = formatter;
    }
    return formatter;
  }

  function max(a, b) {
    if (a === undefined) return b;
    if (b === undefined) return a;
    return a.scale > b.scale ? a : b;
  }

  /** @enum */
  const ImprovementDirection = {
    DONT_CARE: 0,
    BIGGER_IS_BETTER: 1,
    SMALLER_IS_BETTER: 2
  };

  /** @constructor */
  function Unit(unitName, jsonName, scaleBaseUnit, isDelta,
      improvementDirection, formatSpec) {
    this.unitName = unitName;
    this.jsonName = jsonName;
    this.scaleBaseUnit = scaleBaseUnit;
    this.isDelta = isDelta;
    this.improvementDirection = improvementDirection;
    this.formatSpec_ = formatSpec;

    // Example: powerInWattsDelta_biggerIsBetter -> powerInWatts.
    this.baseUnit = undefined;

    // Example: energyInJoules_smallerIsBetter ->
    // energyInJoulesDelta_smallerIsBetter.
    this.correspondingDeltaUnit = undefined;
  }

  Unit.prototype = {
    asJSON() {
      return this.jsonName;
    },

    getUnitScale_(opt_context) {
      let formatSpec = this.formatSpec_;
      let formatSpecWasFunction = false;
      if (typeof formatSpec === 'function') {
        formatSpecWasFunction = true;
        formatSpec = formatSpec();
      }
      const context = opt_context || {};

      let scale = undefined;
      if (context.unitScale) {
        scale = context.unitScale;
      } else if (context.unitPrefix) {
        // TODO(aiolos): Switch all calls to format to use UnitScales instead
        // of UnitPrefixScales. UnitPrefixeScales use in Unit is deprecated.
        const symbol = formatSpec.baseSymbol ?
            formatSpec.baseSymbol : this.scaleBaseUnit.baseSymbol;
        scale = tr.b.UnitScale.defineUnitScaleFromPrefixScale(
            symbol, symbol, [context.unitPrefix]).AUTO;
      } else {
        scale = formatSpec.unitScale;
        if (!scale) {
          // Unit has no conversion value(s). Ex: Watts, count.
          scale = [{
            value: 1,
            symbol: formatSpec.baseSymbol || '',
            baseSymbol: formatSpec.baseSymbol || ''
          }];
          if (!formatSpecWasFunction) formatSpec.unitScale = scale;
        }
      }
      if (!(scale instanceof Array)) {
        throw new Error('Unit has a malformed unit scale.');
      }
      return scale;
    },

    get unitString() {
      const scale = this.getUnitScale_();
      if (!scale) {
        throw new Error(
            'A UnitScale could not be found for Unit ' + this.unitName);
      }
      return scale[0].symbol;
    },

    /**
     * Returns a human readable string representation of the value passed.
     *
     * Example: .00023 formatted using the timeInMsAutoFormat Unit would return
     *   '230 ns' since the base unit scale is ms.
     *
     * @param {number} value - The value to be formatted.
     * @param {Object} [opt_context] - Optional formatting parameters.
     * @param {!tr.b.UnitScale=} [opt_context.unitScale] - A UnitScale to use
     *   while formatting the value instead of this Unit's UnitScale.
     * @param {!tr.b.UnitPrefix=} [opt_context.unitPrefix] - A UnitPrefix that
     *   the value should be formatted into.
     * @param {number} [opt_context.deltaValue] - Format the value based on
     *   this delta between it and another number instead of the actual value.
     */
    format(value, opt_context) {
      let signString = '';
      if (value < 0) {
        signString = '-';
        value = -value;  // Treat positive and negative values symmetrically.
      } else if (this.isDelta) {
        signString = value === 0 ? PLUS_MINUS_SIGN : '+';
      }

      const context = opt_context || {};
      const scale = this.getUnitScale_(context);
      let deltaValue = context.deltaValue === undefined ? value :
          context.deltaValue;
      deltaValue = Math.abs(deltaValue) * this.scaleBaseUnit.value;
      let i = 0;
      while (i < scale.length - 1 &&
             deltaValue / scale[i + 1].value >= 1) {
        i++;
      }
      const selectedSubUnit = scale[i];

      let formatSpec = this.formatSpec_;
      if (typeof formatSpec === 'function') formatSpec = formatSpec();
      let unitString = '';
      if (selectedSubUnit.symbol) {
        if (!formatSpec.avoidSpacePrecedingUnit) unitString = ' ';
        unitString += selectedSubUnit.symbol;
      }

      value = tr.b.convertUnit(value, this.scaleBaseUnit, selectedSubUnit);
      const numberString = getNumberFormatter(
          formatSpec.minimumFractionDigits,
          formatSpec.maximumFractionDigits,
          context.minimumFractionDigits,
          context.maximumFractionDigits).format(value);

      return signString + numberString + unitString;
    }
  };

  Unit.reset = function() {
    Unit.currentTimeDisplayMode = TimeDisplayModes.ms;
  };

  Unit.timestampFromUs = function(us) {
    return tr.b.convertUnit(us, tr.b.UnitPrefixScale.METRIC.MICRO,
        tr.b.UnitPrefixScale.METRIC.MILLI);
  };

  Object.defineProperty(Unit, 'currentTimeDisplayMode', {
    get() {
      return Unit.currentTimeDisplayMode_;
    },
    // Use tr-v-ui-preferred-display-unit element instead of directly setting.
    set(value) {
      if (Unit.currentTimeDisplayMode_ === value) return;

      Unit.currentTimeDisplayMode_ = value;
      Unit.dispatchEvent(new tr.b.Event('display-mode-changed'));
    }
  });

  Unit.didPreferredTimeDisplayUnitChange = function() {
    let largest = undefined;
    // TODO(aiolos): base should not depend on ui. Move the functionality of
    //     searching for preferred-display-unit out of Unit.
    // https://github.com/catapult-project/catapult/issues/3092
    const els = tr.ui.b.findDeepElementsMatching(document.body,
        'tr-v-ui-preferred-display-unit');
    els.forEach(function(el) {
      largest = max(largest, el.preferredTimeDisplayMode);
    });

    Unit.currentTimeDisplayMode = largest === undefined ?
        TimeDisplayModes.ms : largest;
  };

  Unit.byName = {};
  Unit.byJSONName = {};

  Unit.fromJSON = function(object) {
    const u = Unit.byJSONName[object];
    if (u) {
      return u;
    }
    throw new Error(`Unrecognized unit "${object}"`);
  };

  /**
   * Define all combinations of a unit with isDelta and improvementDirection
   * flags. For example, the following code:
   *
   *   Unit.define({
   *     baseUnitName: 'powerInWatts'
   *     baseJsonName: 'W'
   *     formatSpec: {
   *       // Specification of how the unit should be formatted (unit symbol,
   *       // unit prefix, fraction digits, etc), or a function returning such
   *       // a specification.
   *     }
   *   });
   *
   * generates the following six units (JSON names shown in parentheses):
   *
   *   Unit.byName.powerInWatts (W)
   *   Unit.byName.powerInWatts_smallerIsBetter (W_smallerIsBetter)
   *   Unit.byName.powerInWatts_biggerIsBetter (W_biggerIsBetter)
   *   Unit.byName.powerInWattsDelta (WDelta)
   *   Unit.byName.powerInWattsDelta_smallerIsBetter (WDelta_smallerIsBetter)
   *   Unit.byName.powerInWattsDelta_biggerIsBetter (WDelta_biggerIsBetter)
   *
   * with the appropriate flags and formatting code (including +/- prefixes
   * for deltas).
   */
  Unit.define = function(params) {
    const definedUnits = [];

    for (const improvementDirection of Object.values(ImprovementDirection)) {
      const regularUnit =
          Unit.defineUnitVariant_(params, false, improvementDirection);
      const deltaUnit =
          Unit.defineUnitVariant_(params, true, improvementDirection);

      regularUnit.correspondingDeltaUnit = deltaUnit;
      deltaUnit.correspondingDeltaUnit = deltaUnit;
      definedUnits.push(regularUnit, deltaUnit);
    }

    const baseUnit = Unit.byName[params.baseUnitName];
    definedUnits.forEach(u => u.baseUnit = baseUnit);
  };

  Unit.nameSuffixForImprovementDirection = function(improvementDirection) {
    switch (improvementDirection) {
      case ImprovementDirection.DONT_CARE:
        return '';
      case ImprovementDirection.BIGGER_IS_BETTER:
        return '_biggerIsBetter';
      case ImprovementDirection.SMALLER_IS_BETTER:
        return '_smallerIsBetter';
      default:
        throw new Error(
            'Unknown improvement direction: ' + improvementDirection);
    }
  };

  Unit.defineUnitVariant_ = function(params, isDelta, improvementDirection) {
    let nameSuffix = isDelta ? 'Delta' : '';
    nameSuffix += Unit.nameSuffixForImprovementDirection(improvementDirection);

    const unitName = params.baseUnitName + nameSuffix;
    const jsonName = params.baseJsonName + nameSuffix;
    if (Unit.byName[unitName] !== undefined) {
      throw new Error('Unit \'' + unitName + '\' already exists');
    }
    if (Unit.byJSONName[jsonName] !== undefined) {
      throw new Error('JSON unit \'' + jsonName + '\' alread exists');
    }

    let scaleBaseUnit = params.scaleBaseUnit;
    if (!scaleBaseUnit) {
      let formatSpec = params.formatSpec;
      if (typeof formatSpec === 'function') formatSpec = formatSpec();
      const baseSymbol = formatSpec.unitScale ?
          formatSpec.unitScale[0].baseSymbol : (formatSpec.baseSymbol || '');
      scaleBaseUnit = { value: 1, symbol: baseSymbol, baseSymbol };
    }
    const unit = new Unit(unitName, jsonName, scaleBaseUnit,
        isDelta, improvementDirection, params.formatSpec);
    Unit.byName[unitName] = unit;
    Unit.byJSONName[jsonName] = unit;

    return unit;
  };

  tr.b.EventTarget.decorate(Unit);
  Unit.reset();

  // Known display units follow.
  //////////////////////////////////////////////////////////////////////////////

  Unit.define({
    baseUnitName: 'timeInMsAutoFormat',
    baseJsonName: 'msBestFitFormat',
    scaleBaseUnit: tr.b.UnitScale.TIME.MILLI_SEC,
    formatSpec: {
      unitScale: tr.b.UnitScale.TIME.AUTO,
      minimumFractionDigits: 0,
      maximumFractionDigits: 3
    }
  });

  Unit.define({
    baseUnitName: 'timeDurationInMs',
    baseJsonName: 'ms',
    scaleBaseUnit: tr.b.UnitScale.TIME.MILLI_SEC,
    formatSpec() {
      return Unit.currentTimeDisplayMode_.formatSpec;
    }
  });

  Unit.define({
    baseUnitName: 'timeStampInMs',
    baseJsonName: 'tsMs',
    scaleBaseUnit: tr.b.UnitScale.TIME.MILLI_SEC,
    formatSpec() {
      return Unit.currentTimeDisplayMode_.formatSpec;
    }
  });

  Unit.define({
    baseUnitName: 'normalizedPercentage',
    baseJsonName: 'n%',
    formatSpec: {
      unitScale: [{value: 0.01, symbol: '%'}],
      avoidSpacePrecedingUnit: true,
      minimumFractionDigits: 3,
      maximumFractionDigits: 3
    }
  });

  Unit.define({
    baseUnitName: 'sizeInBytes',
    baseJsonName: 'sizeInBytes',
    formatSpec: {
      unitScale: tr.b.UnitScale.MEMORY.AUTO,
      minimumFractionDigits: 1,
      maximumFractionDigits: 1
    }
  });

  Unit.define({
    baseUnitName: 'energyInJoules',
    baseJsonName: 'J',
    formatSpec: {
      baseSymbol: 'J',
      minimumFractionDigits: 3
    }
  });

  Unit.define({
    baseUnitName: 'powerInWatts',
    baseJsonName: 'W',
    formatSpec: {
      baseSymbol: 'W',
      minimumFractionDigits: 3
    }
  });

  Unit.define({
    baseUnitName: 'unitlessNumber',
    baseJsonName: 'unitless',
    formatSpec: {
      minimumFractionDigits: 3,
      maximumFractionDigits: 3
    }
  });

  Unit.define({
    baseUnitName: 'count',
    baseJsonName: 'count',
    formatSpec: {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }
  });

  Unit.define({
    baseUnitName: 'sigma',
    baseJsonName: 'sigma',
    formatSpec: {
      baseSymbol: String.fromCharCode(963),
      minimumFractionDigits: 1,
      maximumFractionDigits: 1
    }
  });

  return {
    ImprovementDirection,
    Unit,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  class Scalar {
    constructor(unit, value) {
      if (!(unit instanceof tr.b.Unit)) {
        throw new Error('Expected Unit');
      }

      if (!(typeof(value) === 'number')) {
        throw new Error('Expected value to be number');
      }

      this.unit = unit;
      this.value = value;
    }

    asDict() {
      return {
        unit: this.unit.asJSON(),
        value: tr.b.numberToJson(this.value),
      };
    }

    toString() {
      return this.unit.format(this.value);
    }

    static fromDict(d) {
      return new Scalar(tr.b.Unit.fromJSON(d.unit),
          tr.b.numberFromJson(d.value));
    }
  }

  return {
    Scalar,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  /**
   * A TraceStream is a data structure holding trace data that supports
   * sequentially reading data, efficiently. It also supports rewinding to the
   * beginning of the trace data and building a sub-stream; but, the latter two
   * operations do not have to be very efficient. For example, it is OK that an
   * implementation sends a new XHR to get the trace data again when rewinding
   * or creating a sub-stream from a large stream that does not fit in memory.
   */
  class TraceStream {
    static get HEADER_SIZE() {
      return Math.pow(2, 10);
    }

    static get CHUNK_SIZE() {
      return Math.pow(2, 20);
    }

    get isBinary() {
      throw new Error('Not implemented');
    }

    /**
     * @returns {boolean} true if there is data remaining in the stream to read,
     * without rewinding.
     */
    get hasData() {
      throw new Error('Not implemented');
    }

    /**
     * @returns {string} The first chunk of the stream. The header size is
     * either given in the constructor or the default 1KB is used.
     */
    get header() {
      throw new Error('Not implemented');
    }

    /**
     * Reads until a given character, including the given character.
     *
     * @param {!string} delim A string of size exactly one.
     *
     * @returns {!string} The data until the delimiter as a string. If the
     * delimiter is not found, all of the remaining data is returned.
     */
    readUntilDelimiter(delim) {
      throw new Error('Not implemented');
    }

    /**
     * Reads a specific number of bytes from the stream.
     *
     * @param {number=} opt_size The maximum number of bytes to be read from the
     * stream. If unspecified, at most 1MB will be read.
     *
     * @returns {!string} A string of size opt_size, unless there is not enough
     * data in the stream in which the string will be smaller.
     */
    readNumBytes(opt_size) {
      throw new Error('Not implemented');
    }

    rewind() {
      throw new Error('Not implemented');
    }

    /**
     * Returns a new stream, created from a subset of this stream. This is
     * needed to support importing subtraces. For example, when the importer
     * encounters a trace event stream that has a BattOr subtrace in it, it will
     * create a new stream for the BattOr subtrace and use the proper importer.
     *
     * @param {!number} startOffset The start offset of the new stream.
     * @param {number=} opt_endOffset The end offset of the new stream
     * (exclusive). If unspecified, the end offset of the current stream is
     * used.
     * @param {number=} opt_headerSize The header size of the new stream. If
     * unspecified, the header size is assumed to be 1KB.
     *
     * @returns {!TraceStream} The new stream. The cursor of the new stream will
     * be at the beginning.
     */
    substream(offset, opt_length, opt_headerSize) {
      throw new Error('Not implemented');
    }
  }

  return {
    TraceStream,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * HeapEntry represents a single value describing the state of the heap of an
   * allocator in a single process.
   *
   * An entry specifies how much space (e.g. 19 MiB) was allocated in a
   * particular context, which consists of a codepath (e.g. drawQuad <- draw <-
   * MessageLoop::RunTask) and an object type (e.g. HTMLImportLoader).
   *
   * If |valuesAreTotals| is true the size and count of this entry are totals
   * for this and all more specific entries, otherwise they are values just for
   * this specific entry.
   *
   * @{constructor}
   */
  function HeapEntry(
      heapDump, leafStackFrame, objectTypeName, size, count, valuesAreTotals) {
    this.heapDump = heapDump;

    // The leaf stack frame of the associated backtrace (e.g. drawQuad for the
    // drawQuad <- draw <- MessageLoop::RunTask backtrace). If undefined, the
    // backtrace is empty.
    this.leafStackFrame = leafStackFrame;

    // The name of the allocated object type (e.g. 'HTMLImportLoader'). If
    // undefined, the entry represents the sum over all object types.
    this.objectTypeName = objectTypeName;

    this.size = size;
    this.count = count;
    this.valuesAreTotals = valuesAreTotals;
  }

  /**
   * HeapDump represents a dump of the heap of an allocator in a single process
   * at a particular timestamp.
   *
   * @{constructor}
   */
  function HeapDump(processMemoryDump, allocatorName, isComplete) {
    this.processMemoryDump = processMemoryDump;
    this.allocatorName = allocatorName;
    this.isComplete = isComplete;
    this.entries = [];
  }

  HeapDump.prototype = {
    addEntry(
        leafStackFrame, objectTypeName, size, count, opt_valuesAreTotals) {
      if (opt_valuesAreTotals === undefined) opt_valuesAreTotals = true;
      const valuesAreTotals = opt_valuesAreTotals;
      const entry = new HeapEntry(
          this, leafStackFrame, objectTypeName, size, count, valuesAreTotals);
      this.entries.push(entry);
      return entry;
    }
  };

  return {
    HeapEntry,
    HeapDump,
  };
});


'use strict';

/**
 * @fileoverview Logic for importing a Heap Dump.
 */
tr.exportTo('tr.e.importer', function() {
  /**
   * @constructor
   */
  function HeapDumpTraceEventImporter(
      heapProfileExpander,
      stackFrames,
      processMemoryDump,
      idPrefix,
      model) {
    this.expander = heapProfileExpander;
    this.stackFrames = stackFrames;
    this.processMemoryDump = processMemoryDump;
    this.idPrefix = idPrefix;
    this.model = model;
  }

  HeapDumpTraceEventImporter.prototype = {

    getLeafStackFrame(stackFrameId) {
      // Root.
      if (stackFrameId === '') return undefined;
      const parentId = this.idPrefix + stackFrameId;
      const id = parentId + ':self';

      // In the new format all values are 'self' values,
      // we distingiush these from the totals in the UI via
      // artificial '<self>' stack frames.
      if (!this.stackFrames[id]) {
        const parentStackFrame = this.stackFrames[parentId];
        const stackFrame = new tr.model.StackFrame(
            parentStackFrame, id, '<self>',
            undefined /* colorId */);
        this.model.addStackFrame(stackFrame);
      }
      return this.stackFrames[id];
    },

    parseEntry(entry, heapDump) {
      const size = entry.size;
      const count = entry.count;
      const leafStackFrame = this.getLeafStackFrame(entry.node.id);
      const objectTypeName = entry.type.name;
      const valuesAreTotals = false;
      if (objectTypeName === undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'Missing object type name (ID ' + typeId + ')',
        });
      }
      heapDump.addEntry(
          leafStackFrame, objectTypeName, size, count, valuesAreTotals);
    },

    parse() {
      const heapDumps = {};
      const inflated = this.expander.inflated;
      for (const [allocatorName, entries] of Object.entries(inflated)) {
        const heapDump =
            new tr.model.HeapDump(this.processMemoryDump, allocatorName);
        for (const entry of entries) {
          this.parseEntry(entry, heapDump);
        }
        heapDump.isComplete = true;
        heapDumps[allocatorName] = heapDump;
      }
      return heapDumps;
    },

  };

  return {
    HeapDumpTraceEventImporter,
  };
});


'use strict';

/**
 * @fileoverview Logic for importing a Heap Dump.
 */
tr.exportTo('tr.e.importer', function() {
  /**
   * @constructor
   * @param {!tr.model.Model} model The model we are currently building.
   * @param {!tr.model.ProcessMemoryDump} processMemoryDump
   *     The parent memory dump for this heap dump.
   * @param {!Map|undefined} processObjectTypeNameMap
   *     A map from raw heap dump 'type' ids to human-readable names.
   * @param {!string} idPrefix Process-specific prefix to prepend to a stack
   *     trace id before looking it up in the model.
   * @param {!string} dumpId
   *     Raw heap dump id, used only for nice error messages.
   * @param {!Object} rawHeapDumps
   *     Raw heap dump.
   */
  function LegacyHeapDumpTraceEventImporter(
      model,
      processMemoryDump,
      processObjectTypeNameMap,
      idPrefix,
      dumpId,
      rawHeapDumps) {
    this.model_ = model;
    this.processObjectTypeNameMap_ = processObjectTypeNameMap;
    this.idPrefix_ = idPrefix;
    this.processMemoryDump_ = processMemoryDump;
    this.pid_ = this.processMemoryDump_.process.pid;
    this.dumpId_ = dumpId;
    this.rawHeapDumps_ = rawHeapDumps;
  }

  LegacyHeapDumpTraceEventImporter.prototype = {
    /**
     * Parse rawHeapDump and add entries to heapDump.
     *
     * @param {!{!entries:(!Array<!Object>|undefined)}} rawHeapDump
     *     The data we're going to parse.
     * @param {!string} allocatorName e.g. malloc.
     * @return {!tr.model.HeapDump} on success or undefined on an error.
     */
    parseRawHeapDump(rawHeapDump, allocatorName) {
      const model = this.model_;
      const processMemoryDump = this.processMemoryDump_;
      const heapDump = new tr.model.HeapDump(processMemoryDump, allocatorName);

      const entries = rawHeapDump.entries;
      if (entries === undefined || entries.length === 0) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'No heap entries in a ' + allocatorName +
              ' heap dump for PID=' + this.pid_ +
              ' and dump ID=' + this.dumpId_ + '.'
        });

        return undefined;
      }

      // The old format always starts with a {size: <total>} entry.
      // See https://goo.gl/WYStil
      // TODO(petrcermak): Remove support for the old format once the new
      // format has been around long enough.
      const isOldFormat = entries[0].bt === undefined;
      if (!isOldFormat && this.processObjectTypeNameMap_ === undefined) {
        // Mapping from object type IDs to names must be provided in the new
        // format.
        return undefined;
      }

      for (let i = 0; i < entries.length; i++) {
        const entry = entries[i];
        const size = parseInt(entry.size, 16);
        const leafStackFrameIndex = entry.bt;
        let leafStackFrame;

        // There are two possible mappings from leaf stack frame indices
        // (provided in the trace) to the corresponding stack frames
        // depending on the format.
        if (isOldFormat) {
          // Old format:
          //   Undefined index        -> / (root)
          //   Defined index for /A/B -> /A/B/<self>
          if (leafStackFrameIndex === undefined) {
            leafStackFrame = undefined; /* root */
          } else {
            // Get the leaf stack frame corresponding to the provided index.
            let leafStackFrameId = this.idPrefix_ + leafStackFrameIndex;
            if (leafStackFrameIndex === '') {
              leafStackFrame = undefined; /* root */
            } else {
              leafStackFrame = model.stackFrames[leafStackFrameId];
              if (leafStackFrame === undefined) {
                this.model_.importWarning({
                  type: 'memory_dump_parse_error',
                  message: 'Missing leaf stack frame (ID ' +
                      leafStackFrameId + ') of heap entry ' + i + ' (size ' +
                      size + ') in a ' + allocatorName +
                      ' heap dump for PID=' + this.pid_ + '.'
                });
                continue;
              }
            }

            // Inject an artificial <self> leaf stack frame.
            leafStackFrameId += ':self';
            if (model.stackFrames[leafStackFrameId] !== undefined) {
              // The frame might already exist if there are multiple process
              // memory dumps (for the same process) in the trace.
              leafStackFrame = model.stackFrames[leafStackFrameId];
            } else {
              leafStackFrame = new tr.model.StackFrame(
                  leafStackFrame, leafStackFrameId, '<self>',
                  undefined /* colorId */);
              model.addStackFrame(leafStackFrame);
            }
          }
        } else {
          // New format:
          //   Undefined index        -> (invalid value)
          //   Defined index for /A/B -> /A/B
          if (leafStackFrameIndex === undefined) {
            this.model_.importWarning({
              type: 'memory_dump_parse_error',
              message: 'Missing stack frame ID of heap entry ' + i +
                  ' (size ' + size + ') in a ' + allocatorName +
                  ' heap dump for PID=' + this.pid_ + '.'
            });
            continue;
          }

          // Get the leaf stack frame corresponding to the provided index.
          const leafStackFrameId = this.idPrefix_ + leafStackFrameIndex;
          if (leafStackFrameIndex === '') {
            leafStackFrame = undefined; /* root */
          } else {
            leafStackFrame = model.stackFrames[leafStackFrameId];
            if (leafStackFrame === undefined) {
              this.model_.importWarning({
                type: 'memory_dump_parse_error',
                message: 'Missing leaf stack frame (ID ' + leafStackFrameId +
                    ') of heap entry ' + i + ' (size ' + size + ') in a ' +
                    allocatorName + ' heap dump for PID=' + this.pid_ + '.'
              });
              continue;
            }
          }
        }

        const objectTypeId = entry.type;
        let objectTypeName;
        if (objectTypeId === undefined) {
          objectTypeName = undefined; /* total over all types */
        } else if (this.processObjectTypeNameMap_ === undefined) {
          // This can only happen when the old format is used.
          continue;
        } else {
          objectTypeName = this.processObjectTypeNameMap_[objectTypeId];
          if (objectTypeName === undefined) {
            this.model_.importWarning({
              type: 'memory_dump_parse_error',
              message: 'Missing object type name (ID ' + objectTypeId +
                  ') of heap entry ' + i + ' (size ' + size + ') in a ' +
                  allocatorName + ' heap dump for PID=' + this.pid_ + '.'
            });
            continue;
          }
        }

        const count = entry.count === undefined ? undefined :
            parseInt(entry.count, 16);
        heapDump.addEntry(leafStackFrame, objectTypeName, size, count);
      }

      return heapDump;
    },

    parse() {
      const heapDumps = {};
      for (const allocatorName in this.rawHeapDumps_) {
        const rawHeapDump = this.rawHeapDumps_[allocatorName];
        const heapDump = this.parseRawHeapDump(rawHeapDump, allocatorName);

        // Throw away heap dumps with no entries. This can happen if all raw
        // entries in the trace are skipped for some reason (e.g. invalid leaf
        // stack frame ID).
        if (heapDump !== undefined && heapDump.entries.length > 0) {
          heapDumps[allocatorName] = heapDump;
        }
      }
      return heapDumps;
    },

  };

  return {
    LegacyHeapDumpTraceEventImporter,
  };
});


'use strict';
if (tr.isHeadless) {
  // oboe requires window; there is no window object in headless mode.
  // Temporarily make one.
  global.window = {};
}

// This file is the concatenation of many js files.
// See http://github.com/jimhigson/oboe.js for the raw source

// having a local undefined, window, Object etc allows slightly better minification:
(function  (window, Object, Array, Error, JSON, undefined ) {

   // v2.1.3-2-gc85b5c4

/*

Copyright (c) 2013, Jim Higson

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1.  Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

2.  Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/** 
 * Partially complete a function.
 * 
 *  var add3 = partialComplete( function add(a,b){return a+b}, 3 );
 *  
 *  add3(4) // gives 7
 *  
 *  function wrap(left, right, cen){return left + " " + cen + " " + right;}
 *  
 *  var pirateGreeting = partialComplete( wrap , "I'm", ", a mighty pirate!" );
 *  
 *  pirateGreeting("Guybrush Threepwood"); 
 *  // gives "I'm Guybrush Threepwood, a mighty pirate!"
 */
var partialComplete = varArgs(function( fn, args ) {

      // this isn't the shortest way to write this but it does
      // avoid creating a new array each time to pass to fn.apply,
      // otherwise could just call boundArgs.concat(callArgs)       

      var numBoundArgs = args.length;

      return varArgs(function( callArgs ) {
         
         for (var i = 0; i < callArgs.length; i++) {
            args[numBoundArgs + i] = callArgs[i];
         }
         
         args.length = numBoundArgs + callArgs.length;         
                     
         return fn.apply(this, args);
      }); 
   }),

/**
 * Compose zero or more functions:
 * 
 *    compose(f1, f2, f3)(x) = f1(f2(f3(x))))
 * 
 * The last (inner-most) function may take more than one parameter:
 * 
 *    compose(f1, f2, f3)(x,y) = f1(f2(f3(x,y))))
 */
   compose = varArgs(function(fns) {

      var fnsList = arrayAsList(fns);
   
      function next(params, curFn) {  
         return [apply(params, curFn)];   
      }
            
      return varArgs(function(startParams){
        
         return foldR(next, startParams, fnsList)[0];
      });
   });

/**
 * A more optimised version of compose that takes exactly two functions
 * @param f1
 * @param f2
 */
function compose2(f1, f2){
   return function(){
      return f1.call(this,f2.apply(this,arguments));
   }
}

/**
 * Generic form for a function to get a property from an object
 * 
 *    var o = {
 *       foo:'bar'
 *    }
 *    
 *    var getFoo = attr('foo')
 *    
 *    fetFoo(o) // returns 'bar'
 * 
 * @param {String} key the property name
 */
function attr(key) {
   return function(o) { return o[key]; };
}
        
/**
 * Call a list of functions with the same args until one returns a 
 * truthy result. Similar to the || operator.
 * 
 * So:
 *      lazyUnion([f1,f2,f3 ... fn])( p1, p2 ... pn )
 *      
 * Is equivalent to: 
 *      apply([p1, p2 ... pn], f1) || 
 *      apply([p1, p2 ... pn], f2) || 
 *      apply([p1, p2 ... pn], f3) ... apply(fn, [p1, p2 ... pn])  
 *  
 * @returns the first return value that is given that is truthy.
 */
   var lazyUnion = varArgs(function(fns) {

      return varArgs(function(params){
   
         var maybeValue;
   
         for (var i = 0; i < len(fns); i++) {
   
            maybeValue = apply(params, fns[i]);
   
            if( maybeValue ) {
               return maybeValue;
            }
         }
      });
   });   

/**
 * This file declares various pieces of functional programming.
 * 
 * This isn't a general purpose functional library, to keep things small it
 * has just the parts useful for Oboe.js.
 */


/**
 * Call a single function with the given arguments array.
 * Basically, a functional-style version of the OO-style Function#apply for 
 * when we don't care about the context ('this') of the call.
 * 
 * The order of arguments allows partial completion of the arguments array
 */
function apply(args, fn) {
   return fn.apply(undefined, args);
}

/**
 * Define variable argument functions but cut out all that tedious messing about 
 * with the arguments object. Delivers the variable-length part of the arguments
 * list as an array.
 * 
 * Eg:
 * 
 * var myFunction = varArgs(
 *    function( fixedArgument, otherFixedArgument, variableNumberOfArguments ){
 *       console.log( variableNumberOfArguments );
 *    }
 * )
 * 
 * myFunction('a', 'b', 1, 2, 3); // logs [1,2,3]
 * 
 * var myOtherFunction = varArgs(function( variableNumberOfArguments ){
 *    console.log( variableNumberOfArguments );
 * })
 * 
 * myFunction(1, 2, 3); // logs [1,2,3]
 * 
 */
function varArgs(fn){

   var numberOfFixedArguments = fn.length -1,
       slice = Array.prototype.slice;          
         
                   
   if( numberOfFixedArguments == 0 ) {
      // an optimised case for when there are no fixed args:   
   
      return function(){
         return fn.call(this, slice.call(arguments));
      }
      
   } else if( numberOfFixedArguments == 1 ) {
      // an optimised case for when there are is one fixed args:
   
      return function(){
         return fn.call(this, arguments[0], slice.call(arguments, 1));
      }
   }
   
   // general case   

   // we know how many arguments fn will always take. Create a
   // fixed-size array to hold that many, to be re-used on
   // every call to the returned function
   var argsHolder = Array(fn.length);   
                             
   return function(){
                            
      for (var i = 0; i < numberOfFixedArguments; i++) {
         argsHolder[i] = arguments[i];         
      }

      argsHolder[numberOfFixedArguments] = 
         slice.call(arguments, numberOfFixedArguments);
                                
      return fn.apply( this, argsHolder);      
   }       
}


/**
 * Swap the order of parameters to a binary function
 * 
 * A bit like this flip: http://zvon.org/other/haskell/Outputprelude/flip_f.html
 */
function flip(fn){
   return function(a, b){
      return fn(b,a);
   }
}


/**
 * Create a function which is the intersection of two other functions.
 * 
 * Like the && operator, if the first is truthy, the second is never called,
 * otherwise the return value from the second is returned.
 */
function lazyIntersection(fn1, fn2) {

   return function (param) {
                                                              
      return fn1(param) && fn2(param);
   };   
}

/**
 * A function which does nothing
 */
function noop(){}

/**
 * A function which is always happy
 */
function always(){return true}

/**
 * Create a function which always returns the same
 * value
 * 
 * var return3 = functor(3);
 * 
 * return3() // gives 3
 * return3() // still gives 3
 * return3() // will always give 3
 */
function functor(val){
   return function(){
      return val;
   }
}

/**
 * This file defines some loosely associated syntactic sugar for 
 * Javascript programming 
 */


/**
 * Returns true if the given candidate is of type T
 */
function isOfType(T, maybeSomething){
   return maybeSomething && maybeSomething.constructor === T;
}

var len = attr('length'),    
    isString = partialComplete(isOfType, String);

/** 
 * I don't like saying this:
 * 
 *    foo !=== undefined
 *    
 * because of the double-negative. I find this:
 * 
 *    defined(foo)
 *    
 * easier to read.
 */ 
function defined( value ) {
   return value !== undefined;
}

/**
 * Returns true if object o has a key named like every property in 
 * the properties array. Will give false if any are missing, or if o 
 * is not an object.
 */
function hasAllProperties(fieldList, o) {

   return      (o instanceof Object) 
            &&
               all(function (field) {         
                  return (field in o);         
               }, fieldList);
}
/**
 * Like cons in Lisp
 */
function cons(x, xs) {
   
   /* Internally lists are linked 2-element Javascript arrays.
          
      Ideally the return here would be Object.freeze([x,xs])
      so that bugs related to mutation are found fast.
      However, cons is right on the critical path for
      performance and this slows oboe-mark down by
      ~25%. Under theoretical future JS engines that freeze more
      efficiently (possibly even use immutability to
      run faster) this should be considered for
      restoration.
   */
   
   return [x,xs];
}

/**
 * The empty list
 */
var emptyList = null,

/**
 * Get the head of a list.
 * 
 * Ie, head(cons(a,b)) = a
 */
    head = attr(0),

/**
 * Get the tail of a list.
 * 
 * Ie, tail(cons(a,b)) = b
 */
    tail = attr(1);


/** 
 * Converts an array to a list 
 * 
 *    asList([a,b,c])
 * 
 * is equivalent to:
 *    
 *    cons(a, cons(b, cons(c, emptyList))) 
 **/
function arrayAsList(inputArray){

   return reverseList( 
      inputArray.reduce(
         flip(cons),
         emptyList 
      )
   );
}

/**
 * A varargs version of arrayAsList. Works a bit like list
 * in LISP.
 * 
 *    list(a,b,c) 
 *    
 * is equivalent to:
 * 
 *    cons(a, cons(b, cons(c, emptyList)))
 */
var list = varArgs(arrayAsList);

/**
 * Convert a list back to a js native array
 */
function listAsArray(list){

   return foldR( function(arraySoFar, listItem){
      
      arraySoFar.unshift(listItem);
      return arraySoFar;
           
   }, [], list );
   
}

/**
 * Map a function over a list 
 */
function map(fn, list) {

   return list
            ? cons(fn(head(list)), map(fn,tail(list)))
            : emptyList
            ;
}

/**
 * foldR implementation. Reduce a list down to a single value.
 * 
 * @pram {Function} fn     (rightEval, curVal) -> result 
 */
function foldR(fn, startValue, list) {
      
   return list 
            ? fn(foldR(fn, startValue, tail(list)), head(list))
            : startValue
            ;
}

/**
 * foldR implementation. Reduce a list down to a single value.
 * 
 * @pram {Function} fn     (rightEval, curVal) -> result 
 */
function foldR1(fn, list) {
      
   return tail(list) 
            ? fn(foldR1(fn, tail(list)), head(list))
            : head(list)
            ;
}


/**
 * Return a list like the one given but with the first instance equal 
 * to item removed 
 */
function without(list, test, removedFn) {
 
   return withoutInner(list, removedFn || noop);
 
   function withoutInner(subList, removedFn) {
      return subList  
         ?  ( test(head(subList)) 
                  ? (removedFn(head(subList)), tail(subList)) 
                  : cons(head(subList), withoutInner(tail(subList), removedFn))
            )
         : emptyList
         ;
   }               
}

/** 
 * Returns true if the given function holds for every item in 
 * the list, false otherwise 
 */
function all(fn, list) {
   
   return !list || 
          ( fn(head(list)) && all(fn, tail(list)) );
}

/**
 * Call every function in a list of functions with the same arguments
 * 
 * This doesn't make any sense if we're doing pure functional because 
 * it doesn't return anything. Hence, this is only really useful if the
 * functions being called have side-effects. 
 */
function applyEach(fnList, args) {

   if( fnList ) {  
      head(fnList).apply(null, args);
      
      applyEach(tail(fnList), args);
   }
}

/**
 * Reverse the order of a list
 */
function reverseList(list){ 

   // js re-implementation of 3rd solution from:
   //    http://www.haskell.org/haskellwiki/99_questions/Solutions/5
   function reverseInner( list, reversedAlready ) {
      if( !list ) {
         return reversedAlready;
      }
      
      return reverseInner(tail(list), cons(head(list), reversedAlready))
   }

   return reverseInner(list, emptyList);
}

function first(test, list) {
   return   list &&
               (test(head(list)) 
                  ? head(list) 
                  : first(test,tail(list))); 
}

/* 
   This is a slightly hacked-up browser only version of clarinet 
   
      *  some features removed to help keep browser Oboe under 
         the 5k micro-library limit
      *  plug directly into event bus
   
   For the original go here:
      https://github.com/dscape/clarinet

   We receive the events:
      STREAM_DATA
      STREAM_END
      
   We emit the events:
      SAX_KEY
      SAX_VALUE_OPEN
      SAX_VALUE_CLOSE      
      FAIL_EVENT      
 */

function clarinet(eventBus) {
  "use strict";
   
  var 
      // shortcut some events on the bus
      emitSaxKey           = eventBus(SAX_KEY).emit,
      emitValueOpen        = eventBus(SAX_VALUE_OPEN).emit,
      emitValueClose       = eventBus(SAX_VALUE_CLOSE).emit,
      emitFail             = eventBus(FAIL_EVENT).emit,
              
      MAX_BUFFER_LENGTH = 64 * 1024
  ,   stringTokenPattern = /[\\"\n]/g
  ,   _n = 0
  
      // states
  ,   BEGIN                = _n++
  ,   VALUE                = _n++ // general stuff
  ,   OPEN_OBJECT          = _n++ // {
  ,   CLOSE_OBJECT         = _n++ // }
  ,   OPEN_ARRAY           = _n++ // [
  ,   CLOSE_ARRAY          = _n++ // ]
  ,   STRING               = _n++ // ""
  ,   OPEN_KEY             = _n++ // , "a"
  ,   CLOSE_KEY            = _n++ // :
  ,   TRUE                 = _n++ // r
  ,   TRUE2                = _n++ // u
  ,   TRUE3                = _n++ // e
  ,   FALSE                = _n++ // a
  ,   FALSE2               = _n++ // l
  ,   FALSE3               = _n++ // s
  ,   FALSE4               = _n++ // e
  ,   NULL                 = _n++ // u
  ,   NULL2                = _n++ // l
  ,   NULL3                = _n++ // l
  ,   NUMBER_DECIMAL_POINT = _n++ // .
  ,   NUMBER_DIGIT         = _n   // [0-9]

      // setup initial parser values
  ,   bufferCheckPosition  = MAX_BUFFER_LENGTH
  ,   latestError                
  ,   c                    
  ,   p                    
  ,   textNode             = undefined
  ,   numberNode           = ""     
  ,   slashed              = false
  ,   closed               = false
  ,   state                = BEGIN
  ,   stack                = []
  ,   unicodeS             = null
  ,   unicodeI             = 0
  ,   depth                = 0
  ,   position             = 0
  ,   column               = 0  //mostly for error reporting
  ,   line                 = 1
  ;

  function checkBufferLength () {
     
    var maxActual = 0;
     
    if (textNode !== undefined && textNode.length > MAX_BUFFER_LENGTH) {
      emitError("Max buffer length exceeded: textNode");
      maxActual = Math.max(maxActual, textNode.length);
    }
    if (numberNode.length > MAX_BUFFER_LENGTH) {
      emitError("Max buffer length exceeded: numberNode");
      maxActual = Math.max(maxActual, numberNode.length);
    }
     
    bufferCheckPosition = (MAX_BUFFER_LENGTH - maxActual)
                               + position;
  }

  eventBus(STREAM_DATA).on(handleData);

   /* At the end of the http content close the clarinet 
    This will provide an error if the total content provided was not 
    valid json, ie if not all arrays, objects and Strings closed properly */
  eventBus(STREAM_END).on(handleStreamEnd);   

  function emitError (errorString) {
     if (textNode !== undefined) {
        emitValueOpen(textNode);
        emitValueClose();
        textNode = undefined;
     }

     latestError = Error(errorString + "\nLn: "+line+
                                       "\nCol: "+column+
                                       "\nChr: "+c);
     
     emitFail(errorReport(undefined, undefined, latestError));
  }

  function handleStreamEnd() {
    if( state == BEGIN ) {
      // Handle the case where the stream closes without ever receiving
      // any input. This isn't an error - response bodies can be blank,
      // particularly for 204 http responses
      
      // Because of how Oboe is currently implemented, we parse a
      // completely empty stream as containing an empty object.
      // This is because Oboe's done event is only fired when the
      // root object of the JSON stream closes.
      
      // This should be decoupled and attached instead to the input stream
      // from the http (or whatever) resource ending.
      // If this decoupling could happen the SAX parser could simply emit
      // zero events on a completely empty input.
      emitValueOpen({});
      emitValueClose();

      closed = true;
      return;
    }
  
    if (state !== VALUE || depth !== 0)
      emitError("Unexpected end");
 
    if (textNode !== undefined) {
      emitValueOpen(textNode);
      emitValueClose();
      textNode = undefined;
    }
     
    closed = true;
  }

  function whitespace(c){
     return c == '\r' || c == '\n' || c == ' ' || c == '\t';
  }
   
  function handleData (chunk) {
         
    // this used to throw the error but inside Oboe we will have already
    // gotten the error when it was emitted. The important thing is to
    // not continue with the parse.
    if (latestError)
      return;
      
    if (closed) {
       return emitError("Cannot write after close");
    }

    var i = 0;
    c = chunk[0]; 

    while (c) {
      p = c;
      c = chunk[i++];
      if(!c) break;

      position ++;
      if (c == "\n") {
        line ++;
        column = 0;
      } else column ++;
      switch (state) {

        case BEGIN:
          if (c === "{") state = OPEN_OBJECT;
          else if (c === "[") state = OPEN_ARRAY;
          else if (!whitespace(c))
            return emitError("Non-whitespace before {[.");
        continue;

        case OPEN_KEY:
        case OPEN_OBJECT:
          if (whitespace(c)) continue;
          if(state === OPEN_KEY) stack.push(CLOSE_KEY);
          else {
            if(c === '}') {
              emitValueOpen({});
              emitValueClose();
              state = stack.pop() || VALUE;
              continue;
            } else  stack.push(CLOSE_OBJECT);
          }
          if(c === '"')
             state = STRING;
          else
             return emitError("Malformed object key should start with \" ");
        continue;

        case CLOSE_KEY:
        case CLOSE_OBJECT:
          if (whitespace(c)) continue;

          if(c===':') {
            if(state === CLOSE_OBJECT) {
              stack.push(CLOSE_OBJECT);

               if (textNode !== undefined) {
                  // was previously (in upstream Clarinet) one event
                  //  - object open came with the text of the first
                  emitValueOpen({});
                  emitSaxKey(textNode);
                  textNode = undefined;
               }
               depth++;
            } else {
               if (textNode !== undefined) {
                  emitSaxKey(textNode);
                  textNode = undefined;
               }
            }
             state  = VALUE;
          } else if (c==='}') {
             if (textNode !== undefined) {
                emitValueOpen(textNode);
                emitValueClose();
                textNode = undefined;
             }
             emitValueClose();
            depth--;
            state = stack.pop() || VALUE;
          } else if(c===',') {
            if(state === CLOSE_OBJECT)
              stack.push(CLOSE_OBJECT);
             if (textNode !== undefined) {
                emitValueOpen(textNode);
                emitValueClose();
                textNode = undefined;
             }
             state  = OPEN_KEY;
          } else 
             return emitError('Bad object');
        continue;

        case OPEN_ARRAY: // after an array there always a value
        case VALUE:
          if (whitespace(c)) continue;
          if(state===OPEN_ARRAY) {
            emitValueOpen([]);
            depth++;             
            state = VALUE;
            if(c === ']') {
              emitValueClose();
              depth--;
              state = stack.pop() || VALUE;
              continue;
            } else {
              stack.push(CLOSE_ARRAY);
            }
          }
               if(c === '"') state = STRING;
          else if(c === '{') state = OPEN_OBJECT;
          else if(c === '[') state = OPEN_ARRAY;
          else if(c === 't') state = TRUE;
          else if(c === 'f') state = FALSE;
          else if(c === 'n') state = NULL;
          else if(c === '-') { // keep and continue
            numberNode += c;
          } else if(c==='0') {
            numberNode += c;
            state = NUMBER_DIGIT;
          } else if('123456789'.indexOf(c) !== -1) {
            numberNode += c;
            state = NUMBER_DIGIT;
          } else               
            return emitError("Bad value");
        continue;

        case CLOSE_ARRAY:
          if(c===',') {
            stack.push(CLOSE_ARRAY);
             if (textNode !== undefined) {
                emitValueOpen(textNode);
                emitValueClose();
                textNode = undefined;
             }
             state  = VALUE;
          } else if (c===']') {
             if (textNode !== undefined) {
                emitValueOpen(textNode);
                emitValueClose();
                textNode = undefined;
             }
             emitValueClose();
            depth--;
            state = stack.pop() || VALUE;
          } else if (whitespace(c))
              continue;
          else 
             return emitError('Bad array');
        continue;

        case STRING:
          if (textNode === undefined) {
              textNode = "";
          }

          // thanks thejh, this is an about 50% performance improvement.
          var starti              = i-1;
           
          STRING_BIGLOOP: while (true) {

            // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
            while (unicodeI > 0) {
              unicodeS += c;
              c = chunk.charAt(i++);
              if (unicodeI === 4) {
                // TODO this might be slow? well, probably not used too often anyway
                textNode += String.fromCharCode(parseInt(unicodeS, 16));
                unicodeI = 0;
                starti = i-1;
              } else {
                unicodeI++;
              }
              // we can just break here: no stuff we skipped that still has to be sliced out or so
              if (!c) break STRING_BIGLOOP;
            }
            if (c === '"' && !slashed) {
              state = stack.pop() || VALUE;
              textNode += chunk.substring(starti, i-1);
              break;
            }
            if (c === '\\' && !slashed) {
              slashed = true;
              textNode += chunk.substring(starti, i-1);
               c = chunk.charAt(i++);
              if (!c) break;
            }
            if (slashed) {
              slashed = false;
                   if (c === 'n') { textNode += '\n'; }
              else if (c === 'r') { textNode += '\r'; }
              else if (c === 't') { textNode += '\t'; }
              else if (c === 'f') { textNode += '\f'; }
              else if (c === 'b') { textNode += '\b'; }
              else if (c === 'u') {
                // \uxxxx. meh!
                unicodeI = 1;
                unicodeS = '';
              } else {
                textNode += c;
              }
              c = chunk.charAt(i++);
              starti = i-1;
              if (!c) break;
              else continue;
            }

            stringTokenPattern.lastIndex = i;
            var reResult = stringTokenPattern.exec(chunk);
            if (!reResult) {
              i = chunk.length+1;
              textNode += chunk.substring(starti, i-1);
              break;
            }
            i = reResult.index+1;
            c = chunk.charAt(reResult.index);
            if (!c) {
              textNode += chunk.substring(starti, i-1);
              break;
            }
          }
        continue;

        case TRUE:
          if (!c)  continue; // strange buffers
          if (c==='r') state = TRUE2;
          else
             return emitError( 'Invalid true started with t'+ c);
        continue;

        case TRUE2:
          if (!c)  continue;
          if (c==='u') state = TRUE3;
          else
             return emitError('Invalid true started with tr'+ c);
        continue;

        case TRUE3:
          if (!c) continue;
          if(c==='e') {
            emitValueOpen(true);
            emitValueClose();
            state = stack.pop() || VALUE;
          } else
             return emitError('Invalid true started with tru'+ c);
        continue;

        case FALSE:
          if (!c)  continue;
          if (c==='a') state = FALSE2;
          else
             return emitError('Invalid false started with f'+ c);
        continue;

        case FALSE2:
          if (!c)  continue;
          if (c==='l') state = FALSE3;
          else
             return emitError('Invalid false started with fa'+ c);
        continue;

        case FALSE3:
          if (!c)  continue;
          if (c==='s') state = FALSE4;
          else
             return emitError('Invalid false started with fal'+ c);
        continue;

        case FALSE4:
          if (!c)  continue;
          if (c==='e') {
            emitValueOpen(false);
            emitValueClose();
            state = stack.pop() || VALUE;
          } else
             return emitError('Invalid false started with fals'+ c);
        continue;

        case NULL:
          if (!c)  continue;
          if (c==='u') state = NULL2;
          else
             return emitError('Invalid null started with n'+ c);
        continue;

        case NULL2:
          if (!c)  continue;
          if (c==='l') state = NULL3;
          else
             return emitError('Invalid null started with nu'+ c);
        continue;

        case NULL3:
          if (!c) continue;
          if(c==='l') {
            emitValueOpen(null);
            emitValueClose();
            state = stack.pop() || VALUE;
          } else 
             return emitError('Invalid null started with nul'+ c);
        continue;

        case NUMBER_DECIMAL_POINT:
          if(c==='.') {
            numberNode += c;
            state       = NUMBER_DIGIT;
          } else 
             return emitError('Leading zero not followed by .');
        continue;

        case NUMBER_DIGIT:
          if('0123456789'.indexOf(c) !== -1) numberNode += c;
          else if (c==='.') {
            if(numberNode.indexOf('.')!==-1)
               return emitError('Invalid number has two dots');
            numberNode += c;
          } else if (c==='e' || c==='E') {
            if(numberNode.indexOf('e')!==-1 ||
               numberNode.indexOf('E')!==-1 )
               return emitError('Invalid number has two exponential');
            numberNode += c;
          } else if (c==="+" || c==="-") {
            if(!(p==='e' || p==='E'))
               return emitError('Invalid symbol in number');
            numberNode += c;
          } else {
            if (numberNode) {
              emitValueOpen(parseFloat(numberNode));
              emitValueClose();
              numberNode = "";
            }
            i--; // go back one
            state = stack.pop() || VALUE;
          }
        continue;

        default:
          return emitError("Unknown state: " + state);
      }
    }
    if (position >= bufferCheckPosition)
      checkBufferLength();
  }
}


/** 
 * A bridge used to assign stateless functions to listen to clarinet.
 * 
 * As well as the parameter from clarinet, each callback will also be passed
 * the result of the last callback.
 * 
 * This may also be used to clear all listeners by assigning zero handlers:
 * 
 *    ascentManager( clarinet, {} )
 */
function ascentManager(oboeBus, handlers){
   "use strict";
   
   var listenerId = {},
       ascent;

   function stateAfter(handler) {
      return function(param){
         ascent = handler( ascent, param);
      }
   }
   
   for( var eventName in handlers ) {

      oboeBus(eventName).on(stateAfter(handlers[eventName]), listenerId);
   }
   
   oboeBus(NODE_SWAP).on(function(newNode) {
      
      var oldHead = head(ascent),
          key = keyOf(oldHead),
          ancestors = tail(ascent),
          parentNode;

      if( ancestors ) {
         parentNode = nodeOf(head(ancestors));
         parentNode[key] = newNode;
      }
   });

   oboeBus(NODE_DROP).on(function() {

      var oldHead = head(ascent),
          key = keyOf(oldHead),
          ancestors = tail(ascent),
          parentNode;

      if( ancestors ) {
         parentNode = nodeOf(head(ancestors));
 
         delete parentNode[key];
      }
   });

   oboeBus(ABORTING).on(function(){
      
      for( var eventName in handlers ) {
         oboeBus(eventName).un(listenerId);
      }
   });   
}

// based on gist https://gist.github.com/monsur/706839

/**
 * XmlHttpRequest's getAllResponseHeaders() method returns a string of response
 * headers according to the format described here:
 * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method
 * This method parses that string into a user-friendly key/value pair object.
 */
function parseResponseHeaders(headerStr) {
   var headers = {};
   
   headerStr && headerStr.split('\u000d\u000a')
      .forEach(function(headerPair){
   
         // Can't use split() here because it does the wrong thing
         // if the header value has the string ": " in it.
         var index = headerPair.indexOf('\u003a\u0020');
         
         headers[headerPair.substring(0, index)] 
                     = headerPair.substring(index + 2);
      });
   
   return headers;
}

/**
 * Detect if a given URL is cross-origin in the scope of the
 * current page.
 * 
 * Browser only (since cross-origin has no meaning in Node.js)
 *
 * @param {Object} pageLocation - as in window.location
 * @param {Object} ajaxHost - an object like window.location describing the 
 *    origin of the url that we want to ajax in
 */
function isCrossOrigin(pageLocation, ajaxHost) {

   /*
    * NB: defaultPort only knows http and https.
    * Returns undefined otherwise.
    */
   function defaultPort(protocol) {
      return {'http:':80, 'https:':443}[protocol];
   }
   
   function portOf(location) {
      // pageLocation should always have a protocol. ajaxHost if no port or
      // protocol is specified, should use the port of the containing page
      
      return location.port || defaultPort(location.protocol||pageLocation.protocol);
   }

   // if ajaxHost doesn't give a domain, port is the same as pageLocation
   // it can't give a protocol but not a domain
   // it can't give a port but not a domain
   
   return !!(  (ajaxHost.protocol  && (ajaxHost.protocol  != pageLocation.protocol)) ||
               (ajaxHost.host      && (ajaxHost.host      != pageLocation.host))     ||
               (ajaxHost.host      && (portOf(ajaxHost) != portOf(pageLocation)))
          );
}

/* turn any url into an object like window.location */
function parseUrlOrigin(url) {
   // url could be domain-relative
   // url could give a domain

   // cross origin means:
   //    same domain
   //    same port
   //    some protocol
   // so, same everything up to the first (single) slash 
   // if such is given
   //
   // can ignore everything after that   
   
   var URL_HOST_PATTERN = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/,

         // if no match, use an empty array so that
         // subexpressions 1,2,3 are all undefined
         // and will ultimately return all empty
         // strings as the parse result:
       urlHostMatch = URL_HOST_PATTERN.exec(url) || [];
   
   return {
      protocol:   urlHostMatch[1] || '',
      host:       urlHostMatch[2] || '',
      port:       urlHostMatch[3] || ''
   };
}

function httpTransport(){
   return new XMLHttpRequest();
}

/**
 * A wrapper around the browser XmlHttpRequest object that raises an 
 * event whenever a new part of the response is available.
 * 
 * In older browsers progressive reading is impossible so all the 
 * content is given in a single call. For newer ones several events
 * should be raised, allowing progressive interpretation of the response.
 *      
 * @param {Function} oboeBus an event bus local to this Oboe instance
 * @param {XMLHttpRequest} xhr the xhr to use as the transport. Under normal
 *          operation, will have been created using httpTransport() above
 *          but for tests a stub can be provided instead.
 * @param {String} method one of 'GET' 'POST' 'PUT' 'PATCH' 'DELETE'
 * @param {String} url the url to make a request to
 * @param {String|Null} data some content to be sent with the request.
 *                      Only valid if method is POST or PUT.
 * @param {Object} [headers] the http request headers to send
 * @param {boolean} withCredentials the XHR withCredentials property will be
 *    set to this value
 */  
function streamingHttp(oboeBus, xhr, method, url, data, headers, withCredentials) {
           
   "use strict";
   
   var emitStreamData = oboeBus(STREAM_DATA).emit,
       emitFail       = oboeBus(FAIL_EVENT).emit,
       numberOfCharsAlreadyGivenToCallback = 0,
       stillToSendStartEvent = true;

   // When an ABORTING message is put on the event bus abort 
   // the ajax request         
   oboeBus( ABORTING ).on( function(){
  
      // if we keep the onreadystatechange while aborting the XHR gives 
      // a callback like a successful call so first remove this listener
      // by assigning null:
      xhr.onreadystatechange = null;
            
      xhr.abort();
   });

   /** 
    * Handle input from the underlying xhr: either a state change,
    * the progress event or the request being complete.
    */
   function handleProgress() {
                        
      var textSoFar = xhr.responseText,
          newText = textSoFar.substr(numberOfCharsAlreadyGivenToCallback);
      
      
      /* Raise the event for new text.
      
         On older browsers, the new text is the whole response. 
         On newer/better ones, the fragment part that we got since 
         last progress. */
         
      if( newText ) {
         emitStreamData( newText );
      } 

      numberOfCharsAlreadyGivenToCallback = len(textSoFar);
   }
   
   
   if('onprogress' in xhr){  // detect browser support for progressive delivery
      xhr.onprogress = handleProgress;
   }
      
   xhr.onreadystatechange = function() {

      function sendStartIfNotAlready() {
         // Internet Explorer is very unreliable as to when xhr.status etc can
         // be read so has to be protected with try/catch and tried again on 
         // the next readyState if it fails
         try{
            stillToSendStartEvent && oboeBus( HTTP_START ).emit(
               xhr.status,
               parseResponseHeaders(xhr.getAllResponseHeaders()) );
            stillToSendStartEvent = false;
         } catch(e){/* do nothing, will try again on next readyState*/}
      }
      
      switch( xhr.readyState ) {
               
         case 2: // HEADERS_RECEIVED
         case 3: // LOADING
            return sendStartIfNotAlready();
            
         case 4: // DONE
            sendStartIfNotAlready(); // if xhr.status hasn't been available yet, it must be NOW, huh IE?
            
            // is this a 2xx http code?
            var successful = String(xhr.status)[0] == 2;
            
            if( successful ) {
               // In Chrome 29 (not 28) no onprogress is emitted when a response
               // is complete before the onload. We need to always do handleInput
               // in case we get the load but have not had a final progress event.
               // This looks like a bug and may change in future but let's take
               // the safest approach and assume we might not have received a 
               // progress event for each part of the response
               handleProgress();
               
               oboeBus(STREAM_END).emit();
            } else {

               emitFail( errorReport(
                  xhr.status, 
                  xhr.responseText
               ));
            }
      }
   };
   
   try{
   
      xhr.open(method, url, true);
   
      for( var headerName in headers ){
         xhr.setRequestHeader(headerName, headers[headerName]);
      }
      
      if( !isCrossOrigin(window.location, parseUrlOrigin(url)) ) {
         xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      }

      xhr.withCredentials = withCredentials;
      
      xhr.send(data);
      
   } catch( e ) {
      
      // To keep a consistent interface with Node, we can't emit an event here.
      // Node's streaming http adaptor receives the error as an asynchronous
      // event rather than as an exception. If we emitted now, the Oboe user
      // has had no chance to add a .fail listener so there is no way
      // the event could be useful. For both these reasons defer the
      // firing to the next JS frame.  
      window.setTimeout(
         partialComplete(emitFail, errorReport(undefined, undefined, e))
      ,  0
      );
   }            
}

var jsonPathSyntax = (function() {
 
   var
   
   /** 
    * Export a regular expression as a simple function by exposing just 
    * the Regex#exec. This allows regex tests to be used under the same 
    * interface as differently implemented tests, or for a user of the
    * tests to not concern themselves with their implementation as regular
    * expressions.
    * 
    * This could also be expressed point-free as:
    *   Function.prototype.bind.bind(RegExp.prototype.exec),
    *   
    * But that's far too confusing! (and not even smaller once minified 
    * and gzipped)
    */
       regexDescriptor = function regexDescriptor(regex) {
            return regex.exec.bind(regex);
       }
       
   /**
    * Join several regular expressions and express as a function.
    * This allows the token patterns to reuse component regular expressions
    * instead of being expressed in full using huge and confusing regular
    * expressions.
    */       
   ,   jsonPathClause = varArgs(function( componentRegexes ) {

            // The regular expressions all start with ^ because we 
            // only want to find matches at the start of the 
            // JSONPath fragment we are inspecting           
            componentRegexes.unshift(/^/);
            
            return   regexDescriptor(
                        RegExp(
                           componentRegexes.map(attr('source')).join('')
                        )
                     );
       })
       
   ,   possiblyCapturing =           /(\$?)/
   ,   namedNode =                   /([\w-_]+|\*)/
   ,   namePlaceholder =             /()/
   ,   nodeInArrayNotation =         /\["([^"]+)"\]/
   ,   numberedNodeInArrayNotation = /\[(\d+|\*)\]/
   ,   fieldList =                      /{([\w ]*?)}/
   ,   optionalFieldList =           /(?:{([\w ]*?)})?/
    

       //   foo or *                  
   ,   jsonPathNamedNodeInObjectNotation   = jsonPathClause( 
                                                possiblyCapturing, 
                                                namedNode, 
                                                optionalFieldList
                                             )
                                             
       //   ["foo"]   
   ,   jsonPathNamedNodeInArrayNotation    = jsonPathClause( 
                                                possiblyCapturing, 
                                                nodeInArrayNotation, 
                                                optionalFieldList
                                             )  

       //   [2] or [*]       
   ,   jsonPathNumberedNodeInArrayNotation = jsonPathClause( 
                                                possiblyCapturing, 
                                                numberedNodeInArrayNotation, 
                                                optionalFieldList
                                             )

       //   {a b c}      
   ,   jsonPathPureDuckTyping              = jsonPathClause( 
                                                possiblyCapturing, 
                                                namePlaceholder, 
                                                fieldList
                                             )
   
       //   ..
   ,   jsonPathDoubleDot                   = jsonPathClause(/\.\./)                  
   
       //   .
   ,   jsonPathDot                         = jsonPathClause(/\./)                    
   
       //   !
   ,   jsonPathBang                        = jsonPathClause(
                                                possiblyCapturing, 
                                                /!/
                                             )  
   
       //   nada!
   ,   emptyString                         = jsonPathClause(/$/)                     
   
   ;
   
  
   /* We export only a single function. When called, this function injects 
      into another function the descriptors from above.             
    */
   return function (fn){      
      return fn(      
         lazyUnion(
            jsonPathNamedNodeInObjectNotation
         ,  jsonPathNamedNodeInArrayNotation
         ,  jsonPathNumberedNodeInArrayNotation
         ,  jsonPathPureDuckTyping 
         )
      ,  jsonPathDoubleDot
      ,  jsonPathDot
      ,  jsonPathBang
      ,  emptyString 
      );
   }; 

}());
/**
 * Get a new key->node mapping
 * 
 * @param {String|Number} key
 * @param {Object|Array|String|Number|null} node a value found in the json
 */
function namedNode(key, node) {
   return {key:key, node:node};
}

/** get the key of a namedNode */
var keyOf = attr('key');

/** get the node from a namedNode */
var nodeOf = attr('node');
/** 
 * This file provides various listeners which can be used to build up
 * a changing ascent based on the callbacks provided by Clarinet. It listens
 * to the low-level events from Clarinet and emits higher-level ones.
 *  
 * The building up is stateless so to track a JSON file
 * ascentManager.js is required to store the ascent state
 * between calls.
 */



/** 
 * A special value to use in the path list to represent the path 'to' a root 
 * object (which doesn't really have any path). This prevents the need for 
 * special-casing detection of the root object and allows it to be treated 
 * like any other object. We might think of this as being similar to the 
 * 'unnamed root' domain ".", eg if I go to 
 * http://en.wikipedia.org./wiki/En/Main_page the dot after 'org' deliminates 
 * the unnamed root of the DNS.
 * 
 * This is kept as an object to take advantage that in Javascript's OO objects 
 * are guaranteed to be distinct, therefore no other object can possibly clash 
 * with this one. Strings, numbers etc provide no such guarantee. 
 **/
var ROOT_PATH = {};


/**
 * Create a new set of handlers for clarinet's events, bound to the emit 
 * function given.  
 */ 
function incrementalContentBuilder( oboeBus ) {

   var emitNodeOpened = oboeBus(NODE_OPENED).emit,
       emitNodeClosed = oboeBus(NODE_CLOSED).emit,
       emitRootOpened = oboeBus(ROOT_PATH_FOUND).emit,
       emitRootClosed = oboeBus(ROOT_NODE_FOUND).emit;

   function arrayIndicesAreKeys( possiblyInconsistentAscent, newDeepestNode) {
   
      /* for values in arrays we aren't pre-warned of the coming paths 
         (Clarinet gives no call to onkey like it does for values in objects) 
         so if we are in an array we need to create this path ourselves. The 
         key will be len(parentNode) because array keys are always sequential 
         numbers. */

      var parentNode = nodeOf( head( possiblyInconsistentAscent));
      
      return      isOfType( Array, parentNode)
               ?
                  keyFound(  possiblyInconsistentAscent, 
                              len(parentNode), 
                              newDeepestNode
                  )
               :  
                  // nothing needed, return unchanged
                  possiblyInconsistentAscent 
               ;
   }
                 
   function nodeOpened( ascent, newDeepestNode ) {
      
      if( !ascent ) {
         // we discovered the root node,         
         emitRootOpened( newDeepestNode);
                    
         return keyFound( ascent, ROOT_PATH, newDeepestNode);         
      }

      // we discovered a non-root node
                 
      var arrayConsistentAscent  = arrayIndicesAreKeys( ascent, newDeepestNode),      
          ancestorBranches       = tail( arrayConsistentAscent),
          previouslyUnmappedName = keyOf( head( arrayConsistentAscent));
          
      appendBuiltContent( 
         ancestorBranches, 
         previouslyUnmappedName, 
         newDeepestNode 
      );
                                                                                                         
      return cons( 
               namedNode( previouslyUnmappedName, newDeepestNode ), 
               ancestorBranches
      );                                                                          
   }


   /**
    * Add a new value to the object we are building up to represent the
    * parsed JSON
    */
   function appendBuiltContent( ancestorBranches, key, node ){
     
      nodeOf( head( ancestorBranches))[key] = node;
   }

     
   /**
    * For when we find a new key in the json.
    * 
    * @param {String|Number|Object} newDeepestName the key. If we are in an 
    *    array will be a number, otherwise a string. May take the special 
    *    value ROOT_PATH if the root node has just been found
    *    
    * @param {String|Number|Object|Array|Null|undefined} [maybeNewDeepestNode] 
    *    usually this won't be known so can be undefined. Can't use null 
    *    to represent unknown because null is a valid value in JSON
    **/  
   function keyFound(ascent, newDeepestName, maybeNewDeepestNode) {

      if( ascent ) { // if not root
      
         // If we have the key but (unless adding to an array) no known value
         // yet. Put that key in the output but against no defined value:      
         appendBuiltContent( ascent, newDeepestName, maybeNewDeepestNode );
      }
   
      var ascentWithNewPath = cons( 
                                 namedNode( newDeepestName, 
                                            maybeNewDeepestNode), 
                                 ascent
                              );

      emitNodeOpened( ascentWithNewPath);
 
      return ascentWithNewPath;
   }


   /**
    * For when the current node ends.
    */
   function nodeClosed( ascent ) {

      emitNodeClosed( ascent);
       
      return tail( ascent) ||
             // If there are no nodes left in the ascent the root node
             // just closed. Emit a special event for this: 
             emitRootClosed(nodeOf(head(ascent)));
   }      

   var contentBuilderHandlers = {};
   contentBuilderHandlers[SAX_VALUE_OPEN] = nodeOpened;
   contentBuilderHandlers[SAX_VALUE_CLOSE] = nodeClosed;
   contentBuilderHandlers[SAX_KEY] = keyFound;
   return contentBuilderHandlers;
}

/**
 * The jsonPath evaluator compiler used for Oboe.js. 
 * 
 * One function is exposed. This function takes a String JSONPath spec and 
 * returns a function to test candidate ascents for matches.
 * 
 *  String jsonPath -> (List ascent) -> Boolean|Object
 *
 * This file is coded in a pure functional style. That is, no function has 
 * side effects, every function evaluates to the same value for the same 
 * arguments and no variables are reassigned.
 */  
// the call to jsonPathSyntax injects the token syntaxes that are needed 
// inside the compiler
var jsonPathCompiler = jsonPathSyntax(function (pathNodeSyntax, 
                                                doubleDotSyntax, 
                                                dotSyntax,
                                                bangSyntax,
                                                emptySyntax ) {

   var CAPTURING_INDEX = 1;
   var NAME_INDEX = 2;
   var FIELD_LIST_INDEX = 3;

   var headKey  = compose2(keyOf, head),
       headNode = compose2(nodeOf, head);
                   
   /**
    * Create an evaluator function for a named path node, expressed in the
    * JSONPath like:
    *    foo
    *    ["bar"]
    *    [2]   
    */
   function nameClause(previousExpr, detection ) {
     
      var name = detection[NAME_INDEX],
            
          matchesName = ( !name || name == '*' ) 
                           ?  always
                           :  function(ascent){return headKey(ascent) == name};
     

      return lazyIntersection(matchesName, previousExpr);
   }

   /**
    * Create an evaluator function for a a duck-typed node, expressed like:
    * 
    *    {spin, taste, colour}
    *    .particle{spin, taste, colour}
    *    *{spin, taste, colour}
    */
   function duckTypeClause(previousExpr, detection) {

      var fieldListStr = detection[FIELD_LIST_INDEX];

      if (!fieldListStr) 
         return previousExpr; // don't wrap at all, return given expr as-is      

      var hasAllrequiredFields = partialComplete(
                                    hasAllProperties, 
                                    arrayAsList(fieldListStr.split(/\W+/))
                                 ),
                                 
          isMatch =  compose2( 
                        hasAllrequiredFields, 
                        headNode
                     );

      return lazyIntersection(isMatch, previousExpr);
   }

   /**
    * Expression for $, returns the evaluator function
    */
   function capture( previousExpr, detection ) {

      // extract meaning from the detection      
      var capturing = !!detection[CAPTURING_INDEX];

      if (!capturing)          
         return previousExpr; // don't wrap at all, return given expr as-is      
      
      return lazyIntersection(previousExpr, head);
            
   }            
      
   /**
    * Create an evaluator function that moves onto the next item on the 
    * lists. This function is the place where the logic to move up a 
    * level in the ascent exists. 
    * 
    * Eg, for JSONPath ".foo" we need skip1(nameClause(always, [,'foo']))
    */
   function skip1(previousExpr) {
   
   
      if( previousExpr == always ) {
         /* If there is no previous expression this consume command 
            is at the start of the jsonPath.
            Since JSONPath specifies what we'd like to find but not 
            necessarily everything leading down to it, when running
            out of JSONPath to check against we default to true */
         return always;
      }

      /** return true if the ascent we have contains only the JSON root,
       *  false otherwise
       */
      function notAtRoot(ascent){
         return headKey(ascent) != ROOT_PATH;
      }
      
      return lazyIntersection(
               /* If we're already at the root but there are more 
                  expressions to satisfy, can't consume any more. No match.

                  This check is why none of the other exprs have to be able 
                  to handle empty lists; skip1 is the only evaluator that 
                  moves onto the next token and it refuses to do so once it 
                  reaches the last item in the list. */
               notAtRoot,
               
               /* We are not at the root of the ascent yet.
                  Move to the next level of the ascent by handing only 
                  the tail to the previous expression */ 
               compose2(previousExpr, tail) 
      );
                                                                                                               
   }   
   
   /**
    * Create an evaluator function for the .. (double dot) token. Consumes
    * zero or more levels of the ascent, the fewest that are required to find
    * a match when given to previousExpr.
    */   
   function skipMany(previousExpr) {

      if( previousExpr == always ) {
         /* If there is no previous expression this consume command 
            is at the start of the jsonPath.
            Since JSONPath specifies what we'd like to find but not 
            necessarily everything leading down to it, when running
            out of JSONPath to check against we default to true */            
         return always;
      }
          
      var 
          // In JSONPath .. is equivalent to !.. so if .. reaches the root
          // the match has succeeded. Ie, we might write ..foo or !..foo
          // and both should match identically.
          terminalCaseWhenArrivingAtRoot = rootExpr(),
          terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr,
          recursiveCase = skip1(function(ascent) {
             return cases(ascent);
          }),

          cases = lazyUnion(
                     terminalCaseWhenArrivingAtRoot
                  ,  terminalCaseWhenPreviousExpressionIsSatisfied
                  ,  recursiveCase  
                  );
      
      return cases;
   }      
   
   /**
    * Generate an evaluator for ! - matches only the root element of the json
    * and ignores any previous expressions since nothing may precede !. 
    */   
   function rootExpr() {
      
      return function(ascent){
         return headKey(ascent) == ROOT_PATH;
      };
   }   
         
   /**
    * Generate a statement wrapper to sit around the outermost 
    * clause evaluator.
    * 
    * Handles the case where the capturing is implicit because the JSONPath
    * did not contain a '$' by returning the last node.
    */   
   function statementExpr(lastClause) {
      
      return function(ascent) {
   
         // kick off the evaluation by passing through to the last clause
         var exprMatch = lastClause(ascent);
                                                     
         return exprMatch === true ? head(ascent) : exprMatch;
      };
   }      
                          
   /**
    * For when a token has been found in the JSONPath input.
    * Compiles the parser for that token and returns in combination with the
    * parser already generated.
    * 
    * @param {Function} exprs  a list of the clause evaluator generators for
    *                          the token that was found
    * @param {Function} parserGeneratedSoFar the parser already found
    * @param {Array} detection the match given by the regex engine when 
    *                          the feature was found
    */
   function expressionsReader( exprs, parserGeneratedSoFar, detection ) {
                     
      // if exprs is zero-length foldR will pass back the 
      // parserGeneratedSoFar as-is so we don't need to treat 
      // this as a special case
      
      return   foldR( 
                  function( parserGeneratedSoFar, expr ){
         
                     return expr(parserGeneratedSoFar, detection);
                  }, 
                  parserGeneratedSoFar, 
                  exprs
               );                     

   }

   /** 
    *  If jsonPath matches the given detector function, creates a function which
    *  evaluates against every clause in the clauseEvaluatorGenerators. The
    *  created function is propagated to the onSuccess function, along with
    *  the remaining unparsed JSONPath substring.
    *  
    *  The intended use is to create a clauseMatcher by filling in
    *  the first two arguments, thus providing a function that knows
    *  some syntax to match and what kind of generator to create if it
    *  finds it. The parameter list once completed is:
    *  
    *    (jsonPath, parserGeneratedSoFar, onSuccess)
    *  
    *  onSuccess may be compileJsonPathToFunction, to recursively continue 
    *  parsing after finding a match or returnFoundParser to stop here.
    */
   function generateClauseReaderIfTokenFound (
     
                        tokenDetector, clauseEvaluatorGenerators,
                         
                        jsonPath, parserGeneratedSoFar, onSuccess) {
                        
      var detected = tokenDetector(jsonPath);

      if(detected) {
         var compiledParser = expressionsReader(
                                 clauseEvaluatorGenerators, 
                                 parserGeneratedSoFar, 
                                 detected
                              ),
         
             remainingUnparsedJsonPath = jsonPath.substr(len(detected[0]));                
                               
         return onSuccess(remainingUnparsedJsonPath, compiledParser);
      }         
   }
                 
   /**
    * Partially completes generateClauseReaderIfTokenFound above. 
    */
   function clauseMatcher(tokenDetector, exprs) {
        
      return   partialComplete( 
                  generateClauseReaderIfTokenFound, 
                  tokenDetector, 
                  exprs 
               );
   }

   /**
    * clauseForJsonPath is a function which attempts to match against 
    * several clause matchers in order until one matches. If non match the
    * jsonPath expression is invalid and an error is thrown.
    * 
    * The parameter list is the same as a single clauseMatcher:
    * 
    *    (jsonPath, parserGeneratedSoFar, onSuccess)
    */     
   var clauseForJsonPath = lazyUnion(

      clauseMatcher(pathNodeSyntax   , list( capture, 
                                             duckTypeClause, 
                                             nameClause, 
                                             skip1 ))
                                                     
   ,  clauseMatcher(doubleDotSyntax  , list( skipMany))
       
       // dot is a separator only (like whitespace in other languages) but 
       // rather than make it a special case, use an empty list of 
       // expressions when this token is found
   ,  clauseMatcher(dotSyntax        , list() )  
                                                                                      
   ,  clauseMatcher(bangSyntax       , list( capture,
                                             rootExpr))
                                                          
   ,  clauseMatcher(emptySyntax      , list( statementExpr))
   
   ,  function (jsonPath) {
         throw Error('"' + jsonPath + '" could not be tokenised')      
      }
   );


   /**
    * One of two possible values for the onSuccess argument of 
    * generateClauseReaderIfTokenFound.
    * 
    * When this function is used, generateClauseReaderIfTokenFound simply 
    * returns the compiledParser that it made, regardless of if there is 
    * any remaining jsonPath to be compiled.
    */
   function returnFoundParser(_remainingJsonPath, compiledParser){ 
      return compiledParser 
   }     
              
   /**
    * Recursively compile a JSONPath expression.
    * 
    * This function serves as one of two possible values for the onSuccess 
    * argument of generateClauseReaderIfTokenFound, meaning continue to
    * recursively compile. Otherwise, returnFoundParser is given and
    * compilation terminates.
    */
   function compileJsonPathToFunction( uncompiledJsonPath, 
                                       parserGeneratedSoFar ) {

      /**
       * On finding a match, if there is remaining text to be compiled
       * we want to either continue parsing using a recursive call to 
       * compileJsonPathToFunction. Otherwise, we want to stop and return 
       * the parser that we have found so far.
       */
      var onFind =      uncompiledJsonPath
                     ?  compileJsonPathToFunction 
                     :  returnFoundParser;
                   
      return   clauseForJsonPath( 
                  uncompiledJsonPath, 
                  parserGeneratedSoFar, 
                  onFind
               );                              
   }

   /**
    * This is the function that we expose to the rest of the library.
    */
   return function(jsonPath){
        
      try {
         // Kick off the recursive parsing of the jsonPath 
         return compileJsonPathToFunction(jsonPath, always);
         
      } catch( e ) {
         throw Error( 'Could not compile "' + jsonPath + 
                      '" because ' + e.message
         );
      }
   }

});

/**
 * A pub/sub which is responsible for a single event type. A
 * multi-event type event bus is created by pubSub by collecting
 * several of these.
 *
 * @param {String} eventType
 *    the name of the events managed by this singleEventPubSub
 * @param {singleEventPubSub} [newListener]
 *    place to notify of new listeners
 * @param {singleEventPubSub} [removeListener]
 *    place to notify of when listeners are removed
 */
function singleEventPubSub(eventType, newListener, removeListener){

  /** we are optimised for emitting events over firing them.
   *  As well as the tuple list which stores event ids and
   *  listeners there is a list with just the listeners which
   *  can be iterated more quickly when we are emitting
   */
  var listenerTupleList,
      listenerList;

  function hasId(id){
    return function(tuple) {
      return tuple.id == id;
    };
  }

  return {

    /**
     * @param {Function} listener
     * @param {*} listenerId
     *    an id that this listener can later by removed by.
     *    Can be of any type, to be compared to other ids using ==
     */
    on:function( listener, listenerId ) {

      var tuple = {
        listener: listener
        ,  id:       listenerId || listener // when no id is given use the
        // listener function as the id
      };

      if( newListener ) {
        newListener.emit(eventType, listener, tuple.id);
      }

      listenerTupleList = cons( tuple,    listenerTupleList );
      listenerList      = cons( listener, listenerList      );

      return this; // chaining
    },

    emit:function () {
      applyEach( listenerList, arguments );
    },

    un: function( listenerId ) {

      var removed;

      listenerTupleList = without(
        listenerTupleList,
        hasId(listenerId),
        function(tuple){
          removed = tuple;
        }
      );

      if( removed ) {
        listenerList = without( listenerList, function(listener){
          return listener == removed.listener;
        });

        if( removeListener ) {
          removeListener.emit(eventType, removed.listener, removed.id);
        }
      }
    },

    listeners: function(){
      // differs from Node EventEmitter: returns list, not array
      return listenerList;
    },

    hasListener: function(listenerId){
      var test = listenerId? hasId(listenerId) : always;

      return defined(first( test, listenerTupleList));
    }
  };
}

/**
 * pubSub is a curried interface for listening to and emitting
 * events.
 *
 * If we get a bus:
 *
 *    var bus = pubSub();
 *
 * We can listen to event 'foo' like:
 *
 *    bus('foo').on(myCallback)
 *
 * And emit event foo like:
 *
 *    bus('foo').emit()
 *
 * or, with a parameter:
 *
 *    bus('foo').emit('bar')
 *
 * All functions can be cached and don't need to be
 * bound. Ie:
 *
 *    var fooEmitter = bus('foo').emit
 *    fooEmitter('bar');  // emit an event
 *    fooEmitter('baz');  // emit another
 *
 * There's also an uncurried[1] shortcut for .emit and .on:
 *
 *    bus.on('foo', callback)
 *    bus.emit('foo', 'bar')
 *
 * [1]: http://zvon.org/other/haskell/Outputprelude/uncurry_f.html
 */
function pubSub(){

   var singles = {},
       newListener = newSingle('newListener'),
       removeListener = newSingle('removeListener');

   function newSingle(eventName) {
      return singles[eventName] = singleEventPubSub(
         eventName,
         newListener,
         removeListener
      );
   }

   /** pubSub instances are functions */
   function pubSubInstance( eventName ){

      return singles[eventName] || newSingle( eventName );
   }

   // add convenience EventEmitter-style uncurried form of 'emit' and 'on'
   ['emit', 'on', 'un'].forEach(function(methodName){

      pubSubInstance[methodName] = varArgs(function(eventName, parameters){
         apply( parameters, pubSubInstance( eventName )[methodName]);
      });
   });

   return pubSubInstance;
}

/**
 * This file declares some constants to use as names for event types.
 */

var // the events which are never exported are kept as 
    // the smallest possible representation, in numbers:
    _S = 1,

    // fired whenever a new node starts in the JSON stream:
    NODE_OPENED     = _S++,

    // fired whenever a node closes in the JSON stream:
    NODE_CLOSED     = _S++,

    // called if a .node callback returns a value - 
    NODE_SWAP       = _S++,
    NODE_DROP       = _S++,

    FAIL_EVENT      = 'fail',
   
    ROOT_NODE_FOUND = _S++,
    ROOT_PATH_FOUND = _S++,
   
    HTTP_START      = 'start',
    STREAM_DATA     = 'data',
    STREAM_END      = 'end',
    ABORTING        = _S++,

    // SAX events butchered from Clarinet
    SAX_KEY          = _S++,
    SAX_VALUE_OPEN   = _S++,
    SAX_VALUE_CLOSE  = _S++;
    
function errorReport(statusCode, body, error) {
   try{
      var jsonBody = JSON.parse(body);
   }catch(e){}

   return {
      statusCode:statusCode,
      body:body,
      jsonBody:jsonBody,
      thrown:error
   };
}    

/** 
 *  The pattern adaptor listens for newListener and removeListener
 *  events. When patterns are added or removed it compiles the JSONPath
 *  and wires them up.
 *  
 *  When nodes and paths are found it emits the fully-qualified match 
 *  events with parameters ready to ship to the outside world
 */

function patternAdapter(oboeBus, jsonPathCompiler) {

   var predicateEventMap = {
      node:oboeBus(NODE_CLOSED)
   ,  path:oboeBus(NODE_OPENED)
   };
     
   function emitMatchingNode(emitMatch, node, ascent) {
         
      /* 
         We're now calling to the outside world where Lisp-style 
         lists will not be familiar. Convert to standard arrays. 
   
         Also, reverse the order because it is more common to 
         list paths "root to leaf" than "leaf to root"  */
      var descent     = reverseList(ascent);
                
      emitMatch(
         node,
         
         // To make a path, strip off the last item which is the special
         // ROOT_PATH token for the 'path' to the root node          
         listAsArray(tail(map(keyOf,descent))),  // path
         listAsArray(map(nodeOf, descent))       // ancestors    
      );         
   }

   /* 
    * Set up the catching of events such as NODE_CLOSED and NODE_OPENED and, if 
    * matching the specified pattern, propagate to pattern-match events such as 
    * oboeBus('node:!')
    * 
    * 
    * 
    * @param {Function} predicateEvent 
    *          either oboeBus(NODE_CLOSED) or oboeBus(NODE_OPENED).
    * @param {Function} compiledJsonPath          
    */
   function addUnderlyingListener( fullEventName, predicateEvent, compiledJsonPath ){
   
      var emitMatch = oboeBus(fullEventName).emit;
   
      predicateEvent.on( function (ascent) {

         var maybeMatchingMapping = compiledJsonPath(ascent);

         /* Possible values for maybeMatchingMapping are now:

          false: 
          we did not match 

          an object/array/string/number/null: 
          we matched and have the node that matched.
          Because nulls are valid json values this can be null.

          undefined:
          we matched but don't have the matching node yet.
          ie, we know there is an upcoming node that matches but we 
          can't say anything else about it. 
          */
         if (maybeMatchingMapping !== false) {

            emitMatchingNode(
               emitMatch, 
               nodeOf(maybeMatchingMapping), 
               ascent
            );
         }
      }, fullEventName);
     
      oboeBus('removeListener').on( function(removedEventName){

         // if the fully qualified match event listener is later removed, clean up 
         // by removing the underlying listener if it was the last using that pattern:
      
         if( removedEventName == fullEventName ) {
         
            if( !oboeBus(removedEventName).listeners(  )) {
               predicateEvent.un( fullEventName );
            }
         }
      });   
   }

   oboeBus('newListener').on( function(fullEventName){

      var match = /(node|path):(.*)/.exec(fullEventName);
      
      if( match ) {
         var predicateEvent = predicateEventMap[match[1]];
                    
         if( !predicateEvent.hasListener( fullEventName) ) {  
                  
            addUnderlyingListener(
               fullEventName,
               predicateEvent, 
               jsonPathCompiler( match[2] )
            );
         }
      }    
   })

}

/**
 * The instance API is the thing that is returned when oboe() is called.
 * it allows:
 *
 *    - listeners for various events to be added and removed
 *    - the http response header/headers to be read
 */
function instanceApi(oboeBus, contentSource){

  var oboeApi,
      fullyQualifiedNamePattern = /^(node|path):./,
      rootNodeFinishedEvent = oboeBus(ROOT_NODE_FOUND),
      emitNodeDrop = oboeBus(NODE_DROP).emit,
      emitNodeSwap = oboeBus(NODE_SWAP).emit,

      /**
       * Add any kind of listener that the instance api exposes
       */
      addListener = varArgs(function( eventId, parameters ){

        if( oboeApi[eventId] ) {

          // for events added as .on(event, callback), if there is a
          // .event() equivalent with special behaviour , pass through
          // to that:
          apply(parameters, oboeApi[eventId]);
        } else {

          // we have a standard Node.js EventEmitter 2-argument call.
          // The first parameter is the listener.
          var event = oboeBus(eventId),
              listener = parameters[0];

          if( fullyQualifiedNamePattern.test(eventId) ) {

            // allow fully-qualified node/path listeners
            // to be added
            addForgettableCallback(event, listener);
          } else  {

            // the event has no special handling, pass through
            // directly onto the event bus:
            event.on( listener);
          }
        }

        return oboeApi; // chaining
      }),

      /**
       * Remove any kind of listener that the instance api exposes
       */
      removeListener = function( eventId, p2, p3 ){

        if( eventId == 'done' ) {

          rootNodeFinishedEvent.un(p2);

        } else if( eventId == 'node' || eventId == 'path' ) {

          // allow removal of node and path
          oboeBus.un(eventId + ':' + p2, p3);
        } else {

          // we have a standard Node.js EventEmitter 2-argument call.
          // The second parameter is the listener. This may be a call
          // to remove a fully-qualified node/path listener but requires
          // no special handling
          var listener = p2;

          oboeBus(eventId).un(listener);
        }

        return oboeApi; // chaining
      };

  /**
   * Add a callback, wrapped in a try/catch so as to not break the
   * execution of Oboe if an exception is thrown (fail events are
   * fired instead)
   *
   * The callback is used as the listener id so that it can later be
   * removed using .un(callback)
   */
  function addProtectedCallback(eventName, callback) {
    oboeBus(eventName).on(protectedCallback(callback), callback);
    return oboeApi; // chaining
  }

  /**
   * Add a callback where, if .forget() is called during the callback's
   * execution, the callback will be de-registered
   */
  function addForgettableCallback(event, callback, listenerId) {

    // listenerId is optional and if not given, the original
    // callback will be used
    listenerId = listenerId || callback;

    var safeCallback = protectedCallback(callback);

    event.on( function() {

      var discard = false;

      oboeApi.forget = function(){
        discard = true;
      };

      apply( arguments, safeCallback );

      delete oboeApi.forget;

      if( discard ) {
        event.un(listenerId);
      }
    }, listenerId);

    return oboeApi; // chaining
  }

  /**
   *  wrap a callback so that if it throws, Oboe.js doesn't crash but instead
   *  throw the error in another event loop
   */
  function protectedCallback( callback ) {
    return function() {
      try{
        return callback.apply(oboeApi, arguments);
      }catch(e)  {
        setTimeout(function() {
          throw new Error(e.message);
        });
      }
    }
  }

  /**
   * Return the fully qualified event for when a pattern matches
   * either a node or a path
   *
   * @param type {String} either 'node' or 'path'
   */
  function fullyQualifiedPatternMatchEvent(type, pattern) {
    return oboeBus(type + ':' + pattern);
  }

  function wrapCallbackToSwapNodeIfSomethingReturned( callback ) {
    return function() {
      var returnValueFromCallback = callback.apply(this, arguments);

      if( defined(returnValueFromCallback) ) {

        if( returnValueFromCallback == oboe.drop ) {
          emitNodeDrop();
        } else {
          emitNodeSwap(returnValueFromCallback);
        }
      }
    }
  }

  function addSingleNodeOrPathListener(eventId, pattern, callback) {

    var effectiveCallback;

    if( eventId == 'node' ) {
      effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
    } else {
      effectiveCallback = callback;
    }

    addForgettableCallback(
      fullyQualifiedPatternMatchEvent(eventId, pattern),
      effectiveCallback,
      callback
    );
  }

  /**
   * Add several listeners at a time, from a map
   */
  function addMultipleNodeOrPathListeners(eventId, listenerMap) {

    for( var pattern in listenerMap ) {
      addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
    }
  }

  /**
   * implementation behind .onPath() and .onNode()
   */
  function addNodeOrPathListenerApi( eventId, jsonPathOrListenerMap, callback ){

    if( isString(jsonPathOrListenerMap) ) {
      addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);

    } else {
      addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
    }

    return oboeApi; // chaining
  }


  // some interface methods are only filled in after we receive
  // values and are noops before that:
  oboeBus(ROOT_PATH_FOUND).on( function(rootNode) {
    oboeApi.root = functor(rootNode);
  });

  /**
   * When content starts make the headers readable through the
   * instance API
   */
  oboeBus(HTTP_START).on( function(_statusCode, headers) {

    oboeApi.header =  function(name) {
      return name ? headers[name]
        : headers
      ;
    }
  });

  /**
   * Construct and return the public API of the Oboe instance to be
   * returned to the calling application
   */
  return oboeApi = {
    on             : addListener,
    addListener    : addListener,
    removeListener : removeListener,
    emit           : oboeBus.emit,

    node           : partialComplete(addNodeOrPathListenerApi, 'node'),
    path           : partialComplete(addNodeOrPathListenerApi, 'path'),

    done           : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
    start          : partialComplete(addProtectedCallback, HTTP_START ),

    // fail doesn't use protectedCallback because
    // could lead to non-terminating loops
    fail           : oboeBus(FAIL_EVENT).on,

    // public api calling abort fires the ABORTING event
    abort          : oboeBus(ABORTING).emit,

    // for manually feeding data
    write          : oboeBus(STREAM_DATA).emit,
    finish         : oboeBus(STREAM_END).emit,

    // initially return nothing for header and root
    header         : noop,
    root           : noop,

    source         : contentSource
  };
}

/**
 * This file sits just behind the API which is used to attain a new
 * Oboe instance. It creates the new components that are required
 * and introduces them to each other.
 */

function wire (httpMethodName, contentSource, body, headers, withCredentials){

   var oboeBus = pubSub();
   
   // Wire the input stream in if we are given a content source.
   // This will usually be the case. If not, the instance created
   // will have to be passed content from an external source.
  
   if( contentSource ) {

      streamingHttp( oboeBus,
                     httpTransport(), 
                     httpMethodName,
                     contentSource,
                     body,
                     headers,
                     withCredentials
      );
   }

   clarinet(oboeBus);

   ascentManager(oboeBus, incrementalContentBuilder(oboeBus));
      
   patternAdapter(oboeBus, jsonPathCompiler);      
      
   return instanceApi(oboeBus, contentSource);
}

function applyDefaults( passthrough, url, httpMethodName, body, headers, withCredentials, cached ){

   headers = headers ?
      // Shallow-clone the headers array. This allows it to be
      // modified without side effects to the caller. We don't
      // want to change objects that the user passes in.
      JSON.parse(JSON.stringify(headers))
      : {};

   if( body ) {
      if( !isString(body) ) {

         // If the body is not a string, stringify it. This allows objects to
         // be given which will be sent as JSON.
         body = JSON.stringify(body);

         // Default Content-Type to JSON unless given otherwise.
         headers['Content-Type'] = headers['Content-Type'] || 'application/json';
      }
   } else {
      body = null;
   }

   // support cache busting like jQuery.ajax({cache:false})
   function modifiedUrl(baseUrl, cached) {

      if( cached === false ) {

         if( baseUrl.indexOf('?') == -1 ) {
            baseUrl += '?';
         } else {
            baseUrl += '&';
         }

         baseUrl += '_=' + new Date().getTime();
      }
      return baseUrl;
   }

   return passthrough( httpMethodName || 'GET', modifiedUrl(url, cached), body, headers, withCredentials || false );
}

// export public API
function oboe(arg1) {

   // We use duck-typing to detect if the parameter given is a stream, with the
   // below list of parameters.
   // Unpipe and unshift would normally be present on a stream but this breaks
   // compatibility with Request streams.
   // See https://github.com/jimhigson/oboe.js/issues/65
   
   var nodeStreamMethodNames = list('resume', 'pause', 'pipe'),
       isStream = partialComplete(
                     hasAllProperties
                  ,  nodeStreamMethodNames
                  );
   
   if( arg1 ) {
      if (isStream(arg1) || isString(arg1)) {

         //  simple version for GETs. Signature is:
         //    oboe( url )
         //  or, under node:
         //    oboe( readableStream )
         return applyDefaults(
            wire,
            arg1 // url
         );

      } else {

         // method signature is:
         //    oboe({method:m, url:u, body:b, headers:{...}})

         return applyDefaults(
            wire,
            arg1.url,
            arg1.method,
            arg1.body,
            arg1.headers,
            arg1.withCredentials,
            arg1.cached
         );
         
      }
   } else {
      // wire up a no-AJAX, no-stream Oboe. Will have to have content 
      // fed in externally and using .emit.
      return wire();
   }
}

/* oboe.drop is a special value. If a node callback returns this value the
   parsed node is deleted from the JSON
 */
oboe.drop = function() {
   return oboe.drop;
};


   if ( typeof define === "function" && define.amd ) {
      define( "oboe", [], function () { return oboe; } );
   } else if (typeof exports === 'object') {
      module.exports = oboe;
   } else {
      window.oboe = oboe;
   }
})((function(){
   // Access to the window object throws an exception in HTML5 web workers so
   // point it to "self" if it runs in a web worker
      try {
         return window;
      } catch (e) {
         return self;
      }
   }()), Object, Array, Error, JSON);


'use strict';
if (tr.isVinn) {
  global.oboe = global.window.oboe;
  global.window = undefined;
} else if (tr.isNode) {
  // Use the node.js version instead.
  global.window = undefined;
  const path = HTMLImportsLoader.hrefToAbsolutePath('/oboe/dist/oboe-node.js');
  global.oboe = require(path);
}


'use strict';

tr.exportTo('tr.e.importer', function() {
  const STRING_ID_SUFFIX = '_sid';
  const PLURAL_STRING_ID_SUFFIX = '_sids';

  function isStringReference(s) {
    return s.endsWith(STRING_ID_SUFFIX) || s.endsWith(PLURAL_STRING_ID_SUFFIX);
  }

  function getStringReferenceName(name) {
    if (name.endsWith(PLURAL_STRING_ID_SUFFIX)) {
      return name.slice(0, -PLURAL_STRING_ID_SUFFIX.length);
    }
    return name.slice(0, -STRING_ID_SUFFIX.length);
  }

  function deferenceStrings(idToString, o) {
    const clone = Object.assign({}, o);
    for (const [key, value] of Object.entries(clone)) {
      if (isStringReference(key)) {
        const name = getStringReferenceName(key);
        clone[name] = idToString(value);
      }
    }
    return clone;
  }

  function singularize(word) {
    if (word.endsWith('s')) {
      return word.slice(0, -1);
    }
    return word;
  }

  function getMetadataPairs(dataJson) {
    const isMetadata = v => typeof v !== 'object' || Array.isArray(v);
    const pairs = Object.entries(dataJson);
    const metadataPairs = pairs.filter(([_, v]) => isMetadata(v));
    return metadataPairs;
  }

  function getGroupPairs(dataJson) {
    const pairs = Object.entries(dataJson);
    const nonMapPairs = pairs.filter(([k, _]) => k !== 'maps');
    const groupPairs = nonMapPairs.filter(([_, v]) => typeof v === 'object');
    return groupPairs;
  }

  function createMap(mapJson) {
    const map = new Map();
    for (const entry of mapJson) {
      if (entry.id === undefined) {
        throw new Error('Missing required key "id" in streaming event.');
      }
      map.set(entry.id, entry);
    }
    return map;
  }

  function createMaps(mapsJson) {
    const maps = new Map();
    for (const [name, mapJson] of Object.entries(mapsJson)) {
      maps.set(name, createMap(mapJson));
    }
    return maps;
  }

  function createGroup(groupJson, opt_startTime) {
    const entries = [];
    const n = Object.values(groupJson)[0].length;

    for (let i = 0; i < n; i++) {
      const entry = {};
      for (const name in groupJson) {
        entry[name] = groupJson[name][i];
      }
      entries.push(entry);
    }

    const timeDelta = groupJson.timeDelta;
    if (opt_startTime === undefined && timeDelta !== undefined) {
      throw new Error('Missing required key "startTime" in streaming event.');
    }

    if (opt_startTime) {
      let delta = 0;
      for (const entry of entries) {
        delta += entry.timeDelta ? entry.timeDelta : 0;
        entry.time = opt_startTime + delta;
      }
    }

    return entries;
  }

  function createGroups(groupsJson, opt_startTime) {
    const groups = new Map();
    for (const [name, groupJson] of Object.entries(groupsJson)) {
      groups.set(name, createGroup(groupJson, opt_startTime));
    }

    return groups;
  }

  function createMetadata(metadataPairs) {
    const metadata = new Map();
    for (const [name, value] of metadataPairs) {
      metadata.set(name, value);
    }
    if (metadata.get('version') === undefined) {
      throw new Error('Missing required key "version" in streaming event.');
    }
    return metadata;
  }

  /**
   * Extracts data from a profiling dictionary. See goo.gl/R0Ae4f.
   *
   * A profiling dictionary is a compressed format that is good for recording
   * sampling data. ProfilingDictionaryReader unpacks that data. To use the
   * ProfilingDictionaryReader first create an 'empty' reader using .empty()
   * then call #expandData(data) on your dictionary or the helper:
   * #expandEvent(event) on a tracing event containing the profiling dictionary.
   * ProfilingDictionaryReader is an immutable data structure so these methods
   * don't modify the ProfilingDictionaryReader instead they return new
   * ProfilingDictionaryReaders which wrap the data you passed. To access the
   * unpacked data use the #inflated property and the #getMapValue() method.
   *
   * Usage example, given input like:
   * $ let input = {
   *   version: 1,
   *   allocators: {
   *     books: {
   *       authors: [1, 1, 2],
   *       title_sid: [10, 11, 12],
   *     },
   *   },
   *   maps: {
   *     authors: [
   *       { id: 1, name_sid: 1 },
   *       { id: 2, name_sid: 2 },
   *     ],
   *     strings: [
   *       { id: 1, string: 'DFW' },
   *       { id: 2, string: 'C. Stross' },
   *       { id: 10, string: 'Book A' },
   *       { id: 11, string: 'Book B' },
   *       { id: 12, string: 'Book C' },
   *     ],
   *   }
   * };
   * We can create an empty reader:
   * $ let reader = ProfilingDictionaryReader.empty();
   * Then read in the input:
   * $ reader = reader.expandData(input);
   * Then view the expanded data:
   * $ console.log(reader.inflated);
   * {
   *   books: [
   *     { author: { id: 1, name: 'DFW' }, title: "Book A", },
   *     { author: { id: 2, name: 'C. Stross' }, title: "Book B", },
   *     { author: { id: 2, name: 'C. Stross' }, title: "Book C", },
   *   ],
   * }
   *
   */
  class ProfilingDictionaryReader {
    constructor(opt_metadata, opt_maps, opt_groups, opt_parent) {
      this.metadata = opt_metadata || new Map();
      this.maps = opt_maps || new Map();
      this.groups = opt_groups || new Map();
      this.parent_ = opt_parent || undefined;
      this.inflated_ = undefined;
      this.raw_ = undefined;
      this.boundGetString_ = this.getString.bind(this);
      this.deferenceStrings_ = o => deferenceStrings(this.boundGetString_, o);
    }

    /**
     * Creates an empty ProfilingDictionaryReader.
     */
    static empty() {
      return new ProfilingDictionaryReader();
    }

    /**
     * Returns the parent or null if this is the root ProfilingDictionaryReader.
     */
    get parent() {
      return this.parent_;
    }

    get raw() {
      if (this.raw_) return this.raw_;
      this.raw_ = {};
      for (const [name, group] of this.groups.entries()) {
        this.raw_[name] = group;
      }
      return this.raw_;
    }

    get inflated() {
      if (this.inflated_) return this.inflated_;
      this.inflated_ = {};
      for (const [name, group] of this.groups.entries()) {
        this.inflated_[name] = this.inflateGroup(group);
      }
      return this.inflated_;
    }

    /**
     * Get a map from the newest event by name.
     * If no map with that name was present returns an empty Map.
     */
    getNewMap(name) {
      return this.maps.get(name) || new Map();
    }

    /**
     * Get a record with the id |id| from the map with name |mapName|.
     * This method searches through the expanded events in reverse order of
     * expansion until it finds a matching value. If no value matches returns
     * undefined.
     */
    getMapValue(mapName, id) {
      let value = this.getNewMap(mapName).get(id);
      if (value === undefined && this.parent) {
        value = this.parent.getMapValue(mapName, id);
      }
      return value;
    }

    /**
     * Get the string with the id |id|.
     * This method searches through the expanded events in reverse order of
     * expansion until it finds a string with the matching id. If there is no
     * matching string with returns undefined.
     */
    getString(id) {
      const value = this.getMapValue('strings', id);
      if (value === undefined) return undefined;
      return value.string;
    }

    /**
     * True iff this or any parent has a map with name |name|.
     */
    hasMap(name) {
      if (this.maps.has(name)) return true;
      if (this.parent === undefined) return false;
      return this.parent.hasMap(name);
    }

    inflateGroup(group) {
      return group.map(this.inflateEntry.bind(this));
    }

    inflateEntry(entry) {
      const inflatedEntry = {};
      for (const [name, value] of Object.entries(entry)) {
        let inflatedValue;
        if (this.hasMap(name)) {
          const id = value;
          inflatedValue = this.deferenceStrings_(this.getMapValue(name, id));
        } else {
          inflatedValue = value;
        }
        inflatedEntry[singularize(name)] = inflatedValue;
      }
      return this.deferenceStrings_(inflatedEntry);
    }

    /**
     * Returns a new ProfilingDictionaryReader with this
     * ProfilingDictionaryReader as its parent and the fields 'maps', 'groups'
     * and 'metadata' filled in based on |data|.
     */
    expandData(data) {
      const mapsJson = data.maps || {};
      const groupsJson = data.allocators || {};
      const metadataPairs = getMetadataPairs(data);
      const metadata = createMetadata(metadataPairs);
      const opt_startTime = metadata.get('startTime');
      const maps = createMaps(mapsJson);
      const groups = createGroups(groupsJson, opt_startTime);
      return new ProfilingDictionaryReader(metadata, maps, groups, this);
    }

    /**
     * Convenience method for this.expandData(event.args.data).
     */
    expandEvent(event) {
      return this.expandData(event.args.data);
    }
  }

  return {
    ProfilingDictionaryReader,
    singularize,
    deferenceStringsForTest: deferenceStrings,
  };
});


'use strict';

tr.exportTo('tr.model.source_info', function() {
  function SourceInfo(file, opt_line, opt_column) {
    this.file_ = file;
    this.line_ = opt_line || -1;
    this.column_ = opt_column || -1;
  }

  SourceInfo.prototype = {
    get file() {
      return this.file_;
    },

    get line() {
      return this.line_;
    },

    get column() {
      return this.column_;
    },

    get domain() {
      if (!this.file_) return undefined;
      const domain = this.file_.match(/(.*:\/\/[^:\/]*)/i);
      return domain ? domain[1] : undefined;
    },

    toString() {
      let str = '';

      if (this.file_) {
        str += this.file_;
      }
      if (this.line_ > 0) {
        str += ':' + this.line_;
      }
      if (this.column_ > 0) {
        str += ':' + this.column_;
      }
      return str;
    }
  };

  return {
    SourceInfo,
  };
});


'use strict';

tr.exportTo('tr.model.source_info', function() {
  function JSSourceInfo(file, line, column, isNative, scriptId, state) {
    tr.model.source_info.SourceInfo.call(this, file, line, column);

    this.isNative_ = isNative;
    this.scriptId_ = scriptId;
    this.state_ = state;
  }

  JSSourceInfo.prototype = {
    __proto__: tr.model.source_info.SourceInfo.prototype,

    get state() {
      return this.state_;
    },

    get isNative() {
      return this.isNative_;
    },

    get scriptId() {
      return this.scriptId_;
    },

    toString() {
      const str = this.isNative_ ? '[native v8] ' : '';
      return str +
          tr.model.source_info.SourceInfo.prototype.toString.call(this);
    }
  };

  const JSSourceState = {
    COMPILED: 'compiled',
    OPTIMIZABLE: 'optimizable',
    OPTIMIZED: 'optimized',
    UNKNOWN: 'unknown',
  };

  return {
    JSSourceInfo,
    JSSourceState,
  };
});


'use strict';

/**
 * @fileoverview TraceCodeEntry is a wrapper around the V8 CodeEntry that
 * extracts extra context information for each item. This includes things like
 * the source file, line and if the function is a native method or not.
 */
tr.exportTo('tr.e.importer', function() {
  function TraceCodeEntry(address, size, name, scriptId) {
    this.id_ = tr.b.GUID.allocateSimple();
    this.address_ = address;
    this.size_ = size;

    // Stolen from DevTools TimelineJSProfileProcessor._buildCallFrame
    // Code states:
    // (empty) -> compiled
    //    ~    -> optimizable
    //    *    -> optimized
    const rePrefix = /^(\w*:)?([*~]?)(.*)$/m;
    const tokens = rePrefix.exec(name);
    const prefix = tokens[1];
    let state = tokens[2];
    const body = tokens[3];

    if (state === '*') {
      state = tr.model.source_info.JSSourceState.OPTIMIZED;
    } else if (state === '~') {
      state = tr.model.source_info.JSSourceState.OPTIMIZABLE;
    } else if (state === '') {
      state = tr.model.source_info.JSSourceState.COMPILED;
    } else {
      state = tr.model.source_info.JSSourceState.UNKNOWN;
    }

    let rawName;
    let rawUrl;
    if (prefix === 'Script:') {
      rawName = '';
      rawUrl = body;
    } else {
      const spacePos = body.lastIndexOf(' ');
      rawName = spacePos !== -1 ? body.substr(0, spacePos) : body;
      rawUrl = spacePos !== -1 ? body.substr(spacePos + 1) : '';
    }

    function splitLineAndColumn(url) {
      const lineColumnRegEx = /(?::(\d+))?(?::(\d+))?$/;
      const lineColumnMatch = lineColumnRegEx.exec(url);
      let lineNumber;
      let columnNumber;

      if (typeof(lineColumnMatch[1]) === 'string') {
        lineNumber = parseInt(lineColumnMatch[1], 10);
        // Immediately convert line and column to 0-based numbers.
        lineNumber = isNaN(lineNumber) ? undefined : lineNumber - 1;
      }
      if (typeof(lineColumnMatch[2]) === 'string') {
        columnNumber = parseInt(lineColumnMatch[2], 10);
        columnNumber = isNaN(columnNumber) ? undefined : columnNumber - 1;
      }

      return {
        url: url.substring(0, url.length - lineColumnMatch[0].length),
        lineNumber,
        columnNumber
      };
    }

    const nativeSuffix = ' native';
    const isNative = rawName.endsWith(nativeSuffix);
    this.name_ =
        isNative ? rawName.slice(0, -nativeSuffix.length) : rawName;

    const urlData = splitLineAndColumn(rawUrl);
    const url = urlData.url || '';
    const line = urlData.lineNumber || 0;
    const column = urlData.columnNumber || 0;

    this.sourceInfo_ = new tr.model.source_info.JSSourceInfo(
        url, line, column, isNative, scriptId, state);
  }

  TraceCodeEntry.prototype = {
    get id() {
      return this.id_;
    },

    get sourceInfo() {
      return this.sourceInfo_;
    },

    get name() {
      return this.name_;
    },

    set address(address) {
      this.address_ = address;
    },

    get address() {
      return this.address_;
    },

    set size(size) {
      this.size_ = size;
    },

    get size() {
      return this.size_;
    }
  };

  return {
    TraceCodeEntry,
  };
});


'use strict';

tr.exportTo('tr.e.importer', function() {
  // This code is a tracification of:
  // devtools/front_end/timeline/TimelineJSProfile.js
  function TraceCodeMap() {
    this.banks_ = new Map();
  }

  TraceCodeMap.prototype = {
    addEntry(addressHex, size, name, scriptId) {
      const entry = new tr.e.importer.TraceCodeEntry(
          this.getAddress_(addressHex), size, name, scriptId);

      this.addEntry_(addressHex, entry);
    },

    moveEntry(oldAddressHex, newAddressHex, size) {
      const entry = this.getBank_(oldAddressHex)
          .removeEntry(this.getAddress_(oldAddressHex));
      if (!entry) return;

      entry.address = this.getAddress_(newAddressHex);
      entry.size = size;
      this.addEntry_(newAddressHex, entry);
    },

    lookupEntry(addressHex) {
      return this.getBank_(addressHex)
          .lookupEntry(this.getAddress_(addressHex));
    },

    addEntry_(addressHex, entry) {
      // FIXME: Handle bank spanning addresses ...
      this.getBank_(addressHex).addEntry(entry);
    },

    getAddress_(addressHex) {
      // 13 hex digits === 52 bits, double mantissa fits 53 bits.
      const bankSizeHexDigits = 13;
      addressHex = addressHex.slice(2);  // cut 0x prefix.
      return parseInt(addressHex.slice(-bankSizeHexDigits), 16);
    },

    getBank_(addressHex) {
      addressHex = addressHex.slice(2);  // cut 0x prefix.

      // 13 hex digits === 52 bits, double mantissa fits 53 bits.
      const bankSizeHexDigits = 13;
      const maxHexDigits = 16;
      const bankName = addressHex.slice(-maxHexDigits, -bankSizeHexDigits);
      let bank = this.banks_.get(bankName);
      if (!bank) {
        bank = new TraceCodeBank();
        this.banks_.set(bankName, bank);
      }
      return bank;
    }
  };

  function TraceCodeBank() {
    this.entries_ = [];
  }

  TraceCodeBank.prototype = {
    removeEntry(address) {
      // findLowIndexInSortedArray returns 1 for empty. Just handle the
      // empty list and bail early.
      if (this.entries_.length === 0) return undefined;

      const index = tr.b.findLowIndexInSortedArray(
          this.entries_, function(entry) { return entry.address; }, address);
      const entry = this.entries_[index];
      if (!entry || entry.address !== address) return undefined;

      this.entries_.splice(index, 1);
      return entry;
    },

    lookupEntry(address) {
      const index = tr.b.findFirstTrueIndexInSortedArray(
          this.entries_, e => (address < e.address)) - 1;
      const entry = this.entries_[index];
      return entry &&
          address < entry.address + entry.size ? entry : undefined;
    },

    addEntry(newEntry) {
      // findLowIndexInSortedArray returns 1 for empty list. Just push the
      // new address as it's the only item.
      if (this.entries_.length === 0) {
        this.entries_.push(newEntry);
      }

      const endAddress = newEntry.address + newEntry.size;
      const lastIndex = tr.b.findLowIndexInSortedArray(
          this.entries_, function(entry) { return entry.address; }, endAddress);
      let index;
      for (index = lastIndex - 1; index >= 0; --index) {
        const entry = this.entries_[index];
        const entryEndAddress = entry.address + entry.size;
        if (entryEndAddress <= newEntry.address) break;
      }
      ++index;
      this.entries_.splice(index, lastIndex - index, newEntry);
    }
  };

  return {
    TraceCodeMap,
  };
});



'use strict';

/**
 * @fileoverview Splay tree used by CodeMap.
 */
tr.exportTo('tr.e.importer.v8', function() {
  /**
   * Constructs a Splay tree.  A splay tree is a self-balancing binary
   * search tree with the additional property that recently accessed
   * elements are quick to access again. It performs basic operations
   * such as insertion, look-up and removal in O(log(n)) amortized time.
   *
   * @constructor
   */
  function SplayTree() { }

  /**
   * Pointer to the root node of the tree.
   *
   * @type {SplayTree.Node}
   * @private
   */
  SplayTree.prototype.root_ = null;

  /**
   * @return {boolean} Whether the tree is empty.
   */
  SplayTree.prototype.isEmpty = function() {
    return !this.root_;
  };

  /**
   * Inserts a node into the tree with the specified key and value if
   * the tree does not already contain a node with the specified key. If
   * the value is inserted, it becomes the root of the tree.
   *
   * @param {number} key Key to insert into the tree.
   * @param {*} value Value to insert into the tree.
   */
  SplayTree.prototype.insert = function(key, value) {
    if (this.isEmpty()) {
      this.root_ = new SplayTree.Node(key, value);
      return;
    }
    // Splay on the key to move the last node on the search path for
    // the key to the root of the tree.
    this.splay_(key);
    if (this.root_.key === key) {
      return;
    }
    const node = new SplayTree.Node(key, value);
    if (key > this.root_.key) {
      node.left = this.root_;
      node.right = this.root_.right;
      this.root_.right = null;
    } else {
      node.right = this.root_;
      node.left = this.root_.left;
      this.root_.left = null;
    }
    this.root_ = node;
  };


  /**
   * Removes a node with the specified key from the tree if the tree
   * contains a node with this key. The removed node is returned. If the
   * key is not found, an exception is thrown.
   *
   * @param {number} key Key to find and remove from the tree.
   * @return {SplayTree.Node} The removed node.
   */
  SplayTree.prototype.remove = function(key) {
    if (this.isEmpty()) {
      throw Error('Key not found: ' + key);
    }
    this.splay_(key);
    if (this.root_.key !== key) {
      throw Error('Key not found: ' + key);
    }
    const removed = this.root_;
    if (!this.root_.left) {
      this.root_ = this.root_.right;
    } else {
      const right = this.root_.right;
      this.root_ = this.root_.left;
      // Splay to make sure that the new root has an empty right child.
      this.splay_(key);
      // Insert the original right child as the right child of the new
      // root.
      this.root_.right = right;
    }
    return removed;
  };


  /**
   * Returns the node having the specified key or null if the tree doesn't
   * contain a node with the specified key.
   *
   *
   * @param {number} key Key to find in the tree.
   * @return {SplayTree.Node} Node having the specified key.
   */
  SplayTree.prototype.find = function(key) {
    if (this.isEmpty()) return null;
    this.splay_(key);
    return this.root_.key === key ? this.root_ : null;
  };

  /**
   * @return {SplayTree.Node} Node having the minimum key value.
   */
  SplayTree.prototype.findMin = function() {
    if (this.isEmpty()) return null;
    let current = this.root_;
    while (current.left) {
      current = current.left;
    }
    return current;
  };

  /**
   * @return {SplayTree.Node} Node having the maximum key value.
   */
  SplayTree.prototype.findMax = function(opt_startNode) {
    if (this.isEmpty()) return null;
    let current = opt_startNode || this.root_;
    while (current.right) {
      current = current.right;
    }
    return current;
  };

  /**
   * @return {SplayTree.Node} Node having the maximum key value that
   *     is less or equal to the specified key value.
   */
  SplayTree.prototype.findGreatestLessThan = function(key) {
    if (this.isEmpty()) return null;
    // Splay on the key to move the node with the given key or the last
    // node on the search path to the top of the tree.
    this.splay_(key);
    // Now the result is either the root node or the greatest node in
    // the left subtree.
    if (this.root_.key <= key) {
      return this.root_;
    }
    if (this.root_.left) {
      return this.findMax(this.root_.left);
    }
    return null;
  };

  /**
   * @return {Array<*>} An array containing all the values of tree's nodes
   * paired with keys.
   *
   */
  SplayTree.prototype.exportKeysAndValues = function() {
    const result = [];
    this.traverse_(function(node) { result.push([node.key, node.value]); });
    return result;
  };

  /**
   * @return {Array<*>} An array containing all the values of tree's nodes.
   */
  SplayTree.prototype.exportValues = function() {
    const result = [];
    this.traverse_(function(node) { result.push(node.value); });
    return result;
  };

  /**
   * Perform the splay operation for the given key. Moves the node with
   * the given key to the top of the tree.  If no node has the given
   * key, the last node on the search path is moved to the top of the
   * tree. This is the simplified top-down splaying algorithm from:
   * "Self-adjusting Binary Search Trees" by Sleator and Tarjan
   *
   * @param {number} key Key to splay the tree on.
   * @private
   */
  SplayTree.prototype.splay_ = function(key) {
    if (this.isEmpty()) return;
    // Create a dummy node.  The use of the dummy node is a bit
    // counter-intuitive: The right child of the dummy node will hold
    // the L tree of the algorithm.  The left child of the dummy node
    // will hold the R tree of the algorithm.  Using a dummy node, left
    // and right will always be nodes and we avoid special cases.
    const dummy = new SplayTree.Node(null, null);
    let left = dummy;
    let right = dummy;
    let current = this.root_;
    while (true) {
      if (key < current.key) {
        if (!current.left) {
          break;
        }
        if (key < current.left.key) {
          // Rotate right.
          const tmp = current.left;
          current.left = tmp.right;
          tmp.right = current;
          current = tmp;
          if (!current.left) {
            break;
          }
        }
        // Link right.
        right.left = current;
        right = current;
        current = current.left;
      } else if (key > current.key) {
        if (!current.right) {
          break;
        }
        if (key > current.right.key) {
          // Rotate left.
          const tmp = current.right;
          current.right = tmp.left;
          tmp.left = current;
          current = tmp;
          if (!current.right) {
            break;
          }
        }
        // Link left.
        left.right = current;
        left = current;
        current = current.right;
      } else {
        break;
      }
    }
    // Assemble.
    left.right = current.left;
    right.left = current.right;
    current.left = dummy.right;
    current.right = dummy.left;
    this.root_ = current;
  };

  /**
   * Performs a preorder traversal of the tree.
   *
   * @param {function(SplayTree.Node)} f Visitor function.
   * @private
   */
  SplayTree.prototype.traverse_ = function(f) {
    const nodesToVisit = [this.root_];
    while (nodesToVisit.length > 0) {
      const node = nodesToVisit.shift();
      if (node === null) continue;
      f(node);
      nodesToVisit.push(node.left);
      nodesToVisit.push(node.right);
    }
  };

  /**
   * Constructs a Splay tree node.
   *
   * @param {number} key Key.
   * @param {*} value Value.
   */
  SplayTree.Node = function(key, value) {
    this.key = key;
    this.value = value;
  };

  /**
   * @type {SplayTree.Node}
   */
  SplayTree.Node.prototype.left = null;

  /**
   * @type {SplayTree.Node}
   */
  SplayTree.Node.prototype.right = null;

  return {
    SplayTree,
  };
});


'use strict';

/**
 * @fileoverview Map addresses to dynamically created functions.
 */
tr.exportTo('tr.e.importer.v8', function() {
  /**
   * Constructs a mapper that maps addresses into code entries.
   *
   * @constructor
   */
  function CodeMap() {
    /**
     * Dynamic code entries. Used for JIT compiled code.
     */
    this.dynamics_ = new tr.e.importer.v8.SplayTree();

    /**
     * Name generator for entries having duplicate names.
     */
    this.dynamicsNameGen_ = new tr.e.importer.v8.CodeMap.NameGenerator();

    /**
     * Static code entries. Used for statically compiled code.
     */
    this.statics_ = new tr.e.importer.v8.SplayTree();

    /**
     * Libraries entries. Used for the whole static code libraries.
     */
    this.libraries_ = new tr.e.importer.v8.SplayTree();

    /**
     * Map of memory pages occupied with static code.
     */
    this.pages_ = [];
  }

  /**
   * The number of alignment bits in a page address.
   */
  CodeMap.PAGE_ALIGNMENT = 12;

  /**
   * Page size in bytes.
   */
  CodeMap.PAGE_SIZE = 1 << CodeMap.PAGE_ALIGNMENT;

  /**
   * Adds a dynamic (i.e. moveable and discardable) code entry.
   *
   * @param {number} start The starting address.
   * @param {CodeMap.CodeEntry} codeEntry Code entry object.
   */
  CodeMap.prototype.addCode = function(start, codeEntry) {
    this.deleteAllCoveredNodes_(this.dynamics_, start, start + codeEntry.size);
    this.dynamics_.insert(start, codeEntry);
  };

  /**
   * Moves a dynamic code entry. Throws an exception if there is no dynamic
   * code entry with the specified starting address.
   *
   * @param {number} from The starting address of the entry being moved.
   * @param {number} to The destination address.
   */
  CodeMap.prototype.moveCode = function(from, to) {
    const removedNode = this.dynamics_.remove(from);
    this.deleteAllCoveredNodes_(this.dynamics_, to,
        to + removedNode.value.size);
    this.dynamics_.insert(to, removedNode.value);
  };

  /**
   * Discards a dynamic code entry. Throws an exception if there is no dynamic
   * code entry with the specified starting address.
   *
   * @param {number} start The starting address of the entry being deleted.
   */
  CodeMap.prototype.deleteCode = function(start) {
    const removedNode = this.dynamics_.remove(start);
  };

  /**
   * Adds a library entry.
   *
   * @param {number} start The starting address.
   * @param {CodeMap.CodeEntry} codeEntry Code entry object.
   */
  CodeMap.prototype.addLibrary = function(
      start, codeEntry) {
    this.markPages_(start, start + codeEntry.size);
    this.libraries_.insert(start, codeEntry);
  };

  /**
   * Adds a static code entry.
   *
   * @param {number} start The starting address.
   * @param {CodeMap.CodeEntry} codeEntry Code entry object.
   */
  CodeMap.prototype.addStaticCode = function(
      start, codeEntry) {
    this.statics_.insert(start, codeEntry);
  };

  /**
   * @private
   */
  CodeMap.prototype.markPages_ = function(start, end) {
    for (let addr = start; addr <= end;
         addr += CodeMap.PAGE_SIZE) {
      this.pages_[addr >>> CodeMap.PAGE_ALIGNMENT] = 1;
    }
  };

  /**
   * @private
   */
  CodeMap.prototype.deleteAllCoveredNodes_ = function(tree, start, end) {
    const toDelete = [];
    let addr = end - 1;
    while (addr >= start) {
      const node = tree.findGreatestLessThan(addr);
      if (!node) break;
      const start2 = node.key;
      const end2 = start2 + node.value.size;
      if (start2 < end && start < end2) toDelete.push(start2);
      addr = start2 - 1;
    }
    for (let i = 0, l = toDelete.length; i < l; ++i) tree.remove(toDelete[i]);
  };

  /**
   * @private
   */
  CodeMap.prototype.isAddressBelongsTo_ = function(addr, node) {
    return addr >= node.key && addr < (node.key + node.value.size);
  };

  /**
   * @private
   */
  CodeMap.prototype.findInTree_ = function(tree, addr) {
    const node = tree.findGreatestLessThan(addr);
    return node && this.isAddressBelongsTo_(addr, node) ? node.value : null;
  };

  /**
   * Finds a code entry that contains the specified address in static libraries.
   *
   * @param {number} addr Address.
   */
  CodeMap.prototype.findEntryInLibraries = function(addr) {
    const pageAddr = addr >>> CodeMap.PAGE_ALIGNMENT;
    if (pageAddr in this.pages_) {
      return this.findInTree_(this.libraries_, addr);
    }
    return undefined;
  };

  /**
   * Finds a code entry that contains the specified address. Both static and
   * dynamic code entries are considered.
   *
   * @param {number} addr Address.
   */
  CodeMap.prototype.findEntry = function(addr) {
    const pageAddr = addr >>> CodeMap.PAGE_ALIGNMENT;
    if (pageAddr in this.pages_) {
      // Static code entries can contain "holes" of unnamed code.
      // In this case, the whole library is assigned to this address.
      return this.findInTree_(this.statics_, addr) ||
          this.findInTree_(this.libraries_, addr);
    }
    const min = this.dynamics_.findMin();
    const max = this.dynamics_.findMax();
    if (max !== null && addr < (max.key + max.value.size) && addr >= min.key) {
      const dynaEntry = this.findInTree_(this.dynamics_, addr);
      if (dynaEntry === null) return null;
      // Dedupe entry name.
      if (!dynaEntry.nameUpdated_) {
        dynaEntry.name = this.dynamicsNameGen_.getName(dynaEntry.name);
        dynaEntry.nameUpdated_ = true;
      }
      return dynaEntry;
    }
    return null;
  };

  /**
   * Returns a dynamic code entry using its starting address.
   *
   * @param {number} addr Address.
   */
  CodeMap.prototype.findDynamicEntryByStartAddress =
      function(addr) {
        const node = this.dynamics_.find(addr);
        return node ? node.value : null;
      };

  /**
   * Returns an array of all dynamic code entries.
   */
  CodeMap.prototype.getAllDynamicEntries = function() {
    return this.dynamics_.exportValues();
  };

  /**
   * Returns an array of pairs of all dynamic code entries and their addresses.
   */
  CodeMap.prototype.getAllDynamicEntriesWithAddresses = function() {
    return this.dynamics_.exportKeysAndValues();
  };

  /**
   * Returns an array of all static code entries.
   */
  CodeMap.prototype.getAllStaticEntries = function() {
    return this.statics_.exportValues();
  };

  /**
   * Returns an array of all libraries entries.
   */
  CodeMap.prototype.getAllLibrariesEntries = function() {
    return this.libraries_.exportValues();
  };

  /**
   * Enum for code state regarding its dynamic optimization.
   *
   * @enum {number}
   */
  CodeMap.CodeState = {
    COMPILED: 0,
    OPTIMIZABLE: 1,
    OPTIMIZED: 2
  };

  /**
   * Creates a code entry object.
   *
   * @param {number} size Code entry size in bytes.
   * @param {string=} opt_name Code entry name.
   * @constructor
   */
  CodeMap.CodeEntry = function(size, opt_name, opt_type) {
    this.id = tr.b.GUID.allocateSimple();
    this.size = size;
    this.name_ = opt_name || '';
    this.type = opt_type || '';
    this.nameUpdated_ = false;
  };

  CodeMap.CodeEntry.prototype = {
    __proto__: Object.prototype,

    get name() {
      return this.name_;
    },

    set name(value) {
      this.name_ = value;
    },

    toString() {
      this.name_ + ': ' + this.size.toString(16);
    }
  };

  CodeMap.CodeEntry.TYPE = {
    SHARED_LIB: 'SHARED_LIB',
    CPP: 'CPP'
  };

  /**
   * Creates a dynamic code entry.
   *
   * @param {number} size Code size.
   * @param {string} type Code type.
   * @param {CodeMap.FunctionEntry} func Shared function entry.
   * @param {CodeMap.CodeState} state Code optimization state.
   * @constructor
   */
  CodeMap.DynamicFuncCodeEntry = function(size, type, func, state) {
    CodeMap.CodeEntry.call(this, size, '', type);
    this.func = func;
    this.state = state;
  };

  CodeMap.DynamicFuncCodeEntry.STATE_PREFIX = ['', '~', '*'];

  CodeMap.DynamicFuncCodeEntry.prototype = {
    __proto__: CodeMap.CodeEntry.prototype,

    /**
     * Returns node name.
     */
    get name() {
      return CodeMap.DynamicFuncCodeEntry.STATE_PREFIX[this.state] +
        this.func.name;
    },

    set name(value) {
      this.name_ = value;
    },

    /**
     * Returns raw node name (without type decoration).
     */
    getRawName() {
      return this.func.getName();
    },

    isJSFunction() {
      return true;
    },

    toString() {
      return this.type + ': ' + this.name + ': ' + this.size.toString(16);
    }
  };

  /**
   * Creates a shared function object entry.
   *
   * @param {string} name Function name.
   * @constructor
   */
  CodeMap.FunctionEntry = function(name) {
    CodeMap.CodeEntry.call(this, 0, name);
  };

  CodeMap.FunctionEntry.prototype = {
    __proto__: CodeMap.CodeEntry.prototype,

    /**
     * Returns node name.
     */
    get name() {
      let name = this.name_;
      if (name.length === 0) {
        name = '<anonymous>';
      } else if (name.charAt(0) === ' ') {
        // An anonymous function with location: " aaa.js:10".
        name = '<anonymous>' + name;
      }
      return name;
    },

    set name(value) {
      this.name_ = value;
    }
  };

  CodeMap.NameGenerator = function() {
    this.knownNames_ = {};
  };

  CodeMap.NameGenerator.prototype.getName = function(name) {
    if (!(name in this.knownNames_)) {
      this.knownNames_[name] = 0;
      return name;
    }
    const count = ++this.knownNames_[name];
    return name + ' {' + count + '}';
  };
  return {
    CodeMap,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  /**
   * The context processor consumes context events and maintains a set of
   * active contexts for a single thread.
   *
   * @constructor
   */
  function ContextProcessor(model) {
    this.model_ = model;
    this.activeContexts_ = [];
    this.stackPerType_ = {};
    // Cache of unique context objects.
    this.contextCache_ = {};
    // Cache of unique context object sets.
    this.contextSetCache_ = {};
    this.cachedEntryForActiveContexts_ = undefined;
    // All seen context object snapshots.
    this.seenSnapshots_ = {};
  }

  ContextProcessor.prototype = {
    enterContext(contextType, scopedId) {
      const newActiveContexts = [
        this.getOrCreateContext_(contextType, scopedId),
      ];
      for (const oldContext of this.activeContexts_) {
        if (oldContext.type === contextType) {
          // If a previous context of the same type is active, it is removed
          // and pushed onto the stack for this type.
          this.pushContext_(oldContext);
        } else {
          // Otherwise the old context is it is still active.
          newActiveContexts.push(oldContext);
        }
      }
      this.activeContexts_ = newActiveContexts;
      this.cachedEntryForActiveContexts_ = undefined;
    },

    leaveContext(contextType, scopedId) {
      this.leaveContextImpl_(context =>
          context.type === contextType &&
          context.snapshot.scope === scopedId.scope &&
          context.snapshot.idRef === scopedId.id);
    },

    destroyContext(scopedId) {
      // Remove all matching contexts from stacks.
      for (const stack of Object.values(this.stackPerType_)) {
        // Perform in-place filtering instead of Array.prototype.filter to
        // prevent creating a new array.
        let newLength = 0;
        for (let i = 0; i < stack.length; ++i) {
          if (stack[i].snapshot.scope !== scopedId.scope ||
              stack[i].snapshot.idRef !== scopedId.id) {
            stack[newLength++] = stack[i];
          }
        }
        stack.length = newLength;
      }

      // Remove all matching contexts from active context set.
      this.leaveContextImpl_(context =>
          context.snapshot.scope === scopedId.scope &&
          context.snapshot.idRef === scopedId.id);
    },

    leaveContextImpl_(predicate) {
      const newActiveContexts = [];
      for (const oldContext of this.activeContexts_) {
        if (predicate(oldContext)) {
          // If we left this context, remove it from the active set and
          // restore any previous context of the same type.
          const previousContext = this.popContext_(oldContext.type);
          if (previousContext) {
            newActiveContexts.push(previousContext);
          }
        } else {
          newActiveContexts.push(oldContext);
        }
      }
      this.activeContexts_ = newActiveContexts;
      this.cachedEntryForActiveContexts_ = undefined;
    },

    getOrCreateContext_(contextType, scopedId) {
      const context = {
        type: contextType,
        snapshot: {
          scope: scopedId.scope,
          idRef: scopedId.id
        }
      };
      const key = this.getContextKey_(context);
      if (key in this.contextCache_) {
        return this.contextCache_[key];
      }
      this.contextCache_[key] = context;
      const snapshotKey = this.getSnapshotKey_(scopedId);
      this.seenSnapshots_[snapshotKey] = true;
      return context;
    },

    pushContext_(context) {
      if (!(context.type in this.stackPerType_)) {
        this.stackPerType_[context.type] = [];
      }
      this.stackPerType_[context.type].push(context);
    },

    popContext_(contextType) {
      if (!(contextType in this.stackPerType_)) {
        return undefined;
      }
      return this.stackPerType_[contextType].pop();
    },

    getContextKey_(context) {
      return [
        context.type,
        context.snapshot.scope,
        context.snapshot.idRef
      ].join('\x00');
    },

    getSnapshotKey_(scopedId) {
      return [
        scopedId.scope,
        scopedId.idRef
      ].join('\x00');
    },

    get activeContexts() {
      // Keep a single instance for each unique set of active contexts to
      // reduce memory usage.
      if (this.cachedEntryForActiveContexts_ === undefined) {
        let key = [];
        for (const context of this.activeContexts_) {
          key.push(this.getContextKey_(context));
        }
        key.sort();
        key = key.join('\x00');
        if (key in this.contextSetCache_) {
          this.cachedEntryForActiveContexts_ = this.contextSetCache_[key];
        } else {
          this.activeContexts_.sort(function(a, b) {
            const keyA = this.getContextKey_(a);
            const keyB = this.getContextKey_(b);
            if (keyA < keyB) {
              return -1;
            }
            if (keyA > keyB) {
              return 1;
            }
            return 0;
          }.bind(this));
          this.contextSetCache_[key] = Object.freeze(this.activeContexts_);
          this.cachedEntryForActiveContexts_ = this.contextSetCache_[key];
        }
      }
      return this.cachedEntryForActiveContexts_;
    },

    invalidateContextCacheForSnapshot(scopedId) {
      const snapshotKey = this.getSnapshotKey_(scopedId);
      if (!(snapshotKey in this.seenSnapshots_)) return;

      this.contextCache_ = {};
      this.contextSetCache_ = {};
      this.cachedEntryForActiveContexts_ = undefined;
      this.activeContexts_ = this.activeContexts_.map(function(context) {
        // Do not alter unrelated contexts.
        if (context.snapshot.scope !== scopedId.scope ||
            context.snapshot.idRef !== scopedId.id) {
          return context;
        }
        // Replace the invalidated context by a deep copy.
        return {
          type: context.type,
          snapshot: {
            scope: context.snapshot.scope,
            idRef: context.snapshot.idRef
          }
        };
      });
      this.seenSnapshots_ = {};
    },
  };

  return {
    ContextProcessor,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  function RegisteredTypeInfo(constructor, metadata) {
    this.constructor = constructor;
    this.metadata = metadata;
  }

  const BASIC_REGISTRY_MODE = 'BASIC_REGISTRY_MODE';
  const TYPE_BASED_REGISTRY_MODE = 'TYPE_BASED_REGISTRY_MODE';
  const ALL_MODES = {BASIC_REGISTRY_MODE: true, TYPE_BASED_REGISTRY_MODE: true};

  function ExtensionRegistryOptions(mode) {
    if (mode === undefined) {
      throw new Error('Mode is required');
    }
    if (!ALL_MODES[mode]) {
      throw new Error('Not a mode.');
    }

    this.mode_ = mode;
    this.defaultMetadata_ = {};
    this.defaultConstructor_ = undefined;
    this.defaultTypeInfo_ = undefined;
    this.frozen_ = false;
  }
  ExtensionRegistryOptions.prototype = {
    freeze() {
      if (this.frozen_) {
        throw new Error('Frozen');
      }
      this.frozen_ = true;
    },

    get mode() {
      return this.mode_;
    },

    get defaultMetadata() {
      return this.defaultMetadata_;
    },

    set defaultMetadata(defaultMetadata) {
      if (this.frozen_) {
        throw new Error('Frozen');
      }
      this.defaultMetadata_ = defaultMetadata;
      this.defaultTypeInfo_ = undefined;
    },

    get defaultConstructor() {
      return this.defaultConstructor_;
    },

    set defaultConstructor(defaultConstructor) {
      if (this.frozen_) {
        throw new Error('Frozen');
      }
      this.defaultConstructor_ = defaultConstructor;
      this.defaultTypeInfo_ = undefined;
    },

    get defaultTypeInfo() {
      if (this.defaultTypeInfo_ === undefined && this.defaultConstructor_) {
        this.defaultTypeInfo_ = new RegisteredTypeInfo(
            this.defaultConstructor,
            this.defaultMetadata);
      }
      return this.defaultTypeInfo_;
    },

    validateConstructor(constructor) {
      if (!this.mandatoryBaseClass) return;
      let curProto = constructor.prototype.__proto__;
      let ok = false;
      while (curProto) {
        if (curProto === this.mandatoryBaseClass.prototype) {
          ok = true;
          break;
        }
        curProto = curProto.__proto__;
      }
      if (!ok) {
        throw new Error(constructor + 'must be subclass of ' + registry);
      }
    }
  };

  return {
    BASIC_REGISTRY_MODE,
    TYPE_BASED_REGISTRY_MODE,

    ExtensionRegistryOptions,
    RegisteredTypeInfo,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  const RegisteredTypeInfo = tr.b.RegisteredTypeInfo;
  const ExtensionRegistryOptions = tr.b.ExtensionRegistryOptions;

  function decorateBasicExtensionRegistry(registry, extensionRegistryOptions) {
    const savedStateStack = [];
    registry.registeredTypeInfos_ = [];

    registry.register = function(constructor,
        opt_metadata) {
      if (registry.findIndexOfRegisteredConstructor(
          constructor) !== undefined) {
        throw new Error('Handler already registered for ' + constructor);
      }

      extensionRegistryOptions.validateConstructor(constructor);

      const metadata = {};
      for (const k in extensionRegistryOptions.defaultMetadata) {
        metadata[k] = extensionRegistryOptions.defaultMetadata[k];
      }
      if (opt_metadata) {
        for (const k in opt_metadata) {
          metadata[k] = opt_metadata[k];
        }
      }

      const typeInfo = new RegisteredTypeInfo(
          constructor,
          metadata);

      let e = new tr.b.Event('will-register');
      e.typeInfo = typeInfo;
      registry.dispatchEvent(e);

      registry.registeredTypeInfos_.push(typeInfo);

      e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };

    registry.pushCleanStateBeforeTest = function() {
      savedStateStack.push(registry.registeredTypeInfos_);
      registry.registeredTypeInfos_ = [];

      const e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };
    registry.popCleanStateAfterTest = function() {
      registry.registeredTypeInfos_ = savedStateStack[0];
      savedStateStack.splice(0, 1);

      const e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };

    registry.findIndexOfRegisteredConstructor = function(constructor) {
      for (let i = 0; i < registry.registeredTypeInfos_.length; i++) {
        if (registry.registeredTypeInfos_[i].constructor === constructor) {
          return i;
        }
      }
      return undefined;
    };

    registry.unregister = function(constructor) {
      const foundIndex = registry.findIndexOfRegisteredConstructor(constructor);
      if (foundIndex === undefined) {
        throw new Error(constructor + ' not registered');
      }
      registry.registeredTypeInfos_.splice(foundIndex, 1);

      const e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };

    registry.getAllRegisteredTypeInfos = function() {
      return registry.registeredTypeInfos_;
    };

    registry.findTypeInfo = function(constructor) {
      const foundIndex = this.findIndexOfRegisteredConstructor(constructor);
      if (foundIndex !== undefined) {
        return this.registeredTypeInfos_[foundIndex];
      }
      return undefined;
    };

    registry.findTypeInfoMatching = function(predicate, opt_this) {
      opt_this = opt_this ? opt_this : undefined;
      for (let i = 0; i < registry.registeredTypeInfos_.length; ++i) {
        const typeInfo = registry.registeredTypeInfos_[i];
        if (predicate.call(opt_this, typeInfo)) {
          return typeInfo;
        }
      }
      return extensionRegistryOptions.defaultTypeInfo;
    };

    registry.findTypeInfoWithName = function(name) {
      if (typeof(name) !== 'string') {
        throw new Error('Name is not a string.');
      }
      const typeInfo = registry.findTypeInfoMatching(function(ti) {
        return ti.constructor.name === name;
      });
      if (typeInfo) return typeInfo;
      return undefined;
    };
  }

  return {
    _decorateBasicExtensionRegistry: decorateBasicExtensionRegistry
  };
});


'use strict';

/**
 * @fileoverview Helper code for working with tracing categories.
 *
 */
tr.exportTo('tr.b', function() {
  // Cached values for getCategoryParts.
  const categoryPartsFor = {};

  /**
   * Categories are stored in comma-separated form, e.g: 'a,b' meaning
   * that the event is part of the a and b category.
   *
   * This function returns the category split by string, caching the
   * array for performance.
   *
   * Do not mutate the returned array!!!!
   */
  function getCategoryParts(category) {
    let parts = categoryPartsFor[category];
    if (parts !== undefined) return parts;
    parts = category.split(',');
    categoryPartsFor[category] = parts;
    return parts;
  }

  return {
    getCategoryParts,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  const getCategoryParts = tr.b.getCategoryParts;

  const RegisteredTypeInfo = tr.b.RegisteredTypeInfo;
  const ExtensionRegistryOptions = tr.b.ExtensionRegistryOptions;


  function decorateTypeBasedExtensionRegistry(registry,
      extensionRegistryOptions) {
    const savedStateStack = [];

    registry.registeredTypeInfos_ = [];

    registry.categoryPartToTypeInfoMap_ = new Map();
    registry.typeNameToTypeInfoMap_ = new Map();

    registry.register = function(constructor,
        metadata) {
      extensionRegistryOptions.validateConstructor(constructor);

      const typeInfo = new RegisteredTypeInfo(
          constructor,
          metadata || extensionRegistryOptions.defaultMetadata);

      typeInfo.typeNames = [];
      typeInfo.categoryParts = [];
      if (metadata && metadata.typeName) {
        typeInfo.typeNames.push(metadata.typeName);
      }
      if (metadata && metadata.typeNames) {
        typeInfo.typeNames.push.apply(
            typeInfo.typeNames, metadata.typeNames);
      }
      if (metadata && metadata.categoryParts) {
        typeInfo.categoryParts.push.apply(
            typeInfo.categoryParts, metadata.categoryParts);
      }

      if (typeInfo.typeNames.length === 0 &&
          typeInfo.categoryParts.length === 0) {
        throw new Error('typeName or typeNames must be provided');
      }

      // Sanity checks...
      typeInfo.typeNames.forEach(function(typeName) {
        if (registry.typeNameToTypeInfoMap_.has(typeName)) {
          throw new Error('typeName ' + typeName + ' already registered');
        }
      });
      typeInfo.categoryParts.forEach(function(categoryPart) {
        if (registry.categoryPartToTypeInfoMap_.has(categoryPart)) {
          throw new Error('categoryPart ' + categoryPart +
                          ' already registered');
        }
      });

      let e = new tr.b.Event('will-register');
      e.typeInfo = typeInfo;
      registry.dispatchEvent(e);

      // Actual registration.
      typeInfo.typeNames.forEach(function(typeName) {
        registry.typeNameToTypeInfoMap_.set(typeName, typeInfo);
      });
      typeInfo.categoryParts.forEach(function(categoryPart) {
        registry.categoryPartToTypeInfoMap_.set(categoryPart, typeInfo);
      });
      registry.registeredTypeInfos_.push(typeInfo);

      e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };

    registry.pushCleanStateBeforeTest = function() {
      savedStateStack.push({
        registeredTypeInfos: registry.registeredTypeInfos_,
        typeNameToTypeInfoMap: registry.typeNameToTypeInfoMap_,
        categoryPartToTypeInfoMap: registry.categoryPartToTypeInfoMap_
      });
      registry.registeredTypeInfos_ = [];
      registry.typeNameToTypeInfoMap_ = new Map();
      registry.categoryPartToTypeInfoMap_ = new Map();
      const e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };

    registry.popCleanStateAfterTest = function() {
      const state = savedStateStack[0];
      savedStateStack.splice(0, 1);

      registry.registeredTypeInfos_ = state.registeredTypeInfos;
      registry.typeNameToTypeInfoMap_ = state.typeNameToTypeInfoMap;
      registry.categoryPartToTypeInfoMap_ = state.categoryPartToTypeInfoMap;
      const e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };

    registry.unregister = function(constructor) {
      let typeInfoIndex = -1;
      for (let i = 0; i < registry.registeredTypeInfos_.length; i++) {
        if (registry.registeredTypeInfos_[i].constructor === constructor) {
          typeInfoIndex = i;
          break;
        }
      }
      if (typeInfoIndex === -1) {
        throw new Error(constructor + ' not registered');
      }

      const typeInfo = registry.registeredTypeInfos_[typeInfoIndex];
      registry.registeredTypeInfos_.splice(typeInfoIndex, 1);
      typeInfo.typeNames.forEach(function(typeName) {
        registry.typeNameToTypeInfoMap_.delete(typeName);
      });
      typeInfo.categoryParts.forEach(function(categoryPart) {
        registry.categoryPartToTypeInfoMap_.delete(categoryPart);
      });
      const e = new tr.b.Event('registry-changed');
      registry.dispatchEvent(e);
    };

    registry.getTypeInfo = function(category, typeName) {
      if (category) {
        const categoryParts = getCategoryParts(category);
        for (let i = 0; i < categoryParts.length; i++) {
          const categoryPart = categoryParts[i];
          const typeInfo = registry.categoryPartToTypeInfoMap_.get(
              categoryPart);
          if (typeInfo !== undefined) return typeInfo;
        }
      }
      const typeInfo = registry.typeNameToTypeInfoMap_.get(typeName);
      if (typeInfo !== undefined) return typeInfo;

      return extensionRegistryOptions.defaultTypeInfo;
    };

    // TODO(nduca): Remove or rename.
    registry.getConstructor = function(category, typeName) {
      const typeInfo = registry.getTypeInfo(category, typeName);
      if (typeInfo) return typeInfo.constructor;
      return undefined;
    };
  }

  return {
    _decorateTypeBasedExtensionRegistry: decorateTypeBasedExtensionRegistry
  };
});


'use strict';

/**
 * @fileoverview Helper code for defining extension registries, which can be
 * used to make a part of trace-viewer extensible.
 *
 * This file provides two basic types of extension registries:
 * - Generic: register a type with metadata, query for those types based on
 *            a predicate
 *
 * - TypeName-based: register a type that handles some combination
 *                   of tracing categories or typeNames, then query
 *                   for it based on a category, typeName or both.
 *
 * When you register subtypes, you pass the constructor for the
 * subtype, and any metadata you want associated with the subtype. Use metadata
 * instead of stuffing fields onto the constructor. E.g.:
 *     registry.register(MySubclass, {titleWhenShownInTabStrip: 'MySub'})
 *
 * Some registries want a default object that is returned when a more precise
 * subtype has not been registered. To provide one, set the defaultConstructor
 * option on the registry options.
 *
 * TODO: Extension registry used to make reference to mandatoryBaseType but it
 * was never enforced. We may want to add it back in the future in order to
 * enforce the types that can be put into a given registry.
 */
tr.exportTo('tr.b', function() {
  function decorateExtensionRegistry(registry, registryOptions) {
    if (registry.register) {
      throw new Error('Already has registry');
    }

    registryOptions.freeze();
    if (registryOptions.mode === tr.b.BASIC_REGISTRY_MODE) {
      tr.b._decorateBasicExtensionRegistry(registry, registryOptions);
    } else if (registryOptions.mode === tr.b.TYPE_BASED_REGISTRY_MODE) {
      tr.b._decorateTypeBasedExtensionRegistry(registry, registryOptions);
    } else {
      throw new Error('Unrecognized mode');
    }

    // Make it an event target.
    if (registry.addEventListener === undefined) {
      tr.b.EventTarget.decorate(registry);
    }
  }

  return {
    decorateExtensionRegistry,
  };
});


'use strict';

/**
 * @fileoverview Base class for trace data importers.
 */
tr.exportTo('tr.importer', function() {
  function Importer() { }

  Importer.prototype = {
    __proto__: Object.prototype,

    get importerName() {
      return 'Importer';
    },

    /**
     * Called by the Model to check whether the importer type stores the actual
     * trace data or just holds it as container for further extraction.
     */
    isTraceDataContainer() {
      return false;
    },

    /**
     * Called by the Model to extract one or more subtraces from the event data.
     */
    extractSubtraces() {
      return [];
    },

    /**
     * Called to import clock sync markers into the Model.
     */
    importClockSyncMarkers() {
    },

    /**
     * Called to import events into the Model.
     */
    importEvents() {
    },

    /**
     * Called to import sample data into the Model.
     */
    importSampleData() {
    },

    /**
     * Called by the Model after all other importers have imported their
     * events.
     */
    finalizeImport() {
    }
  };


  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  options.defaultMetadata = {};
  options.mandatoryBaseClass = Importer;
  tr.b.decorateExtensionRegistry(Importer, options);

  Importer.findImporterFor = function(eventData) {
    const typeInfo = Importer.findTypeInfoMatching(function(ti) {
      return ti.constructor.canImport(eventData);
    });
    if (typeInfo) {
      return typeInfo.constructor;
    }
    return undefined;
  };

  return {
    Importer,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  let nextGUID = 1;

  const UUID4_PATTERN = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';

  const GUID = {
    /* Allocate an integer GUID.
     *
     * These GUIDs are not unique between loads, but are fast to generate, and
     * consume very little memory.
     *
     * @return {number} globally unique id.
     */
    allocateSimple() {
      return nextGUID++;
    },

    /* Return the last GUID allocated without allocating a new one.
     *
     * @return {number} last guid.
     */
    getLastSimpleGuid() {
      return nextGUID - 1;
    },

    /* Generate a random string UUID.
     *
     * Version 4 random UUIDs are practically guaranteed to be unique between
     * loads, so they can be serialized and compared with results from other
     * loads. These are slower to generate and consume more memory than simple
     * GUIDs.
     *
     * Background on using Math.random() for allocating identifiers:
     * https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d#.n5b6vgrsh
     * https://v8project.blogspot.com/2015/12/theres-mathrandom-and-then-theres.html
     *
     * @return {string} universally unique id.
     */
    allocateUUID4() {
      return UUID4_PATTERN.replace(/[xy]/g, function(c) {
        let r = parseInt(Math.random() * 16);
        if (c === 'y') r = (r & 3) + 8;
        return r.toString(16);
      });
    }
  };

  return {
    GUID,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * Annotation is a base class that represents all annotation objects that
   * can be drawn on the timeline.
   *
   * @constructor
   */
  function Annotation() {
    this.guid_ = tr.b.GUID.allocateSimple();
    this.view_ = undefined;
  }

  Annotation.fromDictIfPossible = function(args) {
    if (args.typeName === undefined) {
      throw new Error('Missing typeName argument');
    }

    const typeInfo = Annotation.findTypeInfoMatching(function(typeInfo) {
      return typeInfo.metadata.typeName === args.typeName;
    });

    if (typeInfo === undefined) return undefined;

    return typeInfo.constructor.fromDict(args);
  };

  Annotation.fromDict = function() {
    throw new Error('Not implemented');
  };

  Annotation.prototype = {
    get guid() {
      return this.guid_;
    },

    // Invoked by trace model when this annotation is removed.
    onRemove() {
    },

    toDict() {
      throw new Error('Not implemented');
    },

    getOrCreateView(viewport) {
      if (!this.view_) {
        this.view_ = this.createView_(viewport);
      }
      return this.view_;
    },

    createView_() {
      throw new Error('Not implemented');
    }
  };

  const options = new tr.b.ExtensionRegistryOptions(tr.b. BASIC_REGISTRY_MODE);
  tr.b.decorateExtensionRegistry(Annotation, options);

  Annotation.addEventListener('will-register', function(e) {
    if (!e.typeInfo.constructor.hasOwnProperty('fromDict')) {
      throw new Error('Must have fromDict method');
    }

    if (!e.typeInfo.metadata.typeName) {
      throw new Error('Registered Annotations must provide typeName');
    }
  });

  return {
    Annotation,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * YComponent is a class that handles storing the stableId and the percentage
   * offset in the y direction of all tracks within a specific viewX and viewY
   * coordinate.
   * @constructor
   */
  function YComponent(stableId, yPercentOffset) {
    this.stableId = stableId;
    this.yPercentOffset = yPercentOffset;
  }

  YComponent.prototype = {
    toDict() {
      return {
        stableId: this.stableId,
        yPercentOffset: this.yPercentOffset
      };
    }
  };

  /**
   * Location is a class that represents a spatial location on the timeline
   * that is specified by percent offsets within tracks rather than specific
   * points.
   *
   * @constructor
   */
  function Location(xWorld, yComponents) {
    this.xWorld_ = xWorld;
    this.yComponents_ = yComponents;
  }

  /**
   * Returns a new Location given by x and y coordinates with respect to
   * the timeline's drawing canvas.
   */
  Location.fromViewCoordinates = function(viewport, viewX, viewY) {
    const dt = viewport.currentDisplayTransform;
    const xWorld = dt.xViewToWorld(viewX);
    const yComponents = [];

    // Since we're given coordinates within the timeline canvas, we need to
    // convert them to document coordinates to get the element.
    let elem = document.elementFromPoint(
        viewX + viewport.modelTrackContainer.canvas.offsetLeft,
        viewY + viewport.modelTrackContainer.canvas.offsetTop);
    // Build yComponents by calculating percentage offset with respect to
    // each parent track.
    while (elem instanceof tr.ui.tracks.Track) {
      if (elem.eventContainer) {
        const boundRect = elem.getBoundingClientRect();
        const yPercentOffset = (viewY - boundRect.top) / boundRect.height;
        yComponents.push(
            new YComponent(elem.eventContainer.stableId, yPercentOffset));
      }
      elem = elem.parentElement;
    }

    if (yComponents.length === 0) return;
    return new Location(xWorld, yComponents);
  };

  Location.fromStableIdAndTimestamp = function(viewport, stableId, ts) {
    const xWorld = ts;
    const yComponents = [];

    // The y components' percentage offsets will be calculated with respect to
    // the boundingRect's top of containing track.
    const containerToTrack = viewport.containerToTrackMap;
    let elem = containerToTrack.getTrackByStableId(stableId);
    if (!elem) return;

    const firstY = elem.getBoundingClientRect().top;
    while (elem instanceof tr.ui.tracks.Track) {
      if (elem.eventContainer) {
        const boundRect = elem.getBoundingClientRect();
        const yPercentOffset = (firstY - boundRect.top) / boundRect.height;
        yComponents.push(
            new YComponent(elem.eventContainer.stableId, yPercentOffset));
      }
      elem = elem.parentElement;
    }

    if (yComponents.length === 0) return;
    return new Location(xWorld, yComponents);
  };

  Location.prototype = {

    get xWorld() {
      return this.xWorld_;
    },

    /**
     * Returns the first valid containing track based on the
     * internal yComponents.
     */
    getContainingTrack(viewport) {
      const containerToTrack = viewport.containerToTrackMap;
      for (const i in this.yComponents_) {
        const yComponent = this.yComponents_[i];
        const track = containerToTrack.getTrackByStableId(yComponent.stableId);
        if (track !== undefined) return track;
      }
    },

    /**
     * Calculates and returns x and y coordinates of the current location with
     * respect to the timeline's canvas.
     */
    toViewCoordinates(viewport) {
      const dt = viewport.currentDisplayTransform;
      const containerToTrack = viewport.containerToTrackMap;
      const viewX = dt.xWorldToView(this.xWorld_);

      let viewY = -1;
      for (const index in this.yComponents_) {
        const yComponent = this.yComponents_[index];
        const track = containerToTrack.getTrackByStableId(yComponent.stableId);
        if (track !== undefined) {
          const boundRect = track.getBoundingClientRect();
          viewY = yComponent.yPercentOffset * boundRect.height + boundRect.top;
          break;
        }
      }

      return {
        viewX,
        viewY
      };
    },

    toDict() {
      return {
        xWorld: this.xWorld_,
        yComponents: this.yComponents_
      };
    }
  };

  return {
    Location,
  };
});


'use strict';

tr.exportTo('tr.ui.annotations', function() {
  /**
   * A base class for all annotation views.
   * @constructor
   */
  function AnnotationView(viewport, annotation) {
  }

  AnnotationView.prototype = {
    draw(ctx) {
      throw new Error('Not implemented');
    }
  };

  return {
    AnnotationView,
  };
});


'use strict';

tr.exportTo('tr.ui.annotations', function() {
  /**
   * A view responsible for drawing a single highlight rectangle box on
   * the timeline.
   * @extends {AnnotationView}
   * @constructor
   */
  function RectAnnotationView(viewport, annotation) {
    this.viewport_ = viewport;
    this.annotation_ = annotation;
  }

  RectAnnotationView.prototype = {
    __proto__: tr.ui.annotations.AnnotationView.prototype,

    draw(ctx) {
      const dt = this.viewport_.currentDisplayTransform;
      const startCoords =
          this.annotation_.startLocation.toViewCoordinates(this.viewport_);
      const endCoords =
          this.annotation_.endLocation.toViewCoordinates(this.viewport_);

      // Prevent drawing into the ruler track by clamping the initial Y
      // point and the rect's Y size.
      let startY = startCoords.viewY - ctx.canvas.getBoundingClientRect().top;
      const sizeY = endCoords.viewY - startCoords.viewY;
      if (startY + sizeY < 0) {
        // In this case sizeY is negative. If final Y is negative,
        // overwrite startY so that the rectangle ends at y=0.
        startY = sizeY;
      } else if (startY < 0) {
        startY = 0;
      }

      ctx.fillStyle = this.annotation_.fillStyle;
      ctx.fillRect(startCoords.viewX, startY,
          endCoords.viewX - startCoords.viewX, sizeY);
    }
  };

  return {
    RectAnnotationView,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  function RectAnnotation(start, end) {
    tr.model.Annotation.apply(this, arguments);

    this.startLocation_ = start; // Location of top-left corner.
    this.endLocation_ = end; // Location of bottom-right corner.
    this.fillStyle = 'rgba(255, 180, 0, 0.3)';
  }

  RectAnnotation.fromDict = function(dict) {
    const args = dict.args;
    const startLoc =
        new tr.model.Location(args.start.xWorld, args.start.yComponents);
    const endLoc =
        new tr.model.Location(args.end.xWorld, args.end.yComponents);
    return new tr.model.RectAnnotation(startLoc, endLoc);
  };

  RectAnnotation.prototype = {
    __proto__: tr.model.Annotation.prototype,

    get startLocation() {
      return this.startLocation_;
    },

    get endLocation() {
      return this.endLocation_;
    },

    toDict() {
      return {
        typeName: 'rect',
        args: {
          start: this.startLocation.toDict(),
          end: this.endLocation.toDict()
        }
      };
    },

    createView_(viewport) {
      return new tr.ui.annotations.RectAnnotationView(viewport, this);
    }
  };

  tr.model.Annotation.register(RectAnnotation, {typeName: 'rect'});

  return {
    RectAnnotation,
  };
});


'use strict';

tr.exportTo('tr.ui.annotations', function() {
  /**
   * A view of a comment box consisting of a textarea and a line to the
   * actual location.
   * @extends {AnnotationView}
   * @constructor
   */
  function CommentBoxAnnotationView(viewport, annotation) {
    this.viewport_ = viewport;
    this.annotation_ = annotation;
    this.textArea_ = undefined;

    this.styleWidth = 250;
    this.styleHeight = 50;
    this.fontSize = 10;
    this.rightOffset = 50;
    this.topOffset = 25;
  }

  CommentBoxAnnotationView.prototype = {
    __proto__: tr.ui.annotations.AnnotationView.prototype,

    removeTextArea() {
      Polymer.dom(Polymer.dom(this.textArea_).parentNode).removeChild(
          this.textArea_);
    },

    draw(ctx) {
      const coords = this.annotation_.location.toViewCoordinates(
          this.viewport_);
      if (coords.viewX < 0) {
        if (this.textArea_) {
          this.textArea_.style.visibility = 'hidden';
        }
        return;
      }

      // Set up textarea element.
      if (!this.textArea_) {
        this.textArea_ = document.createElement('textarea');
        this.textArea_.style.position = 'absolute';
        this.textArea_.readOnly = true;
        this.textArea_.value = this.annotation_.text;
        // Set the z-index so that this is shown on top of canvas.
        this.textArea_.style.zIndex = 1;
        Polymer.dom(Polymer.dom(ctx.canvas).parentNode)
            .appendChild(this.textArea_);
      }

      this.textArea_.style.width = this.styleWidth + 'px';
      this.textArea_.style.height = this.styleHeight + 'px';
      this.textArea_.style.fontSize = this.fontSize + 'px';
      this.textArea_.style.visibility = 'visible';

      // Update positions to latest coordinate.
      this.textArea_.style.left =
          coords.viewX + ctx.canvas.getBoundingClientRect().left +
          this.rightOffset + 'px';
      this.textArea_.style.top =
          coords.viewY - ctx.canvas.getBoundingClientRect().top -
          this.topOffset + 'px';

      // Draw pointer line from offset to actual location.
      ctx.strokeStyle = 'rgb(0, 0, 0)';
      ctx.lineWidth = 2;
      ctx.beginPath();
      tr.ui.b.drawLine(ctx, coords.viewX,
          coords.viewY - ctx.canvas.getBoundingClientRect().top,
          coords.viewX + this.rightOffset,
          coords.viewY - this.topOffset -
            ctx.canvas.getBoundingClientRect().top);
      ctx.stroke();
    }
  };

  return {
    CommentBoxAnnotationView,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  function CommentBoxAnnotation(location, text) {
    tr.model.Annotation.apply(this, arguments);

    this.location = location;
    this.text = text;
  }

  CommentBoxAnnotation.fromDict = function(dict) {
    const args = dict.args;
    const location =
        new tr.model.Location(args.location.xWorld, args.location.yComponents);
    return new tr.model.CommentBoxAnnotation(location, args.text);
  };

  CommentBoxAnnotation.prototype = {
    __proto__: tr.model.Annotation.prototype,

    onRemove() {
      this.view_.removeTextArea();
    },

    toDict() {
      return {
        typeName: 'comment_box',
        args: {
          text: this.text,
          location: this.location.toDict()
        }
      };
    },

    createView_(viewport) {
      return new tr.ui.annotations.CommentBoxAnnotationView(viewport, this);
    }
  };

  tr.model.Annotation.register(
      CommentBoxAnnotation, {typeName: 'comment_box'});

  return {
    CommentBoxAnnotation,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  return {
    // Since the PID of the browser process is not known to the child processes,
    // we let them use "pid_ref = -1" to reference an object created in the
    // browser process.
    BROWSER_PROCESS_PID_REF: -1,

    // The default scope of object events, when not explicitly specified.
    OBJECT_DEFAULT_SCOPE: 'ptr',

    // Event phases that have process-local IDs, unless a global ID is
    // explicitly specified.
    LOCAL_ID_PHASES: new Set(['N', 'D', 'O', '(', ')'])
  };
});


'use strict';

/**
 * @fileoverview Provides the EventRegistry class.
 */
tr.exportTo('tr.model', function() {
  // Create the type registry.
  function EventRegistry() {
  }

  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  tr.b.decorateExtensionRegistry(EventRegistry, options);

  // Enforce all options objects have the right fields.
  EventRegistry.addEventListener('will-register', function(e) {
    const metadata = e.typeInfo.metadata;
    if (metadata.name === undefined) {
      throw new Error('Registered events must provide name metadata');
    }
    if (metadata.pluralName === undefined) {
      throw new Error('Registered events must provide pluralName metadata');
    }

    // Add a subtype registry to every event so that all events can be
    // extended
    if (metadata.subTypes === undefined) {
      metadata.subTypes = {};
      const options = new tr.b.ExtensionRegistryOptions(
          tr.b.TYPE_BASED_REGISTRY_MODE);
      options.mandatoryBaseClass = e.typeInfo.constructor;
      options.defaultConstructor = e.typeInfo.constructor;
      tr.b.decorateExtensionRegistry(metadata.subTypes, options);
    } else {
      if (!metadata.subTypes.register) {
        throw new Error('metadata.subTypes must be an extension registry.');
      }
    }

    e.typeInfo.constructor.subTypes = metadata.subTypes;
  });

  // Helper: lookup Events indexed by type name.
  let eventsByTypeName = undefined;
  EventRegistry.getEventTypeInfoByTypeName = function(typeName) {
    if (eventsByTypeName === undefined) {
      eventsByTypeName = {};
      EventRegistry.getAllRegisteredTypeInfos().forEach(function(typeInfo) {
        eventsByTypeName[typeInfo.metadata.name] = typeInfo;
      });
    }
    return eventsByTypeName[typeName];
  };

  // Ensure eventsByTypeName stays current.
  EventRegistry.addEventListener('registry-changed', function() {
    eventsByTypeName = undefined;
  });

  function convertCamelCaseToTitleCase(name) {
    let result = name.replace(/[A-Z]/g, ' $&');
    result = result.charAt(0).toUpperCase() + result.slice(1);
    return result;
  }

  EventRegistry.getUserFriendlySingularName = function(typeName) {
    const typeInfo = EventRegistry.getEventTypeInfoByTypeName(typeName);
    const str = typeInfo.metadata.name;
    return convertCamelCaseToTitleCase(str);
  };

  EventRegistry.getUserFriendlyPluralName = function(typeName) {
    const typeInfo = EventRegistry.getEventTypeInfoByTypeName(typeName);
    const str = typeInfo.metadata.pluralName;
    return convertCamelCaseToTitleCase(str);
  };

  return {
    EventRegistry,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const EventRegistry = tr.model.EventRegistry;

  const RequestSelectionChangeEvent = tr.b.Event.bind(
      undefined, 'requestSelectionChange', true, false);

  /**
   * Represents a event set within a  and its associated set of tracks.
   * @constructor
   */
  function EventSet(opt_events) {
    this.bounds_ = new tr.b.math.Range();
    this.events_ = new Set();
    this.guid_ = tr.b.GUID.allocateSimple();

    if (opt_events) {
      if (opt_events instanceof Array) {
        for (const event of opt_events) {
          this.push(event);
        }
      } else if (opt_events instanceof EventSet) {
        this.addEventSet(opt_events);
      } else {
        this.push(opt_events);
      }
    }
  }

  EventSet.prototype = {
    __proto__: Object.prototype,

    get bounds() {
      return this.bounds_;
    },

    get duration() {
      if (this.bounds_.isEmpty) return 0;
      return this.bounds_.max - this.bounds_.min;
    },

    get length() {
      return this.events_.size;
    },

    get guid() {
      return this.guid_;
    },

    * [Symbol.iterator]() {
      for (const event of this.events_) {
        yield event;
      }
    },

    clear() {
      this.bounds_ = new tr.b.math.Range();
      this.events_.clear();
    },

    /**
     * Pushes each argument onto the EventSet. Returns the number of
     * arguments pushed.
     */
    push(...events) {
      let numPushed;
      for (const event of events) {
        if (event.guid === undefined) {
          throw new Error('Event must have a GUID');
        }

        if (!this.events_.has(event)) {
          this.events_.add(event);
          // Some uses of eventSet (e.g. in tests) have Events as objects that
          // don't have addBoundsToRange as a function. Thus we need to handle
          // this case.
          if (event.addBoundsToRange) {
            if (this.bounds_ !== undefined) {
              event.addBoundsToRange(this.bounds_);
            }
          }
        }
        numPushed++;
      }
      return numPushed;
    },

    contains(event) {
      if (this.events_.has(event)) return event;
      return undefined;
    },

    addEventSet(eventSet) {
      for (const event of eventSet) {
        this.push(event);
      }
    },

    intersectionIsEmpty(otherEventSet) {
      return !this.some(event => otherEventSet.contains(event));
    },

    equals(that) {
      if (this.length !== that.length) return false;
      return this.every(event => that.contains(event));
    },

    sortEvents(compare) {
      // Convert to array, then sort, then convert back
      const ary = this.toArray();
      ary.sort(compare);

      this.clear();
      for (const event of ary) {
        this.push(event);
      }
    },

    getEventsOrganizedByBaseType(opt_pruneEmpty) {
      const allTypeInfos = EventRegistry.getAllRegisteredTypeInfos();

      const events = this.getEventsOrganizedByCallback(function(event) {
        let maxEventIndex = -1;
        let maxEventTypeInfo = undefined;

        allTypeInfos.forEach(function(eventTypeInfo, eventIndex) {
          if (!(event instanceof eventTypeInfo.constructor)) return;

          if (eventIndex > maxEventIndex) {
            maxEventIndex = eventIndex;
            maxEventTypeInfo = eventTypeInfo;
          }
        });

        if (maxEventIndex === -1) {
          throw new Error(`Unrecognized event type: ${event.constructor.name}`);
        }

        return maxEventTypeInfo.metadata.name;
      });

      if (!opt_pruneEmpty) {
        allTypeInfos.forEach(function(eventTypeInfo) {
          if (events[eventTypeInfo.metadata.name] === undefined) {
            events[eventTypeInfo.metadata.name] = new EventSet();
          }
        });
      }

      return events;
    },

    getEventsOrganizedByTitle() {
      return this.getEventsOrganizedByCallback(function(event) {
        if (event.title === undefined) {
          throw new Error('An event didn\'t have a title!');
        }
        return event.title;
      });
    },

    /**
     * @param {!function(!tr.model.Event):string} cb
     * @param {*=} opt_this
     * @return {!Object}  TODO(#3432) Return Map.
     */
    getEventsOrganizedByCallback(cb, opt_this) {
      const groupedEvents = tr.b.groupIntoMap(this, cb, opt_this || this);
      const groupedEventsDict = {};
      for (const [k, events] of groupedEvents) {
        groupedEventsDict[k] = new EventSet(events);
      }
      return groupedEventsDict;
    },

    enumEventsOfType(type, func) {
      for (const event of this) {
        if (event instanceof type) {
          func(event);
        }
      }
    },

    get userFriendlyName() {
      if (this.length === 0) {
        throw new Error('Empty event set');
      }

      const eventsByBaseType = this.getEventsOrganizedByBaseType(true);
      const eventTypeName = Object.keys(eventsByBaseType)[0];

      if (this.length === 1) {
        const tmp = EventRegistry.getUserFriendlySingularName(eventTypeName);
        return tr.b.getOnlyElement(this.events_).userFriendlyName;
      }

      const numEventTypes = Object.keys(eventsByBaseType).length;
      if (numEventTypes !== 1) {
        return this.length + ' events of various types';
      }

      const tmp = EventRegistry.getUserFriendlyPluralName(eventTypeName);
      return this.length + ' ' + tmp;
    },

    filter(fn, opt_this) {
      const res = new EventSet();
      for (const event of this) {
        if (fn.call(opt_this, event)) {
          res.push(event);
        }
      }

      return res;
    },

    toArray() {
      const ary = [];
      for (const event of this) {
        ary.push(event);
      }
      return ary;
    },

    forEach(fn, opt_this) {
      for (const event of this) {
        fn.call(opt_this, event);
      }
    },

    map(fn, opt_this) {
      const res = [];
      for (const event of this) {
        res.push(fn.call(opt_this, event));
      }
      return res;
    },

    every(fn, opt_this) {
      for (const event of this) {
        if (!fn.call(opt_this, event)) {
          return false;
        }
      }
      return true;
    },

    some(fn, opt_this) {
      for (const event of this) {
        if (fn.call(opt_this, event)) {
          return true;
        }
      }
      return false;
    },

    asDict() {
      const stableIds = [];
      for (const event of this) {
        stableIds.push(event.stableId);
      }
      return {'events': stableIds};
    },

    asSet() {
      return this.events_;
    }
  };

  EventSet.IMMUTABLE_EMPTY_SET = (function() {
    const s = new EventSet();
    s.push = function() {
      throw new Error('Cannot push to an immutable event set');
    };
    s.addEventSet = function() {
      throw new Error('Cannot add to an immutable event set');
    };
    Object.freeze(s);
    return s;
  })();

  return {
    EventSet,
    RequestSelectionChangeEvent,
  };
});


'use strict';

/**
 * @fileoverview Provides the SelectionState class.
 */
tr.exportTo('tr.model', function() {
  const ColorScheme = tr.b.ColorScheme;

  /**
   * Describes the level of visual highlighting to apply to an event when shown.
   *
   * color_scheme.html defines N variations off of a base color palette,
   * one for each selection state, all concatenated into one flat array. To
   * pick the final colorId for a given variations, the SelectionState is
   * multiplied by the number of base colors.
   *
   * Thus, the values here must be kept in sync with color_scheme's palette
   * layout.
   */
  const SelectionState = {
    NONE: 0,

    // Legacy names.
    SELECTED: ColorScheme.properties.brightenedOffsets[0],
    HIGHLIGHTED: ColorScheme.properties.brightenedOffsets[1],
    DIMMED: ColorScheme.properties.dimmedOffsets[0],

    // Modern names.
    BRIGHTENED0: ColorScheme.properties.brightenedOffsets[0],
    BRIGHTENED1: ColorScheme.properties.brightenedOffsets[1],
    BRIGHTENED2: ColorScheme.properties.brightenedOffsets[2],

    DIMMED0: ColorScheme.properties.dimmedOffsets[0],
    DIMMED1: ColorScheme.properties.dimmedOffsets[1],
    DIMMED2: ColorScheme.properties.dimmedOffsets[2]
  };

  const brighteningLevels = [
    SelectionState.NONE,
    SelectionState.BRIGHTENED0,
    SelectionState.BRIGHTENED1,
    SelectionState.BRIGHTENED2
  ];
  SelectionState.getFromBrighteningLevel = function(level) {
    return brighteningLevels[level];
  };

  const dimmingLevels = [
    SelectionState.DIMMED0,
    SelectionState.DIMMED1,
    SelectionState.DIMMED2
  ];
  SelectionState.getFromDimmingLevel = function(level) {
    return dimmingLevels[level];
  };

  return {
    SelectionState,
  };
});


'use strict';

/**
 * @fileoverview Provides the SelectableItem class.
 */
tr.exportTo('tr.model', function() {
  const SelectionState = tr.model.SelectionState;

  /**
   * A SelectableItem is the abstract base class for any non-container data that
   * has an associated model item in the trace model (possibly itself).
   *
   * Subclasses must provide a selectionState property (or getter).
   *
   * @constructor
   */
  function SelectableItem(modelItem) {
    this.modelItem_ = modelItem;
  }

  SelectableItem.prototype = {
    get modelItem() {
      return this.modelItem_;
    },

    get selected() {
      return this.selectionState === SelectionState.SELECTED;
    },

    addToSelection(selection) {
      const modelItem = this.modelItem_;
      if (!modelItem) return;
      selection.push(modelItem);
    },

    addToTrackMap(eventToTrackMap, track) {
      const modelItem = this.modelItem_;
      if (!modelItem) return;
      eventToTrackMap.addEvent(modelItem, track);
    }
  };

  return {
    SelectableItem,
  };
});


'use strict';

/**
 * @fileoverview Provides the Event class.
 */
tr.exportTo('tr.model', function() {
  const SelectableItem = tr.model.SelectableItem;
  const SelectionState = tr.model.SelectionState;
  const IMMUTABLE_EMPTY_SET = tr.model.EventSet.IMMUTABLE_EMPTY_SET;

  /**
   * An Event is the base type for any non-container, selectable piece
   * of data in the trace model.
   *
   * @constructor
   * @extends {SelectableItem}
   */
  function Event() {
    SelectableItem.call(this, this /* modelItem */);
    this.guid_ = tr.b.GUID.allocateSimple();
    this.selectionState = SelectionState.NONE;
    this.info = undefined;
  }

  Event.prototype = {
    __proto__: SelectableItem.prototype,

    get guid() {
      return this.guid_;
    },

    get stableId() {
      return undefined;
    },

    get range() {
      const range = new tr.b.math.Range();
      this.addBoundsToRange(range);
      return range;
    },

    // Empty by default. Lazily initialized on an instance in
    // addAssociatedAlert(). See #1930.
    associatedAlerts: IMMUTABLE_EMPTY_SET,

    addAssociatedAlert(alert) {
      if (this.associatedAlerts === IMMUTABLE_EMPTY_SET) {
        this.associatedAlerts = new tr.model.EventSet();
      }
      this.associatedAlerts.push(alert);
    },

    // Adds the range of timestamps for this event to the specified range.
    // If this is not overridden in subclass, it means that type of event
    // doesn't have timestamps.
    addBoundsToRange(range) {}
  };

  return {
    Event,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * TimedEvent is a base type for any entity in the trace model with a specific
   * start and duration.
   *
   * @constructor
   */
  function TimedEvent(start) {
    tr.model.Event.call(this);
    this.start = start;
    this.duration = 0;
    this.cpuStart = undefined;
    this.cpuDuration = undefined;
    // The set of contexts this event belongs to (order is unimportant). This
    // array should never be modified.
    this.contexts = Object.freeze([]);
  }

  TimedEvent.prototype = {
    __proto__: tr.model.Event.prototype,

    get end() {
      return this.start + this.duration;
    },

    addBoundsToRange(range) {
      range.addValue(this.start);
      range.addValue(this.end);
    },

    // TODO(charliea): Can this be implemented in terms of Event.range()?
    // Returns true if 'that' TimedEvent is fully contained within 'this' timed
    // event.
    bounds(that, opt_precisionUnit) {
      if (opt_precisionUnit === undefined) {
        opt_precisionUnit = tr.b.TimeDisplayModes.ms;
      }

      const startsBefore = opt_precisionUnit.roundedLess(
          that.start, this.start);
      const endsAfter = opt_precisionUnit.roundedLess(this.end, that.end);
      return !startsBefore && !endsAfter;
    }
  };

  return {
    TimedEvent,
  };
});


'use strict';

/**
 * @fileoverview Provides the ContainerMemoryDump class.
 */
tr.exportTo('tr.model', function() {
  /**
   * The ContainerMemoryDump represents an abstract container memory dump.
   * @constructor
   */
  function ContainerMemoryDump(start) {
    tr.model.TimedEvent.call(this, start);

    this.levelOfDetail = undefined;

    this.memoryAllocatorDumps_ = undefined;
    this.memoryAllocatorDumpsByFullName_ = undefined;
  }

  /**
   * Memory dump level of detail. See base::trace_event::MemoryDumpLevelOfDetail
   * in the Chromium repository.
   *
   * @enum
   */
  ContainerMemoryDump.LevelOfDetail = {
    BACKGROUND: 0,
    LIGHT: 1,
    DETAILED: 2
  };

  ContainerMemoryDump.prototype = {
    __proto__: tr.model.TimedEvent.prototype,

    shiftTimestampsForward(amount) {
      this.start += amount;
    },

    get memoryAllocatorDumps() {
      return this.memoryAllocatorDumps_;
    },

    set memoryAllocatorDumps(memoryAllocatorDumps) {
      this.memoryAllocatorDumps_ = memoryAllocatorDumps;
      this.forceRebuildingMemoryAllocatorDumpByFullNameIndex();
    },

    getMemoryAllocatorDumpByFullName(fullName) {
      if (this.memoryAllocatorDumps_ === undefined) return undefined;

      // Lazily generate the index if necessary.
      if (this.memoryAllocatorDumpsByFullName_ === undefined) {
        const index = {};
        function addDumpsToIndex(dumps) {
          dumps.forEach(function(dump) {
            index[dump.fullName] = dump;
            addDumpsToIndex(dump.children);
          });
        }
        addDumpsToIndex(this.memoryAllocatorDumps_);
        this.memoryAllocatorDumpsByFullName_ = index;
      }

      return this.memoryAllocatorDumpsByFullName_[fullName];
    },

    forceRebuildingMemoryAllocatorDumpByFullNameIndex() {
      // Clear the index and generate it lazily.
      this.memoryAllocatorDumpsByFullName_ = undefined;
    },

    iterateRootAllocatorDumps(fn, opt_this) {
      if (this.memoryAllocatorDumps === undefined) return;
      this.memoryAllocatorDumps.forEach(fn, opt_this || this);
    }
  };

  return {
    ContainerMemoryDump,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * The value of a given measurement at a given time.
   *
   * As an example, if we're measuring the throughput of data sent over a USB
   * connection, each counter sample might represent the instantaneous
   * throughput of the connection at a given time.
   *
   * @constructor
   * @extends {Event}
   */
  function CounterSample(series, timestamp, value) {
    tr.model.Event.call(this);
    this.series_ = series;
    this.timestamp_ = timestamp;
    this.value_ = value;
  }

  CounterSample.groupByTimestamp = function(samples) {
    const samplesByTimestamp = tr.b.groupIntoMap(samples, s => s.timestamp);
    const timestamps = Array.from(samplesByTimestamp.keys());
    timestamps.sort();
    const groups = [];
    for (const ts of timestamps) {
      const group = samplesByTimestamp.get(ts);
      group.sort((x, y) => x.series.seriesIndex - y.series.seriesIndex);
      groups.push(group);
    }
    return groups;
  };

  CounterSample.prototype = {
    __proto__: tr.model.Event.prototype,

    get series() {
      return this.series_;
    },

    get timestamp() {
      return this.timestamp_;
    },

    get value() {
      return this.value_;
    },

    set timestamp(timestamp) {
      this.timestamp_ = timestamp;
    },

    addBoundsToRange(range) {
      range.addValue(this.timestamp);
    },

    getSampleIndex() {
      return tr.b.findLowIndexInSortedArray(
          this.series.timestamps,
          function(x) { return x; },
          this.timestamp_);
    },

    get userFriendlyName() {
      return 'Counter sample from ' + this.series_.title + ' at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.timestamp);
    }
  };


  tr.model.EventRegistry.register(
      CounterSample,
      {
        name: 'counterSample',
        pluralName: 'counterSamples'
      });

  return {
    CounterSample,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * EventContainer is a base class for any class in the trace model that
   * contains child events or child EventContainers.
   *
   * For all EventContainers, updateBounds() must be called after modifying the
   * container's events if an up-to-date bounds is expected.
   *
   * @constructor
   */
  function EventContainer() {
    this.guid_ = tr.b.GUID.allocateSimple();
    this.important = true;
    this.bounds_ = new tr.b.math.Range();
  }

  EventContainer.prototype = {
    get guid() {
      return this.guid_;
    },

    /**
     * @return {String} A stable and unique identifier that describes this
     * container's position in the event tree relative to the root. If an event
     * container 'B' is a child to another event container 'A', then container
     * B's stable ID would be 'A.B'.
     */
    get stableId() {
      throw new Error('Not implemented');
    },

    /**
     * Returns the bounds of the event container, which describe the range
     * of timestamps for all ancestor events.
     */
    get bounds() {
      return this.bounds_;
    },

    // TODO(charliea): A default implementation of this method could likely be
    // provided that iterates throuch getDescendantEvents.
    /**
     * Updates the bounds of the event container. After updating, this.bounds
     * will describe the range of timestamps of all ancestor events.
     */
    updateBounds() {
      throw new Error('Not implemented');
    },

    // TODO(charliea): A default implementation of this method could likely be
    // provided that iterates through getDescendantEvents.
    /**
     * Shifts the timestamps for ancestor events by 'amount' milliseconds.
     */
    shiftTimestampsForward(amount) {
      throw new Error('Not implemented');
    },


    /**
    * Returns an iterable of all child events.
    */
    * childEvents() {
    },

    /**
     * Returns an iterable of all events in this and descendant
     * event containers.
     */
    * getDescendantEvents() {
      yield* this.childEvents();
      for (const container of this.childEventContainers()) {
        yield* container.getDescendantEvents();
      }
    },

    /**
     * Returns an iterable of all child event containers.
     */
    * childEventContainers() {
    },

    /**
    * Returns an iterable containing this and all descendant event containers.
    */
    * getDescendantEventContainers() {
      yield this;
      for (const container of this.childEventContainers()) {
        yield* container.getDescendantEventContainers();
      }
    },

    /**
     * Finds topmost slices in this container (see docstring for
     * findTopmostSlices).
     */
    * findTopmostSlicesInThisContainer(eventPredicate, opt_this) {
    },

    /**
     * The findTopmostSlices* series of helpers find all topmost slices
     * satisfying the given predicates.
     *
     * As an example, suppose we are trying to find slices named 'C', with the
     * following thread:
     *
     *  -> |---C---| |-----D-----|
     *       |-C-|      |---C---| <-
     *
     * findTopmostSlices would locate the pointed-to Cs, because the bottom C on
     * the  left is not the topmost C, and the right one is, even though it is
     * not itself a top-level slice.
     */
    * findTopmostSlices(eventPredicate) {
      for (const ec of this.getDescendantEventContainers()) {
        yield* ec.findTopmostSlicesInThisContainer(eventPredicate);
      }
    },

    * findTopmostSlicesNamed(name) {
      yield* this.findTopmostSlices(e => e.title === name);
    }
  };

  return {
    EventContainer,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const CounterSample = tr.model.CounterSample;

  /**
   * A container holding all samples of a given measurement over time.
   *
   * As an example, a counter series might measure the throughput of data sent
   * over a USB connection, with each sample representing the instantaneous
   * throughput of the connection.
   *
   * @constructor
   * @extends {EventContainer}
   */
  function CounterSeries(name, color) {
    tr.model.EventContainer.call(this);

    this.name_ = name;
    this.color_ = color;

    this.timestamps_ = [];
    this.samples_ = [];

    // Set by counter.addSeries
    this.counter = undefined;
    this.seriesIndex = undefined;
  }

  CounterSeries.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    get length() {
      return this.timestamps_.length;
    },

    get name() {
      return this.name_;
    },

    get color() {
      return this.color_;
    },

    get samples() {
      return this.samples_;
    },

    get timestamps() {
      return this.timestamps_;
    },

    getSample(idx) {
      return this.samples_[idx];
    },

    getTimestamp(idx) {
      return this.timestamps_[idx];
    },

    addCounterSample(ts, val) {
      const sample = new CounterSample(this, ts, val);
      this.addSample(sample);
      return sample;
    },

    addSample(sample) {
      this.timestamps_.push(sample.timestamp);
      this.samples_.push(sample);
    },

    getStatistics(sampleIndices) {
      let sum = 0;
      let min = Number.MAX_VALUE;
      let max = -Number.MAX_VALUE;

      for (let i = 0; i < sampleIndices.length; ++i) {
        const sample = this.getSample(sampleIndices[i]).value;

        sum += sample;
        min = Math.min(sample, min);
        max = Math.max(sample, max);
      }

      return {
        min,
        max,
        avg: (sum / sampleIndices.length),
        start: this.getSample(sampleIndices[0]).value,
        end: this.getSample(sampleIndices.length - 1).value
      };
    },

    shiftTimestampsForward(amount) {
      for (let i = 0; i < this.timestamps_.length; ++i) {
        this.timestamps_[i] += amount;
        this.samples_[i].timestamp = this.timestamps_[i];
      }
    },

    * childEvents() {
      yield* this.samples_;
    },

    * childEventContainers() {
    }
  };

  return {
    CounterSeries,
  };
});


'use strict';

/**
 * @fileoverview Provides the Flow class.
 */
tr.exportTo('tr.model', function() {
  /**
   * A Flow represents an interval of time plus parameters associated
   * with that interval.
   *
   * @constructor
   */
  function FlowEvent(category, id, title, colorId, start, args, opt_duration) {
    tr.model.TimedEvent.call(this, start);

    this.category = category || '';
    this.title = title;
    this.colorId = colorId;
    this.start = start;
    this.args = args;

    this.id = id;

    this.startSlice = undefined;
    this.endSlice = undefined;

    this.startStackFrame = undefined;
    this.endStackFrame = undefined;

    if (opt_duration !== undefined) {
      this.duration = opt_duration;
    }
  }

  FlowEvent.prototype = {
    __proto__: tr.model.TimedEvent.prototype,

    get userFriendlyName() {
      return 'Flow event named ' + this.title + ' at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.timestamp);
    }
  };

  tr.model.EventRegistry.register(
      FlowEvent,
      {
        name: 'flowEvent',
        pluralName: 'flowEvents'
      });

  return {
    FlowEvent,
  };
});


'use strict';

/**
 * @fileoverview Provides the MemoryAllocatorDump class.
 */
tr.exportTo('tr.model', function() {
  /**
   * @constructor
   */
  function MemoryAllocatorDump(containerMemoryDump, fullName, opt_guid) {
    this.fullName = fullName;
    this.parent = undefined;
    this.children = [];

    // String -> Scalar.
    this.numerics = {};

    // String -> string.
    this.diagnostics = {};

    // The associated container memory dump.
    this.containerMemoryDump = containerMemoryDump;

    // Ownership relationship between memory allocator dumps.
    this.owns = undefined;
    this.ownedBy = [];

    // Map from sibling dumps (other children of this dump's parent) to the
    // proportion of this dump's size which they (or their descendants) own.
    this.ownedBySiblingSizes = new Map();

    // Retention relationship between memory allocator dumps.
    this.retains = [];
    this.retainedBy = [];

    // Weak memory allocator dumps are removed from the model after import in
    // tr.model.GlobalMemoryDump.removeWeakDumps(). See
    // base::trace_event::MemoryAllocatorDump::Flags::WEAK in the Chromium
    // codebase.
    this.weak = false;

    // A list of information about the memory allocator dump (e.g. about how
    // its fields were calculated). Each item should be an object with
    // a mandatory 'type' property and type-specific extra arguments (see
    // MemoryAllocatorDumpInfoType).
    this.infos = [];

    // For debugging purposes.
    this.guid = opt_guid;
  }

  /**
   * Size numeric names. Please refer to the Memory Dump Graph Metric
   * Calculation design document for more details (https://goo.gl/fKg0dt).
   */
  MemoryAllocatorDump.SIZE_NUMERIC_NAME = 'size';
  MemoryAllocatorDump.EFFECTIVE_SIZE_NUMERIC_NAME = 'effective_size';
  MemoryAllocatorDump.RESIDENT_SIZE_NUMERIC_NAME = 'resident_size';
  MemoryAllocatorDump.DISPLAYED_SIZE_NUMERIC_NAME =
      MemoryAllocatorDump.EFFECTIVE_SIZE_NUMERIC_NAME;

  MemoryAllocatorDump.prototype = {
    get name() {
      return this.fullName.substring(this.fullName.lastIndexOf('/') + 1);
    },

    get quantifiedName() {
      return '\'' + this.fullName + '\' in ' +
          this.containerMemoryDump.containerName;
    },

    getDescendantDumpByFullName(fullName) {
      return this.containerMemoryDump.getMemoryAllocatorDumpByFullName(
          this.fullName + '/' + fullName);
    },

    isDescendantOf(otherDump) {
      if (this === otherDump) return true;
      if (this.parent === undefined) return false;
      return this.parent.isDescendantOf(otherDump);
    },

    addNumeric(name, numeric) {
      if (!(numeric instanceof tr.b.Scalar)) {
        throw new Error('Numeric value must be an instance of Scalar.');
      }
      if (name in this.numerics) {
        throw new Error('Duplicate numeric name: ' + name + '.');
      }
      this.numerics[name] = numeric;
    },

    addDiagnostic(name, text) {
      if (typeof text !== 'string') {
        throw new Error('Diagnostic text must be a string.');
      }
      if (name in this.diagnostics) {
        throw new Error('Duplicate diagnostic name: ' + name + '.');
      }
      this.diagnostics[name] = text;
    },

    aggregateNumericsRecursively(opt_model) {
      const numericNames = new Set();

      // Aggregate descendants's numerics recursively and gather children's
      // numeric names.
      this.children.forEach(function(child) {
        child.aggregateNumericsRecursively(opt_model);
        for (const [item, value] of Object.entries(child.numerics)) {
          numericNames.add(item, value);
        }
      }, this);

      // Aggregate children's numerics.
      numericNames.forEach(function(numericName) {
        if (numericName === MemoryAllocatorDump.SIZE_NUMERIC_NAME ||
            numericName === MemoryAllocatorDump.EFFECTIVE_SIZE_NUMERIC_NAME ||
            this.numerics[numericName] !== undefined) {
            // Don't aggregate size and effective size numerics. These are
            // calculated in GlobalMemoryDump.prototype.calculateSizes() and
            // GlobalMemoryDump.prototype.calculateEffectiveSizes respectively.
            // Also don't aggregate numerics that the parent already has.
          return;
        }

        this.numerics[numericName] = MemoryAllocatorDump.aggregateNumerics(
            this.children.map(function(child) {
              return child.numerics[numericName];
            }), opt_model);
      }, this);
    }
  };

  // TODO(petrcermak): Consider moving this to tr.v.Histogram.
  MemoryAllocatorDump.aggregateNumerics = function(numerics, opt_model) {
    let shouldLogWarning = !!opt_model;
    let aggregatedUnit = undefined;
    let aggregatedValue = 0;

    // Aggregate the units and sum up the values of the numerics.
    numerics.forEach(function(numeric) {
      if (numeric === undefined) return;

      const unit = numeric.unit;
      if (aggregatedUnit === undefined) {
        aggregatedUnit = unit;
      } else if (aggregatedUnit !== unit) {
        if (shouldLogWarning) {
          opt_model.importWarning({
            type: 'numeric_parse_error',
            message: 'Multiple units provided for numeric: \'' +
                aggregatedUnit.unitName + '\' and \'' + unit.unitName + '\'.'
          });
          shouldLogWarning = false;  // Don't log multiple warnings.
        }
        // Use the most generic unit when the numerics don't agree (best
        // effort).
        aggregatedUnit = tr.b.Unit.byName.unitlessNumber_smallerIsBetter;
      }

      aggregatedValue += numeric.value;
    }, this);

    if (aggregatedUnit === undefined) return undefined;

    return new tr.b.Scalar(aggregatedUnit, aggregatedValue);
  };

  /**
   * @constructor
   */
  function MemoryAllocatorDumpLink(source, target, opt_importance) {
    this.source = source;
    this.target = target;
    this.importance = opt_importance;
    this.size = undefined;
  }

  /**
   * Types of size numeric information.
   *
   * @enum
   */
  const MemoryAllocatorDumpInfoType = {
    // The provided size of a MemoryAllocatorDump was less than the aggregated
    // size of its children.
    //
    // Mandatory extra args:
    //   * providedSize: The inconsistent provided size.
    //   * dependencySize: The aggregated size of the children.
    PROVIDED_SIZE_LESS_THAN_AGGREGATED_CHILDREN: 0,

    // The provided size of a MemoryAllocatorDump was less than the size of its
    // largest owner.
    //
    // Mandatory extra args:
    //   * providedSize: The inconsistent provided size.
    //   * dependencySize: The size of the largest owner.
    PROVIDED_SIZE_LESS_THAN_LARGEST_OWNER: 1
  };

  return {
    MemoryAllocatorDump,
    MemoryAllocatorDumpLink,
    MemoryAllocatorDumpInfoType,
  };
});


'use strict';

/**
 * @fileoverview Provides the GlobalMemoryDump class.
 */
tr.exportTo('tr.model', function() {
  /**
   * The GlobalMemoryDump represents a simultaneous memory dump of all
   * processes.
   * @constructor
   */
  function GlobalMemoryDump(model, start) {
    tr.model.ContainerMemoryDump.call(this, start);
    this.model = model;
    this.processMemoryDumps = {};
  }

  // Size numeric names.
  const SIZE_NUMERIC_NAME = tr.model.MemoryAllocatorDump.SIZE_NUMERIC_NAME;
  const EFFECTIVE_SIZE_NUMERIC_NAME =
      tr.model.MemoryAllocatorDump.EFFECTIVE_SIZE_NUMERIC_NAME;

  // Size numeric info types.
  const MemoryAllocatorDumpInfoType = tr.model.MemoryAllocatorDumpInfoType;
  const PROVIDED_SIZE_LESS_THAN_AGGREGATED_CHILDREN =
      MemoryAllocatorDumpInfoType.PROVIDED_SIZE_LESS_THAN_AGGREGATED_CHILDREN;
  const PROVIDED_SIZE_LESS_THAN_LARGEST_OWNER =
      MemoryAllocatorDumpInfoType.PROVIDED_SIZE_LESS_THAN_LARGEST_OWNER;

  function getSize(dump) {
    const numeric = dump.numerics[SIZE_NUMERIC_NAME];
    if (numeric === undefined) return 0;
    return numeric.value;
  }

  function hasSize(dump) {
    return dump.numerics[SIZE_NUMERIC_NAME] !== undefined;
  }

  function optional(value, defaultValue) {
    if (value === undefined) return defaultValue;
    return value;
  }

  GlobalMemoryDump.prototype = {
    __proto__: tr.model.ContainerMemoryDump.prototype,

    get userFriendlyName() {
      return 'Global memory dump at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.start);
    },

    get containerName() {
      return 'global space';
    },

    finalizeGraph() {
      // 1. Transitively remove weak memory allocator dumps and all their
      // owners and descendants from the model. This must be performed before
      // any other steps.
      this.removeWeakDumps();

      // 2. Add ownership links from tracing MADs to descendants of malloc or
      // winheap MADs so that tracing would be automatically discounted from
      // them later (step 3).
      this.setUpTracingOverheadOwnership();

      // 3. Aggregate all other numerics of all MADs (*excluding* sizes and
      // effective sizes) and propagate numerics from global MADs to their
      // owners (*including* sizes and effective sizes). This step must be
      // carried out before the sizes of all MADs are calculated (step 3).
      // Otherwise, the propagated sizes of all MADs would not be aggregated.
      this.aggregateNumerics();

      // 4. Calculate the sizes of all memory allocator dumps (MADs). This step
      // requires that the memory allocator dump graph has been finalized (step
      // 1) and numerics were propagated from global MADs (step 2). Subsequent
      // modifications of the graph will most likely break the calculation
      // invariants.
      this.calculateSizes();

      // 5. Calculate the effective sizes of all MADs. This step requires that
      // the sizes of all MADs have already been calculated (step 3).
      this.calculateEffectiveSizes();

      // 6. Discount tracing from VM regions stats. This steps requires that
      // resident sizes (step 2) and sizes (step 3) of the tracing MADs have
      // already been calculated.
      this.discountTracingOverheadFromVmRegions();

      // 7. The above steps (especially steps 1 and 3) can create new memory
      // allocator dumps, so we force rebuilding the memory allocator dump
      // indices of all container memory dumps.
      this.forceRebuildingMemoryAllocatorDumpByFullNameIndices();
    },

    removeWeakDumps() {
      // Mark all transitive owners and children of weak memory allocator dumps
      // as weak.
      this.traverseAllocatorDumpsInDepthFirstPreOrder(function(dump) {
        if (dump.weak) return;
        if ((dump.owns !== undefined && dump.owns.target.weak) ||
            (dump.parent !== undefined && dump.parent.weak)) {
          dump.weak = true;
        }
      });

      function removeWeakDumpsFromListRecursively(dumps) {
        tr.b.inPlaceFilter(dumps, function(dump) {
          if (dump.weak) {
            // The dump is weak, so remove it. This will implicitly remove all
            // its descendants, which are also weak due to the initial marking
            // step.
            return false;
          }

          // This dump is non-weak, so keep it. Recursively remove its weak
          // descendants and ownership links from weak dumps instead.
          removeWeakDumpsFromListRecursively(dump.children);
          tr.b.inPlaceFilter(dump.ownedBy, function(ownershipLink) {
            return !ownershipLink.source.weak;
          });

          return true;
        });
      }

      this.iterateContainerDumps(function(containerDump) {
        const memoryAllocatorDumps = containerDump.memoryAllocatorDumps;
        if (memoryAllocatorDumps !== undefined) {
          removeWeakDumpsFromListRecursively(memoryAllocatorDumps);
        }
      });
    },

    /**
     * Calculate the size of all memory allocator dumps in the dump graph.
     *
     * The size refers to the allocated size of a (sub)component. It is a
     * natural extension of the optional size numeric provided by
     * MemoryAllocatorDump(s):
     *
     *   - If a MAD provides a size numeric, then its size is assumed to be
     *     equal to it.
     *   - If a MAD does not provide a size numeric, then its size is assumed
     *     to be the maximum of (1) the size of the largest owner of the MAD
     *     and (2) the aggregated size of the MAD's children.
     *
     * Metric motivation: "How big is a (sub)system?"
     *
     * Please refer to the Memory Dump Graph Metric Calculation design document
     * for more details (https://goo.gl/fKg0dt).
     */
    calculateSizes() {
      this.traverseAllocatorDumpsInDepthFirstPostOrder(
          this.calculateMemoryAllocatorDumpSize_.bind(this));
    },

    /**
     * Calculate the size of the given MemoryAllocatorDump. This method assumes
     * that the size of both the children and owners of the dump has already
     * been calculated.
     */
    calculateMemoryAllocatorDumpSize_(dump) {
      // This flag becomes true if the size numeric of the current dump should
      // be defined, i.e. if (1) the current dump's size numeric is defined,
      // (2) the size of at least one of its children is defined or (3) the
      // size of at least one of its owners is defined.
      let shouldDefineSize = false;

      // This helper function returns the value of the size numeric of the
      // given dependent memory allocator dump. If the numeric is defined, the
      // shouldDefineSize flag above is also set to true (because condition
      // (2) or (3) is satisfied). Otherwise, zero is returned (and the flag is
      // left unchanged).
      function getDependencySize(dependencyDump) {
        const numeric = dependencyDump.numerics[SIZE_NUMERIC_NAME];
        if (numeric === undefined) return 0;
        shouldDefineSize = true;
        return numeric.value;
      }

      // 1. Get the size provided by the dump. If present, define a function
      // for checking dependent size consistency (a dump must always be bigger
      // than all its children aggregated together and/or its largest owner).
      const sizeNumeric = dump.numerics[SIZE_NUMERIC_NAME];
      let size = 0;
      let checkDependencySizeIsConsistent = function() { /* no-op */ };
      if (sizeNumeric !== undefined) {
        size = sizeNumeric.value;
        shouldDefineSize = true;
        if (sizeNumeric.unit !== tr.b.Unit.byName.sizeInBytes_smallerIsBetter) {
          this.model.importWarning({
            type: 'memory_dump_parse_error',
            message: 'Invalid unit of \'size\' numeric of memory allocator ' +
                'dump ' + dump.quantifiedName + ': ' +
                sizeNumeric.unit.unitName + '.'
          });
        }
        checkDependencySizeIsConsistent = function(
            dependencySize, dependencyInfoType, dependencyName) {
          if (size >= dependencySize) return;
          this.model.importWarning({
            type: 'memory_dump_parse_error',
            message: 'Size provided by memory allocator dump \'' +
                dump.fullName + '\'' +
                tr.b.Unit.byName.sizeInBytes.format(size) +
                ') is less than ' + dependencyName + ' (' +
                tr.b.Unit.byName.sizeInBytes.format(dependencySize) + ').'
          });
          dump.infos.push({
            type: dependencyInfoType,
            providedSize: size,
            dependencySize
          });
        }.bind(this);
      }

      // 2. Aggregate size of children. The recursive function traverses all
      // descendants and ensures that double-counting due to ownership within a
      // subsystem is avoided.
      let aggregatedChildrenSize = 0;
      // Owned child dump name -> (Owner child dump name -> overlapping size).
      const allOverlaps = {};
      dump.children.forEach(function(childDump) {
        function aggregateDescendantDump(descendantDump) {
          // Don't count this descendant dump if it owns another descendant of
          // the current dump (would cause double-counting).
          const ownedDumpLink = descendantDump.owns;
          if (ownedDumpLink !== undefined &&
              ownedDumpLink.target.isDescendantOf(dump)) {
            // If the target owned dump is a descendant of a *different* child
            // of the the current dump (i.e. not childDump), then we remember
            // the ownership so that we could explain why the size of the
            // current dump is not equal to the sum of its children.
            let ownedChildDump = ownedDumpLink.target;
            while (ownedChildDump.parent !== dump) {
              ownedChildDump = ownedChildDump.parent;
            }
            if (childDump !== ownedChildDump) {
              const ownedBySiblingSize = getDependencySize(descendantDump);
              if (ownedBySiblingSize > 0) {
                const previousTotalOwnedBySiblingSize =
                    ownedChildDump.ownedBySiblingSizes.get(childDump) || 0;
                const updatedTotalOwnedBySiblingSize =
                    previousTotalOwnedBySiblingSize + ownedBySiblingSize;
                ownedChildDump.ownedBySiblingSizes.set(
                    childDump, updatedTotalOwnedBySiblingSize);
              }
            }
            return;
          }

          // If this descendant dump is a leaf node, add its size to the
          // aggregated size.
          if (descendantDump.children.length === 0) {
            aggregatedChildrenSize += getDependencySize(descendantDump);
            return;
          }

          // If this descendant dump is an intermediate node, recurse down into
          // its children. Note that the dump's size is NOT added because it is
          // an aggregate of its children (would cause double-counting).
          descendantDump.children.forEach(aggregateDescendantDump);
        }
        aggregateDescendantDump(childDump);
      });
      checkDependencySizeIsConsistent(
          aggregatedChildrenSize,
          PROVIDED_SIZE_LESS_THAN_AGGREGATED_CHILDREN,
          'the aggregated size of its children');

      // 3. Calculate the largest owner size.
      let largestOwnerSize = 0;
      dump.ownedBy.forEach(function(ownershipLink) {
        const owner = ownershipLink.source;
        const ownerSize = getDependencySize(owner);
        largestOwnerSize = Math.max(largestOwnerSize, ownerSize);
      });
      checkDependencySizeIsConsistent(
          largestOwnerSize,
          PROVIDED_SIZE_LESS_THAN_LARGEST_OWNER,
          'the size of its largest owner');

      // If neither the dump nor any of its dependencies (children and owners)
      // provide a size, do NOT add a zero size numeric.
      if (!shouldDefineSize) {
        // The rest of the pipeline relies on size being either a valid
        // Scalar, or undefined.
        delete dump.numerics[SIZE_NUMERIC_NAME];
        return;
      }

      // A dump must always be bigger than all its children aggregated
      // together and/or its largest owner.
      size = Math.max(size, aggregatedChildrenSize, largestOwnerSize);

      dump.numerics[SIZE_NUMERIC_NAME] = new tr.b.Scalar(
          tr.b.Unit.byName.sizeInBytes_smallerIsBetter, size);

      // Add a virtual child to make up for extra size of the dump with
      // respect to its children (if applicable).
      if (aggregatedChildrenSize < size &&
          dump.children !== undefined && dump.children.length > 0) {
        const virtualChild = new tr.model.MemoryAllocatorDump(
            dump.containerMemoryDump, dump.fullName + '/<unspecified>');
        virtualChild.parent = dump;
        dump.children.unshift(virtualChild);
        virtualChild.numerics[SIZE_NUMERIC_NAME] = new tr.b.Scalar(
            tr.b.Unit.byName.sizeInBytes_smallerIsBetter,
            size - aggregatedChildrenSize);
      }
    },

    /**
     * Calculate the effective size of all memory allocator dumps in the dump
     * graph.
     *
     * The effective size refers to the amount of memory a particular component
     * is using/consuming. In other words, every (reported) byte of used memory
     * is uniquely attributed to exactly one component. Consequently, unlike
     * size, effective size is cumulative, i.e. the sum of the effective sizes
     * of (top-level) components is equal to the total amount of (reported)
     * used memory.
     *
     * Metric motivation: "How much memory does a (sub)system use?" or "For how
     * much memory should a (sub)system be 'charged'?"
     *
     * Please refer to the Memory Dump Graph Metric Calculation design document
     * for more details (https://goo.gl/fKg0dt).
     *
     * This method assumes that the size of all contained memory allocator
     * dumps has already been calculated [see calculateSizes()].
     */
    calculateEffectiveSizes() {
      // 1. Calculate not-owned and not-owning sub-sizes of all MADs
      // (depth-first post-order traversal).
      this.traverseAllocatorDumpsInDepthFirstPostOrder(
          this.calculateDumpSubSizes_.bind(this));

      // 2. Calculate owned and owning coefficients of owned and owner MADs
      // respectively (arbitrary traversal).
      this.traverseAllocatorDumpsInDepthFirstPostOrder(
          this.calculateDumpOwnershipCoefficient_.bind(this));

      // 3. Calculate cumulative owned and owning coefficients of all MADs
      // (depth-first pre-order traversal).
      this.traverseAllocatorDumpsInDepthFirstPreOrder(
          this.calculateDumpCumulativeOwnershipCoefficient_.bind(this));

      // 4. Calculate the effective sizes of all MADs (depth-first post-order
      // traversal).
      this.traverseAllocatorDumpsInDepthFirstPostOrder(
          this.calculateDumpEffectiveSize_.bind(this));
    },

    /**
     * Calculate not-owned and not-owning sub-sizes of a memory allocator dump
     * from its children's (sub-)sizes.
     *
     * Not-owned sub-size refers to the aggregated memory of all children which
     * is not owned by other MADs. Conversely, not-owning sub-size is the
     * aggregated memory of all children which do not own another MAD. The
     * diagram below illustrates these two concepts:
     *
     *     ROOT 1                         ROOT 2
     *     size: 4                        size: 5
     *     not-owned sub-size: 4          not-owned sub-size: 1 (!)
     *     not-owning sub-size: 0 (!)     not-owning sub-size: 5
     *
     *      ^                              ^
     *      |                              |
     *
     *     PARENT 1   ===== owns =====>   PARENT 2
     *     size: 4                        size: 5
     *     not-owned sub-size: 4          not-owned sub-size: 5
     *     not-owning sub-size: 4         not-owning sub-size: 5
     *
     *      ^                              ^
     *      |                              |
     *
     *     CHILD 1                        CHILD 2
     *     size [given]: 4                size [given]: 5
     *     not-owned sub-size: 4          not-owned sub-size: 5
     *     not-owning sub-size: 4         not-owning sub-size: 5
     *
     * This method assumes that (1) the size of the dump, its children, and its
     * owners [see calculateSizes()] and (2) the not-owned and not-owning
     * sub-sizes of both the children and owners of the dump have already been
     * calculated [depth-first post-order traversal].
     */
    calculateDumpSubSizes_(dump) {
      // Completely skip dumps with undefined size.
      if (!hasSize(dump)) return;

      // If the dump is a leaf node, then both sub-sizes are equal to the size.
      if (dump.children === undefined || dump.children.length === 0) {
        const size = getSize(dump);
        dump.notOwningSubSize_ = size;
        dump.notOwnedSubSize_ = size;
        return;
      }

      // Calculate this dump's not-owning sub-size by summing up the not-owning
      // sub-sizes of children MADs which do not own another MAD.
      let notOwningSubSize = 0;
      dump.children.forEach(function(childDump) {
        if (childDump.owns !== undefined) return;
        notOwningSubSize += optional(childDump.notOwningSubSize_, 0);
      });
      dump.notOwningSubSize_ = notOwningSubSize;

      // Calculate this dump's not-owned sub-size.
      let notOwnedSubSize = 0;
      dump.children.forEach(function(childDump) {
        // If the child dump is not owned, then add its not-owned sub-size.
        if (childDump.ownedBy.length === 0) {
          notOwnedSubSize += optional(childDump.notOwnedSubSize_, 0);
          return;
        }
        // If the child dump is owned, then add the difference between its size
        // and the largest owner.
        let largestChildOwnerSize = 0;
        childDump.ownedBy.forEach(function(ownershipLink) {
          largestChildOwnerSize = Math.max(
              largestChildOwnerSize, getSize(ownershipLink.source));
        });
        notOwnedSubSize += getSize(childDump) - largestChildOwnerSize;
      });
      dump.notOwnedSubSize_ = notOwnedSubSize;
    },

    /**
     * Calculate owned and owning coefficients of a memory allocator dump and
     * its owners.
     *
     * The owning coefficient refers to the proportion of a dump's not-owning
     * sub-size which is attributed to the dump (only relevant to owning MADs).
     * Conversely, the owned coefficient is the proportion of a dump's
     * not-owned sub-size, which is attributed to it (only relevant to owned
     * MADs).
     *
     * The not-owned size of the owned dump is split among its owners in the
     * order of the ownership importance as demonstrated by the following
     * example:
     *
     *                                          memory allocator dumps
     *                                   OWNED  OWNER1  OWNER2  OWNER3  OWNER4
     *       not-owned sub-size [given]     10       -       -       -       -
     *      not-owning sub-size [given]      -       6       7       5       8
     *               importance [given]      -       2       2       1       0
     *    attributed not-owned sub-size      2       -       -       -       -
     *   attributed not-owning sub-size      -       3       4       0       1
     *                owned coefficient   2/10       -       -       -       -
     *               owning coefficient      -     3/6     4/7     0/5     1/8
     *
     * Explanation: Firstly, 6 bytes are split equally among OWNER1 and OWNER2
     * (highest importance). OWNER2 owns one more byte, so its attributed
     * not-owning sub-size is 6/2 + 1 = 4 bytes. OWNER3 is attributed no size
     * because it is smaller than the owners with higher priority. However,
     * OWNER4 is larger, so it's attributed the difference 8 - 7 = 1 byte.
     * Finally, 2 bytes remain unattributed and are hence kept in the OWNED
     * dump as attributed not-owned sub-size. The coefficients are then
     * directly calculated as fractions of the sub-sizes and corresponding
     * attributed sub-sizes.
     *
     * Note that we always assume that all ownerships of a dump overlap (e.g.
     * OWNER3 is subsumed by both OWNER1 and OWNER2). Hence, the table could
     * be alternatively represented as follows:
     *
     *                                 owned memory range
     *              0   1   2    3    4    5    6        7        8   9  10
     *   Priority 2 |  OWNER1 + OWNER2 (split)  | OWNER2 |
     *   Priority 1 | (already attributed) |
     *   Priority 0 | - - -  (already attributed)  - - - | OWNER4 |
     *    Remainder | - - - - - (already attributed) - - - - - -  | OWNED |
     *
     * This method assumes that (1) the size of the dump [see calculateSizes()]
     * and (2) the not-owned size of the dump and not-owning sub-sizes of its
     * owners [see the first step of calculateEffectiveSizes()] have already
     * been calculated. Note that the method doesn't make any assumptions about
     * the order in which dumps are visited.
     */
    calculateDumpOwnershipCoefficient_(dump) {
      // Completely skip dumps with undefined size.
      if (!hasSize(dump)) return;

      // We only need to consider owned dumps.
      if (dump.ownedBy.length === 0) return;

      // Sort the owners in decreasing order of ownership importance and
      // increasing order of not-owning sub-size (in case of equal importance).
      const owners = dump.ownedBy.map(function(ownershipLink) {
        return {
          dump: ownershipLink.source,
          importance: optional(ownershipLink.importance, 0),
          notOwningSubSize: optional(ownershipLink.source.notOwningSubSize_, 0)
        };
      });
      owners.sort(function(a, b) {
        if (a.importance === b.importance) {
          return a.notOwningSubSize - b.notOwningSubSize;
        }
        return b.importance - a.importance;
      });

      // Loop over the list of owners and distribute the owned dump's not-owned
      // sub-size among them according to their ownership importance and
      // not-owning sub-size.
      let currentImportanceStartPos = 0;
      let alreadyAttributedSubSize = 0;
      while (currentImportanceStartPos < owners.length) {
        const currentImportance = owners[currentImportanceStartPos].importance;

        // Find the position of the first owner with lower priority.
        let nextImportanceStartPos = currentImportanceStartPos + 1;
        while (nextImportanceStartPos < owners.length &&
               owners[nextImportanceStartPos].importance ===
                  currentImportance) {
          nextImportanceStartPos++;
        }

        // Visit the owners with the same importance in increasing order of
        // not-owned sub-size, split the owned memory among them appropriately,
        // and calculate their owning coefficients.
        let attributedNotOwningSubSize = 0;
        for (let pos = currentImportanceStartPos; pos < nextImportanceStartPos;
             pos++) {
          const owner = owners[pos];
          const notOwningSubSize = owner.notOwningSubSize;
          if (notOwningSubSize > alreadyAttributedSubSize) {
            attributedNotOwningSubSize +=
                (notOwningSubSize - alreadyAttributedSubSize) /
                (nextImportanceStartPos - pos);
            alreadyAttributedSubSize = notOwningSubSize;
          }

          let owningCoefficient = 0;
          if (notOwningSubSize !== 0) {
            owningCoefficient = attributedNotOwningSubSize / notOwningSubSize;
          }
          owner.dump.owningCoefficient_ = owningCoefficient;
        }

        currentImportanceStartPos = nextImportanceStartPos;
      }

      // Attribute the remainder of the owned dump's not-owned sub-size to
      // the dump itself and calculate its owned coefficient.
      const notOwnedSubSize = optional(dump.notOwnedSubSize_, 0);
      const remainderSubSize = notOwnedSubSize - alreadyAttributedSubSize;
      let ownedCoefficient = 0;
      if (notOwnedSubSize !== 0) {
        ownedCoefficient = remainderSubSize / notOwnedSubSize;
      }
      dump.ownedCoefficient_ = ownedCoefficient;
    },

    /**
     * Calculate cumulative owned and owning coefficients of a memory allocator
     * dump from its (non-cumulative) owned and owning coefficients and the
     * cumulative coefficients of its parent and/or owned dump.
     *
     * The cumulative coefficients represent the total effect of all
     * (non-strict) ancestor ownerships on a memory allocator dump. The
     * cumulative owned coefficient of a MAD can be calculated simply as:
     *
     *   cumulativeOwnedC(M) = ownedC(M) * cumulativeOwnedC(parent(M))
     *
     * This reflects the assumption that if a parent of a child MAD is
     * (partially) owned, then the parent's owner also indirectly owns (a part
     * of) the child MAD.
     *
     * The cumulative owning coefficient of a MAD depends on whether the MAD
     * owns another dump:
     *
     *                           [if M doesn't own another MAD]
     *                         / cumulativeOwningC(parent(M))
     *   cumulativeOwningC(M) =
     *                         \ [if M owns another MAD]
     *                           owningC(M) * cumulativeOwningC(owned(M))
     *
     * The reasoning behind the first case is similar to the one for cumulative
     * owned coefficient above. The only difference is that we don't need to
     * include the dump's (non-cumulative) owning coefficient because it is
     * implicitly 1.
     *
     * The formula for the second case is derived as follows: Since the MAD
     * owns another dump, its memory is not included in its parent's not-owning
     * sub-size and hence shouldn't be affected by the parent's corresponding
     * cumulative coefficient. Instead, the MAD indirectly owns everything
     * owned by its owned dump (and so it should be affected by the
     * corresponding coefficient).
     *
     * Note that undefined coefficients (and coefficients of non-existent
     * dumps) are implicitly assumed to be 1.
     *
     * This method assumes that (1) the size of the dump [see calculateSizes()],
     * (2) the (non-cumulative) owned and owning coefficients of the dump [see
     * the second step of calculateEffectiveSizes()], and (3) the cumulative
     * coefficients of the dump's parent and owned MADs (if present)
     * [depth-first pre-order traversal] have already been calculated.
     */
    calculateDumpCumulativeOwnershipCoefficient_(dump) {
      // Completely skip dumps with undefined size.
      if (!hasSize(dump)) return;

      let cumulativeOwnedCoefficient = optional(dump.ownedCoefficient_, 1);
      const parent = dump.parent;
      if (dump.parent !== undefined) {
        cumulativeOwnedCoefficient *= dump.parent.cumulativeOwnedCoefficient_;
      }
      dump.cumulativeOwnedCoefficient_ = cumulativeOwnedCoefficient;

      let cumulativeOwningCoefficient;
      if (dump.owns !== undefined) {
        cumulativeOwningCoefficient = dump.owningCoefficient_ *
            dump.owns.target.cumulativeOwningCoefficient_;
      } else if (dump.parent !== undefined) {
        cumulativeOwningCoefficient = dump.parent.cumulativeOwningCoefficient_;
      } else {
        cumulativeOwningCoefficient = 1;
      }
      dump.cumulativeOwningCoefficient_ = cumulativeOwningCoefficient;
    },

    /**
     * Calculate the effective size of a memory allocator dump.
     *
     * In order to simplify the (already complex) calculation, we use the fact
     * that effective size is cumulative (unlike regular size), i.e. the
     * effective size of a non-leaf node is equal to the sum of effective sizes
     * of its children. The effective size of a leaf MAD is calculated as:
     *
     *   effectiveSize(M) = size(M) * cumulativeOwningC(M) * cumulativeOwnedC(M)
     *
     * This method assumes that (1) the size of the dump and its children [see
     * calculateSizes()] and (2) the cumulative owning and owned coefficients
     * of the dump (if it's a leaf node) [see the third step of
     * calculateEffectiveSizes()] or the effective sizes of its children (if
     * it's a non-leaf node) [depth-first post-order traversal] have already
     * been calculated.
     */
    calculateDumpEffectiveSize_(dump) {
      // Completely skip dumps with undefined size. As a result, each dump will
      // have defined effective size if and only if it has defined size.
      if (!hasSize(dump)) {
        // The rest of the pipeline relies on effective size being either a
        // valid Scalar, or undefined.
        delete dump.numerics[EFFECTIVE_SIZE_NUMERIC_NAME];
        return;
      }

      let effectiveSize;
      if (dump.children === undefined || dump.children.length === 0) {
        // Leaf dump.
        effectiveSize = getSize(dump) * dump.cumulativeOwningCoefficient_ *
            dump.cumulativeOwnedCoefficient_;
      } else {
        // Non-leaf dump.
        effectiveSize = 0;
        dump.children.forEach(function(childDump) {
          if (!hasSize(childDump)) return;
          effectiveSize +=
              childDump.numerics[EFFECTIVE_SIZE_NUMERIC_NAME].value;
        });
      }
      dump.numerics[EFFECTIVE_SIZE_NUMERIC_NAME] = new tr.b.Scalar(
          tr.b.Unit.byName.sizeInBytes_smallerIsBetter, effectiveSize);
    },

    aggregateNumerics() {
      // 1. Aggregate numerics in this global memory dump.
      this.iterateRootAllocatorDumps(function(dump) {
        dump.aggregateNumericsRecursively(this.model);
      });

      // 2. Propagate numerics and diagnostics from global memory allocator
      // dumps to their owners.
      this.iterateRootAllocatorDumps(
          this.propagateNumericsAndDiagnosticsRecursively);

      // 3. Aggregate numerics in the associated process memory dumps.
      for (const processMemoryDump of Object.values(this.processMemoryDumps)) {
        processMemoryDump.iterateRootAllocatorDumps(function(dump) {
          dump.aggregateNumericsRecursively(this.model);
        }, this);
      }
    },

    propagateNumericsAndDiagnosticsRecursively(globalAllocatorDump) {
      ['numerics', 'diagnostics'].forEach(function(field) {
        for (const [name, value] of
            Object.entries(globalAllocatorDump[field])) {
          globalAllocatorDump.ownedBy.forEach(function(ownershipLink) {
            const processAllocatorDump = ownershipLink.source;
            if (processAllocatorDump[field][name] !== undefined) {
              // Numerics and diagnostics provided by process memory allocator
              // dumps themselves have precedence over numerics and diagnostics
              // propagated from global memory allocator dumps.
              return;
            }
            processAllocatorDump[field][name] = value;
          });
        }
      });

      // Recursively propagate numerics from all child memory allocator dumps.
      globalAllocatorDump.children.forEach(
          this.propagateNumericsAndDiagnosticsRecursively, this);
    },

    setUpTracingOverheadOwnership() {
      for (const dump of Object.values(this.processMemoryDumps)) {
        dump.setUpTracingOverheadOwnership(this.model);
      }
    },

    discountTracingOverheadFromVmRegions() {
      // TODO(petrcermak): Consider factoring out all the finalization code and
      // constants to a single file.
      for (const dump of Object.values(this.processMemoryDumps)) {
        dump.discountTracingOverheadFromVmRegions(this.model);
      }
    },

    forceRebuildingMemoryAllocatorDumpByFullNameIndices() {
      this.iterateContainerDumps(function(containerDump) {
        containerDump.forceRebuildingMemoryAllocatorDumpByFullNameIndex();
      });
    },

    iterateContainerDumps(fn) {
      fn.call(this, this);
      for (const processDump of Object.values(this.processMemoryDumps)) {
        fn.call(this, processDump);
      }
    },

    iterateAllRootAllocatorDumps(fn) {
      this.iterateContainerDumps(function(containerDump) {
        containerDump.iterateRootAllocatorDumps(fn, this);
      });
    },

    /**
     * Traverse the memory dump graph in a depth first post-order, i.e.
     * children and owners of a memory allocator dump are visited before the
     * dump itself. This method will throw an exception if the graph contains
     * a cycle.
     */
    traverseAllocatorDumpsInDepthFirstPostOrder(fn) {
      const visitedDumps = new WeakSet();
      const openDumps = new WeakSet();

      function visit(dump) {
        if (visitedDumps.has(dump)) return;

        if (openDumps.has(dump)) {
          throw new Error(dump.userFriendlyName + ' contains a cycle');
        }
        openDumps.add(dump);

        // Visit owners before the dumps they own.
        dump.ownedBy.forEach(function(ownershipLink) {
          visit.call(this, ownershipLink.source);
        }, this);

        // Visit children before parents.
        dump.children.forEach(visit, this);

        // Actually visit the current memory allocator dump.
        fn.call(this, dump);
        visitedDumps.add(dump);

        openDumps.delete(dump);
      }

      this.iterateAllRootAllocatorDumps(visit);
    },

    /**
     * Traverse the memory dump graph in a depth first pre-order, i.e.
     * children and owners of a memory allocator dump are visited after the
     * dump itself. This method will not visit some dumps if the graph contains
     * a cycle.
     */
    traverseAllocatorDumpsInDepthFirstPreOrder(fn) {
      const visitedDumps = new WeakSet();

      function visit(dump) {
        if (visitedDumps.has(dump)) return;

        // If this dumps owns another dump which hasn't been visited yet, then
        // wait for this dump to be visited later.
        if (dump.owns !== undefined && !visitedDumps.has(dump.owns.target)) {
          return;
        }

        // If this dump's parent hasn't been visited yet, then wait for this
        // dump to be visited later.
        if (dump.parent !== undefined && !visitedDumps.has(dump.parent)) {
          return;
        }

        // Actually visit the current memory allocator dump.
        fn.call(this, dump);
        visitedDumps.add(dump);

        // Visit owners after the dumps they own.
        dump.ownedBy.forEach(function(ownershipLink) {
          visit.call(this, ownershipLink.source);
        }, this);

        // Visit children after parents.
        dump.children.forEach(visit, this);
      }

      this.iterateAllRootAllocatorDumps(visit);
    }
  };

  tr.model.EventRegistry.register(
      GlobalMemoryDump,
      {
        name: 'globalMemoryDump',
        pluralName: 'globalMemoryDumps'
      });

  return {
    GlobalMemoryDump,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const InstantEventType = {
    GLOBAL: 1,
    PROCESS: 2
  };

  /**
   * An InstantEvent is a zero-duration event.
   *
   * @constructor
   */
  function InstantEvent(category, title, colorId, start, args) {
    tr.model.TimedEvent.call(this, start);

    this.category = category || '';
    this.title = title;
    this.colorId = colorId;
    this.args = args;

    this.type = undefined;
  }

  InstantEvent.prototype = {
    __proto__: tr.model.TimedEvent.prototype
  };

  /**
   * A GlobalInstantEvent is a zero-duration event that's not tied to any
   * particular process.
   *
   * An example is a trace event that's issued when a new USB device is plugged
   * into the machine.
   *
   * @constructor
   */
  function GlobalInstantEvent(category, title, colorId, start, args) {
    InstantEvent.apply(this, arguments);
    this.type = InstantEventType.GLOBAL;
  }

  GlobalInstantEvent.prototype = {
    __proto__: InstantEvent.prototype,
    get userFriendlyName() {
      return 'Global instant event ' + this.title + ' @ ' +
          tr.b.Unit.byName.timeStampInMs.format(start);
    }
  };

  /**
   * A ProcessInstantEvent is a zero-duration event that's tied to a
   * particular process.
   *
   * An example is a trace event that's issued when a kill signal is received.
   *
   * @constructor
   */
  function ProcessInstantEvent(category, title, colorId, start, args) {
    InstantEvent.apply(this, arguments);
    this.type = InstantEventType.PROCESS;
  }

  ProcessInstantEvent.prototype = {
    __proto__: InstantEvent.prototype,

    get userFriendlyName() {
      return 'Process-level instant event ' + this.title + ' @ ' +
          tr.b.Unit.byName.timeStampInMs.format(start);
    }
  };

  tr.model.EventRegistry.register(
      InstantEvent,
      {
        name: 'instantEvent',
        pluralName: 'instantEvents'
      });

  return {
    GlobalInstantEvent,
    ProcessInstantEvent,

    InstantEventType,
    InstantEvent,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  function max(a, b) {
    if (a === undefined) return b;
    if (b === undefined) return a;
    return Math.max(a, b);
  }

  /**
   * This class implements an interval tree.
   *    See: http://wikipedia.org/wiki/Interval_tree
   *
   * Internally the tree is a Red-Black tree. The insertion/colour is done using
   * the Left-leaning Red-Black Trees algorithm as described in:
   *       http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf
   *
   * @param {function} beginPositionCb Callback to retrieve the begin position.
   * @param {function} endPositionCb Callback to retrieve the end position.
   *
   * @constructor
   */
  function IntervalTree(beginPositionCb, endPositionCb) {
    this.beginPositionCb_ = beginPositionCb;
    this.endPositionCb_ = endPositionCb;

    this.root_ = undefined;
    this.size_ = 0;
  }

  IntervalTree.prototype = {
    /**
     * Insert events into the interval tree.
     *
     * @param {Object} datum The object to insert.
     */
    insert(datum) {
      const startPosition = this.beginPositionCb_(datum);
      const endPosition = this.endPositionCb_(datum);

      const node = new IntervalTreeNode(datum,
                                      startPosition, endPosition);
      this.size_++;

      this.root_ = this.insertNode_(this.root_, node);
      this.root_.colour = Colour.BLACK;
      return datum;
    },

    insertNode_(root, node) {
      if (root === undefined) return node;

      if (root.leftNode && root.leftNode.isRed &&
          root.rightNode && root.rightNode.isRed) {
        this.flipNodeColour_(root);
      }

      if (node.key < root.key) {
        root.leftNode = this.insertNode_(root.leftNode, node);
      } else if (node.key === root.key) {
        root.merge(node);
      } else {
        root.rightNode = this.insertNode_(root.rightNode, node);
      }

      if (root.rightNode && root.rightNode.isRed &&
          (root.leftNode === undefined || !root.leftNode.isRed)) {
        root = this.rotateLeft_(root);
      }

      if (root.leftNode && root.leftNode.isRed &&
          root.leftNode.leftNode && root.leftNode.leftNode.isRed) {
        root = this.rotateRight_(root);
      }

      return root;
    },

    rotateRight_(node) {
      const sibling = node.leftNode;
      node.leftNode = sibling.rightNode;
      sibling.rightNode = node;
      sibling.colour = node.colour;
      node.colour = Colour.RED;
      return sibling;
    },

    rotateLeft_(node) {
      const sibling = node.rightNode;
      node.rightNode = sibling.leftNode;
      sibling.leftNode = node;
      sibling.colour = node.colour;
      node.colour = Colour.RED;
      return sibling;
    },

    flipNodeColour_(node) {
      node.colour = this.flipColour_(node.colour);
      node.leftNode.colour = this.flipColour_(node.leftNode.colour);
      node.rightNode.colour = this.flipColour_(node.rightNode.colour);
    },

    flipColour_(colour) {
      return colour === Colour.RED ? Colour.BLACK : Colour.RED;
    },

    /* The high values are used to find intersection. It should be called after
     * all of the nodes are inserted. Doing it each insert is _slow_. */
    updateHighValues() {
      this.updateHighValues_(this.root_);
    },

    /* There is probably a smarter way to do this by starting from the inserted
     * node, but need to handle the rotations correctly. Went the easy route
     * for now. */
    updateHighValues_(node) {
      if (node === undefined) return undefined;

      node.maxHighLeft = this.updateHighValues_(node.leftNode);
      node.maxHighRight = this.updateHighValues_(node.rightNode);

      return max(max(node.maxHighLeft, node.highValue), node.maxHighRight);
    },

    validateFindArguments_(queryLow, queryHigh) {
      if (queryLow === undefined || queryHigh === undefined) {
        throw new Error('queryLow and queryHigh must be defined');
      }
      if ((typeof queryLow !== 'number') || (typeof queryHigh !== 'number')) {
        throw new Error('queryLow and queryHigh must be numbers');
      }
    },

    /**
     * Retrieve all overlapping intervals.
     *
     * @param {number} queryLow The low value for the intersection interval.
     * @param {number} queryHigh The high value for the intersection interval.
     * @return {Array} All [begin, end] pairs inside intersecting intervals.
     */
    findIntersection(queryLow, queryHigh) {
      this.validateFindArguments_(queryLow, queryHigh);
      if (this.root_ === undefined) return [];

      const ret = [];
      this.root_.appendIntersectionsInto_(ret, queryLow, queryHigh);
      return ret;
    },

    /**
     * Returns the number of nodes in the tree.
     */
    get size() {
      return this.size_;
    },

    /**
     * Returns the root node in the tree.
     */
    get root() {
      return this.root_;
    },

    /**
     * Dumps out the [lowValue, highValue] pairs for each node in depth-first
     * order.
     */
    dump_() {
      if (this.root_ === undefined) return [];
      return this.root_.dump();
    }
  };

  const Colour = {
    RED: 'red',
    BLACK: 'black'
  };

  function IntervalTreeNode(datum, lowValue, highValue) {
    this.lowValue_ = lowValue;

    this.data_ = [{
      datum,
      high: highValue,
      low: lowValue
    }];

    this.colour_ = Colour.RED;

    this.parentNode_ = undefined;
    this.leftNode_ = undefined;
    this.rightNode_ = undefined;

    this.maxHighLeft_ = undefined;
    this.maxHighRight_ = undefined;
  }

  IntervalTreeNode.prototype = {
    appendIntersectionsInto_(ret, queryLow, queryHigh) {
      /* This node starts has a start point at or further right then queryHigh
       * so we know this node is out and all right children are out. Just need
       * to check left */
      if (this.lowValue_ >= queryHigh) {
        if (!this.leftNode_) return;
        return this.leftNode_.appendIntersectionsInto_(
            ret, queryLow, queryHigh);
      }

      /* If we have a maximum left high value that is bigger then queryLow we
       * need to check left for matches */
      if (this.maxHighLeft_ > queryLow) {
        this.leftNode_.appendIntersectionsInto_(ret, queryLow, queryHigh);
      }

      /* We know that this node starts before queryHigh, if any of it's data
       * ends after queryLow we need to add those nodes */
      if (this.highValue > queryLow) {
        for (let i = (this.data.length - 1); i >= 0; --i) {
          /* data nodes are sorted by high value, so as soon as we see one
           * before low value we're done. */
          if (this.data[i].high < queryLow) break;

          ret.push(this.data[i].datum);
        }
      }

      /* check for matches in the right tree */
      if (this.rightNode_) {
        this.rightNode_.appendIntersectionsInto_(ret, queryLow, queryHigh);
      }
    },

    get colour() {
      return this.colour_;
    },

    set colour(colour) {
      this.colour_ = colour;
    },

    get key() {
      return this.lowValue_;
    },

    get lowValue() {
      return this.lowValue_;
    },

    get highValue() {
      return this.data_[this.data_.length - 1].high;
    },

    set leftNode(left) {
      this.leftNode_ = left;
    },

    get leftNode() {
      return this.leftNode_;
    },

    get hasLeftNode() {
      return this.leftNode_ !== undefined;
    },

    set rightNode(right) {
      this.rightNode_ = right;
    },

    get rightNode() {
      return this.rightNode_;
    },

    get hasRightNode() {
      return this.rightNode_ !== undefined;
    },

    set parentNode(parent) {
      this.parentNode_ = parent;
    },

    get parentNode() {
      return this.parentNode_;
    },

    get isRootNode() {
      return this.parentNode_ === undefined;
    },

    set maxHighLeft(high) {
      this.maxHighLeft_ = high;
    },

    get maxHighLeft() {
      return this.maxHighLeft_;
    },

    set maxHighRight(high) {
      this.maxHighRight_ = high;
    },

    get maxHighRight() {
      return this.maxHighRight_;
    },

    get data() {
      return this.data_;
    },

    get isRed() {
      return this.colour_ === Colour.RED;
    },

    merge(node) {
      for (let i = 0; i < node.data.length; i++) {
        this.data_.push(node.data[i]);
      }
      this.data_.sort(function(a, b) {
        return a.high - b.high;
      });
    },

    dump() {
      const ret = {};
      if (this.leftNode_) {
        ret.left = this.leftNode_.dump();
      }

      ret.data = this.data_.map(function(d) { return [d.low, d.high]; });

      if (this.rightNode_) {
        ret.right = this.rightNode_.dump();
      }

      return ret;
    }
  };

  return {
    IntervalTree,
  };
});


'use strict';

tr.exportTo('tr.b.math', function() {
  const tmpVec2s = [];
  for (let i = 0; i < 8; i++) {
    tmpVec2s[i] = vec2.create();
  }

  const tmpVec2a = vec4.create();
  const tmpVec4a = vec4.create();
  const tmpVec4b = vec4.create();
  const tmpMat4 = mat4.create();
  const tmpMat4b = mat4.create();

  const p00 = vec2.createXY(0, 0);
  const p10 = vec2.createXY(1, 0);
  const p01 = vec2.createXY(0, 1);
  const p11 = vec2.createXY(1, 1);

  const lerpingVecA = vec2.create();
  const lerpingVecB = vec2.create();
  function lerpVec2(out, a, b, amt) {
    vec2.scale(lerpingVecA, a, amt);
    vec2.scale(lerpingVecB, b, 1 - amt);
    vec2.add(out, lerpingVecA, lerpingVecB);
    vec2.normalize(out, out);
    return out;
  }

  /**
   * @constructor
   */
  function Quad() {
    this.p1 = vec2.create();
    this.p2 = vec2.create();
    this.p3 = vec2.create();
    this.p4 = vec2.create();
  }

  Quad.fromXYWH = function(x, y, w, h) {
    const q = new Quad();
    vec2.set(q.p1, x, y);
    vec2.set(q.p2, x + w, y);
    vec2.set(q.p3, x + w, y + h);
    vec2.set(q.p4, x, y + h);
    return q;
  };

  Quad.fromRect = function(r) {
    return new Quad.fromXYWH(
        r.x, r.y,
        r.width, r.height);
  };

  Quad.from4Vecs = function(p1, p2, p3, p4) {
    const q = new Quad();
    vec2.set(q.p1, p1[0], p1[1]);
    vec2.set(q.p2, p2[0], p2[1]);
    vec2.set(q.p3, p3[0], p3[1]);
    vec2.set(q.p4, p4[0], p4[1]);
    return q;
  };

  Quad.from8Array = function(arr) {
    if (arr.length !== 8) {
      throw new Error('Array must be 8 long');
    }
    const q = new Quad();
    q.p1[0] = arr[0];
    q.p1[1] = arr[1];
    q.p2[0] = arr[2];
    q.p2[1] = arr[3];
    q.p3[0] = arr[4];
    q.p3[1] = arr[5];
    q.p4[0] = arr[6];
    q.p4[1] = arr[7];
    return q;
  };

  Quad.prototype = {
    pointInside(point) {
      return pointInImplicitQuad(point,
          this.p1, this.p2, this.p3, this.p4);
    },

    boundingRect() {
      const x0 = Math.min(this.p1[0], this.p2[0], this.p3[0], this.p4[0]);
      const y0 = Math.min(this.p1[1], this.p2[1], this.p3[1], this.p4[1]);

      const x1 = Math.max(this.p1[0], this.p2[0], this.p3[0], this.p4[0]);
      const y1 = Math.max(this.p1[1], this.p2[1], this.p3[1], this.p4[1]);

      return new tr.b.math.Rect.fromXYWH(x0, y0, x1 - x0, y1 - y0);
    },

    clone() {
      const q = new Quad();
      vec2.copy(q.p1, this.p1);
      vec2.copy(q.p2, this.p2);
      vec2.copy(q.p3, this.p3);
      vec2.copy(q.p4, this.p4);
      return q;
    },

    scale(s) {
      const q = new Quad();
      this.scaleFast(q, s);
      return q;
    },

    scaleFast(dstQuad, s) {
      vec2.copy(dstQuad.p1, this.p1, s);
      vec2.copy(dstQuad.p2, this.p2, s);
      vec2.copy(dstQuad.p3, this.p3, s);
      vec2.copy(dstQuad.p3, this.p3, s);
    },

    isRectangle() {
      // Simple rectangle check. Note: will not handle out-of-order components.
      const bounds = this.boundingRect();
      return (
          bounds.x === this.p1[0] &&
          bounds.y === this.p1[1] &&
          bounds.width === this.p2[0] - this.p1[0] &&
          bounds.y === this.p2[1] &&
          bounds.width === this.p3[0] - this.p1[0] &&
          bounds.height === this.p3[1] - this.p2[1] &&
          bounds.x === this.p4[0] &&
          bounds.height === this.p4[1] - this.p2[1]
      );
    },

    projectUnitRect(rect) {
      const q = new Quad();
      this.projectUnitRectFast(q, rect);
      return q;
    },

    projectUnitRectFast(dstQuad, rect) {
      const v12 = tmpVec2s[0];
      const v14 = tmpVec2s[1];
      const v23 = tmpVec2s[2];
      const v43 = tmpVec2s[3];

      vec2.sub(v12, this.p2, this.p1);
      const l12 = vec2.length(v12);
      vec2.scale(v12, v12, 1 / l12);

      vec2.sub(v14, this.p4, this.p1);
      const l14 = vec2.length(v14);
      vec2.scale(v14, v14, 1 / l14);

      vec2.sub(v23, this.p3, this.p2);
      const l23 = vec2.length(v23);
      vec2.scale(v23, v23, 1 / l23);

      vec2.sub(v43, this.p3, this.p4);
      const l43 = vec2.length(v43);
      vec2.scale(v43, v43, 1 / l43);

      const b12 = tmpVec2s[0];
      const b14 = tmpVec2s[1];
      const b23 = tmpVec2s[2];
      const b43 = tmpVec2s[3];
      lerpVec2(b12, v12, v43, rect.y);
      lerpVec2(b43, v12, v43, 1 - rect.bottom);
      lerpVec2(b14, v14, v23, rect.x);
      lerpVec2(b23, v14, v23, 1 - rect.right);

      vec2.addTwoScaledUnitVectors(tmpVec2a,
          b12, l12 * rect.x,
          b14, l14 * rect.y);
      vec2.add(dstQuad.p1, this.p1, tmpVec2a);

      vec2.addTwoScaledUnitVectors(tmpVec2a,
          b12, l12 * -(1.0 - rect.right),
          b23, l23 * rect.y);
      vec2.add(dstQuad.p2, this.p2, tmpVec2a);


      vec2.addTwoScaledUnitVectors(tmpVec2a,
          b43, l43 * -(1.0 - rect.right),
          b23, l23 * -(1.0 - rect.bottom));
      vec2.add(dstQuad.p3, this.p3, tmpVec2a);

      vec2.addTwoScaledUnitVectors(tmpVec2a,
          b43, l43 * rect.left,
          b14, l14 * -(1.0 - rect.bottom));
      vec2.add(dstQuad.p4, this.p4, tmpVec2a);
    },

    toString() {
      return 'Quad(' +
          vec2.toString(this.p1) + ', ' +
          vec2.toString(this.p2) + ', ' +
          vec2.toString(this.p3) + ', ' +
          vec2.toString(this.p4) + ')';
    }
  };

  function sign(p1, p2, p3) {
    return (p1[0] - p3[0]) * (p2[1] - p3[1]) -
        (p2[0] - p3[0]) * (p1[1] - p3[1]);
  }

  function pointInTriangle2(pt, p1, p2, p3) {
    const b1 = sign(pt, p1, p2) < 0.0;
    const b2 = sign(pt, p2, p3) < 0.0;
    const b3 = sign(pt, p3, p1) < 0.0;
    return ((b1 === b2) && (b2 === b3));
  }

  function pointInImplicitQuad(point, p1, p2, p3, p4) {
    return pointInTriangle2(point, p1, p2, p3) ||
        pointInTriangle2(point, p1, p3, p4);
  }

  return {
    pointInTriangle2,
    pointInImplicitQuad,
    Quad,
  };
});


'use strict';
/* eslint-disable no-console */

tr.exportTo('tr.b', function() {
  const ESTIMATED_IDLE_PERIOD_LENGTH_MILLISECONDS = 10;
  // The maximum amount of time that we allow for a task to get scheduled
  // in idle time before forcing the task to run.
  const REQUEST_IDLE_CALLBACK_TIMEOUT_MILLISECONDS = 100;

  // Setting this to true will cause stack traces to get dumped into the
  // tasks. When an exception happens the original stack will be printed.
  //
  // NOTE: This should never be set committed as true.
  const recordRAFStacks = false;

  let pendingPreAFs = [];
  let pendingRAFs = [];
  const pendingIdleCallbacks = [];
  let currentRAFDispatchList = undefined;

  let rafScheduled = false;
  let idleWorkScheduled = false;

  function scheduleRAF() {
    if (rafScheduled) return;
    rafScheduled = true;
    if (tr.isHeadless) {
      Promise.resolve().then(function() {
        processRequests(false, 0);
      }, function(e) {
        throw e;
      });
    } else {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(processRequests.bind(this, false));
      } else {
        const delta = Date.now() - window.performance.now();
        window.webkitRequestAnimationFrame(function(domTimeStamp) {
          processRequests(false, domTimeStamp - delta);
        });
      }
    }
  }

  function nativeRequestIdleCallbackSupported() {
    return !tr.isHeadless && window.requestIdleCallback;
  }

  function scheduleIdleWork() {
    if (idleWorkScheduled) return;
    if (!nativeRequestIdleCallbackSupported()) {
      scheduleRAF();
      return;
    }
    idleWorkScheduled = true;
    window.requestIdleCallback(function(deadline, didTimeout) {
      processIdleWork(false /* forceAllTasksToRun */, deadline);
    }, { timeout: REQUEST_IDLE_CALLBACK_TIMEOUT_MILLISECONDS });
  }

  function onAnimationFrameError(e, opt_stack) {
    console.log(e.stack);
    if (tr.isHeadless) throw e;

    if (opt_stack) console.log(opt_stack);

    if (e.message) {
      console.error(e.message, e.stack);
    } else {
      console.error(e);
    }
  }

  function runTask(task, frameBeginTime) {
    try {
      task.callback.call(task.context, frameBeginTime);
    } catch (e) {
      tr.b.onAnimationFrameError(e, task.stack);
    }
  }

  function processRequests(forceAllTasksToRun, frameBeginTime) {
    rafScheduled = false;

    const currentPreAFs = pendingPreAFs;
    currentRAFDispatchList = pendingRAFs;
    pendingPreAFs = [];
    pendingRAFs = [];
    const hasRAFTasks = currentPreAFs.length || currentRAFDispatchList.length;

    for (let i = 0; i < currentPreAFs.length; i++) {
      runTask(currentPreAFs[i], frameBeginTime);
    }

    while (currentRAFDispatchList.length > 0) {
      runTask(currentRAFDispatchList.shift(), frameBeginTime);
    }
    currentRAFDispatchList = undefined;

    if ((!hasRAFTasks && !nativeRequestIdleCallbackSupported()) ||
        forceAllTasksToRun) {
      // We assume that we want to do a fixed maximum amount of optional work
      // per frame. Hopefully rAF will eventually pass this in for us.
      const rafCompletionDeadline =
          frameBeginTime + ESTIMATED_IDLE_PERIOD_LENGTH_MILLISECONDS;
      processIdleWork(
          forceAllTasksToRun, {
            timeRemaining() {
              return rafCompletionDeadline - window.performance.now();
            }
          }
      );
    }

    if (pendingIdleCallbacks.length > 0) scheduleIdleWork();
  }

  function processIdleWork(forceAllTasksToRun, deadline) {
    idleWorkScheduled = false;
    while (pendingIdleCallbacks.length > 0) {
      runTask(pendingIdleCallbacks.shift());
      // Check timer after running at least one idle task to avoid buggy
      // window.performance.now() on some platforms from blocking the idle
      // task queue.
      if (!forceAllTasksToRun &&
          (tr.isHeadless || deadline.timeRemaining() <= 0)) {
        break;
      }
    }

    if (pendingIdleCallbacks.length > 0) scheduleIdleWork();
  }

  function getStack_() {
    if (!recordRAFStacks) return '';

    const stackLines = tr.b.stackTrace();
    // Strip off getStack_.
    stackLines.shift();
    return stackLines.join('\n');
  }

  function requestPreAnimationFrame(callback, opt_this) {
    pendingPreAFs.push({
      callback,
      context: opt_this || global,
      stack: getStack_()});
    scheduleRAF();
  }

  function requestAnimationFrameInThisFrameIfPossible(callback, opt_this) {
    if (!currentRAFDispatchList) {
      requestAnimationFrame(callback, opt_this);
      return;
    }
    currentRAFDispatchList.push({
      callback,
      context: opt_this || global,
      stack: getStack_()});
    return;
  }

  function requestAnimationFrame(callback, opt_this) {
    pendingRAFs.push({
      callback,
      context: opt_this || global,
      stack: getStack_()});
    scheduleRAF();
  }

  function animationFrame() {
    return new Promise(resolve => requestAnimationFrame(resolve));
  }

  function requestIdleCallback(callback, opt_this) {
    pendingIdleCallbacks.push({
      callback,
      context: opt_this || global,
      stack: getStack_()});
    scheduleIdleWork();
  }

  function forcePendingRAFTasksToRun(frameBeginTime) {
    if (!rafScheduled) return;
    processRequests(false, frameBeginTime);
  }

  function forceAllPendingTasksToRunForTest() {
    if (!rafScheduled && !idleWorkScheduled) return;
    processRequests(true, 0);
  }

  function timeout(ms) {
    return new Promise(resolve => window.setTimeout(resolve, ms));
  }

  function idle() {
    return new Promise(resolve => requestIdleCallback(resolve));
  }

  return {
    animationFrame,
    forceAllPendingTasksToRunForTest,
    forcePendingRAFTasksToRun,
    idle,
    onAnimationFrameError,
    requestAnimationFrame,
    requestAnimationFrameInThisFrameIfPossible,
    requestIdleCallback,
    requestPreAnimationFrame,
    timeout,
  };
});


'use strict';
tr.exportTo('tr.b', function() {
  class Mark {
    constructor(groupName, functionName) {
      if (tr.isHeadless) return;

      this.groupName_ = groupName;
      this.functionName_ = functionName;
      const guid = tr.b.GUID.allocateSimple();
      this.measureName_ = `${groupName} ${functionName}`;
      this.startMarkName_ = `${this.measureName} ${guid} start`;
      this.endMarkName_ = `${this.measureName} ${guid} end`;

      window.performance.mark(this.startMarkName_);
    }

    get groupName() {
      return this.groupName_;
    }

    get functionName() {
      return this.functionName_;
    }

    get measureName() {
      return this.measureName_;
    }

    get startMark() {
      return tr.b.getOnlyElement(window.performance.getEntriesByName(
          this.startMarkName_));
    }

    get endMark() {
      return tr.b.getOnlyElement(window.performance.getEntriesByName(
          this.endMarkName_));
    }

    get durationMs() {
      // There may be many measures named `this.measureName`, but the start and
      // end mark names contain a GUID so they are unique.
      return this.endMark.startTime - this.startMark.startTime;
    }

    end() {
      if (tr.isHeadless) return;

      window.performance.mark(this.endMarkName_);
      window.performance.measure(
          this.measureName_, this.startMarkName_, this.endMarkName_);

      if (!(window.ga instanceof Function)) return;
      // Google Analytics
      ga('send', {
        hitType: 'event',
        eventCategory: this.groupName,
        eventAction: this.functionName,
        eventValue: this.durationMs,
      });
    }
  }

  class Timing {
    static mark(groupName, functionName) {
      return new Mark(groupName, functionName);
    }

    static instant(groupName, functionName, opt_value) {
      const valueString = opt_value === undefined ? '' : ' ' + opt_value;

      /* eslint-disable no-console */
      if (console && console.timeStamp) {
        console.timeStamp(`${groupName} ${functionName}${valueString}`);
      }
      /* eslint-enable no-console */

      // Google Analytics
      if (window && window.ga instanceof Function) {
        ga('send', {
          hitType: 'event',
          eventCategory: groupName,
          eventAction: functionName,
          eventValue: opt_value,
        });
      }
    }

    static getCurrentTimeMs() {
      try {
        return performance.now();
      } catch (error) {}
      return 0;
    }
  }

  return {
    Timing,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  const Timing = tr.b.Timing;
  /**
   * A task is a combination of a run callback, a set of subtasks, and an after
   * task.
   *
   * When executed, a task does the following things:
   * 1. Runs its callback
   * 2. Runs its subtasks
   * 3. Runs its after callback.
   *
   * The list of subtasks and after task can be mutated inside step #1 but as
   * soon as the task's callback returns, the subtask list and after task is
   * fixed and cannot be changed again.
   *
   * Use task.after().after().after() to describe the toplevel passes that make
   * up your computation. Then, use subTasks to add detail to each subtask as it
   * runs. For example:
   *    var pieces = [];
   *    taskA = new Task(function() { pieces = getPieces(); });
   *    taskA.after(function(taskA) {
   *      pieces.forEach(function(piece) {
   *        taskA.subTask(function(taskB) { piece.process(); }, this);
   *      });
   *    });
   *
   * @constructor
   */
  function Task(runCb, thisArg) {
    if (runCb !== undefined && thisArg === undefined &&
        runCb.prototype !== undefined) {
      throw new Error('Almost certainly you meant to pass a bound callback ' +
          'or thisArg.');
    }
    this.runCb_ = runCb;
    this.thisArg_ = thisArg;
    this.afterTask_ = undefined;
    this.subTasks_ = [];
    this.updatesUi_ = false;
  }

  Task.prototype = {
    get name() {
      return this.runCb_.name;
    },

    /** Sets a hint for whether or not this task updates the UI. */
    set updatesUi(value) {
      this.updatesUi_ = value;
    },

    /*
     * See constructor documentation on semantics of subtasks.
     */
    subTask(cb, thisArg) {
      if (cb instanceof Task) {
        this.subTasks_.push(cb);
      } else {
        this.subTasks_.push(new Task(cb, thisArg));
      }
      return this.subTasks_[this.subTasks_.length - 1];
    },

    /**
     * Runs the current task and returns the task that should be executed next.
     */
    run() {
      if (this.runCb_ !== undefined) this.runCb_.call(this.thisArg_, this);
      const subTasks = this.subTasks_;
      this.subTasks_ = undefined; // Prevent more subTasks from being posted.

      if (!subTasks.length) return this.afterTask_;

      // If there are subtasks, then we want to execute all the subtasks and
      // then this task's afterTask. To make this happen, we update the
      // afterTask of all the subtasks so the point upward to each other, e.g.
      // subTask[0].afterTask to subTask[1] and so on. Then, the last subTask's
      // afterTask points at this task's afterTask.
      for (let i = 1; i < subTasks.length; i++) {
        subTasks[i - 1].afterTask_ = subTasks[i];
      }
      subTasks[subTasks.length - 1].afterTask_ = this.afterTask_;
      return subTasks[0];
    },

    /*
     * See constructor documentation on semantics of after tasks.
     */
    after(cb, thisArg) {
      if (this.afterTask_) {
        throw new Error('Has an after task already');
      }
      if (cb instanceof Task) {
        this.afterTask_ = cb;
      } else {
        this.afterTask_ = new Task(cb, thisArg);
      }
      return this.afterTask_;
    },

    /*
     * Adds a task after the chain of tasks.
     */
    enqueue(cb, thisArg) {
      if (!this.afterTask_) return this.after(cb, thisArg);
      return this.afterTask_.enqueue(cb, thisArg);
    }
  };

  Task.RunSynchronously = function(task) {
    let curTask = task;
    while (curTask) {
      curTask = curTask.run();
    }
  };

  /**
   * Runs a task using raf.requestIdleCallback, returning
   * a promise for its completion.
   */
  Task.RunWhenIdle = function(task) {
    return new Promise(function(resolve, reject) {
      let curTask = task;
      function runAnother() {
        try {
          curTask = curTask.run();
        } catch (e) {
          reject(e);
          return;
        }

        if (curTask) {
          if (curTask.updatesUi_) {
            tr.b.requestAnimationFrameInThisFrameIfPossible(runAnother);
          } else {
            tr.b.requestIdleCallback(runAnother);
          }
          return;
        }

        resolve();
      }
      tr.b.requestIdleCallback(runAnother);
    });
  };

  return {
    Task,
  };
});


'use strict';

/**
 * @fileoverview Base class for auditors.
 */
tr.exportTo('tr.c', function() {
  function Auditor(model) {
    this.model_ = model;
  }

  Auditor.prototype = {
    __proto__: Object.prototype,

    get model() {
      return this.model_;
    },

    /**
     * Called by the Model after baking slices. May modify model.
     */
    runAnnotate() {
    },

    /**
     * Called by import to install userFriendlyCategoryDriver.
     */
    installUserFriendlyCategoryDriverIfNeeded() {
    },

    /**
     * Called by the Model after importing. Should not modify model, except
     * for adding interaction ranges and audits.
     */
    runAudit() {
    }
  };

  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  options.defaultMetadata = {};
  options.mandatoryBaseClass = Auditor;
  tr.b.decorateExtensionRegistry(Auditor, options);

  return {
    Auditor,
  };
});


'use strict';

tr.exportTo('tr.c', function() {
  function makeCaseInsensitiveRegex(pattern) {
    // See https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/
    // Regular_Expressions.
    pattern = pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    return new RegExp(pattern, 'i');
  }

  /**
   * @constructor The generic base class for filtering a Model based on
   * various rules. The base class returns true for everything.
   */
  function Filter() { }

  Filter.prototype = {
    __proto__: Object.prototype,

    matchCounter(counter) {
      return true;
    },

    matchCpu(cpu) {
      return true;
    },

    matchProcess(process) {
      return true;
    },

    matchSlice(slice) {
      return true;
    },

    matchThread(thread) {
      return true;
    }
  };

  /**
   * @constructor A filter that matches objects by their name or category
   * case insensitive.
   * .findAllObjectsMatchingFilter
   */
  function TitleOrCategoryFilter(text) {
    Filter.call(this);
    this.regex_ = makeCaseInsensitiveRegex(text);

    if (!text.length) {
      throw new Error('Filter text is empty.');
    }
  }
  TitleOrCategoryFilter.prototype = {
    __proto__: Filter.prototype,

    matchSlice(slice) {
      if (slice.title === undefined && slice.category === undefined) {
        return false;
      }

      return this.regex_.test(slice.title) ||
          (!!slice.category && this.regex_.test(slice.category));
    }
  };

  /**
   * @constructor A filter that matches objects with the exact given title.
   */
  function ExactTitleFilter(text) {
    Filter.call(this);
    this.text_ = text;

    if (!text.length) {
      throw new Error('Filter text is empty.');
    }
  }
  ExactTitleFilter.prototype = {
    __proto__: Filter.prototype,

    matchSlice(slice) {
      return slice.title === this.text_;
    }
  };

  /**
   * @constructor A filter that matches objects by their full text contents
   * (title, category, args). Note that for performance this filter applies a
   * regex against all the keys of the slice arguments instead of recursing
   * through any embedded sub-objects.
   */
  function FullTextFilter(text) {
    Filter.call(this);
    this.regex_ = makeCaseInsensitiveRegex(text);
    this.titleOrCategoryFilter_ = new TitleOrCategoryFilter(text);
  }
  FullTextFilter.prototype = {
    __proto__: Filter.prototype,

    matchObject_(obj) {
      for (const key in obj) {
        if (!obj.hasOwnProperty(key)) continue;
        if (this.regex_.test(key)) return true;
        if (this.regex_.test(obj[key])) return true;
      }
      return false;
    },

    matchSlice(slice) {
      if (this.titleOrCategoryFilter_.matchSlice(slice)) return true;
      return this.matchObject_(slice.args);
    }
  };

  return {
    Filter,
    TitleOrCategoryFilter,
    ExactTitleFilter,
    FullTextFilter,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const ColorScheme = tr.b.ColorScheme;

  /**
   * EventInfo is an annotation added to Events in order to document
   * what they represent, and override their title/colorId values.
   *
   * TODO(ccraik): eventually support more complex structure/paragraphs.
   *
   * @param {string} title A user-visible title for the event.
   * @param {string} description A user-visible description of the event.
   * @param {Array} docLinks A list of Objects, each of the form
   * {label: str, textContent: str, href: str}
   *
   * @constructor
   */
  function EventInfo(title, description, docLinks) {
    this.title = title;
    this.description = description;
    this.docLinks = docLinks;
    this.colorId = ColorScheme.getColorIdForGeneralPurposeString(title);
  }

  return {
    EventInfo,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  function Alert(info, start, opt_associatedEvents, opt_args) {
    tr.model.TimedEvent.call(this, start);
    this.info = info;
    this.args = opt_args || {};
    this.associatedEvents = new tr.model.EventSet(opt_associatedEvents);
    this.associatedEvents.forEach(function(event) {
      event.addAssociatedAlert(this);
    }, this);
  }

  Alert.prototype = {
    __proto__: tr.model.TimedEvent.prototype,

    get title() {
      return this.info.title;
    },

    get colorId() {
      return this.info.colorId;
    },

    get userFriendlyName() {
      return 'Alert ' + this.title + ' at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.start);
    }
  };

  tr.model.EventRegistry.register(
      Alert,
      {
        name: 'alert',
        pluralName: 'alerts'
      });

  return {
    Alert,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const ClockDomainId = {
    BATTOR: 'BATTOR',

    // NOTE: Exists for backwards compatibility with old Chrome traces which
    // didn't explicitly specify the clock being used.
    UNKNOWN_CHROME_LEGACY: 'UNKNOWN_CHROME_LEGACY',

    LINUX_CLOCK_MONOTONIC: 'LINUX_CLOCK_MONOTONIC',
    LINUX_FTRACE_GLOBAL: 'LINUX_FTRACE_GLOBAL',
    MAC_MACH_ABSOLUTE_TIME: 'MAC_MACH_ABSOLUTE_TIME',
    WIN_ROLLOVER_PROTECTED_TIME_GET_TIME:
        'WIN_ROLLOVER_PROTECTED_TIME_GET_TIME',
    WIN_QPC: 'WIN_QPC',

    // 'TELEMETRY' and 'SYSTRACE' aren't really clock domains because they
    // actually can use one of several clock domains, just like Chrome. However,
    // because there's a chance that they are running off of the same clock as
    // Chrome (e.g. LINUX_CLOCK_MONOTONIC) but on a separate device (i.e. on a
    // a host computer with Chrome running on an attached phone), there's a
    // chance that Chrome and the controller will erroneously get put into
    // the same clock domain. The solution for this is that clock domains should
    // actually be some (unique_device_id, clock_id) tuple. For now, though,
    // we'll hack around this by putting Telemetry into its own clock domain.
    SYSTRACE: 'SYSTRACE',
    TELEMETRY: 'TELEMETRY'
  };

  const POSSIBLE_CHROME_CLOCK_DOMAINS = new Set([
    ClockDomainId.UNKNOWN_CHROME_LEGACY,
    ClockDomainId.LINUX_CLOCK_MONOTONIC,
    ClockDomainId.MAC_MACH_ABSOLUTE_TIME,
    ClockDomainId.WIN_ROLLOVER_PROTECTED_TIME_GET_TIME,
    ClockDomainId.WIN_QPC
  ]);

  // The number of milliseconds above which the BattOr sync is no longer
  // considered "fast", and it's more accurate to use the sync start timestamp
  // instead of the normal sync timestamp due to a bug in the Chrome serial code
  // making serial reads too slow.
  const BATTOR_FAST_SYNC_THRESHOLD_MS = 3;

  /**
   * A ClockSyncManager holds clock sync markers and uses them to shift
   * timestamps from agents' clock domains onto the model's clock domain.
   *
   * In this context, a "clock domain" is a single perspective on the passage
   * of time. A single computer can have multiple clock domains because it
   * can have multiple methods of retrieving a timestamp (e.g.
   * clock_gettime(CLOCK_MONOTONIC) and clock_gettime(CLOCK_REALTIME) on Linux).
   * Another common reason for multiple clock domains within a single trace
   * is that traces can span devices (e.g. a laptop collecting a Chrome trace
   * can have its power consumption recorded by a second device and the two
   * traces can be viewed alongside each other).
   *
   * For more information on how to synchronize multiple time domains using this
   * method, see: http://bit.ly/1OVkqju.
   *
   * @constructor
   */
  function ClockSyncManager() {
    // A set of all domains seen by the ClockSyncManager.
    this.domainsSeen_ = new Set();
    this.markersBySyncId_ = new Map();
    // transformerMapByDomainId_[fromDomainId][toDomainId] returns the function
    // that converts timestamps in the "from" domain to timestamps in the "to"
    // domain.
    this.transformerMapByDomainId_ = {};
  }

  ClockSyncManager.prototype = {
    /**
     * Adds a clock sync marker to the list of known markers.
     *
     * @param {string} domainId The clock domain that the marker is in.
     * @param {string} syncId The identifier shared by both sides of the clock
     *                 sync marker.
     * @param {number} startTs The time (in ms) at which the sync started.
     * @param {number=} opt_endTs The time (in ms) at which the sync ended. If
     *                  unspecified, it's assumed to be the same as the start,
     *                  indicating an instantaneous sync.
     */
    addClockSyncMarker(domainId, syncId, startTs, opt_endTs) {
      this.onDomainSeen_(domainId);

      if (Object.values(ClockDomainId).indexOf(domainId) < 0) {
        throw new Error('"' + domainId + '" is not in the list of known ' +
            'clock domain IDs.');
      }

      if (this.modelDomainId_) {
        throw new Error('Cannot add new clock sync markers after getting ' +
            'a model time transformer.');
      }

      const marker = new ClockSyncMarker(domainId, startTs, opt_endTs);

      if (!this.markersBySyncId_.has(syncId)) {
        this.markersBySyncId_.set(syncId, [marker]);
        return;
      }

      const markers = this.markersBySyncId_.get(syncId);

      if (markers.length === 2) {
        throw new Error('Clock sync with ID "' + syncId + '" is already ' +
            'complete - cannot add a third clock sync marker to it.');
      }

      if (markers[0].domainId === domainId) {
        throw new Error('A clock domain cannot sync with itself.');
      }

      markers.push(marker);
      this.onSyncCompleted_(markers[0], marker);
    },

    // TODO(charliea): Remove this once the clockSyncMetric is no longer using
    // it.
    get markersBySyncId() {
      return this.markersBySyncId_;
    },

    /** @return {Set<String>} The string IDs of the domains seen so far. */
    get domainsSeen() {
      return this.domainsSeen_;
    },

    /**
     * Returns a function that, given a timestamp in the domain with |domainId|,
     * returns a timestamp in the model's clock domain.
     *
     * NOTE: All clock sync markers should be added before calling this function
     * for the first time. This is because the first time that this function is
     * called, a model clock domain is selected. This clock domain must have
     * syncs connecting it with all other clock domains. If multiple clock
     * domains are viable candidates, the one with the clock domain ID that is
     * the first alphabetically is selected.
     */
    getModelTimeTransformer(domainId) {
      this.onDomainSeen_(domainId);

      if (!this.modelDomainId_) {
        this.selectModelDomainId_();
      }

      return this.getTimeTransformerRaw_(domainId, this.modelDomainId_).fn;
    },

    /**
     * Returns the error associated with the transformation given by
     * |getModelTimeTransformer(domainId)|.
     */
    getTimeTransformerError(fromDomainId, toDomainId) {
      this.onDomainSeen_(fromDomainId);
      this.onDomainSeen_(toDomainId);
      return this.getTimeTransformerRaw_(fromDomainId, toDomainId).error;
    },

    getTimeTransformerRaw_(fromDomainId, toDomainId) {
      const transformer =
          this.getTransformerBetween_(fromDomainId, toDomainId);
      if (!transformer) {
        throw new Error('No clock sync markers exist pairing clock domain "' +
            fromDomainId + '" ' + 'with target clock domain "' +
            toDomainId + '".');
      }

      return transformer;
    },

    /**
     * Returns a function that, given a timestamp in the "from" domain, returns
     * a timestamp in the "to" domain.
     */
    getTransformerBetween_(fromDomainId, toDomainId) {
      // Do a breadth-first search from the "from" domain until we reach the
      // "to" domain.
      const visitedDomainIds = new Set();
      // Keep a queue of nodes to visit, starting with the "from" domain.
      const queue = [{
        domainId: fromDomainId,
        transformer: Transformer.IDENTITY
      }];

      while (queue.length > 0) {
        // NOTE: Using a priority queue here would theoretically be much more
        // efficient, but the actual performance difference is negligible given
        // how few clock domains we have in a trace.
        queue.sort((domain1, domain2) =>
            domain1.transformer.error - domain2.transformer.error);

        const current = queue.shift();

        if (current.domainId === toDomainId) {
          return current.transformer;
        }

        if (visitedDomainIds.has(current.domainId)) {
          continue;
        }
        visitedDomainIds.add(current.domainId);

        const outgoingTransformers =
            this.transformerMapByDomainId_[current.domainId];

        if (!outgoingTransformers) continue;

        // Add all nodes that are directly connected to this one to the queue.
        for (const outgoingDomainId in outgoingTransformers) {
          // We have two transformers: one to get us from the "from" domain to
          // the current domain, and another to get us from the current domain
          // to the next domain. By composing those two transformers, we can
          // create one that gets us from the "from" domain to the next domain.
          const toNextDomainTransformer =
            outgoingTransformers[outgoingDomainId];
          const toCurrentDomainTransformer = current.transformer;

          queue.push({
            domainId: outgoingDomainId,
            transformer: Transformer.compose(
                toNextDomainTransformer, toCurrentDomainTransformer)
          });
        }
      }

      return undefined;
    },

    /**
     * Selects the domain to use as the model domain from among the domains
     * with registered markers.
     *
     * This is necessary because some common domain must be chosen before all
     * timestamps can be shifted onto the same domain.
     *
     * For the time being, preference is given to Chrome clock domains. If no
     * Chrome clock domain is present, the first clock domain alphabetically
     * is selected.
     */
    selectModelDomainId_() {
      this.ensureAllDomainsAreConnected_();

      // While we're migrating to the new clock sync system, we have to make
      // sure to prefer the Chrome clock domain because legacy clock sync
      // mechanisms assume that's the case.
      for (const chromeDomainId of POSSIBLE_CHROME_CLOCK_DOMAINS) {
        if (this.domainsSeen_.has(chromeDomainId)) {
          this.modelDomainId_ = chromeDomainId;
          return;
        }
      }

      const domainsSeenArray = Array.from(this.domainsSeen_);
      domainsSeenArray.sort();
      this.modelDomainId_ = domainsSeenArray[0];
    },

    /** Throws an error if all domains are not connected. */
    ensureAllDomainsAreConnected_() {
      // NOTE: this is a ridiculously inefficient way to do this. Given how few
      // clock domains we're likely to have, this shouldn't be a problem.
      let firstDomainId = undefined;
      for (const domainId of this.domainsSeen_) {
        if (!firstDomainId) {
          firstDomainId = domainId;
          continue;
        }

        if (!this.getTransformerBetween_(firstDomainId, domainId)) {
          throw new Error('Unable to select a master clock domain because no ' +
              'path can be found from "' + firstDomainId + '" to "' + domainId +
              '".');
        }
      }

      return true;
    },

    /** Observer called each time that a clock domain is seen. */
    onDomainSeen_(domainId) {
      if (domainId === ClockDomainId.UNKNOWN_CHROME_LEGACY &&
          !this.domainsSeen_.has(ClockDomainId.UNKNOWN_CHROME_LEGACY)) {
        // UNKNOWN_CHROME_LEGACY was just seen for the first time: collapse it
        // and the other Chrome clock domains into one.
        //
        // This makes sure that we don't have two separate clock sync graphs:
        // one attached to UNKNOWN_CHROME_LEGACY and the other attached to the
        // real Chrome clock domain.
        for (const chromeDomainId of POSSIBLE_CHROME_CLOCK_DOMAINS) {
          if (chromeDomainId === ClockDomainId.UNKNOWN_CHROME_LEGACY) {
            continue;
          }

          this.collapseDomains_(
              ClockDomainId.UNKNOWN_CHROME_LEGACY, chromeDomainId);
        }
      }

      this.domainsSeen_.add(domainId);
    },

    /**
     * Observer called when a complete sync is made involving |marker1| and
     * |marker2|.
     */
    onSyncCompleted_(marker1, marker2) {
      const forwardTransformer = Transformer.fromMarkers(marker1, marker2);
      const backwardTransformer = Transformer.fromMarkers(marker2, marker1);

      const existingTransformer =
          this.getOrCreateTransformerMap_(marker1.domainId)[marker2.domainId];
      if (!existingTransformer ||
          forwardTransformer.error < existingTransformer.error) {
        this.getOrCreateTransformerMap_(marker1.domainId)[marker2.domainId] =
            forwardTransformer;
        this.getOrCreateTransformerMap_(marker2.domainId)[marker1.domainId] =
            backwardTransformer;
      }
    },

    /** Makes timestamps in the two clock domains interchangeable. */
    collapseDomains_(domain1Id, domain2Id) {
      this.getOrCreateTransformerMap_(domain1Id)[domain2Id] =
          this.getOrCreateTransformerMap_(domain2Id)[domain1Id] =
              Transformer.IDENTITY;
    },

    /**
     * Returns (and creates if it doesn't exist) the transformer map describing
     * how to transform timestamps between directly connected clock domains.
     */
    getOrCreateTransformerMap_(domainId) {
      if (!this.transformerMapByDomainId_[domainId]) {
        this.transformerMapByDomainId_[domainId] = {};
      }

      return this.transformerMapByDomainId_[domainId];
    },

    /**
     * @return {string} The clock sync graph represented in the DOT language.
     * This is useful for debugging incorrect clock sync behavior.
     */
    computeDotGraph() {
      let dotString = 'graph {\n';

      const domainsSeen = [...this.domainsSeen_].sort();
      for (const domainId of domainsSeen) {
        dotString += `  ${domainId}[shape=box]\n`;
      }

      const markersBySyncIdEntries = [...this.markersBySyncId_.entries()].sort(
          ([syncId1, markers1], [syncId2, markers2]) =>
              syncId1.localeCompare(syncId2));

      for (const [syncId, markers] of markersBySyncIdEntries) {
        const sortedMarkers = markers.sort(
            (a, b) => a.domainId.localeCompare(b.domainId));
        for (const m of markers) {
          dotString += `  "${syncId}" -- ${m.domainId} `;
          dotString += `[label="[${m.startTs}, ${m.endTs}]"]\n`;
        }
      }

      dotString += '}';

      return dotString;
    }
  };

  /**
   * A ClockSyncMarker is an internal entity that represents a marker in a
   * trace log indicating that a clock sync happened at a specified time.
   *
   * If no end timestamp argument is specified in the constructor, it's assumed
   * that the end timestamp is the same as the start (i.e. the clock sync
   * was instantaneous).
   */
  function ClockSyncMarker(domainId, startTs, opt_endTs) {
    this.domainId = domainId;
    this.startTs = startTs;
    this.endTs = opt_endTs === undefined ? startTs : opt_endTs;
  }

  ClockSyncMarker.prototype = {
    get duration() { return this.endTs - this.startTs; },
    get ts() { return this.startTs + this.duration / 2; }
  };

  /**
   * A Transformer encapsulates information about how to turn timestamps in one
   * clock domain into timestamps in another. It also stores additional data
   * about the maximum error involved in doing so.
   */
  function Transformer(fn, error) {
    this.fn = fn;
    this.error = error;
  }

  Transformer.IDENTITY = new Transformer((x => x), 0);

  /**
   * Given two transformers, creates a third that's a composition of the two.
   *
   * @param {function(Number): Number} aToB A function capable of converting a
   *     timestamp from domain A to domain B.
   * @param {function(Number): Number} bToC A function capable of converting a
   *     timestamp from domain B to domain C.
   *
   * @return {function(Number): Number} A function capable of converting a
   *     timestamp from domain A to domain C.
   */
  Transformer.compose = function(aToB, bToC) {
    return new Transformer(
        (ts) => bToC.fn(aToB.fn(ts)), aToB.error + bToC.error);
  };

  /**
   * Returns a function that, given a timestamp in |fromMarker|'s domain,
   * returns a timestamp in |toMarker|'s domain.
   */
  Transformer.fromMarkers = function(fromMarker, toMarker) {
    let fromTs = fromMarker.ts;
    let toTs = toMarker.ts;

    // TODO(charliea): Usually, we estimate that the clock sync marker is
    // issued by the agent exactly in the middle of the controller's start and
    // end timestamps. However, there's currently a bug in the Chrome serial
    // code that's making the clock sync ack for BattOr take much longer to
    // read than it should (by about 8ms). This is causing the above estimate
    // of the controller's sync timestamp to be off by a substantial enough
    // amount that it makes traces hard to read. For now, make an exception
    // for BattOr and just use the controller's start timestamp as the sync
    // time. In the medium term, we should fix the Chrome serial code in order
    // to remove this special logic and get an even more accurate estimate.
    if (fromMarker.domainId === ClockDomainId.BATTOR &&
        toMarker.duration > BATTOR_FAST_SYNC_THRESHOLD_MS) {
      toTs = toMarker.startTs;
    } else if (toMarker.domainId === ClockDomainId.BATTOR &&
        fromMarker.duration > BATTOR_FAST_SYNC_THRESHOLD_MS) {
      fromTs = fromMarker.startTs;
    }

    const tsShift = toTs - fromTs;
    return new Transformer(
        (ts) => ts + tsShift, fromMarker.duration + toMarker.duration);
  };

  return {
    ClockDomainId,
    ClockSyncManager,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * A container holding all series of a given type of measurement.
   *
   * As an example, if we're measuring the throughput of data sent over several
   * USB connections, the throughput of each cable might be added as a separate
   * series to a single counter.
   *
   * @constructor
   * @extends {EventContainer}
   */
  function Counter(parent, id, category, name) {
    tr.model.EventContainer.call(this);

    this.parent_ = parent;
    this.id_ = id;
    this.category_ = category || '';
    this.name_ = name;

    this.series_ = [];
    this.totals = [];
  }

  Counter.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    get parent() {
      return this.parent_;
    },

    get id() {
      return this.id_;
    },

    get category() {
      return this.category_;
    },

    get name() {
      return this.name_;
    },

    * childEvents() {
    },

    * childEventContainers() {
      yield* this.series;
    },

    set timestamps(arg) {
      throw new Error('Bad counter API. No cookie.');
    },

    set seriesNames(arg) {
      throw new Error('Bad counter API. No cookie.');
    },

    set seriesColors(arg) {
      throw new Error('Bad counter API. No cookie.');
    },

    set samples(arg) {
      throw new Error('Bad counter API. No cookie.');
    },

    addSeries(series) {
      series.counter = this;
      series.seriesIndex = this.series_.length;
      this.series_.push(series);
      return series;
    },

    getSeries(idx) {
      return this.series_[idx];
    },

    get series() {
      return this.series_;
    },

    get numSeries() {
      return this.series_.length;
    },

    get numSamples() {
      if (this.series_.length === 0) return 0;
      return this.series_[0].length;
    },

    get timestamps() {
      if (this.series_.length === 0) return [];
      return this.series_[0].timestamps;
    },

    /**
     * Obtains min, max, avg, values, start, and end for different series for
     * a given counter
     *     getSampleStatistics([0,1])
     * The statistics objects that this returns are an array of objects, one
     * object for each series for the counter in the form:
     * {min: minVal, max: maxVal, avg: avgVal, start: startVal, end: endVal}
     *
     * @param {Array.<Number>} Indices to summarize.
     * @return {Object} An array of statistics. Each element in the array
     * has data for one of the series in the selected counter.
     */
    getSampleStatistics(sampleIndices) {
      sampleIndices.sort();

      const ret = [];
      this.series_.forEach(function(series) {
        ret.push(series.getStatistics(sampleIndices));
      });
      return ret;
    },

    /**
     * Shifts all the timestamps inside this counter forward by the amount
     * specified.
     */
    shiftTimestampsForward(amount) {
      for (let i = 0; i < this.series_.length; ++i) {
        this.series_[i].shiftTimestampsForward(amount);
      }
    },

    /**
     * Updates the bounds for this counter based on the samples it contains.
     */
    updateBounds() {
      this.totals = [];
      this.maxTotal = 0;
      this.bounds.reset();

      if (this.series_.length === 0) return;

      const firstSeries = this.series_[0];
      const lastSeries = this.series_[this.series_.length - 1];

      this.bounds.addValue(firstSeries.getTimestamp(0));
      this.bounds.addValue(lastSeries.getTimestamp(lastSeries.length - 1));

      const numSeries = this.numSeries;
      this.maxTotal = -Infinity;

      // Sum the samples at each timestamp.
      // Note, this assumes that all series have all timestamps.
      for (let i = 0; i < firstSeries.length; ++i) {
        let total = 0;
        this.series_.forEach(function(series) {
          total += series.getSample(i).value;
          this.totals.push(total);
        }.bind(this));

        this.maxTotal = Math.max(total, this.maxTotal);
      }
    }
  };

  /**
   * Comparison between counters that orders by parent.compareTo, then name.
   */
  Counter.compare = function(x, y) {
    let tmp = x.parent.compareTo(y.parent);
    if (tmp !== 0) return tmp;
    tmp = x.name.localeCompare(y.name);
    if (tmp === 0) return x.tid - y.tid;
    return tmp;
  };

  return {
    Counter,
  };
});


'use strict';

/**
 * @fileoverview Provides the Slice class.
 */
tr.exportTo('tr.model', function() {
  /**
   * A Slice represents an interval of time plus parameters associated
   * with that interval.
   *
   * @constructor
   */
  function Slice(category, title, colorId, start, args, opt_duration,
      opt_cpuStart, opt_cpuDuration, opt_argsStripped,
      opt_bindId) {
    if (new.target) {
      throw new Error('Can\'t instantiate pure virtual class Slice');
    }
    tr.model.TimedEvent.call(this, start);

    this.category = category || '';
    this.title = title;
    this.colorId = colorId;
    this.args = args;
    this.startStackFrame = undefined;
    this.endStackFrame = undefined;
    this.didNotFinish = false;
    this.inFlowEvents = [];
    this.outFlowEvents = [];
    this.subSlices = [];
    this.selfTime = undefined;
    this.cpuSelfTime = undefined;
    this.important = false;
    this.parentContainer = undefined;
    this.argsStripped = false;

    this.bind_id_ = opt_bindId;

    // parentSlice and isTopLevel will be set by SliceGroup.
    this.parentSlice = undefined;
    this.isTopLevel = false;
    // After SliceGroup processes Slices, isTopLevel should be equivalent to
    // !parentSlice.

    if (opt_duration !== undefined) {
      this.duration = opt_duration;
    }

    if (opt_cpuStart !== undefined) {
      this.cpuStart = opt_cpuStart;
    }

    if (opt_cpuDuration !== undefined) {
      this.cpuDuration = opt_cpuDuration;
    }

    if (opt_argsStripped !== undefined) {
      this.argsStripped = true;
    }
  }

  Slice.prototype = {
    __proto__: tr.model.TimedEvent.prototype,


    get analysisTypeName() {
      return this.title;
    },

    get userFriendlyName() {
      return 'Slice ' + this.title + ' at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.start);
    },

    get stableId() {
      const parentSliceGroup = this.parentContainer.sliceGroup;
      return parentSliceGroup.stableId + '.' +
          parentSliceGroup.slices.indexOf(this);
    },

    get bindId() {
      return this.bind_id_;
    },

    findDescendentSlice(targetTitle) {
      if (!this.subSlices) {
        return undefined;
      }

      for (let i = 0; i < this.subSlices.length; i++) {
        if (this.subSlices[i].title === targetTitle) {
          return this.subSlices[i];
        }
        const slice = this.subSlices[i].findDescendentSlice(targetTitle);
        if (slice) return slice;
      }
      return undefined;
    },

    get mostTopLevelSlice() {
      if (!this.parentSlice) return this;
      return this.parentSlice.mostTopLevelSlice;
    },

    getProcess() {
      const thread = this.parentContainer;
      if (thread && thread.getProcess) {
        return thread.getProcess();
      }
      return undefined;
    },

    get model() {
      const process = this.getProcess();
      if (process !== undefined) {
        return this.getProcess().model;
      }
      return undefined;
    },

    /**
     * Finds all topmost slices relative to this slice.
     *
     * Slices may have multiple direct descendants which satisfy
     * |eventPredicate|, and in this case, all of them are topmost as long as
     * this slice does not satisfy the predicate.
     *
     * For instance, suppose we are passing a predicate that checks whether
     * events titles begin with 'C'.
     *  C1.findTopmostSlicesRelativeToThisSlice() returns C1 in this example:
     * [   C1  ]
     *   [ C2 ]
     *
     * and D.findTopmostSlicesRelativeToThisSlice() returns C1 and C2 in this
     * example:
     * [      D     ]
     *   [C1]  [C2]
     */
    * findTopmostSlicesRelativeToThisSlice(eventPredicate) {
      if (eventPredicate(this)) {
        yield this;
        return;
      }
      for (const s of this.subSlices) {
        yield* s.findTopmostSlicesRelativeToThisSlice(eventPredicate);
      }
    },

    /**
     * Obtains all subsequent slices of this slice.
     *
     * Subsequent slices are slices that get executed after a particular
     * slice, i.e., all the functions that are called after the current one.
     *
     * For instance, E.iterateAllSubsequentSlices() in the following example:
     * [     A          ]
     * [ B][  D   ][ G  ]
     *  [C] [E][F]  [H]
     * will pass F, G, then H to the provided callback.
     *
     * The reason we need subsequent slices of a particular slice is that
     * when there is flow event goes into, e.g., E, we only want to highlight
     * E's subsequent slices to indicate the execution order.
     *
     * The idea to calculate the subsequent slices of slice E is to view
     * the slice group as a tree where the top-level slice A is the root node.
     * The preorder depth-first-search (DFS) order is naturally equivalent
     * to the function call order. We just need to perform a DFS, and start
     * recording the slices after we see the occurance of E.
     */
    iterateAllSubsequentSlices(callback, opt_this) {
      const parentStack = [];
      let started = false;

      // get the root node and push it to the DFS stack
      const topmostSlice = this.mostTopLevelSlice;
      parentStack.push(topmostSlice);

      // Using the stack to perform DFS
      while (parentStack.length !== 0) {
        const curSlice = parentStack.pop();

        if (started) {
          callback.call(opt_this, curSlice);
        } else {
          started = (curSlice.guid === this.guid);
        }

        for (let i = curSlice.subSlices.length - 1; i >= 0; i--) {
          parentStack.push(curSlice.subSlices[i]);
        }
      }
    },

    get subsequentSlices() {
      const res = [];

      this.iterateAllSubsequentSlices(function(subseqSlice) {
        res.push(subseqSlice);
      });

      return res;
    },

    /**
     * Obtains the parents of a slice, from the most immediate to the root.
     *
     * For instance, E.enumerateAllAncestors() in the following example:
     * [     A          ]
     * [ B][  D   ][ G  ]
     *  [C] [E][F]  [H]
     * will yield D, then A, in the order from the leaves to the root.
     */
    * enumerateAllAncestors() {
      let curSlice = this.parentSlice;
      while (curSlice) {
        yield curSlice;
        curSlice = curSlice.parentSlice;
      }
    },

    get ancestorSlices() {
      return Array.from(this.enumerateAllAncestors());
    },

    iterateEntireHierarchy(callback, opt_this) {
      const mostTopLevelSlice = this.mostTopLevelSlice;
      callback.call(opt_this, mostTopLevelSlice);
      mostTopLevelSlice.iterateAllSubsequentSlices(callback, opt_this);
    },

    get entireHierarchy() {
      const res = [];

      this.iterateEntireHierarchy(function(slice) {
        res.push(slice);
      });

      return res;
    },

    /**
     * Returns this slice, and its ancestor and subsequent slices.
     *
     * For instance, E.ancestorAndSubsequentSlices in the following example:
     * [     A          ]
     * [ B][  D   ][ G  ]
     *  [C] [E][F]  [H]
     * will return E, D, A, F, G, and H, where E is itself, D and A are
     * E's ancestors, and F, G, and H are subsequent slices of E
     */
    get ancestorAndSubsequentSlices() {
      const res = [];

      res.push(this);

      for (const aSlice of this.enumerateAllAncestors()) {
        res.push(aSlice);
      }

      this.iterateAllSubsequentSlices(function(sSlice) {
        res.push(sSlice);
      });

      return res;
    },

    * enumerateAllDescendents() {
      for (const slice of this.subSlices) {
        yield slice;
      }
      for (const slice of this.subSlices) {
        yield* slice.enumerateAllDescendents();
      }
    },

    get descendentSlices() {
      const res = [];
      for (const slice of this.enumerateAllDescendents()) {
        res.push(slice);
      }
      return res;
    }

  };

  return {
    Slice,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const Slice = tr.model.Slice;


  const SCHEDULING_STATE = {
    DEBUG: 'Debug',
    EXIT_DEAD: 'Exit Dead',
    RUNNABLE: 'Runnable',
    RUNNING: 'Running',
    SLEEPING: 'Sleeping',
    STOPPED: 'Stopped',
    TASK_DEAD: 'Task Dead',
    UNINTR_SLEEP: 'Uninterruptible Sleep',
    UNINTR_SLEEP_WAKE_KILL: 'Uninterruptible Sleep | WakeKill',
    UNINTR_SLEEP_WAKING: 'Uninterruptible Sleep | Waking',
    UNINTR_SLEEP_IO: 'Uninterruptible Sleep - Block I/O',
    UNINTR_SLEEP_WAKE_KILL_IO: 'Uninterruptible Sleep | WakeKill - Block I/O',
    UNINTR_SLEEP_WAKING_IO: 'Uninterruptible Sleep | Waking - Block I/O',
    UNKNOWN: 'UNKNOWN',
    WAKE_KILL: 'Wakekill',
    WAKING: 'Waking',
    ZOMBIE: 'Zombie'
  };

  /**
   * A ThreadTimeSlice is a slice of time on a specific thread where that thread
   * was running on a specific CPU, or in a specific sleep state.
   *
   * As a thread switches moves through its life, it sometimes goes to sleep and
   * can't run. Other times, its runnable but isn't actually assigned to a CPU.
   * Finally, sometimes it gets put on a CPU to actually execute. Each of these
   * states is represented by a ThreadTimeSlice:
   *
   *   Sleeping or runnable: cpuOnWhichThreadWasRunning is undefined
   *   Running:  cpuOnWhichThreadWasRunning is set.
   *
   * @constructor
   */
  function ThreadTimeSlice(thread, schedulingState, cat,
      start, args, opt_duration) {
    Slice.call(this, cat, schedulingState,
        this.getColorForState_(schedulingState),
        start, args, opt_duration);
    this.thread = thread;
    this.schedulingState = schedulingState;
    this.cpuOnWhichThreadWasRunning = undefined;
  }

  ThreadTimeSlice.prototype = {
    __proto__: Slice.prototype,

    getColorForState_(state) {
      const getColorIdForReservedName =
          tr.b.ColorScheme.getColorIdForReservedName;

      switch (state) {
        case SCHEDULING_STATE.RUNNABLE:
          return getColorIdForReservedName('thread_state_runnable');
        case SCHEDULING_STATE.RUNNING:
          return getColorIdForReservedName('thread_state_running');
        case SCHEDULING_STATE.SLEEPING:
          return getColorIdForReservedName('thread_state_sleeping');
        case SCHEDULING_STATE.DEBUG:
        case SCHEDULING_STATE.EXIT_DEAD:
        case SCHEDULING_STATE.STOPPED:
        case SCHEDULING_STATE.TASK_DEAD:
        case SCHEDULING_STATE.UNINTR_SLEEP:
        case SCHEDULING_STATE.UNINTR_SLEEP_WAKE_KILL:
        case SCHEDULING_STATE.UNINTR_SLEEP_WAKING:
        case SCHEDULING_STATE.UNKNOWN:
        case SCHEDULING_STATE.WAKE_KILL:
        case SCHEDULING_STATE.WAKING:
        case SCHEDULING_STATE.ZOMBIE:
          return getColorIdForReservedName('thread_state_uninterruptible');
        case SCHEDULING_STATE.UNINTR_SLEEP_IO:
        case SCHEDULING_STATE.UNINTR_SLEEP_WAKE_KILL_IO:
        case SCHEDULING_STATE.UNINTR_SLEEP_WAKING_IO:
          return getColorIdForReservedName('thread_state_iowait');
        default:
          return getColorIdForReservedName('thread_state_unknown');
      }
    },

    get analysisTypeName() {
      return 'tr.ui.analysis.ThreadTimeSlice';
    },

    getAssociatedCpuSlice() {
      if (!this.cpuOnWhichThreadWasRunning) return undefined;
      const cpuSlices = this.cpuOnWhichThreadWasRunning.slices;
      for (let i = 0; i < cpuSlices.length; i++) {
        const cpuSlice = cpuSlices[i];
        if (cpuSlice.start !== this.start) continue;
        if (cpuSlice.duration !== this.duration) continue;
        return cpuSlice;
      }
      return undefined;
    },

    getCpuSliceThatTookCpu() {
      if (this.cpuOnWhichThreadWasRunning) return undefined;
      let curIndex = this.thread.indexOfTimeSlice(this);
      let cpuSliceWhenLastRunning;
      while (curIndex >= 0) {
        const curSlice = this.thread.timeSlices[curIndex];
        if (!curSlice.cpuOnWhichThreadWasRunning) {
          curIndex--;
          continue;
        }
        cpuSliceWhenLastRunning = curSlice.getAssociatedCpuSlice();
        break;
      }
      if (!cpuSliceWhenLastRunning) return undefined;

      const cpu = cpuSliceWhenLastRunning.cpu;
      const indexOfSliceOnCpuWhenLastRunning =
          cpu.indexOf(cpuSliceWhenLastRunning);
      const nextRunningSlice = cpu.slices[indexOfSliceOnCpuWhenLastRunning + 1];
      if (!nextRunningSlice) return undefined;
      if (Math.abs(nextRunningSlice.start - cpuSliceWhenLastRunning.end) <
          0.00001) {
        return nextRunningSlice;
      }
      return undefined;
    }
  };

  tr.model.EventRegistry.register(
      ThreadTimeSlice,
      {
        name: 'threadTimeSlice',
        pluralName: 'threadTimeSlices'
      });


  return {
    ThreadTimeSlice,
    SCHEDULING_STATE,
  };
});


'use strict';

/**
 * @fileoverview Provides the CpuSlice class.
 */
tr.exportTo('tr.model', function() {
  const Slice = tr.model.Slice;

  /**
   * A CpuSlice represents a slice of time on a CPU.
   *
   * @constructor
   */
  function CpuSlice(cat, title, colorId, start, args, opt_duration) {
    Slice.apply(this, arguments);
    this.threadThatWasRunning = undefined;
    this.cpu = undefined;
  }

  CpuSlice.prototype = {
    __proto__: Slice.prototype,

    get analysisTypeName() {
      return 'tr.ui.analysis.CpuSlice';
    },

    getAssociatedTimeslice() {
      if (!this.threadThatWasRunning) {
        return undefined;
      }
      const timeSlices = this.threadThatWasRunning.timeSlices;
      for (let i = 0; i < timeSlices.length; i++) {
        const timeSlice = timeSlices[i];
        if (timeSlice.start !== this.start) {
          continue;
        }
        if (timeSlice.duration !== this.duration) {
          continue;
        }
        return timeSlice;
      }
      return undefined;
    }
  };

  tr.model.EventRegistry.register(
      CpuSlice,
      {
        name: 'cpuSlice',
        pluralName: 'cpuSlices'
      });

  return {
    CpuSlice,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * A snapshot of an object instance, at a given moment in time.
   *
   * Initialization of snapshots and instances is three phased:
   *
   * 1. Instances and snapshots are constructed. This happens during event
   *    importing. Little should be done here, because the object's data
   *    are still being used by the importer to reconstruct object references.
   *
   * 2. Instances and snapshtos are preinitialized. This happens after implicit
   *    objects have been found, but before any references have been found and
   *    switched to direct references. Thus, every snapshot stands on its own.
   *    This is a good time to do global field renaming and type conversion,
   *    e.g. recognizing domain-specific types and converting from C++ naming
   *    convention to JS.
   *
   * 3. Instances and snapshtos are initialized. At this point, {id_ref:
   *    '0x1000'} fields have been converted to snapshot references. This is a
   *    good time to generic initialization steps and argument verification.
   *
   * @constructor
   */
  function ObjectSnapshot(objectInstance, ts, args) {
    tr.model.Event.call(this);
    this.objectInstance = objectInstance;
    this.ts = ts;
    this.args = args;
  }

  ObjectSnapshot.prototype = {
    __proto__: tr.model.Event.prototype,

    /**
     * See ObjectSnapshot constructor notes on object initialization.
     */
    preInitialize() {
    },

    /**
     * See ObjectSnapshot constructor notes on object initialization.
     */
    initialize() {
    },

    /**
     * Called when an object reference is resolved as this ObjectSnapshot.
     * @param {Object} item The event (async slice, slice or object) containing
     *     the resolved reference.
     * @param {Object} object The object directly containing the reference.
     * @param {String} field The field name of the reference in |object|.
     */
    referencedAt(item, object, field) {
    },

    addBoundsToRange(range) {
      range.addValue(this.ts);
    },

    get userFriendlyName() {
      return 'Snapshot of ' + this.objectInstance.userFriendlyName + ' @ ' +
             tr.b.Unit.byName.timeStampInMs.format(this.ts);
    }
  };

  tr.model.EventRegistry.register(
      ObjectSnapshot,
      {
        name: 'objectSnapshot',
        pluralName: 'objectSnapshots'
      });

  return {
    ObjectSnapshot,
  };
});


'use strict';

/**
 * @fileoverview Provides the ObjectSnapshot and ObjectHistory classes.
 */
tr.exportTo('tr.model', function() {
  const ObjectSnapshot = tr.model.ObjectSnapshot;

  /**
   * An object with a specific id, whose state has been snapshotted several
   * times.
   *
   * @constructor
   */
  function ObjectInstance(
      parent, scopedId, category, name, creationTs, opt_baseTypeName) {
    tr.model.Event.call(this);
    this.parent = parent;
    this.scopedId = scopedId;
    this.category = category;
    this.baseTypeName = opt_baseTypeName ? opt_baseTypeName : name;
    this.name = name;
    this.creationTs = creationTs;
    this.creationTsWasExplicit = false;
    this.deletionTs = Number.MAX_VALUE;
    this.deletionTsWasExplicit = false;
    this.colorId = 0;
    this.bounds = new tr.b.math.Range();
    this.snapshots = [];
    this.hasImplicitSnapshots = false;
  }

  ObjectInstance.prototype = {
    __proto__: tr.model.Event.prototype,

    get typeName() {
      return this.name;
    },

    addBoundsToRange(range) {
      range.addRange(this.bounds);
    },

    addSnapshot(ts, args, opt_name, opt_baseTypeName) {
      if (ts < this.creationTs) {
        throw new Error('Snapshots must be >= instance.creationTs');
      }
      if (ts >= this.deletionTs) {
        throw new Error('Snapshots cannot be added after ' +
                        'an objects deletion timestamp.');
      }

      let lastSnapshot;
      if (this.snapshots.length > 0) {
        lastSnapshot = this.snapshots[this.snapshots.length - 1];
        if (lastSnapshot.ts === ts) {
          throw new Error('Snapshots already exists at this time!');
        }
        if (ts < lastSnapshot.ts) {
          throw new Error(
              'Snapshots must be added in increasing timestamp order');
        }
      }

      // Update baseTypeName if needed.
      if (opt_name &&
          (this.name !== opt_name)) {
        if (!opt_baseTypeName) {
          throw new Error('Must provide base type name for name update');
        }
        if (this.baseTypeName !== opt_baseTypeName) {
          throw new Error('Cannot update type name: base types dont match');
        }
        this.name = opt_name;
      }

      const snapshotConstructor =
          tr.model.ObjectSnapshot.subTypes.getConstructor(
              this.category, this.name);
      const snapshot = new snapshotConstructor(this, ts, args);
      this.snapshots.push(snapshot);
      return snapshot;
    },

    wasDeleted(ts) {
      let lastSnapshot;
      if (this.snapshots.length > 0) {
        lastSnapshot = this.snapshots[this.snapshots.length - 1];
        if (lastSnapshot.ts > ts) {
          throw new Error(
              'Instance cannot be deleted at ts=' +
              ts + '. A snapshot exists that is older.');
        }
      }
      this.deletionTs = ts;
      this.deletionTsWasExplicit = true;
    },

    /**
     * See ObjectSnapshot constructor notes on object initialization.
     */
    preInitialize() {
      for (let i = 0; i < this.snapshots.length; i++) {
        this.snapshots[i].preInitialize();
      }
    },

    /**
     * See ObjectSnapshot constructor notes on object initialization.
     */
    initialize() {
      for (let i = 0; i < this.snapshots.length; i++) {
        this.snapshots[i].initialize();
      }
    },

    isAliveAt(ts) {
      if (ts < this.creationTs && this.creationTsWasExplicit) {
        return false;
      }
      if (ts > this.deletionTs) {
        return false;
      }

      return true;
    },

    getSnapshotAt(ts) {
      if (ts < this.creationTs) {
        if (this.creationTsWasExplicit) {
          throw new Error('ts must be within lifetime of this instance');
        }
        return this.snapshots[0];
      }
      if (ts > this.deletionTs) {
        throw new Error('ts must be within lifetime of this instance');
      }

      const snapshots = this.snapshots;
      const i = tr.b.findIndexInSortedIntervals(
          snapshots,
          function(snapshot) { return snapshot.ts; },
          function(snapshot, i) {
            if (i === snapshots.length - 1) {
              return snapshots[i].objectInstance.deletionTs;
            }
            return snapshots[i + 1].ts - snapshots[i].ts;
          },
          ts);
      if (i < 0) {
        // Note, this is a little bit sketchy: this lets early ts point at the
        // first snapshot, even before it is taken. We do this because raster
        // tasks usually post before their tile snapshots are dumped. This may
        // be a good line of code to re-visit if we start seeing strange and
        // confusing object references showing up in the traces.
        return this.snapshots[0];
      }
      if (i >= this.snapshots.length) {
        return this.snapshots[this.snapshots.length - 1];
      }
      return this.snapshots[i];
    },

    updateBounds() {
      this.bounds.reset();
      this.bounds.addValue(this.creationTs);
      if (this.deletionTs !== Number.MAX_VALUE) {
        this.bounds.addValue(this.deletionTs);
      } else if (this.snapshots.length > 0) {
        this.bounds.addValue(this.snapshots[this.snapshots.length - 1].ts);
      }
    },

    shiftTimestampsForward(amount) {
      this.creationTs += amount;
      if (this.deletionTs !== Number.MAX_VALUE) {
        this.deletionTs += amount;
      }
      this.snapshots.forEach(function(snapshot) {
        snapshot.ts += amount;
      });
    },

    get userFriendlyName() {
      return this.typeName + ' object ' + this.scopedId;
    }
  };

  tr.model.EventRegistry.register(
      ObjectInstance,
      {
        name: 'objectInstance',
        pluralName: 'objectInstances'
      });

  return {
    ObjectInstance,
  };
});


'use strict';

/**
 * @fileoverview Provides the TimeToObjectInstanceMap class.
 */
tr.exportTo('tr.model', function() {
  /**
   * Tracks all the instances associated with a given ID over its lifetime.
   *
   * A scoped id can be used multiple times throughout a trace, referring to
   * different objects at different times. This data structure does the
   * bookkeeping to figure out what ObjectInstance is referred to at a given
   * timestamp.
   *
   * @constructor
   */
  function TimeToObjectInstanceMap(
      createObjectInstanceFunction, parent, scopedId) {
    this.createObjectInstanceFunction_ = createObjectInstanceFunction;
    this.parent = parent;
    this.scopedId = scopedId;
    this.instances = [];
  }

  TimeToObjectInstanceMap.prototype = {
    idWasCreated(category, name, ts) {
      if (this.instances.length === 0) {
        this.instances.push(this.createObjectInstanceFunction_(
            this.parent, this.scopedId, category, name, ts));
        this.instances[0].creationTsWasExplicit = true;
        return this.instances[0];
      }

      let lastInstance = this.instances[this.instances.length - 1];
      if (ts < lastInstance.deletionTs) {
        throw new Error('Mutation of the TimeToObjectInstanceMap must be ' +
                        'done in ascending timestamp order.');
      }
      lastInstance = this.createObjectInstanceFunction_(
          this.parent, this.scopedId, category, name, ts);
      lastInstance.creationTsWasExplicit = true;
      this.instances.push(lastInstance);
      return lastInstance;
    },

    addSnapshot(category, name, ts, args, opt_baseTypeName) {
      if (this.instances.length === 0) {
        this.instances.push(this.createObjectInstanceFunction_(
            this.parent, this.scopedId, category, name, ts, opt_baseTypeName));
      }

      const i = tr.b.findIndexInSortedIntervals(
          this.instances,
          function(inst) { return inst.creationTs; },
          function(inst) { return inst.deletionTs - inst.creationTs; },
          ts);

      let instance;
      if (i < 0) {
        instance = this.instances[0];
        if (ts > instance.deletionTs ||
            instance.creationTsWasExplicit) {
          throw new Error(
              'At the provided timestamp, no instance was still alive');
        }

        if (instance.snapshots.length !== 0) {
          throw new Error(
              'Cannot shift creationTs forward, ' +
              'snapshots have been added. First snap was at ts=' +
              instance.snapshots[0].ts + ' and creationTs was ' +
              instance.creationTs);
        }
        instance.creationTs = ts;
      } else if (i >= this.instances.length) {
        instance = this.instances[this.instances.length - 1];
        if (ts >= instance.deletionTs) {
          // The snap is added after our oldest and deleted instance. This means
          // that this is a new implicit instance.
          instance = this.createObjectInstanceFunction_(
              this.parent, this.scopedId, category, name, ts, opt_baseTypeName);
          this.instances.push(instance);
        } else {
          // If the ts is before the last objects deletion time, then the caller
          // is trying to add a snapshot when there may have been an instance
          // alive. In that case, try to move an instance's creationTs to
          // include this ts, provided that it has an implicit creationTs.

          // Search backward from the right for an instance that was definitely
          // deleted before this ts. Any time an instance is found that has a
          // moveable creationTs
          let lastValidIndex;
          for (let i = this.instances.length - 1; i >= 0; i--) {
            const tmp = this.instances[i];
            if (ts >= tmp.deletionTs) break;
            if (tmp.creationTsWasExplicit === false &&
                tmp.snapshots.length === 0) {
              lastValidIndex = i;
            }
          }
          if (lastValidIndex === undefined) {
            throw new Error(
                'Cannot add snapshot. No instance was alive that was mutable.');
          }
          instance = this.instances[lastValidIndex];
          instance.creationTs = ts;
        }
      } else {
        instance = this.instances[i];
      }

      return instance.addSnapshot(ts, args, name, opt_baseTypeName);
    },

    get lastInstance() {
      if (this.instances.length === 0) return undefined;
      return this.instances[this.instances.length - 1];
    },

    idWasDeleted(category, name, ts) {
      if (this.instances.length === 0) {
        this.instances.push(this.createObjectInstanceFunction_(
            this.parent, this.scopedId, category, name, ts));
      }
      let lastInstance = this.instances[this.instances.length - 1];
      if (ts < lastInstance.creationTs) {
        throw new Error('Cannot delete an id before it was created');
      }
      if (lastInstance.deletionTs === Number.MAX_VALUE) {
        lastInstance.wasDeleted(ts);
        return lastInstance;
      }

      if (ts < lastInstance.deletionTs) {
        throw new Error('id was already deleted earlier.');
      }

      // A new instance was deleted with no snapshots in-between.
      // Create an instance then kill it.
      lastInstance = this.createObjectInstanceFunction_(
          this.parent, this.scopedId, category, name, ts);
      this.instances.push(lastInstance);
      lastInstance.wasDeleted(ts);
      return lastInstance;
    },

    getInstanceAt(ts) {
      const i = tr.b.findIndexInSortedIntervals(
          this.instances,
          function(inst) { return inst.creationTs; },
          function(inst) { return inst.deletionTs - inst.creationTs; },
          ts);
      if (i < 0) {
        if (this.instances[0].creationTsWasExplicit) {
          return undefined;
        }
        return this.instances[0];
      } else if (i >= this.instances.length) {
        return undefined;
      }
      return this.instances[i];
    }
  };

  return {
    TimeToObjectInstanceMap,
  };
});


'use strict';

/**
 * @fileoverview Provides the ObjectCollection class.
 */
tr.exportTo('tr.model', function() {
  const ObjectInstance = tr.model.ObjectInstance;
  const ObjectSnapshot = tr.model.ObjectSnapshot;

  /**
   * A collection of object instances and their snapshots, accessible by id and
   * time, or by object name.
   *
   * @constructor
   */
  function ObjectCollection(parent) {
    tr.model.EventContainer.call(this);
    this.parent = parent;
    // scope -> {id -> TimeToObjectInstanceMap}
    this.instanceMapsByScopedId_ = {};
    this.instancesByTypeName_ = {};
    this.createObjectInstance_ = this.createObjectInstance_.bind(this);
  }

  ObjectCollection.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    * childEvents() {
      for (const instance of this.getAllObjectInstances()) {
        yield instance;
        yield* instance.snapshots;
      }
    },

    createObjectInstance_(
        parent, scopedId, category, name, creationTs, opt_baseTypeName) {
      const constructor = tr.model.ObjectInstance.subTypes.getConstructor(
          category, name);
      const instance = new constructor(
          parent, scopedId, category, name, creationTs, opt_baseTypeName);
      const typeName = instance.typeName;
      let instancesOfTypeName = this.instancesByTypeName_[typeName];
      if (!instancesOfTypeName) {
        instancesOfTypeName = [];
        this.instancesByTypeName_[typeName] = instancesOfTypeName;
      }
      instancesOfTypeName.push(instance);
      return instance;
    },

    getOrCreateInstanceMap_(scopedId) {
      let dict;
      if (scopedId.scope in this.instanceMapsByScopedId_) {
        dict = this.instanceMapsByScopedId_[scopedId.scope];
      } else {
        dict = {};
        this.instanceMapsByScopedId_[scopedId.scope] = dict;
      }
      let instanceMap = dict[scopedId.id];
      if (instanceMap) return instanceMap;
      instanceMap = new tr.model.TimeToObjectInstanceMap(
          this.createObjectInstance_, this.parent, scopedId);
      dict[scopedId.id] = instanceMap;
      return instanceMap;
    },

    idWasCreated(scopedId, category, name, ts) {
      const instanceMap = this.getOrCreateInstanceMap_(scopedId);
      return instanceMap.idWasCreated(category, name, ts);
    },

    addSnapshot(
        scopedId, category, name, ts, args, opt_baseTypeName) {
      const instanceMap = this.getOrCreateInstanceMap_(scopedId);
      const snapshot = instanceMap.addSnapshot(
          category, name, ts, args, opt_baseTypeName);
      if (snapshot.objectInstance.category !== category) {
        const msg = 'Added snapshot name=' + name + ' with cat=' + category +
            ' impossible. It instance was created/snapshotted with cat=' +
            snapshot.objectInstance.category + ' name=' +
            snapshot.objectInstance.name;
        throw new Error(msg);
      }
      if (opt_baseTypeName &&
          snapshot.objectInstance.baseTypeName !== opt_baseTypeName) {
        throw new Error('Could not add snapshot with baseTypeName=' +
                        opt_baseTypeName + '. It ' +
                        'was previously created with name=' +
                        snapshot.objectInstance.baseTypeName);
      }
      if (snapshot.objectInstance.name !== name) {
        throw new Error('Could not add snapshot with name=' + name + '. It ' +
                        'was previously created with name=' +
                        snapshot.objectInstance.name);
      }
      return snapshot;
    },

    idWasDeleted(scopedId, category, name, ts) {
      const instanceMap = this.getOrCreateInstanceMap_(scopedId);
      const deletedInstance = instanceMap.idWasDeleted(category, name, ts);
      if (!deletedInstance) return;

      if (deletedInstance.category !== category) {
        const msg = 'Deleting object ' + deletedInstance.name +
            ' with a different category ' +
            'than when it was created. It previous had cat=' +
            deletedInstance.category + ' but the delete command ' +
            'had cat=' + category;
        throw new Error(msg);
      }
      if (deletedInstance.baseTypeName !== name) {
        throw new Error('Deletion requested for name=' +
                        name + ' could not proceed: ' +
                        'An existing object with baseTypeName=' +
                        deletedInstance.baseTypeName + ' existed.');
      }
    },

    autoDeleteObjects(maxTimestamp) {
      for (const imapById of Object.values(this.instanceMapsByScopedId_)) {
        for (const i2imap of Object.values(imapById)) {
          const lastInstance = i2imap.lastInstance;
          if (lastInstance.deletionTs !== Number.MAX_VALUE) continue;
          i2imap.idWasDeleted(
              lastInstance.category, lastInstance.name, maxTimestamp);
          // idWasDeleted will cause lastInstance.deletionTsWasExplicit to be
          // set to true. Unset it here.
          lastInstance.deletionTsWasExplicit = false;
        }
      }
    },

    getObjectInstanceAt(scopedId, ts) {
      let instanceMap;
      if (scopedId.scope in this.instanceMapsByScopedId_) {
        instanceMap = this.instanceMapsByScopedId_[scopedId.scope][scopedId.id];
      }
      if (!instanceMap) return undefined;
      return instanceMap.getInstanceAt(ts);
    },

    getSnapshotAt(scopedId, ts) {
      const instance = this.getObjectInstanceAt(scopedId, ts);
      if (!instance) return undefined;
      return instance.getSnapshotAt(ts);
    },

    iterObjectInstances(iter, opt_this) {
      opt_this = opt_this || this;
      for (const imapById of Object.values(this.instanceMapsByScopedId_)) {
        for (const i2imap of Object.values(imapById)) {
          i2imap.instances.forEach(iter, opt_this);
        }
      }
    },

    getAllObjectInstances() {
      const instances = [];
      this.iterObjectInstances(function(i) { instances.push(i); });
      return instances;
    },

    getAllInstancesNamed(name) {
      return this.instancesByTypeName_[name];
    },

    getAllInstancesByTypeName() {
      return this.instancesByTypeName_;
    },

    preInitializeAllObjects() {
      this.iterObjectInstances(function(instance) {
        instance.preInitialize();
      });
    },

    initializeAllObjects() {
      this.iterObjectInstances(function(instance) {
        instance.initialize();
      });
    },

    initializeInstances() {
      this.iterObjectInstances(function(instance) {
        instance.initialize();
      });
    },

    updateBounds() {
      this.bounds.reset();
      this.iterObjectInstances(function(instance) {
        instance.updateBounds();
        this.bounds.addRange(instance.bounds);
      }, this);
    },

    shiftTimestampsForward(amount) {
      this.iterObjectInstances(function(instance) {
        instance.shiftTimestampsForward(amount);
      });
    },

    addCategoriesToDict(categoriesDict) {
      this.iterObjectInstances(function(instance) {
        categoriesDict[instance.category] = true;
      });
    }
  };

  return {
    ObjectCollection,
  };
});


'use strict';

/**
 * @fileoverview Provides the AsyncSlice class.
 */
tr.exportTo('tr.model', function() {
  /**
   * A AsyncSlice represents an interval of time during which an
   * asynchronous operation is in progress. An AsyncSlice consumes no CPU time
   * itself and so is only associated with Threads at its start and end point.
   *
   * @constructor
   */
  function AsyncSlice(category, title, colorId, start, args, duration,
      opt_isTopLevel, opt_cpuStart, opt_cpuDuration,
      opt_argsStripped) {
    tr.model.TimedEvent.call(this, start);

    this.category = category || '';
    // We keep the original title from the trace file in originalTitle since
    // some sub-classes, e.g. NetAsyncSlice, change the title field.
    this.originalTitle = title;
    this.title = title;
    this.colorId = colorId;
    this.args = args;
    this.startStackFrame = undefined;
    this.endStackFrame = undefined;
    this.didNotFinish = false;
    this.important = false;
    this.subSlices = [];
    this.parentContainer_ = undefined;

    this.id = undefined;
    this.startThread = undefined;
    this.endThread = undefined;
    this.cpuStart = undefined;
    this.cpuDuration = undefined;
    this.argsStripped = false;

    this.startStackFrame = undefined;
    this.endStackFrame = undefined;

    this.duration = duration;

    // isTopLevel is set at import because only NESTABLE_ASYNC events might not
    // be topLevel. All legacy async events are toplevel by definition.
    this.isTopLevel = (opt_isTopLevel === true);

    if (opt_cpuStart !== undefined) {
      this.cpuStart = opt_cpuStart;
    }

    if (opt_cpuDuration !== undefined) {
      this.cpuDuration = opt_cpuDuration;
    }

    if (opt_argsStripped !== undefined) {
      this.argsStripped = opt_argsStripped;
    }
  }

  AsyncSlice.prototype = {
    __proto__: tr.model.TimedEvent.prototype,

    get analysisTypeName() {
      return this.title;
    },

    get parentContainer() {
      return this.parentContainer_;
    },

    set parentContainer(parentContainer) {
      this.parentContainer_ = parentContainer;
      for (let i = 0; i < this.subSlices.length; i++) {
        const subSlice = this.subSlices[i];
        if (subSlice.parentContainer === undefined) {
          subSlice.parentContainer = parentContainer;
        }
      }
    },

    get viewSubGroupTitle() {
      return this.title;
    },

    // Certain AsyncSlices can provide a grouping key to group a set of
    // independent tracks, while grouping by |viewSubGroupTitle| puts slices
    // into a single (maybe multi-row but single) track.
    get viewSubGroupGroupingKey() {
      return undefined;
    },

    get userFriendlyName() {
      return 'Async slice ' + this.title + ' at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.start);
    },

    get stableId() {
      const parentAsyncSliceGroup = this.parentContainer.asyncSliceGroup;
      return parentAsyncSliceGroup.stableId + '.' +
          parentAsyncSliceGroup.slices.indexOf(this);
    },

    * findTopmostSlicesRelativeToThisSlice(eventPredicate, opt_this) {
      if (eventPredicate(this)) {
        yield this;
        return;
      }
      for (const s of this.subSlices) {
        yield* s.findTopmostSlicesRelativeToThisSlice(eventPredicate);
      }
    },

    findDescendentSlice(targetTitle) {
      if (!this.subSlices) return undefined;

      for (let i = 0; i < this.subSlices.length; i++) {
        if (this.subSlices[i].title === targetTitle) {
          return this.subSlices[i];
        }
        const slice = this.subSlices[i].findDescendentSlice(targetTitle);
        if (slice) return slice;
      }
      return undefined;
    },

    * enumerateAllDescendents() {
      for (const slice of this.subSlices) {
        yield slice;
      }
      for (const slice of this.subSlices) {
        // Slices might contain sub-events different from AsyncSlice.
        // We don't go any deeper in that case.
        if (slice.enumerateAllDescendents !== undefined) {
          yield* slice.enumerateAllDescendents();
        }
      }
    },

    compareTo(that) {
      return this.title.localeCompare(that.title);
    }
  };

  tr.model.EventRegistry.register(
      AsyncSlice,
      {
        name: 'asyncSlice',
        pluralName: 'asyncSlices'
      });


  return {
    AsyncSlice,
  };
});


'use strict';

/**
 * @fileoverview Provides the AsyncSliceGroup class.
 */
tr.exportTo('tr.model', function() {
  /**
   * Group of AsyncSlices associated with a thread or an upper-level
   * AsyncSliceGroup. Thread can have number of AsyncSliceGroups and these
   * groups can have nested groups too. No further nested levels are allowed.
   */
  class AsyncSliceGroup extends tr.model.EventContainer {
    /**
     * @param {Thread} parentContainer Thread on which async slices start.
     * @param {String} opt_name Optional name (no IDs please) for settings key.
     */
    constructor(parentContainer, opt_name) {
      super();
      this.parentContainer_ = parentContainer;
      this.name_ = opt_name;
      this.slices = [];
      this.viewSubGroups_ = undefined;

      // Default values for the root group.
      // Nested groups will get these values reassigned.
      this.nestedLevel_ = 0;
      this.hasNestedSubGroups_ = true;
      this.title_ = undefined;
    }

    get parentContainer() {
      return this.parentContainer_;
    }

    get model() {
      return this.parentContainer_.parent.model;
    }

    get stableId() {
      return this.parentContainer_.stableId + '.AsyncSliceGroup';
    }

    get title() {
      // Title isn't defined for the root group (nested level 0) because
      // slices it contains aren't grouped on that level.
      // All the nested groups have their title which is:
      // - |slice.viewSubGroupGroupingKey| if defined (level 1 only), or
      // - |slice.viewSubGroupTitle| otherwise (most cases).
      if (this.nested_level_ === 0) {
        return '<root>';
      }
      return this.title_;
    }

    getSettingsKey() {
      if (this.name_ === undefined) {
        return undefined;
      }
      const parentKey = this.parentContainer_.getSettingsKey();
      if (parentKey === undefined) {
        return undefined;
      }
      return parentKey + '.' + this.name_;
    }

    /**
     * Helper function that pushes the provided slice onto the slices array.
     */
    push(slice) {
      if (this.viewSubGroups_ !== undefined) {
        throw new Error(
            'No new slices are allowed when view sub-groups already formed.');
      }
      slice.parentContainer = this.parentContainer;
      this.slices.push(slice);
      return slice;
    }

    /**
     * @return {Number} The number of slices in this group.
     */
    get length() {
      return this.slices.length;
    }

    /**
     * Shifts all the timestamps inside this group forward by the amount
     * specified, including all nested subSlices if there are any.
     */
    shiftTimestampsForward(amount) {
      for (const slice of this.childEvents()) {
        slice.start += amount;
      }
    }

    /**
     * Updates the bounds for this group based on the slices it contains.
     */
    updateBounds() {
      this.bounds.reset();
      for (let i = 0; i < this.slices.length; i++) {
        this.bounds.addValue(this.slices[i].start);
        this.bounds.addValue(this.slices[i].end);
      }
    }

    /**
     * Closes any open slices.
     * All open slices assumed as finished at the end of model's time bounds.
     */
    autoCloseOpenSlices() {
      const maxTimestamp = this.parentContainer_.parent.model.bounds.max;
      for (const slice of this.childEvents()) {
        if (slice.didNotFinish) {
          slice.duration = maxTimestamp - slice.start;
        }
      }
    }

    /**
     * Get AsyncSlice sub-groups arranged by title and grouping key.
     *
     * @return {Array} An array of AsyncSliceGroups where each group has
     * a title and sub-set of the original slices. Returns an empty array
     * if group can't be sub-divided.
     */
    get viewSubGroups() {
      // Only 2 nested levels are allowed (see class description).
      // Also it's always known in advance whether group will be sub-divided or
      // not (most of them). Root group is always divisible.
      if (!this.hasNestedSubGroups_ || this.nestedLevel_ === 2) {
        return [];
      }
      if (this.viewSubGroups_ !== undefined) {
        return this.viewSubGroups_;
      }

      const subGroupsByTitle = new Map();

      for (const slice of this.slices) {
        // Group by title by default.
        let subGroupTitle = slice.viewSubGroupTitle;
        let hasNestedSubGroups = false;

        // Apply custom grouping rules for special slice classes.
        if (this.nestedLevel_ === 0 &&
            slice.viewSubGroupGroupingKey !== undefined) {
          subGroupTitle = slice.viewSubGroupGroupingKey;
          hasNestedSubGroups = true;
        }

        let subGroup = subGroupsByTitle.get(subGroupTitle);
        if (subGroup === undefined) {
          let name;
          if (this.name_ !== undefined) {
            name = this.name_ + '.' + subGroupTitle;
          } else {
            name = subGroupTitle;
          }
          subGroup = new AsyncSliceGroup(this.parentContainer_, name);
          subGroup.title_ = subGroupTitle;
          subGroup.hasNestedSubGroups_ = hasNestedSubGroups;
          subGroup.nestedLevel_ = this.nestedLevel_ + 1;
          subGroupsByTitle.set(subGroupTitle, subGroup);
        }
        subGroup.push(slice);
      }

      this.viewSubGroups_ = Array.from(subGroupsByTitle.values());
      this.viewSubGroups_.sort((a, b) => a.title.localeCompare(b.title));
      return this.viewSubGroups_;
    }

    * findTopmostSlicesInThisContainer(eventPredicate, opt_this) {
      for (const slice of this.slices) {
        if (slice.isTopLevel) {
          yield* slice.findTopmostSlicesRelativeToThisSlice(
              eventPredicate, opt_this);
        }
      }
    }

    * childEvents() {
      for (const slice of this.slices) {
        yield slice;
        yield* slice.enumerateAllDescendents();
      }
    }

    * childEventContainers() {
    }
  }

  return {
    AsyncSliceGroup,
  };
});


'use strict';

/**
 * @fileoverview Provides the Thread class.
 */
tr.exportTo('tr.model', function() {
  const Slice = tr.model.Slice;

  /**
   * A ThreadSlice represents an interval of time on a thread resource
   * with associated nesting slice information.
   *
   * ThreadSlices are typically associated with a specific trace event pair on a
   * specific thread.
   * For example,
   *   TRACE_EVENT_BEGIN1("x","myArg", 7) at time=0.1ms
   *   TRACE_EVENT_END0()                 at time=0.3ms
   * This results in a single slice from 0.1 with duration 0.2 on a
   * specific thread.
   *
   * @constructor
   */
  function ThreadSlice(cat, title, colorId, start, args, opt_duration,
      opt_cpuStart, opt_cpuDuration, opt_argsStripped,
      opt_bindId) {
    Slice.call(this, cat, title, colorId, start, args, opt_duration,
        opt_cpuStart, opt_cpuDuration, opt_argsStripped, opt_bindId);
    // Do not modify this directly.
    // subSlices is configured by SliceGroup.rebuildSubRows_.
    this.subSlices = [];
  }

  ThreadSlice.prototype = {
    __proto__: Slice.prototype,

    get overlappingSamples() {
      const samples = new tr.model.EventSet();
      if (!this.parentContainer || !this.parentContainer.samples) {
        return samples;
      }
      this.parentContainer.samples.forEach(function(sample) {
        if (this.start <= sample.start && sample.start <= this.end) {
          samples.push(sample);
        }
      }, this);
      return samples;
    }
  };

  tr.model.EventRegistry.register(
      ThreadSlice,
      {
        name: 'slice',
        pluralName: 'slices'
      });

  return {
    ThreadSlice,
  };
});


'use strict';

/**
 * @fileoverview Provides the SliceGroup class.
 */
tr.exportTo('tr.model', function() {
  const ColorScheme = tr.b.ColorScheme;
  const ThreadSlice = tr.model.ThreadSlice;

  function getSliceLo(s) {
    return s.start;
  }

  function getSliceHi(s) {
    return s.end;
  }

  /**
   * A group of Slices, plus code to create them from B/E events, as
   * well as arrange them into subRows.
   *
   * Do not mutate the slices array directly. Modify it only by
   * SliceGroup mutation methods.
   *
   * @constructor
   * @param {function(new:Slice, category, title, colorId, start, args)=}
   *     opt_sliceConstructor The constructor to use when creating slices.
   * @extends {tr.model.EventContainer}
   */
  function SliceGroup(parentContainer, opt_sliceConstructor, opt_name) {
    tr.model.EventContainer.call(this);

    this.parentContainer_ = parentContainer;

    const sliceConstructor = opt_sliceConstructor || ThreadSlice;
    this.sliceConstructor = sliceConstructor;
    this.sliceConstructorSubTypes = this.sliceConstructor.subTypes;
    if (!this.sliceConstructorSubTypes) {
      throw new Error('opt_sliceConstructor must have a subtype registry.');
    }

    this.openPartialSlices_ = [];

    this.slices = [];
    this.topLevelSlices = [];
    this.haveTopLevelSlicesBeenBuilt = false;
    this.name_ = opt_name;

    if (this.model === undefined) {
      throw new Error('SliceGroup must have model defined.');
    }
  }

  SliceGroup.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    get parentContainer() {
      return this.parentContainer_;
    },

    get model() {
      return this.parentContainer_.model;
    },

    get stableId() {
      return this.parentContainer_.stableId + '.SliceGroup';
    },

    getSettingsKey() {
      if (!this.name_) return undefined;
      const parentKey = this.parentContainer_.getSettingsKey();
      if (!parentKey) return undefined;
      return parentKey + '.' + this.name;
    },

    /**
     * @return {Number} The number of slices in this group.
     */
    get length() {
      return this.slices.length;
    },

    /**
     * Helper function that pushes the provided slice onto the slices array.
     * @param {Slice} slice The slice to be added to the slices array.
     */
    pushSlice(slice) {
      this.haveTopLevelSlicesBeenBuilt = false;
      slice.parentContainer = this.parentContainer_;
      this.slices.push(slice);
      return slice;
    },

    /**
     * Helper function that pushes the provided slices onto the slices array.
     * @param {Array.<Slice>} slices An array of slices to be added.
     */
    pushSlices(slices) {
      this.haveTopLevelSlicesBeenBuilt = false;
      slices.forEach(function(slice) {
        slice.parentContainer = this.parentContainer_;
        this.slices.push(slice);
      }, this);
    },

    /**
     * Opens a new slice in the group's slices.
     *
     * Calls to beginSlice and
     * endSlice must be made with non-monotonically-decreasing timestamps.
     *
     * @param {String} category Category name of the slice to add.
     * @param {String} title Title of the slice to add.
     * @param {Number} ts The timetsamp of the slice, in milliseconds.
     * @param {Object.<string, Object>=} opt_args Arguments associated with
     * the slice.
     * @param {Number=} opt_colorId The color of the slice, defined by
     * its palette id (see base/color_scheme.html).
     */
    beginSlice(category, title, ts, opt_args, opt_tts,
        opt_argsStripped, opt_colorId) {
      if (this.openPartialSlices_.length) {
        const prevSlice = this.openPartialSlices_[
            this.openPartialSlices_.length - 1];
        if (ts < prevSlice.start) {
          throw new Error('Slices must be added in increasing timestamp order');
        }
      }

      const colorId = opt_colorId ||
          ColorScheme.getColorIdForGeneralPurposeString(title);
      const sliceConstructorSubTypes = this.sliceConstructorSubTypes;
      const sliceType = sliceConstructorSubTypes.getConstructor(
          category, title);
      const slice = new sliceType(category, title, colorId, ts,
                                opt_args ? opt_args : {}, null,
                                opt_tts, undefined,
                                opt_argsStripped);
      this.openPartialSlices_.push(slice);
      slice.didNotFinish = true;
      this.pushSlice(slice);

      return slice;
    },

    isTimestampValidForBeginOrEnd(ts) {
      if (!this.openPartialSlices_.length) return true;
      const top = this.openPartialSlices_[this.openPartialSlices_.length - 1];
      return ts >= top.start;
    },

    /**
     * @return {Number} The number of beginSlices for which an endSlice has not
     * been issued.
     */
    get openSliceCount() {
      return this.openPartialSlices_.length;
    },

    get mostRecentlyOpenedPartialSlice() {
      if (!this.openPartialSlices_.length) return undefined;
      return this.openPartialSlices_[this.openPartialSlices_.length - 1];
    },

    /**
     * Ends the last begun slice in this group and pushes it onto the slice
     * array.
     *
     * @param {Number} ts Timestamp when the slice ended
     * @param {Number=} opt_colorId The color of the slice, defined by
     * its palette id (see base/color_scheme.html).
     * @return {Slice} slice.
     */
    endSlice(ts, opt_tts, opt_colorId) {
      if (!this.openSliceCount) {
        throw new Error('endSlice called without an open slice');
      }

      const slice = this.openPartialSlices_[this.openSliceCount - 1];
      this.openPartialSlices_.splice(this.openSliceCount - 1, 1);
      if (ts < slice.start) {
        throw new Error('Slice ' + slice.title +
                        ' end time is before its start.');
      }

      slice.duration = ts - slice.start;
      slice.didNotFinish = false;
      slice.colorId = opt_colorId || slice.colorId;

      if (opt_tts && slice.cpuStart !== undefined) {
        slice.cpuDuration = opt_tts - slice.cpuStart;
      }

      return slice;
    },

    /**
     * Push a complete event as a Slice into the slice list.
     * The timestamp can be in any order.
     *
     * @param {String} category Category name of the slice to add.
     * @param {String} title Title of the slice to add.
     * @param {Number} ts The timetsamp of the slice, in milliseconds.
     * @param {Number} duration The duration of the slice, in milliseconds.
     * @param {Object.<string, Object>=} opt_args Arguments associated with
     * the slice.
     * @param {Number=} opt_colorId The color of the slice, as defined by
     * its palette id (see base/color_scheme.html).
     */
    pushCompleteSlice(category, title, ts, duration, tts,
        cpuDuration, opt_args, opt_argsStripped,
        opt_colorId, opt_bindId) {
      const colorId = opt_colorId ||
          ColorScheme.getColorIdForGeneralPurposeString(title);
      const sliceConstructorSubTypes = this.sliceConstructorSubTypes;
      const sliceType = sliceConstructorSubTypes.getConstructor(
          category, title);
      const slice = new sliceType(category, title, colorId, ts,
                                opt_args ? opt_args : {},
                                duration, tts, cpuDuration,
                                opt_argsStripped, opt_bindId);
      if (duration === undefined) {
        slice.didNotFinish = true;
      }
      this.pushSlice(slice);
      return slice;
    },

    /**
     * Closes any open slices.
     * @param {Number=} opt_maxTimestamp The end time to use for the closed
     * slices. If not provided,
     * the max timestamp for this slice is provided.
     */
    autoCloseOpenSlices() {
      this.updateBounds();
      const maxTimestamp = this.bounds.max;
      for (let sI = 0; sI < this.slices.length; sI++) {
        const slice = this.slices[sI];
        if (slice.didNotFinish) {
          slice.duration = maxTimestamp - slice.start;
        }
      }
      this.openPartialSlices_ = [];
    },

    /**
     * Shifts all the timestamps inside this group forward by the amount
     * specified.
     */
    shiftTimestampsForward(amount) {
      for (let sI = 0; sI < this.slices.length; sI++) {
        const slice = this.slices[sI];
        slice.start = (slice.start + amount);
      }
    },

    /**
     * Updates the bounds for this group based on the slices it contains.
     */
    updateBounds() {
      this.bounds.reset();
      for (let i = 0; i < this.slices.length; i++) {
        this.bounds.addValue(this.slices[i].start);
        this.bounds.addValue(this.slices[i].end);
      }
    },

    copySlice(slice) {
      const sliceConstructorSubTypes = this.sliceConstructorSubTypes;
      const sliceType = sliceConstructorSubTypes.getConstructor(slice.category,
          slice.title);
      const newSlice = new sliceType(slice.category, slice.title,
          slice.colorId, slice.start,
          slice.args, slice.duration, slice.cpuStart, slice.cpuDuration);
      newSlice.didNotFinish = slice.didNotFinish;
      return newSlice;
    },

    * findTopmostSlicesInThisContainer(eventPredicate, opt_this) {
      if (!this.haveTopLevelSlicesBeenBuilt) {
        throw new Error('Nope');
      }

      for (const s of this.topLevelSlices) {
        yield* s.findTopmostSlicesRelativeToThisSlice(eventPredicate);
      }
    },

    * childEvents() {
      yield* this.slices;
    },

    * childEventContainers() {
    },

    getSlicesOfName(title) {
      const slices = [];
      for (let i = 0; i < this.slices.length; i++) {
        if (this.slices[i].title === title) {
          slices.push(this.slices[i]);
        }
      }
      return slices;
    },

    iterSlicesInTimeRange(callback, start, end) {
      const ret = [];
      tr.b.iterateOverIntersectingIntervals(
          this.topLevelSlices,
          function(s) { return s.start; },
          function(s) { return s.duration; },
          start,
          end,
          function(topLevelSlice) {
            callback(topLevelSlice);
            for (const slice of topLevelSlice.enumerateAllDescendents()) {
              callback(slice);
            }
          });
      return ret;
    },

    findFirstSlice() {
      if (!this.haveTopLevelSlicesBeenBuilt) {
        throw new Error('Nope');
      }
      if (0 === this.slices.length) return undefined;
      return this.slices[0];
    },

    findSliceAtTs(ts) {
      if (!this.haveTopLevelSlicesBeenBuilt) throw new Error('Nope');
      let i = tr.b.findIndexInSortedClosedIntervals(
          this.topLevelSlices,
          getSliceLo, getSliceHi,
          ts);
      if (i === -1 || i === this.topLevelSlices.length) {
        return undefined;
      }

      let curSlice = this.topLevelSlices[i];

      // Now recurse on slice looking for subSlice of given ts.
      while (true) {
        i = tr.b.findIndexInSortedClosedIntervals(
            curSlice.subSlices,
            getSliceLo, getSliceHi,
            ts);
        if (i === -1 || i === curSlice.subSlices.length) {
          return curSlice;
        }
        curSlice = curSlice.subSlices[i];
      }
    },

    findNextSliceAfter(ts, refGuid) {
      let i = tr.b.findLowIndexInSortedArray(this.slices, getSliceLo, ts);
      if (i === this.slices.length) {
        return undefined;
      }
      for (; i < this.slices.length; i++) {
        const slice = this.slices[i];
        if (slice.start > ts) return slice;
        if (slice.guid <= refGuid) continue;
        return slice;
      }
      return undefined;
    },

    /**
     * This function assumes that if any slice has a cpu duration then
     * then the group is considered to have cpu duration.
     */
    hasCpuDuration_() {
      if (this.slices.some(function(slice) {
        return slice.cpuDuration !== undefined;
      })) return true;
      return false;
    },

    /**
     * Construct subSlices for this group.
     * Populate the group topLevelSlices, parent slices get a subSlices[],
     * a selfThreadTime and a selfTime, child slices get a parentSlice
     * reference.
     */
    createSubSlices() {
      this.haveTopLevelSlicesBeenBuilt = true;
      this.createSubSlicesImpl_();
      // If another source has cpu time, we can augment the cpuDuration of the
      // slices in the group with that cpu time. This should be done only if
      // the original source does not include cpuDuration.
      if (!this.hasCpuDuration_() && this.parentContainer.timeSlices) {
        this.addCpuTimeToSubslices_(this.parentContainer.timeSlices);
      }
      this.slices.forEach(function(slice) {
        let selfTime = slice.duration;
        for (let i = 0; i < slice.subSlices.length; i++) {
          selfTime -= slice.subSlices[i].duration;
        }
        slice.selfTime = selfTime;

        if (slice.cpuDuration === undefined) return;

        let cpuSelfTime = slice.cpuDuration;
        for (let i = 0; i < slice.subSlices.length; i++) {
          if (slice.subSlices[i].cpuDuration !== undefined) {
            cpuSelfTime -= slice.subSlices[i].cpuDuration;
          }
        }
        slice.cpuSelfTime = cpuSelfTime;
      });
    },
    createSubSlicesImpl_() {
      const precisionUnit = this.model.intrinsicTimeUnit;


      // Note that this doesn't check whether |child| should be added to
      // |parent|'s descendant slices instead of |parent| directly.
      function addSliceIfBounds(parent, child) {
        if (parent.bounds(child, precisionUnit)) {
          child.parentSlice = parent;
          if (parent.subSlices === undefined) {
            parent.subSlices = [];
          }
          parent.subSlices.push(child);
          return true;
        }
        return false;
      }

      if (!this.slices.length) return;

      const ops = [];
      for (let i = 0; i < this.slices.length; i++) {
        if (this.slices[i].subSlices) {
          this.slices[i].subSlices.splice(0,
              this.slices[i].subSlices.length);
        }
        ops.push(i);
      }

      const originalSlices = this.slices;
      ops.sort(function(ix, iy) {
        const x = originalSlices[ix];
        const y = originalSlices[iy];
        if (x.start !== y.start) {
          return x.start - y.start;
        }

        // Elements get inserted into the slices array in order of when the
        // slices start. Because slices must be properly nested, we break
        // start-time ties by assuming that the elements appearing earlier
        // in the slices array (and thus ending earlier) start earlier.
        return ix - iy;
      });

      const slices = new Array(this.slices.length);
      for (let i = 0; i < ops.length; i++) {
        slices[i] = originalSlices[ops[i]];
      }

      // Actually build the subrows.
      let rootSlice = slices[0];
      this.topLevelSlices = [];
      this.topLevelSlices.push(rootSlice);
      rootSlice.isTopLevel = true;
      for (let i = 1; i < slices.length; i++) {
        const slice = slices[i];
        while (rootSlice !== undefined &&
               (!addSliceIfBounds(rootSlice, slice))) {
          rootSlice = rootSlice.parentSlice;
        }
        if (rootSlice === undefined) {
          this.topLevelSlices.push(slice);
          slice.isTopLevel = true;
        }
        rootSlice = slice;
      }

      // Keep the slices in sorted form.
      this.slices = slices;
    },
    addCpuTimeToSubslices_(timeSlices) {
      const SCHEDULING_STATE = tr.model.SCHEDULING_STATE;
      let sliceIdx = 0;
      timeSlices.forEach(function(timeSlice) {
        if (timeSlice.schedulingState === SCHEDULING_STATE.RUNNING) {
          while (sliceIdx < this.topLevelSlices.length) {
            if (this.addCpuTimeToSubslice_(this.topLevelSlices[sliceIdx],
                timeSlice)) {
              // The current top-level slice and children are fully
              // accounted for, proceed to next top-level slice.
              sliceIdx++;
            } else {
              // The current top-level runs beyond the time slice, break out
              // so we can potentially add more time slices to it
              break;
            }
          }
        }
      }, this);
    },
    /* Add run-time of this timeSlice to the passed in slice
     * and all of it's children (recursively).
     * Returns whether the slice ends before or at the end of the
     * time slice, signaling we are done with this slice.
     */
    addCpuTimeToSubslice_(slice, timeSlice) {
      // Make sure they overlap
      if (slice.start > timeSlice.end || slice.end < timeSlice.start) {
        return slice.end <= timeSlice.end;
      }

      // Compute actual overlap
      let duration = timeSlice.duration;
      if (slice.start > timeSlice.start) {
        duration -= slice.start - timeSlice.start;
      }
      if (timeSlice.end > slice.end) {
        duration -= timeSlice.end - slice.end;
      }

      if (slice.cpuDuration) {
        slice.cpuDuration += duration;
      } else {
        slice.cpuDuration = duration;
      }

      for (let i = 0; i < slice.subSlices.length; i++) {
        this.addCpuTimeToSubslice_(slice.subSlices[i], timeSlice);
      }

      return slice.end <= timeSlice.end;
    }
  };

  /**
   * Merge two slice groups.
   *
   * If the two groups do not nest properly some of the slices of groupB will
   * be split to accomodate the improper nesting.  This is done to accomodate
   * combined kernel and userland call stacks on Android.  Because userland
   * tracing is done by writing to the trace_marker file, the kernel calls
   * that get invoked as part of that write may not be properly nested with
   * the userland call trace.  For example the following sequence may occur:
   *
   *     kernel enter sys_write        (the write to trace_marker)
   *     user   enter some_function
   *     kernel exit  sys_write
   *     ...
   *     kernel enter sys_write        (the write to trace_marker)
   *     user   exit  some_function
   *     kernel exit  sys_write
   *
   * This is handled by splitting the sys_write call into two slices as
   * follows:
   *
   *     | sys_write |            some_function            | sys_write (cont.) |
   *                 | sys_write (cont.) |     | sys_write |
   *
   * The colorId of both parts of the split slices are kept the same, and the
   * " (cont.)" suffix is appended to the later parts of a split slice.
   *
   * The two input SliceGroups are not modified by this, and the merged
   * SliceGroup will contain a copy of each of the input groups' slices (those
   * copies may be split).
   */
  SliceGroup.merge = function(groupA, groupB) {
    // This is implemented by traversing the two slice groups in reverse
    // order.  The slices in each group are sorted by ascending end-time, so
    // we must do the traversal from back to front in order to maintain the
    // sorting.
    //
    // We traverse the two groups simultaneously, merging as we go.  At each
    // iteration we choose the group from which to take the next slice based
    // on which group's next slice has the greater end-time.  During this
    // traversal we maintain a stack of currently "open" slices for each input
    // group.  A slice is considered "open" from the time it gets reached in
    // our input group traversal to the time we reach an slice in this
    // traversal with an end-time before the start time of the "open" slice.
    //
    // Each time a slice from groupA is opened or closed (events corresponding
    // to the end-time and start-time of the input slice, respectively) we
    // split all of the currently open slices from groupB.

    if (groupA.openPartialSlices_.length > 0) {
      throw new Error('groupA has open partial slices');
    }

    if (groupB.openPartialSlices_.length > 0) {
      throw new Error('groupB has open partial slices');
    }

    if (groupA.parentContainer !== groupB.parentContainer) {
      throw new Error('Different parent threads. Cannot merge');
    }

    if (groupA.sliceConstructor !== groupB.sliceConstructor) {
      throw new Error('Different slice constructors. Cannot merge');
    }

    const result = new SliceGroup(groupA.parentContainer,
                                groupA.sliceConstructor,
                                groupA.name_);

    const slicesA = groupA.slices;
    const slicesB = groupB.slices;
    let idxA = 0;
    let idxB = 0;
    const openA = [];
    const openB = [];

    const splitOpenSlices = function(when) {
      for (let i = 0; i < openB.length; i++) {
        const oldSlice = openB[i];
        const oldEnd = oldSlice.end;
        if (when < oldSlice.start || oldEnd < when) {
          throw new Error('slice should not be split');
        }

        const newSlice = result.copySlice(oldSlice);
        newSlice.start = when;
        newSlice.duration = oldEnd - when;
        if (newSlice.title.indexOf(' (cont.)') === -1) {
          newSlice.title += ' (cont.)';
        }
        oldSlice.duration = when - oldSlice.start;
        openB[i] = newSlice;
        result.pushSlice(newSlice);
      }
    };

    const closeOpenSlices = function(upTo) {
      while (openA.length > 0 || openB.length > 0) {
        const nextA = openA[openA.length - 1];
        const nextB = openB[openB.length - 1];
        const endA = nextA && nextA.end;
        const endB = nextB && nextB.end;

        if ((endA === undefined || endA > upTo) &&
            (endB === undefined || endB > upTo)) {
          return;
        }

        if (endB === undefined || endA < endB) {
          splitOpenSlices(endA);
          openA.pop();
        } else {
          openB.pop();
        }
      }
    };

    while (idxA < slicesA.length || idxB < slicesB.length) {
      const sA = slicesA[idxA];
      const sB = slicesB[idxB];
      let nextSlice;
      let isFromB;

      if (sA === undefined || (sB !== undefined && sA.start > sB.start)) {
        nextSlice = result.copySlice(sB);
        isFromB = true;
        idxB++;
      } else {
        nextSlice = result.copySlice(sA);
        isFromB = false;
        idxA++;
      }

      closeOpenSlices(nextSlice.start);

      result.pushSlice(nextSlice);

      if (isFromB) {
        openB.push(nextSlice);
      } else {
        splitOpenSlices(nextSlice.start);
        openA.push(nextSlice);
      }
    }

    closeOpenSlices();

    return result;
  };

  return {
    SliceGroup,
  };
});


'use strict';

/**
 * @fileoverview Provides the Thread class.
 */
tr.exportTo('tr.model', function() {
  const AsyncSlice = tr.model.AsyncSlice;
  const AsyncSliceGroup = tr.model.AsyncSliceGroup;
  const SliceGroup = tr.model.SliceGroup;
  const ThreadSlice = tr.model.ThreadSlice;
  const ThreadTimeSlice = tr.model.ThreadTimeSlice;

  /**
   * A Thread stores all the trace events collected for a particular
   * thread. We organize the synchronous slices on a thread by "subrows," where
   * subrow 0 has all the root slices, subrow 1 those nested 1 deep, and so on.
   * The asynchronous slices are stored in an AsyncSliceGroup object.
   *
   * The slices stored on a Thread should be instances of
   * ThreadSlice.
   *
   * @constructor
   * @extends {tr.model.EventContainer}
   */
  function Thread(parent, tid) {
    if (!parent) {
      throw new Error('Parent must be provided.');
    }

    tr.model.EventContainer.call(this);
    this.parent = parent;
    this.sortIndex = 0;
    this.tid = tid;
    this.name = undefined;
    this.samples_ = undefined; // Set during createSubSlices

    this.sliceGroup = new SliceGroup(this, ThreadSlice, 'slices');
    this.timeSlices = undefined;
    this.kernelSliceGroup = new SliceGroup(
        this, ThreadSlice, 'kernel-slices');
    this.asyncSliceGroup = new AsyncSliceGroup(this, 'async-slices');
  }

  Thread.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    get model() {
      return this.parent.model;
    },

    get stableId() {
      return this.parent.stableId + '.' + this.tid;
    },

    compareTo(that) {
      return Thread.compare(this, that);
    },

    * childEventContainers() {
      if (this.sliceGroup.length) {
        yield this.sliceGroup;
      }
      if (this.kernelSliceGroup.length) {
        yield this.kernelSliceGroup;
      }
      if (this.asyncSliceGroup.length) {
        yield this.asyncSliceGroup;
      }
    },

    * childEvents() {
      if (this.timeSlices) {
        yield* this.timeSlices;
      }
    },

    iterateAllPersistableObjects(cb) {
      cb(this);
      if (this.sliceGroup.length) {
        cb(this.sliceGroup);
      }
      this.asyncSliceGroup.viewSubGroups.forEach(cb);
    },

    /**
     * Shifts all the timestamps inside this thread forward by the amount
     * specified.
     */
    shiftTimestampsForward(amount) {
      this.sliceGroup.shiftTimestampsForward(amount);

      if (this.timeSlices) {
        for (let i = 0; i < this.timeSlices.length; i++) {
          const slice = this.timeSlices[i];
          slice.start += amount;
        }
      }

      this.kernelSliceGroup.shiftTimestampsForward(amount);
      this.asyncSliceGroup.shiftTimestampsForward(amount);
    },

    /**
     * Determines whether this thread is empty. If true, it usually implies
     * that it should be pruned from the model.
     */
    get isEmpty() {
      if (this.sliceGroup.length) return false;
      if (this.sliceGroup.openSliceCount) return false;
      if (this.timeSlices && this.timeSlices.length) return false;
      if (this.kernelSliceGroup.length) return false;
      if (this.asyncSliceGroup.length) return false;
      if (this.samples_.length) return false;
      return true;
    },

    /**
     * Updates the bounds based on the
     * current objects associated with the thread.
     */
    updateBounds() {
      this.bounds.reset();

      this.sliceGroup.updateBounds();
      this.bounds.addRange(this.sliceGroup.bounds);

      this.kernelSliceGroup.updateBounds();
      this.bounds.addRange(this.kernelSliceGroup.bounds);

      this.asyncSliceGroup.updateBounds();
      this.bounds.addRange(this.asyncSliceGroup.bounds);

      if (this.timeSlices && this.timeSlices.length) {
        this.bounds.addValue(this.timeSlices[0].start);
        this.bounds.addValue(
            this.timeSlices[this.timeSlices.length - 1].end);
      }

      if (this.samples_ && this.samples_.length) {
        this.bounds.addValue(this.samples_[0].start);
        this.bounds.addValue(
            this.samples_[this.samples_.length - 1].end);
      }
    },

    addCategoriesToDict(categoriesDict) {
      for (let i = 0; i < this.sliceGroup.length; i++) {
        categoriesDict[this.sliceGroup.slices[i].category] = true;
      }
      for (let i = 0; i < this.kernelSliceGroup.length; i++) {
        categoriesDict[this.kernelSliceGroup.slices[i].category] = true;
      }
      for (let i = 0; i < this.asyncSliceGroup.length; i++) {
        categoriesDict[this.asyncSliceGroup.slices[i].category] = true;
      }
      if (this.samples_) {
        for (let i = 0; i < this.samples_.length; i++) {
          categoriesDict[this.samples_[i].category] = true;
        }
      }
    },

    autoCloseOpenSlices() {
      this.sliceGroup.autoCloseOpenSlices();
      this.asyncSliceGroup.autoCloseOpenSlices();
      this.kernelSliceGroup.autoCloseOpenSlices();
    },

    mergeKernelWithUserland() {
      if (this.kernelSliceGroup.length > 0) {
        const newSlices = SliceGroup.merge(
            this.sliceGroup, this.kernelSliceGroup);
        this.sliceGroup.slices = newSlices.slices;
        this.kernelSliceGroup = new SliceGroup(this);
        this.updateBounds();
      }
    },

    createSubSlices() {
      this.sliceGroup.createSubSlices();
      this.samples_ = this.parent.model.samples.filter(sample =>
          sample.thread === this);
    },

    /**
     * @return {String} A user-friendly name for this thread.
     */
    get userFriendlyName() {
      return this.name || this.tid;
    },

    /**
     * @return {String} User friendly details about this thread.
     */
    get userFriendlyDetails() {
      return 'tid: ' + this.tid +
          (this.name ? ', name: ' + this.name : '');
    },

    getSettingsKey() {
      if (!this.name) return undefined;
      const parentKey = this.parent.getSettingsKey();
      if (!parentKey) return undefined;
      return parentKey + '.' + this.name;
    },

    getProcess() {
      return this.parent;
    },

    /*
     * Returns the index of the slice in the timeSlices array, or undefined.
     */
    indexOfTimeSlice(timeSlice) {
      const i = tr.b.findLowIndexInSortedArray(
          this.timeSlices,
          function(slice) { return slice.start; },
          timeSlice.start);
      if (this.timeSlices[i] !== timeSlice) return undefined;
      return i;
    },

    /*
     * Returns an object with the CPU number used as keys,
     * and the value of each key object is the amount of milliseconds spent
     * running on this CPU.
     * Additionally, stats.total contains the total time
     * spent running on all CPUs.
     */
    getCpuStatsForRange(range) {
      const stats = {};
      stats.total = 0;

      if (!this.timeSlices) return stats;

      function addStatsForSlice(threadTimeSlice) {
        const freqRange = tr.b.math.Range.fromExplicitRange(
            threadTimeSlice.start, threadTimeSlice.end);
        const intersection = freqRange.findIntersection(range);

        if (threadTimeSlice.schedulingState ===
            tr.model.SCHEDULING_STATE.RUNNING) {
          const cpu = threadTimeSlice.cpuOnWhichThreadWasRunning;
          if (!(cpu.cpuNumber in stats)) {
            stats[cpu.cpuNumber] = 0;
          }

          stats[cpu.cpuNumber] += intersection.duration;
          stats.total += intersection.duration;
        }
      }

      tr.b.iterateOverIntersectingIntervals(this.timeSlices,
          function(x) { return x.start; },
          function(x) { return x.end; },
          range.min,
          range.max,
          addStatsForSlice);
      return stats;
    },

    getSchedulingStatsForRange(start, end) {
      const stats = {};

      if (!this.timeSlices) return stats;

      function addStatsForSlice(threadTimeSlice) {
        const overlapStart = Math.max(threadTimeSlice.start, start);
        const overlapEnd = Math.min(threadTimeSlice.end, end);
        const schedulingState = threadTimeSlice.schedulingState;

        if (!(schedulingState in stats)) stats[schedulingState] = 0;
        stats[schedulingState] += overlapEnd - overlapStart;
      }

      tr.b.iterateOverIntersectingIntervals(this.timeSlices,
          function(x) { return x.start; },
          function(x) { return x.end; },
          start,
          end,
          addStatsForSlice);
      return stats;
    },

    get samples() {
      return this.samples_;
    },

    /**
     * Returns substring of this.name from beginning to the first numeric
     * character or the character '/'.
     *
     * Example:
     * ThreadName12      -> ThreadName
     * ThreadName/34123  -> ThreadName
     * ThreadName1/34123 -> ThreadName
     */
    get type() {
      const re = /^[^0-9|\/]+/;
      const matches = re.exec(this.name);
      if (matches && matches[0]) return matches[0];

      // If a thread is named 42GPU, let's not try to find its type.
      // We should fix the thread name.
      throw new Error('Could not determine thread type for thread name ' +
          this.name);
    }
  };

  /**
   * Comparison between threads that orders first by parent.compareTo,
   * then by names, then by tid.
   */
  Thread.compare = function(x, y) {
    let tmp = x.parent.compareTo(y.parent);
    if (tmp) return tmp;

    tmp = x.sortIndex - y.sortIndex;
    if (tmp) return tmp;

    if (x.name !== undefined) {
      if (y.name !== undefined) {
        tmp = x.name.localeCompare(y.name);
      } else {
        tmp = -1;
      }
    } else if (y.name !== undefined) {
      tmp = 1;
    }
    if (tmp) return tmp;

    return x.tid - y.tid;
  };

  return {
    Thread,
  };
});


'use strict';

/**
 * @fileoverview Provides the ProcessBase class.
 */
tr.exportTo('tr.model', function() {
  const Thread = tr.model.Thread;
  const Counter = tr.model.Counter;

  /**
   * The ProcessBase is a partial base class, upon which Kernel
   * and Process are built.
   *
   * @constructor
   * @extends {tr.model.EventContainer}
   */
  function ProcessBase(model) {
    if (!model) {
      throw new Error('Must provide a model');
    }
    tr.model.EventContainer.call(this);
    this.model = model;
    this.threads = {};
    this.counters = {};
    this.objects = new tr.model.ObjectCollection(this);
    this.sortIndex = 0;
  }

  ProcessBase.compare = function(x, y) {
    return x.sortIndex - y.sortIndex;
  };

  ProcessBase.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    get stableId() {
      throw new Error('Not implemented');
    },

    * childEventContainers() {
      yield* Object.values(this.threads);
      yield* Object.values(this.counters);
      yield this.objects;
    },

    iterateAllPersistableObjects(cb) {
      cb(this);
      for (const tid in this.threads) {
        this.threads[tid].iterateAllPersistableObjects(cb);
      }
    },

    /**
     * Gets the number of threads in this process.
     */
    get numThreads() {
      let n = 0;
      for (const p in this.threads) {
        n++;
      }
      return n;
    },

    /**
     * Shifts all the timestamps inside this process forward by the amount
     * specified.
     */
    shiftTimestampsForward(amount) {
      for (const child of this.childEventContainers()) {
        child.shiftTimestampsForward(amount);
      }
    },

    /**
     * Closes any open slices.
     */
    autoCloseOpenSlices() {
      for (const tid in this.threads) {
        const thread = this.threads[tid];
        thread.autoCloseOpenSlices();
      }
    },

    autoDeleteObjects(maxTimestamp) {
      this.objects.autoDeleteObjects(maxTimestamp);
    },

    /**
     * Called by the model after finalizing imports,
     * but before joining refs.
     */
    preInitializeObjects() {
      this.objects.preInitializeAllObjects();
    },

    /**
     * Called by the model after joining refs.
     */
    initializeObjects() {
      this.objects.initializeAllObjects();
    },

    /**
     * Merge slices from the kernel with those from userland for each thread.
     */
    mergeKernelWithUserland() {
      for (const tid in this.threads) {
        const thread = this.threads[tid];
        thread.mergeKernelWithUserland();
      }
    },

    updateBounds() {
      this.bounds.reset();
      for (const tid in this.threads) {
        this.threads[tid].updateBounds();
        this.bounds.addRange(this.threads[tid].bounds);
      }
      for (const id in this.counters) {
        this.counters[id].updateBounds();
        this.bounds.addRange(this.counters[id].bounds);
      }
      this.objects.updateBounds();
      this.bounds.addRange(this.objects.bounds);
    },

    addCategoriesToDict(categoriesDict) {
      for (const tid in this.threads) {
        this.threads[tid].addCategoriesToDict(categoriesDict);
      }
      for (const id in this.counters) {
        categoriesDict[this.counters[id].category] = true;
      }
      this.objects.addCategoriesToDict(categoriesDict);
    },

    findAllThreadsMatching(predicate, opt_this) {
      const threads = [];
      for (const tid in this.threads) {
        const thread = this.threads[tid];
        if (predicate.call(opt_this, thread)) {
          threads.push(thread);
        }
      }
      return threads;
    },

    /**
     * @param {String} The name of the thread to find.
     * @return {Array} An array of all the matched threads.
     */
    findAllThreadsNamed(name) {
      const threads = this.findAllThreadsMatching(function(thread) {
        if (!thread.name) return false;
        return thread.name === name;
      });
      return threads;
    },

    findAtMostOneThreadNamed(name) {
      const threads = this.findAllThreadsNamed(name);
      if (threads.length === 0) return undefined;
      if (threads.length > 1) {
        throw new Error('Expected no more than one ' + name);
      }
      return threads[0];
    },

    /**
     * Removes threads from the process that are fully empty.
     */
    pruneEmptyContainers() {
      const threadsToKeep = {};
      for (const tid in this.threads) {
        const thread = this.threads[tid];
        if (!thread.isEmpty) {
          threadsToKeep[tid] = thread;
        }
      }
      this.threads = threadsToKeep;
    },

    /**
     * @return {TimelineThread} The thread identified by tid on this process,
     * or undefined if it doesn't exist.
     */
    getThread(tid) {
      return this.threads[tid];
    },

    /**
     * @return {TimelineThread} The thread identified by tid on this process,
     * creating it if it doesn't exist.
     */
    getOrCreateThread(tid) {
      if (!this.threads[tid]) {
        this.threads[tid] = new Thread(this, tid);
      }
      return this.threads[tid];
    },

    /**
     * @return {Counter} The counter on this process with the given
     * category/name combination, creating it if it doesn't exist.
     */
    getOrCreateCounter(cat, name) {
      const id = cat + '.' + name;
      if (!this.counters[id]) {
        this.counters[id] = new Counter(this, id, cat, name);
      }
      return this.counters[id];
    },

    getSettingsKey() {
      throw new Error('Not implemented');
    },

    createSubSlices() {
      for (const tid in this.threads) {
        this.threads[tid].createSubSlices();
      }
    }
  };

  return {
    ProcessBase,
  };
});


'use strict';

/**
 * @fileoverview Provides the Cpu class.
 */
tr.exportTo('tr.model', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Counter = tr.model.Counter;
  const CpuSlice = tr.model.CpuSlice;

  /**
   * The Cpu represents a Cpu from the kernel's point of view.
   * @constructor
   */
  function Cpu(kernel, number) {
    if (kernel === undefined || number === undefined) {
      throw new Error('Missing arguments');
    }
    this.kernel = kernel;
    this.cpuNumber = number;
    this.slices = [];
    this.counters = {};
    this.bounds_ = new tr.b.math.Range();
    this.samples_ = undefined; // Set during createSubSlices

    // Start timestamp of the last active thread.
    this.lastActiveTimestamp_ = undefined;

    // Identifier of the last active thread. On Linux, it's a pid while on
    // Windows it's a thread id.
    this.lastActiveThread_ = undefined;

    // Name and arguments of the last active thread.
    this.lastActiveName_ = undefined;
    this.lastActiveArgs_ = undefined;
  }

  Cpu.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    get samples() {
      return this.samples_;
    },

    get userFriendlyName() {
      return 'CPU ' + this.cpuNumber;
    },

    * findTopmostSlicesInThisContainer(eventPredicate, opt_this) {
      // All CpuSlices are toplevel since CpuSlices do not nest.
      for (const s of this.slices) {
        yield* s.findTopmostSlicesRelativeToThisSlice(
            eventPredicate, opt_this);
      }
    },

    * childEvents() {
      yield* this.slices;

      if (this.samples_) {
        yield* this.samples_;
      }
    },

    * childEventContainers() {
      yield* Object.values(this.counters);
    },

    /**
     * @return {Counter} The counter on this CPU with the given category/name
     * combination, creating it if it doesn't exist.
     */
    getOrCreateCounter(cat, name) {
      const id = cat + '.' + name;
      if (!this.counters[id]) {
        this.counters[id] = new Counter(this, id, cat, name);
      }
      return this.counters[id];
    },

    /**
     * @return {Counter} the counter on this CPU with the given category/name
     * combination, or undefined if it doesn't exist.
     */
    getCounter(cat, name) {
      const id = cat + '.' + name;
      if (!this.counters[id]) {
        return undefined;
      }
      return this.counters[id];
    },

    /**
     * Shifts all the timestamps inside this CPU forward by the amount
     * specified.
     */
    shiftTimestampsForward(amount) {
      for (let sI = 0; sI < this.slices.length; sI++) {
        this.slices[sI].start = (this.slices[sI].start + amount);
      }
      for (const id in this.counters) {
        this.counters[id].shiftTimestampsForward(amount);
      }
    },

    /**
     * Updates the range based on the current slices attached to the cpu.
     */
    updateBounds() {
      this.bounds_.reset();
      if (this.slices.length) {
        this.bounds_.addValue(this.slices[0].start);
        this.bounds_.addValue(this.slices[this.slices.length - 1].end);
      }
      for (const id in this.counters) {
        this.counters[id].updateBounds();
        this.bounds_.addRange(this.counters[id].bounds);
      }
      if (this.samples_ && this.samples_.length) {
        this.bounds_.addValue(this.samples_[0].start);
        this.bounds_.addValue(
            this.samples_[this.samples_.length - 1].end);
      }
    },

    createSubSlices() {
      this.samples_ = this.kernel.model.samples.filter(function(sample) {
        return sample.cpu === this;
      }, this);
    },

    addCategoriesToDict(categoriesDict) {
      for (let i = 0; i < this.slices.length; i++) {
        categoriesDict[this.slices[i].category] = true;
      }
      for (const id in this.counters) {
        categoriesDict[this.counters[id].category] = true;
      }
      for (let i = 0; i < this.samples_.length; i++) {
        categoriesDict[this.samples_[i].category] = true;
      }
    },

    /*
     * Returns the index of the slice in the CPU's slices, or undefined.
     */
    indexOf(cpuSlice) {
      const i = tr.b.findLowIndexInSortedArray(
          this.slices,
          function(slice) { return slice.start; },
          cpuSlice.start);
      if (this.slices[i] !== cpuSlice) return undefined;
      return i;
    },

    /**
     * Closes the thread running on the CPU. |endTimestamp| is the timestamp
     * at which the thread was unscheduled. |args| is merged with the arguments
     * specified when the thread was initially scheduled.
     */
    closeActiveThread(endTimestamp, args) {
      // Don't generate a slice if the last active thread is the idle task.
      if (this.lastActiveThread_ === undefined ||
          this.lastActiveThread_ === 0) {
        return;
      }

      if (endTimestamp < this.lastActiveTimestamp_) {
        throw new Error('The end timestamp of a thread running on CPU ' +
                        this.cpuNumber + ' is before its start timestamp.');
      }

      // Merge |args| with |this.lastActiveArgs_|. If a key is in both
      // dictionaries, the value from |args| is used.
      for (const key in args) {
        this.lastActiveArgs_[key] = args[key];
      }

      const duration = endTimestamp - this.lastActiveTimestamp_;
      const slice = new tr.model.CpuSlice(
          '', this.lastActiveName_,
          ColorScheme.getColorIdForGeneralPurposeString(this.lastActiveName_),
          this.lastActiveTimestamp_,
          this.lastActiveArgs_,
          duration);
      slice.cpu = this;
      this.slices.push(slice);

      // Clear the last state.
      this.lastActiveTimestamp_ = undefined;
      this.lastActiveThread_ = undefined;
      this.lastActiveName_ = undefined;
      this.lastActiveArgs_ = undefined;
    },

    switchActiveThread(timestamp, oldThreadArgs, newThreadId,
        newThreadName, newThreadArgs) {
      // Close the previous active thread and generate a slice.
      this.closeActiveThread(timestamp, oldThreadArgs);

      // Keep track of the new thread.
      this.lastActiveTimestamp_ = timestamp;
      this.lastActiveThread_ = newThreadId;
      this.lastActiveName_ = newThreadName;
      this.lastActiveArgs_ = newThreadArgs;
    },

    /**
     * Returns the frequency statistics for this CPU;
     * the returned object contains the frequencies as keys,
     * and the duration at this frequency in milliseconds as the value,
     * for the range that was specified.
     */
    getFreqStatsForRange(range) {
      const stats = {};

      function addStatsForFreq(freqSample, index) {
        // Counters don't have an explicit end or duration;
        // calculate the end by looking at the starting point
        // of the next value in the series, or if that doesn't
        // exist, assume this frequency is held until the end.
        const freqEnd = (index < freqSample.series_.length - 1) ?
            freqSample.series_.samples_[index + 1].timestamp : range.max;

        const freqRange = tr.b.math.Range.fromExplicitRange(
            freqSample.timestamp, freqEnd);
        const intersection = freqRange.findIntersection(range);
        if (!(freqSample.value in stats)) {
          stats[freqSample.value] = 0;
        }
        stats[freqSample.value] += intersection.duration;
      }

      const freqCounter = this.getCounter('', 'Clock Frequency');
      if (freqCounter !== undefined) {
        const freqSeries = freqCounter.getSeries(0);
        if (!freqSeries) return;

        tr.b.iterateOverIntersectingIntervals(freqSeries.samples_,
            function(x) { return x.timestamp; },
            function(x, index) {
              if (index < freqSeries.length - 1) {
                return freqSeries.samples_[index + 1].timestamp;
              }
              return range.max;
            },
            range.min,
            range.max,
            addStatsForFreq);
      }

      return stats;
    }
  };

  /**
   * Comparison between processes that orders by cpuNumber.
   */
  Cpu.compare = function(x, y) {
    return x.cpuNumber - y.cpuNumber;
  };


  return {
    Cpu,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const Event = tr.model.Event;
  const EventRegistry = tr.model.EventRegistry;

  /**
   * A sample that contains a power measurement (in W).
   *
   * @constructor
   * @extends {Event}
   */
  function PowerSample(series, start, powerInW) {
    Event.call(this);

    this.series_ = series;
    this.start_ = parseFloat(start);
    this.powerInW_ = parseFloat(powerInW);
  }

  PowerSample.prototype = {
    __proto__: Event.prototype,

    get series() {
      return this.series_;
    },

    get start() {
      return this.start_;
    },

    set start(value) {
      this.start_ = value;
    },

    get powerInW() {
      return this.powerInW_;
    },

    set powerInW(value) {
      this.powerInW_ = value;
    },

    addBoundsToRange(range) {
      range.addValue(this.start);
    }
  };

  EventRegistry.register(
      PowerSample,
      {
        name: 'powerSample',
        pluralName: 'powerSamples'
      });

  return {
    PowerSample,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const PowerSample = tr.model.PowerSample;

  /**
   * A container holding a time series of power samples.
   *
   * @constructor
   * @extends {EventContainer}
   */
  function PowerSeries(device) {
    tr.model.EventContainer.call(this);

    this.device_ = device;
    this.samples_ = [];
  }

  PowerSeries.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    get device() {
      return this.device_;
    },

    get samples() {
      return this.samples_;
    },

    get stableId() {
      return this.device_.stableId + '.PowerSeries';
    },

    /**
     * Adds a power sample to the series and returns it.
     *
     * Note: Samples must be added in chronological order.
     */
    addPowerSample(ts, val) {
      const sample = new PowerSample(this, ts, val);
      this.samples_.push(sample);
      return sample;
    },

    /**
     * Returns the total energy (in Joules) consumed between the specified
     * start and end timestamps (in milliseconds).
     */
    getEnergyConsumedInJ(start, end) {
      const measurementRange = tr.b.math.Range.fromExplicitRange(start, end);

      let energyConsumedInJ = 0;
      let startIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, start) - 1;
      const endIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, end);

      if (startIndex < 0) {
        startIndex = 0;
      }

      for (let i = startIndex; i < endIndex; i++) {
        const sample = this.samples[i];
        const nextSample = this.samples[i + 1];

        const sampleRange = new tr.b.math.Range();
        sampleRange.addValue(sample.start);
        sampleRange.addValue(nextSample ? nextSample.start : sample.start);

        const intersectionRangeInMs = measurementRange.findIntersection(
            sampleRange);

        const durationInS = tr.b.convertUnit(intersectionRangeInMs.duration,
            tr.b.UnitPrefixScale.METRIC.MILLI,
            tr.b.UnitPrefixScale.METRIC.NONE);

        energyConsumedInJ += durationInS * sample.powerInW;
      }

      return energyConsumedInJ;
    },

    getSamplesWithinRange(start, end) {
      const startIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, start);
      const endIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, end);
      return this.samples.slice(startIndex, endIndex);
    },

    shiftTimestampsForward(amount) {
      for (let i = 0; i < this.samples_.length; ++i) {
        this.samples_[i].start += amount;
      }
    },

    updateBounds() {
      this.bounds.reset();

      if (this.samples_.length === 0) return;

      this.bounds.addValue(this.samples_[0].start);
      this.bounds.addValue(this.samples_[this.samples_.length - 1].start);
    },

    * childEvents() {
      yield* this.samples_;
    },
  };

  return {
    PowerSeries,
  };
});


'use strict';

/**
 * @fileoverview Provides the Device class.
 */
tr.exportTo('tr.model', function() {
  /**
   * Device represents the device-level objects in the model.
   * @constructor
   * @extends {tr.model.EventContainer}
   */
  function Device(model) {
    if (!model) {
      throw new Error('Must provide a model.');
    }

    tr.model.EventContainer.call(this);

    this.powerSeries_ = undefined;
    this.cpuUsageSeries_ = undefined;
    this.vSyncTimestamps_ = [];
  }

  Device.compare = function(x, y) {
    return x.guid - y.guid;
  };

  Device.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    compareTo(that) {
      return Device.compare(this, that);
    },

    get userFriendlyName() {
      return 'Device';
    },

    get userFriendlyDetails() {
      return 'Device';
    },

    get stableId() {
      return 'Device';
    },

    getSettingsKey() {
      return 'device';
    },

    get powerSeries() {
      return this.powerSeries_;
    },

    set powerSeries(powerSeries) {
      this.powerSeries_ = powerSeries;
    },

    get cpuUsageSeries() {
      return this.cpuUsageSeries_;
    },

    set cpuUsageSeries(cpuUsageSeries) {
      this.cpuUsageSeries_ = cpuUsageSeries;
    },

    get vSyncTimestamps() {
      return this.vSyncTimestamps_;
    },

    set vSyncTimestamps(value) {
      this.vSyncTimestamps_ = value;
    },

    updateBounds() {
      this.bounds.reset();
      for (const child of this.childEventContainers()) {
        child.updateBounds();
        this.bounds.addRange(child.bounds);
      }
    },

    shiftTimestampsForward(amount) {
      for (const child of this.childEventContainers()) {
        child.shiftTimestampsForward(amount);
      }

      for (let i = 0; i < this.vSyncTimestamps_.length; i++) {
        this.vSyncTimestamps_[i] += amount;
      }
    },

    addCategoriesToDict(categoriesDict) {
    },

    * childEventContainers() {
      if (this.powerSeries_) {
        yield this.powerSeries_;
      }
      if (this.cpuUsageSeries_) {
        yield this.cpuUsageSeries_;
      }
    }
  };

  return {
    Device,
  };
});

'use strict';

(function(exports) {

    var rank = {
        /*
         * Standart ranking
         *
         * The MIT License, Copyright (c) 2014 Ben Magyar
         */
        standard: function(array, key) {
            // sort the array
            array = array.sort(function(a, b) {
                var x = a[key];
                var y = b[key];
                return ((x < y) ? -1 : ((x > y) ? 1 : 0));
            });
            // assign a naive ranking
            for (var i = 1; i < array.length + 1; i++) {
                array[i - 1]['rank'] = i;
            }
            return array;
        },
        /*
         * Fractional ranking
         *
         * The MIT License, Copyright (c) 2014 Ben Magyar
         */
        fractional: function(array, key) {
            array = this.standard(array, key);
            // now apply fractional
            var pos = 0;
            while (pos < array.length) {
                var sum = 0;
                var i = 0;
                for (i = 0; array[pos + i + 1] && (array[pos + i][key] === array[pos + i + 1][key]); i++) {
                    sum += array[pos + i]['rank'];
                }
                sum += array[pos + i]['rank'];
                var endPos = pos + i + 1;
                for (pos; pos < endPos; pos++) {
                    array[pos]['rank'] = sum / (i + 1);
                }
                pos = endPos;
            }
            return array;
        },
        rank: function(x, y) {
            var nx = x.length,
                ny = y.length,
                combined = [],
                ranked;
            while (nx--) {
                combined.push({
                    set: 'x',
                    val: x[nx]
                });
            }
            while (ny--) {
                combined.push({
                    set: 'y',
                    val: y[ny]
                });
            }
            ranked = this.fractional(combined, 'val');
            return ranked
        }
    };

    /*
    * Error function
    *
    * The MIT License, Copyright (c) 2013 jStat
    */
    var erf = function erf(x) {
        var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2, -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4,
            4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6,
            1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8,
            6.529054439e-9, 5.059343495e-9, -9.91364156e-10, -2.27365122e-10, 9.6467911e-11, 2.394038e-12, -6.886027e-12, 8.94487e-13, 3.13092e-13, -1.12708e-13, 3.81e-16, 7.106e-15, -1.523e-15, -9.4e-17, 1.21e-16, -2.8e-17
        ];
        var j = cof.length - 1;
        var isneg = false;
        var d = 0;
        var dd = 0;
        var t, ty, tmp, res;

        if (x < 0) {
            x = -x;
            isneg = true;
        }

        t = 2 / (2 + x);
        ty = 4 * t - 2;

        for (; j > 0; j--) {
            tmp = d;
            d = ty * d - dd + cof[j];
            dd = tmp;
        }

        res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);
        return isneg ? res - 1 : 1 - res;
    };

    /*
    * Normal distribution CDF
    *
    * The MIT License, Copyright (c) 2013 jStat
    */
    var dnorm = function(x, mean, std) {
        return 0.5 * (1 + erf((x - mean) / Math.sqrt(2 * std * std)));
    }

    var statistic = function(x, y) {
        var ranked = rank.rank(x, y),
            nr = ranked.length,
            nx = x.length,
            ny = y.length,
            ranksums = {
                x: 0,
                y: 0
            },
            i = 0, t = 0, nt = 1, tcf, ux, uy;

        while (i < nr) {
            if (i > 0) {
                if (ranked[i].val == ranked[i-1].val) {
                    nt++;
                } else {
                    if (nt > 1) {
                        t += Math.pow(nt, 3) - nt
                        nt = 1;
                    }
                }
            }
            ranksums[ranked[i].set] += ranked[i].rank
            i++;
        }
        tcf = 1 - (t / (Math.pow(nr, 3) - nr))
        ux = nx*ny + (nx*(nx+1)/2) - ranksums.x;
        uy = nx*ny - ux;

        return {
            tcf: tcf,
            ux: ux,
            uy: uy,
            big: Math.max(ux, uy),
            small: Math.min(ux, uy)
        }
    }

    exports.test = function(x, y, alt, corr) {
        // set default value for alternative
        alt = typeof alt !== 'undefined' ? alt : 'two-sided';
        // set default value for continuity
        corr = typeof corr !== 'undefined' ? corr : true;
        var nx = x.length, // x's size
            ny = y.length, // y's size
            f = 1,
            u, mu, std, z, p;

        // test statistic
        u = statistic(x, y);

        // mean compute and correct if given
        if (corr) {
            mu = (nx * ny / 2) + 0.5;
        } else {
            mu = nx * ny / 2;
        }

        // compute standard deviation using tie correction factor
        std = Math.sqrt(u.tcf * nx * ny * (nx + ny + 1) / 12);

        // compute z according to given alternative
        if (alt == 'less') {
            z = (u.ux - mu) / std;
        } else if (alt == 'greater') {
            z = (u.uy - mu) / std;
        } else if (alt == 'two-sided') {
            z = Math.abs((u.big - mu) / std);
        } else {
            console.log('Unknown alternative argument');
        }

        // factor to correct two sided p-value
        if (alt == 'two-sided') {
            f = 2;
        }

        // compute p-value using CDF of standard normal
        p = dnorm(-z, 0, 1) * f;

        return {U: u.small, p: p};
    }

})(typeof exports === 'undefined' ? this['mannwhitneyu'] = {} : exports);

'use strict';

// In node, the script-src for mannwhitneyu above brings in mannwhitneyui
// into a module, instead of into the global scope. Whereas this file
// assumes that mannwhitneyu is in the global scope. So, in Node only, we
// require() it in, and then take all its exports and shove them into the
// global scope by hand.
(function(global) {
  if (tr.isNode) {
    const mwuAbsPath = HTMLImportsLoader.hrefToAbsolutePath(
        '/mannwhitneyu.js');
    const mwuModule = require(mwuAbsPath);
    for (const exportName in mwuModule) {
      global[exportName] = mwuModule[exportName];
    }
  }
})(this);


'use strict';

// TODO(charliea): Remove:
/* eslint-disable catapult-camelcase */

tr.exportTo('tr.b.math', function() {
  const Statistics = {};

  /* Returns the quotient, or zero if the denominator is zero.*/
  Statistics.divideIfPossibleOrZero = function(numerator, denominator) {
    if (denominator === 0) return 0;
    return numerator / denominator;
  };

  Statistics.sum = function(ary, opt_func, opt_this) {
    const func = opt_func || (x => x);
    let ret = 0;
    let i = 0;
    for (const elt of ary) {
      ret += func.call(opt_this, elt, i++);
    }
    return ret;
  };

  Statistics.mean = function(ary, opt_func, opt_this) {
    const func = opt_func || (x => x);
    let sum = 0;
    let i = 0;

    for (const elt of ary) {
      sum += func.call(opt_this, elt, i++);
    }

    if (i === 0) return undefined;

    return sum / i;
  };

  Statistics.geometricMean = function(ary, opt_func, opt_this) {
    const func = opt_func || (x => x);
    let i = 0;
    let logsum = 0;

    // The geometric mean is expressed as the arithmetic mean of logarithms
    // in order to prevent overflow.
    for (const elt of ary) {
      const x = func.call(opt_this, elt, i++);
      if (x <= 0) return 0;
      logsum += Math.log(Math.abs(x));
    }

    if (i === 0) return 1;

    return Math.exp(logsum / i);
  };

  // Returns undefined if the sum of the weights is zero.
  Statistics.weightedMean = function(
      ary, weightCallback, opt_valueCallback, opt_this) {
    const valueCallback = opt_valueCallback || (x => x);
    let numerator = 0;
    let denominator = 0;
    let i = -1;

    for (const elt of ary) {
      i++;
      const value = valueCallback.call(opt_this, elt, i);
      if (value === undefined) continue;
      const weight = weightCallback.call(opt_this, elt, i, value);
      numerator += weight * value;
      denominator += weight;
    }

    if (denominator === 0) return undefined;

    return numerator / denominator;
  };

  Statistics.variance = function(ary, opt_func, opt_this) {
    if (ary.length === 0) return undefined;
    if (ary.length === 1) return 0;
    const func = opt_func || (x => x);
    const mean = Statistics.mean(ary, func, opt_this);
    const sumOfSquaredDistances = Statistics.sum(
        ary,
        function(d, i) {
          const v = func.call(this, d, i) - mean;
          return v * v;
        },
        opt_this);
    return sumOfSquaredDistances / (ary.length - 1);
  };

  Statistics.stddev = function(ary, opt_func, opt_this) {
    if (ary.length === 0) return undefined;
    return Math.sqrt(
        Statistics.variance(ary, opt_func, opt_this));
  };

  Statistics.max = function(ary, opt_func, opt_this) {
    const func = opt_func || (x => x);
    let ret = -Infinity;
    let i = 0;
    for (const elt of ary) {
      ret = Math.max(ret, func.call(opt_this, elt, i++));
    }
    return ret;
  };

  Statistics.min = function(ary, opt_func, opt_this) {
    const func = opt_func || (x => x);
    let ret = Infinity;
    let i = 0;
    for (const elt of ary) {
      ret = Math.min(ret, func.call(opt_this, elt, i++));
    }
    return ret;
  };

  Statistics.range = function(ary, opt_func, opt_this) {
    const func = opt_func || (x => x);
    const ret = new tr.b.math.Range();
    let i = 0;
    for (const elt of ary) {
      ret.addValue(func.call(opt_this, elt, i++));
    }
    return ret;
  };

  Statistics.percentile = function(ary, percent, opt_func, opt_this) {
    if (!(percent >= 0 && percent <= 1)) {
      throw new Error('percent must be [0,1]');
    }

    const func = opt_func || (x => x);
    const tmp = new Array(ary.length);
    let i = 0;
    for (const elt of ary) {
      tmp[i] = func.call(opt_this, elt, i++);
    }
    tmp.sort((a, b) => a - b);
    const idx = Math.floor((ary.length - 1) * percent);
    return tmp[idx];
  };

  /**
   * Sorts the samples, and map them linearly to the range [0,1].
   *
   * They're mapped such that for the N samples, the first sample is 0.5/N and
   * the last sample is (N-0.5)/N.
   *
   * Background: The discrepancy of the sample set i/(N-1); i=0, ..., N-1 is
   * 2/N, twice the discrepancy of the sample set (i+1/2)/N; i=0, ..., N-1. In
   * our case we don't want to distinguish between these two cases, as our
   * original domain is not bounded (it is for Monte Carlo integration, where
   * discrepancy was first used).
   **/
  Statistics.normalizeSamples = function(samples) {
    if (samples.length === 0) {
      return {
        normalized_samples: samples,
        scale: 1.0
      };
    }
    // Create a copy to make sure that we don't mutate original |samples| input.
    samples = samples.slice().sort(
        function(a, b) {
          return a - b;
        }
    );
    const low = Math.min.apply(null, samples);
    const high = Math.max.apply(null, samples);
    const newLow = 0.5 / samples.length;
    const newHigh = (samples.length - 0.5) / samples.length;
    if (high - low === 0.0) {
      // Samples is an array of 0.5 in this case.
      samples = Array.apply(null, new Array(samples.length)).map(
          function() { return 0.5;});
      return {
        normalized_samples: samples,
        scale: 1.0
      };
    }
    const scale = (newHigh - newLow) / (high - low);
    for (let i = 0; i < samples.length; i++) {
      samples[i] = (samples[i] - low) * scale + newLow;
    }
    return {
      normalized_samples: samples,
      scale
    };
  };

  /**
   * Computes the discrepancy of a set of 1D samples from the interval [0,1].
   *
   * The samples must be sorted. We define the discrepancy of an empty set
   * of samples to be zero.
   *
   * http://en.wikipedia.org/wiki/Low-discrepancy_sequence
   * http://mathworld.wolfram.com/Discrepancy.html
   */
  Statistics.discrepancy = function(samples, opt_locationCount) {
    if (samples.length === 0) return 0.0;

    let maxLocalDiscrepancy = 0;
    const invSampleCount = 1.0 / samples.length;
    const locations = [];
    // For each location, stores the number of samples less than that location.
    const countLess = [];
    // For each location, stores the number of samples less than or equal to
    // that location.
    const countLessEqual = [];

    if (opt_locationCount !== undefined) {
      // Generate list of equally spaced locations.
      let sampleIndex = 0;
      for (let i = 0; i < opt_locationCount; i++) {
        const location = i / (opt_locationCount - 1);
        locations.push(location);
        while (sampleIndex < samples.length &&
          samples[sampleIndex] < location) {
          sampleIndex += 1;
        }
        countLess.push(sampleIndex);
        while (sampleIndex < samples.length &&
            samples[sampleIndex] <= location) {
          sampleIndex += 1;
        }
        countLessEqual.push(sampleIndex);
      }
    } else {
      // Populate locations with sample positions. Append 0 and 1 if necessary.
      if (samples[0] > 0.0) {
        locations.push(0.0);
        countLess.push(0);
        countLessEqual.push(0);
      }
      for (let i = 0; i < samples.length; i++) {
        locations.push(samples[i]);
        countLess.push(i);
        countLessEqual.push(i + 1);
      }
      if (samples[-1] < 1.0) {
        locations.push(1.0);
        countLess.push(samples.length);
        countLessEqual.push(samples.length);
      }
    }

    // Compute discrepancy as max(overshoot, -undershoot), where
    // overshoot = max(countClosed(i, j)/N - length(i, j)) for all i < j,
    // undershoot = min(countOpen(i, j)/N - length(i, j)) for all i < j,
    // N = len(samples),
    // countClosed(i, j) is the number of points between i and j
    // including ends,
    // countOpen(i, j) is the number of points between i and j excluding ends,
    // length(i, j) is locations[i] - locations[j].

    // The following algorithm is modification of Kadane's algorithm,
    // see https://en.wikipedia.org/wiki/Maximum_subarray_problem.

    // The maximum of (countClosed(k, i-1)/N - length(k, i-1)) for any k < i-1.
    let maxDiff = 0;
    // The minimum of (countOpen(k, i-1)/N - length(k, i-1)) for any k < i-1.
    let minDiff = 0;
    for (let i = 1; i < locations.length; i++) {
      const length = locations[i] - locations[i - 1];
      const countClosed = countLessEqual[i] - countLess[i - 1];
      const countOpen = countLess[i] - countLessEqual[i - 1];
      // Number of points that are added if we extend a closed range that
      // ends at location (i-1).
      const countClosedIncrement =
          countLessEqual[i] - countLessEqual[i - 1];
      // Number of points that are added if we extend an open range that
      // ends at location (i-1).
      const countOpenIncrement = countLess[i] - countLess[i - 1];

      // Either extend the previous optimal range or start a new one.
      maxDiff = Math.max(
          countClosedIncrement * invSampleCount - length + maxDiff,
          countClosed * invSampleCount - length);
      minDiff = Math.min(
          countOpenIncrement * invSampleCount - length + minDiff,
          countOpen * invSampleCount - length);

      maxLocalDiscrepancy = Math.max(
          maxDiff, -minDiff, maxLocalDiscrepancy);
    }
    return maxLocalDiscrepancy;
  };

  /**
   * A discrepancy based metric for measuring timestamp jank.
   *
   * timestampsDiscrepancy quantifies the largest area of jank observed in a
   * series of timestamps.  Note that this is different from metrics based on
   * the max_time_interval. For example, the time stamp series A = [0,1,2,3,5,6]
   *  and B = [0,1,2,3,5,7] have the same max_time_interval = 2, but
   * Discrepancy(B) > Discrepancy(A).
   *
   * Two variants of discrepancy can be computed:
   *
   * Relative discrepancy is following the original definition of
   * discrepancy. It characterized the largest area of jank, relative to the
   * duration of the entire time stamp series.  We normalize the raw results,
   * because the best case discrepancy for a set of N samples is 1/N (for
   * equally spaced samples), and we want our metric to report 0.0 in that
   * case.
   *
   * Absolute discrepancy also characterizes the largest area of jank, but its
   * value wouldn't change (except for imprecisions due to a low
   * |interval_multiplier|) if additional 'good' intervals were added to an
   * exisiting list of time stamps.  Its range is [0,inf] and the unit is
   * milliseconds.
   *
   * The time stamp series C = [0,2,3,4] and D = [0,2,3,4,5] have the same
   * absolute discrepancy, but D has lower relative discrepancy than C.
   *
   * |timestamps| may be a list of lists S = [S_1, S_2, ..., S_N], where each
   * S_i is a time stamp series. In that case, the discrepancy D(S) is:
   * D(S) = max(D(S_1), D(S_2), ..., D(S_N))
   **/
  Statistics.timestampsDiscrepancy = function(timestamps, opt_absolute,
      opt_locationCount) {
    if (timestamps.length === 0) return 0.0;

    if (opt_absolute === undefined) opt_absolute = true;

    if (Array.isArray(timestamps[0])) {
      const rangeDiscrepancies = timestamps.map(function(r) {
        return Statistics.timestampsDiscrepancy(r);
      });
      return Math.max.apply(null, rangeDiscrepancies);
    }

    const s = Statistics.normalizeSamples(timestamps);
    const samples = s.normalized_samples;
    const sampleScale = s.scale;
    let discrepancy = Statistics.discrepancy(samples, opt_locationCount);
    const invSampleCount = 1.0 / samples.length;
    if (opt_absolute === true) {
      // Compute absolute discrepancy
      discrepancy /= sampleScale;
    } else {
      // Compute relative discrepancy
      discrepancy = tr.b.math.clamp(
          (discrepancy - invSampleCount) / (1.0 - invSampleCount), 0.0, 1.0);
    }
    return discrepancy;
  };

  /**
   * A discrepancy based metric for measuring duration jank.
   *
   * DurationsDiscrepancy computes a jank metric which measures how irregular a
   * given sequence of intervals is. In order to minimize jank, each duration
   * should be equally long. This is similar to how timestamp jank works,
   * and we therefore reuse the timestamp discrepancy function above to compute
   * a similar duration discrepancy number.
   *
   * Because timestamp discrepancy is defined in terms of timestamps, we first
   * convert the list of durations to monotonically increasing timestamps.
   *
   * Args:
   *  durations: List of interval lengths in milliseconds.
   *  absolute: See TimestampsDiscrepancy.
   *  opt_locationCount: See TimestampsDiscrepancy.
   **/
  Statistics.durationsDiscrepancy = function(
      durations, opt_absolute, opt_locationCount) {
    if (durations.length === 0) return 0.0;

    const timestamps = durations.reduce(function(prev, curr, index, array) {
      prev.push(prev[prev.length - 1] + curr);
      return prev;
    }, [0]);
    return Statistics.timestampsDiscrepancy(
        timestamps, opt_absolute, opt_locationCount);
  };

  /**
   * Modifies |samples| in-place to reduce its length down to |count|.
   *
   * @param {!Array} samples
   * @param {number} count
   * @return {!Array}
   */
  Statistics.uniformlySampleArray = function(samples, count) {
    if (samples.length <= count) {
      return samples;
    }
    while (samples.length > count) {
      const i = parseInt(Math.random() * samples.length);
      samples.splice(i, 1);
    }
    return samples;
  };

  /**
   * A mechanism to uniformly sample elements from an arbitrary long stream.
   *
   * Call this method every time a new element is obtained from the stream,
   * passing always the same |samples| array and the |numSamples| you desire.
   * Also pass in the current |streamLength|, which is the same as the index of
   * |newElement| within that stream.
   *
   * The |samples| array will possibly be updated, replacing one of its element
   * with |newElements|. The length of |samples| will not be more than
   * |numSamples|.
   *
   * This method guarantees that after |streamLength| elements have been
   * processed each one has equal probability of being in |samples|. The order
   * of samples is not preserved though.
   *
   * Args:
   *  samples: Array of elements that have already been selected. Start with [].
   *  streamLength: The current length of the stream, up to |newElement|.
   *  newElement: The element that was just extracted from the stream.
   *  numSamples: The total number of samples desired.
   **/
  Statistics.uniformlySampleStream = function(samples, streamLength, newElement,
      numSamples) {
    if (streamLength <= numSamples) {
      if (samples.length >= streamLength) {
        samples[streamLength - 1] = newElement;
      } else {
        samples.push(newElement);
      }
      return;
    }

    const probToKeep = numSamples / streamLength;
    if (Math.random() > probToKeep) return;  // New sample was rejected.

    // Keeping it, replace an alement randomly.
    const index = Math.floor(Math.random() * numSamples);
    samples[index] = newElement;
  };

  /**
   * A mechanism to merge two arrays of uniformly sampled elements in a way that
   * ensures elements in the final array are still sampled uniformly.
   *
   * This works similarly to sampleStreamUniform. The |samplesA| array will be
   * updated, some of its elements replaced by elements from |samplesB| in a
   * way that ensure that elements will be sampled uniformly.
   *
   * Args:
   *  samplesA: Array of uniformly sampled elements, will be updated.
   *  streamLengthA: The length of the stream from which |samplesA| was sampled.
   *  samplesB: Other array of uniformly sampled elements, will NOT be updated.
   *  streamLengthB: The length of the stream from which |samplesB| was sampled.
   *  numSamples: The total number of samples desired, both in |samplesA| and
   *      |samplesB|.
   **/
  Statistics.mergeSampledStreams = function(
      samplesA, streamLengthA,
      samplesB, streamLengthB, numSamples) {
    if (streamLengthB < numSamples) {
      // samplesB has not reached max capacity so every sample of stream B were
      // chosen with certainty. Add them one by one into samplesA.
      const nbElements = Math.min(streamLengthB, samplesB.length);
      for (let i = 0; i < nbElements; ++i) {
        Statistics.uniformlySampleStream(samplesA, streamLengthA + i + 1,
            samplesB[i], numSamples);
      }
      return;
    }
    if (streamLengthA < numSamples) {
      // samplesA has not reached max capacity so every sample of stream A were
      // chosen with certainty. Add them one by one into samplesB.
      const nbElements = Math.min(streamLengthA, samplesA.length);
      const tempSamples = samplesB.slice();
      for (let i = 0; i < nbElements; ++i) {
        Statistics.uniformlySampleStream(tempSamples, streamLengthB + i + 1,
            samplesA[i], numSamples);
      }
      // Copy that back into the first vector.
      for (let i = 0; i < tempSamples.length; ++i) {
        samplesA[i] = tempSamples[i];
      }
      return;
    }

    // Both sample arrays are at max capacity, use the power of maths!
    // Elements in samplesA have been selected with probability
    // numSamples / streamLengthA. Same for samplesB. For each index of the
    // array we keep samplesA[i] with probability
    //   P = streamLengthA / (streamLengthA + streamLengthB)
    // and replace it with samplesB[i] with probability 1-P.
    // The total probability of keeping it is therefore
    //   numSamples / streamLengthA *
    //                      streamLengthA / (streamLengthA + streamLengthB)
    //   = numSamples / (streamLengthA + streamLengthB)
    // A similar computation shows we have the same probability of keeping any
    // element in samplesB. Magic!
    const nbElements = Math.min(numSamples, samplesB.length);
    const probOfSwapping = streamLengthB / (streamLengthA + streamLengthB);
    for (let i = 0; i < nbElements; ++i) {
      if (Math.random() < probOfSwapping) {
        samplesA[i] = samplesB[i];
      }
    }
  };

  /* Continuous distributions are defined by probability density functions.
   *
   * Random variables are referred to by capital letters: X, Y, Z.
   * Particular values from these distributions are referred to by lowercase
   * letters like |x|.
   * The probability that |X| ever exactly equals |x| is P(X==x) = 0.
   *
   * For a discrete probability distribution, see tr.v.Histogram.
   */
  function Distribution() {
  }

  Distribution.prototype = {
    /* The probability density of the random variable at value |x| is the
     * relative likelihood for this random variable to take on the given value
     * |x|.
     *
     * @param {number} x A value from the random distribution.
     * @return {number} probability density at x.
     */
    computeDensity(x) {
      throw Error('Not implemented');
    },

    /* A percentile is the probability that a sample from the distribution is
     * less than the given value |x|. This function is monotonically increasing.
     *
     * @param {number} x A value from the random distribution.
     * @return {number} P(X<x).
     */
    computePercentile(x) {
      throw Error('Not implemented');
    },

    /* A complementary percentile is the probability that a sample from the
     * distribution is greater than the given value |x|. This function is
     * monotonically decreasing.
     *
     * @param {number} x A value from the random distribution.
     * @return {number} P(X>x).
     */
    computeComplementaryPercentile(x) {
      return 1 - this.computePercentile(x);
    },

    /* Compute the mean of the probability distribution.
     *
     * @return {number} mean.
     */
    get mean() {
      throw Error('Not implemented');
    },

    /* The mode of a distribution is the most likely value.
     * The maximum of the computeDensity() function is at this mode.
     * @return {number} mode.
     */
    get mode() {
      throw Error('Not implemented');
    },

    /* The median is the center value of the distribution.
     * computePercentile(median) = computeComplementaryPercentile(median) = 0.5
     *
     * @return {number} median.
     */
    get median() {
      throw Error('Not implemented');
    },

    /* The standard deviation is a measure of how dispersed or spread out the
     * distribution is (this statistic has the same units as the values).
     *
     * @return {number} standard deviation.
     */
    get standardDeviation() {
      throw Error('Not implemented');
    },

    /* An alternative measure of how spread out the distribution is,
     * the variance is the square of the standard deviation.
     * @return {number} variance.
     */
    get variance() {
      throw Error('Not implemented');
    }
  };

  Statistics.UniformDistribution = function(opt_range) {
    if (!opt_range) opt_range = tr.b.math.Range.fromExplicitRange(0, 1);
    this.range = opt_range;
  };

  Statistics.UniformDistribution.prototype = {
    __proto__: Distribution.prototype,

    computeDensity(x) {
      return 1 / this.range.range;
    },

    computePercentile(x) {
      return tr.b.math.normalize(x, this.range.min, this.range.max);
    },

    get mean() {
      return this.range.center;
    },

    get mode() {
      return undefined;
    },

    get median() {
      return this.mean;
    },

    get standardDeviation() {
      return Math.sqrt(this.variance);
    },

    get variance() {
      return Math.pow(this.range.range, 2) / 12;
    }
  };

  /* The Normal or Gaussian distribution, or bell curve, is common in complex
   * processes such as are found in many of the natural sciences.  If Z is the
   * standard normal distribution with mean = 0 and variance = 1, then the
   * general normal distribution is Y = mean + Z*sqrt(variance).
   * https://www.desmos.com/calculator/tqtbjm4s3z
   */
  Statistics.NormalDistribution = function(opt_mean, opt_variance) {
    this.mean_ = opt_mean || 0;
    this.variance_ = opt_variance || 1;
    this.standardDeviation_ = Math.sqrt(this.variance_);
  };

  Statistics.NormalDistribution.prototype = {
    __proto__: Distribution.prototype,

    computeDensity(x) {
      const scale = (1.0 / (this.standardDeviation * Math.sqrt(2.0 * Math.PI)));
      const exponent = -Math.pow(x - this.mean, 2) / (2.0 * this.variance);
      return scale * Math.exp(exponent);
    },

    computePercentile(x) {
      const standardizedX = ((x - this.mean) /
                           Math.sqrt(2.0 * this.variance));
      return (1.0 + tr.b.math.erf(standardizedX)) / 2.0;
    },

    get mean() {
      return this.mean_;
    },

    get median() {
      return this.mean;
    },

    get mode() {
      return this.mean;
    },

    get standardDeviation() {
      return this.standardDeviation_;
    },

    get variance() {
      return this.variance_;
    }
  };

  /* The log-normal distribution is a continuous probability distribution of a
   * random variable whose logarithm is normally distributed.
   * If Y is the general normal distribution, then X = exp(Y) is the general
   * log-normal distribution.
   * X will have different parameters from Y,
   * so the mean of Y is called the "location" of X,
   * and the standard deviation of Y is called the "shape" of X.
   * The standard lognormal distribution exp(Z) has location = 0 and shape = 1.
   * https://www.desmos.com/calculator/tqtbjm4s3z
   */
  Statistics.LogNormalDistribution = function(opt_location, opt_shape) {
    this.normalDistribution_ = new Statistics.NormalDistribution(
        opt_location, Math.pow(opt_shape || 1, 2));
  };

  Statistics.LogNormalDistribution.prototype = {
    __proto__: Statistics.NormalDistribution.prototype,

    computeDensity(x) {
      return this.normalDistribution_.computeDensity(Math.log(x)) / x;
    },

    computePercentile(x) {
      return this.normalDistribution_.computePercentile(Math.log(x));
    },

    get mean() {
      return Math.exp(this.normalDistribution_.mean +
          (this.normalDistribution_.variance / 2));
    },

    get variance() {
      const nm = this.normalDistribution_.mean;
      const nv = this.normalDistribution_.variance;
      return (Math.exp(2 * (nm + nv)) -
              Math.exp(2 * nm + nv));
    },

    get standardDeviation() {
      return Math.sqrt(this.variance);
    },

    get median() {
      return Math.exp(this.normalDistribution_.mean);
    },

    get mode() {
      return Math.exp(this.normalDistribution_.mean -
                      this.normalDistribution_.variance);
    }
  };

  /**
   * Instead of describing a LogNormalDistribution in terms of its "location"
   * and "shape", it can also be described in terms of its median
   * and the point at which its complementary cumulative distribution
   * function bends between the linear-ish region in the middle and the
   * exponential-ish region. When the distribution is used to compute
   * percentiles for log-normal random processes such as latency, as the latency
   * improves, it hits a point of diminishing returns, when it becomes
   * relatively difficult to improve the score further. This point of
   * diminishing returns is the first x-intercept of the third derivative of the
   * CDF, which is the second derivative of the PDF.
   *
   * https://www.desmos.com/calculator/cg5rnftabn
   *
   * @param {number} median The median of the distribution.
   * @param {number} diminishingReturns The point of diminishing returns.
   * @return {LogNormalDistribution}
   */
  Statistics.LogNormalDistribution.fromMedianAndDiminishingReturns =
    function(median, diminishingReturns) {
      diminishingReturns = Math.log(diminishingReturns / median);
      const shape = Math.sqrt(1 - 3 * diminishingReturns -
          Math.sqrt(Math.pow(diminishingReturns - 3, 2) - 8)) / 2;
      const location = Math.log(median);
      return new Statistics.LogNormalDistribution(location, shape);
    };

  // p-values less than this indicate statistical significance.
  Statistics.DEFAULT_ALPHA = 0.01;

  // If a statistical significant difference has not been established with
  // this many observations per sample, we'll assume none exists.
  Statistics.MAX_SUGGESTED_SAMPLE_SIZE = 20;

  /** @enum */
  Statistics.Significance = {
    SIGNIFICANT: 'REJECT',
    INSIGNIFICANT: 'FAIL_TO_REJECT',
    NEED_MORE_DATA: 'NEED_MORE_DATA',
    DONT_CARE: 'DONT_CARE',
  };


  class HypothesisTestResult {
    constructor(p, u, needMoreData, opt_alpha) {
      this.p_ = p;
      this.u_ = u;
      this.needMoreData_ = needMoreData;
      this.compare(opt_alpha);
    }

    /**
     * The probability under the null hypothesis (i.e. the two samples are
     * indistinguishable) of obtaining a result more extreme than observed.
     * @return number in (0,1)
     */
    get p() {
      return this.p_;
    }

    /**
     * The U statistic from MWU.
     * @return number
     */
    get U() {
      return this.u_;
    }

    /**
     * @return {!tr.b.math.Statistics.Significance}
     */
    get significance() {
      return this.significance_;
    }

    /**
     * Recompute |significance| with the same p-value but a new alpha threshold.
     * Faster than recomputing MWU.
     *
     * @param {number=}
     * @return {!tr.b.math.Statistics.Significance}
     */
    compare(opt_alpha) {
      const alpha = opt_alpha || Statistics.DEFAULT_ALPHA;
      if (this.p < alpha) {
        this.significance_ = Statistics.Significance.SIGNIFICANT;
      } else if (this.needMoreData_) {
        this.significance_ = Statistics.Significance.NEED_MORE_DATA;
      } else {
        this.significance_ = Statistics.Significance.INSIGNIFICANT;
      }
      return this.significance_;
    }

    asDict() {
      return {
        p: this.p,
        U: this.U,
        significance: this.significance,
      };
    }
  }

  /**
   * @param {!Array.<number>} a
   * @param {!Array.<number>} b
   * @param {number=} opt_alpha
   * @param {number=} opt_reqSampleSize
   * @return {!HypothesisTestResult}
   */
  Statistics.mwu = function(a, b, opt_alpha, opt_reqSampleSize) {
    const result = mannwhitneyu.test(a, b);
    const needMoreData = opt_reqSampleSize &&
      Math.min(a.length, b.length) < opt_reqSampleSize;
    return new HypothesisTestResult(
        result.p, result.U, needMoreData, opt_alpha);
  };

  return {
    Statistics,
  };
});


'use strict';

/**
 * @fileoverview Class describing rendered frames.
 *
 * Because a frame is produced by multiple threads, it does not inherit from
 * TimedEvent, and has no duration.
 */
tr.exportTo('tr.model', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Statistics = tr.b.math.Statistics;

  const FRAME_PERF_CLASS = {
    GOOD: 'good',
    BAD: 'bad',
    TERRIBLE: 'terrible',
    NEUTRAL: 'generic_work'
  };

  /**
   * @constructor
   * @param {Array} associatedEvents Selection of events composing the frame.
   * @param {Array} threadTimeRanges Array of {thread, start, end}
   * for each thread, describing the critical path of the frame.
   */
  function Frame(associatedEvents, threadTimeRanges, opt_args) {
    tr.model.Event.call(this);

    this.threadTimeRanges = threadTimeRanges;
    this.associatedEvents = new tr.model.EventSet(associatedEvents);
    this.args = opt_args || {};

    this.title = 'Frame';
    this.start = Statistics.min(
        threadTimeRanges, function(x) { return x.start; });
    this.end = Statistics.max(
        threadTimeRanges, function(x) { return x.end; });
    this.totalDuration = Statistics.sum(
        threadTimeRanges, function(x) { return x.end - x.start; });

    this.perfClass = FRAME_PERF_CLASS.NEUTRAL;
  }

  Frame.prototype = {
    __proto__: tr.model.Event.prototype,

    set perfClass(perfClass) {
      this.colorId = ColorScheme.getColorIdForReservedName(perfClass);
      this.perfClass_ = perfClass;
    },

    get perfClass() {
      return this.perfClass_;
    },

    shiftTimestampsForward(amount) {
      this.start += amount;
      this.end += amount;

      for (let i = 0; i < this.threadTimeRanges.length; i++) {
        this.threadTimeRanges[i].start += amount;
        this.threadTimeRanges[i].end += amount;
      }
    },

    addBoundsToRange(range) {
      range.addValue(this.start);
      range.addValue(this.end);
    }
  };

  tr.model.EventRegistry.register(
      Frame,
      {
        name: 'frame',
        pluralName: 'frames'
      });

  return {
    Frame,
    FRAME_PERF_CLASS,
  };
});


'use strict';

/**
 * @fileoverview Provides the Process class.
 */
tr.exportTo('tr.model', function() {
  const Cpu = tr.model.Cpu;
  const ProcessBase = tr.model.ProcessBase;

  /**
   * The Kernel represents kernel-level objects in the model.
   * @constructor
   */
  function Kernel(model) {
    ProcessBase.call(this, model);

    this.cpus = {};
    this.softwareMeasuredCpuCount_ = undefined;
  }

  /**
   * Comparison between kernels is pretty meaningless.
   */
  Kernel.compare = function(x, y) {
    return 0;
  };

  Kernel.prototype = {
    __proto__: ProcessBase.prototype,

    compareTo(that) {
      return Kernel.compare(this, that);
    },

    get userFriendlyName() {
      return 'Kernel';
    },

    get userFriendlyDetails() {
      return 'Kernel';
    },

    get stableId() {
      return 'Kernel';
    },

    /**
     * @return {Cpu} Gets a specific Cpu or creates one if
     * it does not exist.
     */
    getOrCreateCpu(cpuNumber) {
      if (!this.cpus[cpuNumber]) {
        this.cpus[cpuNumber] = new Cpu(this, cpuNumber);
      }
      return this.cpus[cpuNumber];
    },

    get softwareMeasuredCpuCount() {
      return this.softwareMeasuredCpuCount_;
    },

    set softwareMeasuredCpuCount(softwareMeasuredCpuCount) {
      if (this.softwareMeasuredCpuCount_ !== undefined &&
          this.softwareMeasuredCpuCount_ !== softwareMeasuredCpuCount) {
        throw new Error(
            'Cannot change the softwareMeasuredCpuCount once it is set');
      }

      this.softwareMeasuredCpuCount_ = softwareMeasuredCpuCount;
    },

    /**
     * Estimates how many cpus are in the system, for use in system load
     * estimation.
     *
     * If kernel trace was provided, uses that data. Otherwise, uses the
     * software measured cpu count.
     */
    get bestGuessAtCpuCount() {
      const realCpuCount = Object.keys(this.cpus).length;
      if (realCpuCount !== 0) {
        return realCpuCount;
      }
      return this.softwareMeasuredCpuCount;
    },

    updateBounds() {
      ProcessBase.prototype.updateBounds.call(this);
      for (const cpuNumber in this.cpus) {
        const cpu = this.cpus[cpuNumber];
        cpu.updateBounds();
        this.bounds.addRange(cpu.bounds);
      }
    },

    createSubSlices() {
      ProcessBase.prototype.createSubSlices.call(this);
      for (const cpuNumber in this.cpus) {
        const cpu = this.cpus[cpuNumber];
        cpu.createSubSlices();
      }
    },

    addCategoriesToDict(categoriesDict) {
      ProcessBase.prototype.addCategoriesToDict.call(this, categoriesDict);
      for (const cpuNumber in this.cpus) {
        this.cpus[cpuNumber].addCategoriesToDict(categoriesDict);
      }
    },

    getSettingsKey() {
      return 'kernel';
    },

    * childEventContainers() {
      yield* ProcessBase.prototype.childEventContainers.call(this);
      yield* Object.values(this.cpus);
    },
  };

  return {
    Kernel,
  };
});


'use strict';

/**
 * @fileoverview Provides the Event Index class.
 */
tr.exportTo('tr.model', function() {
  /**
   * A Event Index maps an id to all the events that have that particular id
   *
   * @constructor
   */
  function ModelIndices(model) {
    // For now the only indices we construct are for flowEvents
    this.flowEventsById_ = {};
    model.flowEvents.forEach(function(fe) {
      if (fe.id !== undefined) {
        if (!this.flowEventsById_.hasOwnProperty(fe.id)) {
          this.flowEventsById_[fe.id] = [];
        }
        this.flowEventsById_[fe.id].push(fe);
      }
    }, this);
  }

  ModelIndices.prototype = {
    addEventWithId(id, event) {
      if (!this.flowEventsById_.hasOwnProperty(id)) {
        this.flowEventsById_[id] = [];
      }
      this.flowEventsById_[id].push(event);
    },

    getFlowEventsWithId(id) {
      if (!this.flowEventsById_.hasOwnProperty(id)) {
        return [];
      }
      return this.flowEventsById_[id];
    }
  };

  return {
    ModelIndices,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * @constructor
   */
  function ModelStats() {
    this.traceEventCountsByKey_ = new Map();
    this.allTraceEventStats_ = [];

    this.traceEventStatsInTimeIntervals_ = new Map();
    this.allTraceEventStatsInTimeIntervals_ = [];

    this.hasEventSizesinBytes_ = false;

    this.traceImportDurationMs_ = undefined;
  }

  ModelStats.prototype = {
    TIME_INTERVAL_SIZE_IN_MS: 100,

    willProcessBasicTraceEvent(phase, category, title, ts,
        opt_eventSizeinBytes) {
      const key = phase + '/' + category + '/' + title;
      let eventStats = this.traceEventCountsByKey_.get(key);
      if (eventStats === undefined) {
        eventStats = {
          phase,
          category,
          title,
          numEvents: 0,
          totalEventSizeinBytes: 0
        };
        this.traceEventCountsByKey_.set(key, eventStats);
        this.allTraceEventStats_.push(eventStats);
      }
      eventStats.numEvents++;

      const timeIntervalKey = Math.floor(
          tr.b.Unit.timestampFromUs(ts) / this.TIME_INTERVAL_SIZE_IN_MS);
      let eventStatsByTimeInverval =
          this.traceEventStatsInTimeIntervals_.get(timeIntervalKey);
      if (eventStatsByTimeInverval === undefined) {
        eventStatsByTimeInverval = {
          timeInterval: timeIntervalKey,
          numEvents: 0,
          totalEventSizeinBytes: 0
        };
        this.traceEventStatsInTimeIntervals_.set(timeIntervalKey,
            eventStatsByTimeInverval);
        this.allTraceEventStatsInTimeIntervals_.push(eventStatsByTimeInverval);
      }
      eventStatsByTimeInverval.numEvents++;

      if (opt_eventSizeinBytes !== undefined) {
        this.hasEventSizesinBytes_ = true;
        eventStats.totalEventSizeinBytes += opt_eventSizeinBytes;
        eventStatsByTimeInverval.totalEventSizeinBytes += opt_eventSizeinBytes;
      }
    },

    get allTraceEventStats() {
      return this.allTraceEventStats_;
    },

    get allTraceEventStatsInTimeIntervals() {
      return this.allTraceEventStatsInTimeIntervals_;
    },

    get hasEventSizesinBytes() {
      return this.hasEventSizesinBytes_;
    },

    get traceImportDurationMs() {
      return this.traceImportDurationMs_;
    },

    set traceImportDurationMs(traceImportDurationMs) {
      this.traceImportDurationMs_ = traceImportDurationMs;
    }
  };

  return {
    ModelStats,
  };
});


'use strict';

/**
 * @fileoverview Provides classes for representing and classifying VM regions.
 *
 * See https://goo.gl/5SSPv0 for more details.
 */
tr.exportTo('tr.model', function() {
  /**
   * A single virtual memory region (also called a memory map).
   *
   * @constructor
   */
  function VMRegion(startAddress, sizeInBytes, protectionFlags,
      mappedFile, byteStats) {
    this.startAddress = startAddress;
    this.sizeInBytes = sizeInBytes;
    this.protectionFlags = protectionFlags;
    this.mappedFile = mappedFile || '';
    this.byteStats = byteStats || {};
  }

  VMRegion.PROTECTION_FLAG_READ = 4;
  VMRegion.PROTECTION_FLAG_WRITE = 2;
  VMRegion.PROTECTION_FLAG_EXECUTE = 1;
  VMRegion.PROTECTION_FLAG_MAYSHARE = 128;

  VMRegion.prototype = {
    get uniqueIdWithinProcess() {
      // This value is assumed to be unique within a process.
      return this.mappedFile + '#' + this.startAddress;
    },

    get protectionFlagsToString() {
      if (this.protectionFlags === undefined) return undefined;
      return (
          (this.protectionFlags & VMRegion.PROTECTION_FLAG_READ ? 'r' : '-') +
          (this.protectionFlags & VMRegion.PROTECTION_FLAG_WRITE ? 'w' : '-') +
          (this.protectionFlags & VMRegion.PROTECTION_FLAG_EXECUTE ?
              'x' : '-') +
          (this.protectionFlags & VMRegion.PROTECTION_FLAG_MAYSHARE ? 's' : 'p')
      );
    }
  };

  VMRegion.fromDict = function(dict) {
    return new VMRegion(
        dict.startAddress,
        dict.sizeInBytes,
        dict.protectionFlags,
        dict.mappedFile,
        dict.byteStats);
  };

  /**
   * Node in a VM region classification tree.
   *
   * Note: Most users of this class should use the
   * VMRegionClassificationNode.fromRegions static method instead of this
   * constructor because it leads to better performance due to fewer memory
   * allocations.
   *
   * @constructor
   */
  function VMRegionClassificationNode(opt_rule) {
    this.rule_ = opt_rule || VMRegionClassificationNode.CLASSIFICATION_RULES;

    // True iff this node or any of its descendant classification nodes has at
    // least one classified VM region.
    this.hasRegions = false;

    // Total virtual size and byte stats of all regions matching this node's
    // rule (including its sub-rules).
    this.sizeInBytes = undefined;
    this.byteStats = {};

    // Array of child classification nodes if this is an intermediate node.
    this.children_ = undefined;

    // Array of VM regions. If this is an intermediate node, then the regions
    // are cached for lazy tree construction (i.e. its child classification
    // nodes yet have to be built).
    this.regions_ = [];
  }

  /**
   * Rules for classifying memory maps.
   *
   * These rules are derived from core/jni/android_os_Debug.cpp in Android.
   */
  VMRegionClassificationNode.CLASSIFICATION_RULES = {
    name: 'Total',
    children: [
      {
        name: 'Android',
        file: /^\/dev\/ashmem(?!\/libc malloc)/,
        children: [
          {
            name: 'Java runtime',
            file: /^\/dev\/ashmem\/dalvik-/,
            children: [
              {
                name: 'Spaces',
                file: /\/dalvik-(alloc|main|large object|non moving|zygote) space/,  // @suppress longLineCheck
                children: [
                  {
                    name: 'Normal',
                    file: /\/dalvik-(alloc|main)/
                  },
                  {
                    name: 'Large',
                    file: /\/dalvik-large object/
                  },
                  {
                    name: 'Zygote',
                    file: /\/dalvik-zygote/
                  },
                  {
                    name: 'Non-moving',
                    file: /\/dalvik-non moving/
                  }
                ]
              },
              {
                name: 'Linear Alloc',
                file: /\/dalvik-LinearAlloc/
              },
              {
                name: 'Indirect Reference Table',
                file: /\/dalvik-indirect.ref/
              },
              {
                name: 'Cache',
                file: /\/dalvik-jit-code-cache/
              },
              {
                name: 'Accounting'
              }
            ]
          },
          {
            name: 'Cursor',
            file: /\/CursorWindow/
          },
          {
            name: 'Ashmem'
          }
        ]
      },
      {
        name: 'Native heap',
        file: /^((\[heap\])|(\[anon:)|(\/dev\/ashmem\/libc malloc)|(\[discounted tracing overhead\])|$)/  // @suppress longLineCheck
      },
      {
        name: 'Stack',
        file: /^\[stack/
      },
      {
        name: 'Files',
        file: /\.((((jar)|(apk)|(ttf)|(odex)|(oat)|(art))$)|(dex)|(so))/,
        children: [
          {
            name: 'so',
            file: /\.so/
          },
          {
            name: 'jar',
            file: /\.jar$/
          },
          {
            name: 'apk',
            file: /\.apk$/
          },
          {
            name: 'ttf',
            file: /\.ttf$/
          },
          {
            name: 'dex',
            file: /\.((dex)|(odex$))/
          },
          {
            name: 'oat',
            file: /\.oat$/
          },
          {
            name: 'art',
            file: /\.art$/
          }
        ]
      },
      {
        name: 'Devices',
        file: /(^\/dev\/)|(anon_inode:dmabuf)/,
        children: [
          {
            name: 'GPU',
            file: /\/((nv)|(mali)|(kgsl))/
          },
          {
            name: 'DMA',
            file: /anon_inode:dmabuf/
          }
        ]
      }
    ]
  };
  VMRegionClassificationNode.OTHER_RULE = { name: 'Other' };

  VMRegionClassificationNode.fromRegions = function(regions, opt_rules) {
    const tree = new VMRegionClassificationNode(opt_rules);
    tree.regions_ = regions;
    for (let i = 0; i < regions.length; i++) {
      tree.addStatsFromRegion_(regions[i]);
    }
    return tree;
  };

  VMRegionClassificationNode.prototype = {
    get title() {
      return this.rule_.name;
    },

    get children() {
      if (this.isLeafNode) {
        return undefined;  // Leaf nodes don't have children (by definition).
      }
      if (this.children_ === undefined) {
        this.buildTree_();  // Lazily classify VM regions.
      }
      return this.children_;
    },

    get regions() {
      if (!this.isLeafNode) {
        // Intermediate nodes only temporarily cache VM regions for lazy tree
        // construction.
        return undefined;
      }
      return this.regions_;
    },

    get allRegionsForTesting() {
      if (this.regions_ !== undefined) {
        if (this.children_ !== undefined) {
          throw new Error('Internal error: a VM region classification node ' +
              'cannot have both regions and children');
        }
        // Leaf node (or caching internal node).
        return this.regions_;
      }

      // Intermediate node.
      let regions = [];
      this.children_.forEach(function(childNode) {
        regions = regions.concat(childNode.allRegionsForTesting);
      });
      return regions;
    },

    get isLeafNode() {
      const children = this.rule_.children;
      return children === undefined || children.length === 0;
    },

    addRegion(region) {
      this.addRegionRecursively_(region, true /* addStatsToThisNode */);
    },

    someRegion(fn, opt_this) {
      if (this.regions_ !== undefined) {
        // Leaf node (or caching internal node).
        return this.regions_.some(fn, opt_this);
      }

      // Intermediate node.
      return this.children_.some(function(childNode) {
        return childNode.someRegion(fn, opt_this);
      });
    },

    addRegionRecursively_(region, addStatsToThisNode) {
      if (addStatsToThisNode) {
        this.addStatsFromRegion_(region);
      }

      if (this.regions_ !== undefined) {
        if (this.children_ !== undefined) {
          throw new Error('Internal error: a VM region classification node ' +
              'cannot have both regions and children');
        }
        // Leaf node or an intermediate node caching VM regions (add the
        // region to this node and don't classify further).
        this.regions_.push(region);
        return;
      }

      // Non-leaf rule (classify region row further down the tree).
      function regionRowMatchesChildNide(child) {
        const fileRegExp = child.rule_.file;
        if (fileRegExp === undefined) return true;
        return fileRegExp.test(region.mappedFile);
      }

      let matchedChild = this.children_.find(regionRowMatchesChildNide);
      if (matchedChild === undefined) {
        // Region belongs to the 'Other' node (created lazily).
        if (this.children_.length !== this.rule_.children.length) {
          throw new Error('Internal error');
        }
        matchedChild = new VMRegionClassificationNode(
            VMRegionClassificationNode.OTHER_RULE);
        this.children_.push(matchedChild);
      }

      matchedChild.addRegionRecursively_(region, true);
    },

    buildTree_() {
      const cachedRegions = this.regions_;
      this.regions_ = undefined;

      this.buildChildNodesRecursively_();
      for (let i = 0; i < cachedRegions.length; i++) {
        // Note that we don't add the VM region's stats to this node because
        // they have already been added to it.
        this.addRegionRecursively_(
            cachedRegions[i], false /* addStatsToThisNode */);
      }
    },

    buildChildNodesRecursively_() {
      if (this.children_ !== undefined) {
        throw new Error(
            'Internal error: Classification node already has children');
      }
      if (this.regions_ !== undefined && this.regions_.length !== 0) {
        throw new Error(
            'Internal error: Classification node should have no regions');
      }

      if (this.isLeafNode) {
        return;  // Leaf node: Nothing to do.
      }

      // Intermediate node: Clear regions and build children recursively.
      this.regions_ = undefined;
      this.children_ = this.rule_.children.map(function(childRule) {
        const child = new VMRegionClassificationNode(childRule);
        child.buildChildNodesRecursively_();
        return child;
      });
    },

    addStatsFromRegion_(region) {
      this.hasRegions = true;

      // Aggregate virtual size.
      const regionSizeInBytes = region.sizeInBytes;
      if (regionSizeInBytes !== undefined) {
        this.sizeInBytes = (this.sizeInBytes || 0) + regionSizeInBytes;
      }

      // Aggregate byte stats.
      const thisByteStats = this.byteStats;
      const regionByteStats = region.byteStats;
      for (const byteStatName in regionByteStats) {
        const regionByteStatValue = regionByteStats[byteStatName];
        if (regionByteStatValue === undefined) continue;
        thisByteStats[byteStatName] =
            (thisByteStats[byteStatName] || 0) + regionByteStatValue;
      }
    }
  };

  return {
    VMRegion,
    VMRegionClassificationNode,
  };
});


'use strict';

/**
 * @fileoverview Provides the ProcessMemoryDump class.
 */
tr.exportTo('tr.model', function() {
  // Names of MemoryAllocatorDump(s) from which tracing overhead should be
  // discounted.
  const DISCOUNTED_ALLOCATOR_NAMES = ['winheap', 'malloc'];

  // The path to where the tracing overhead dump should be added to the
  // winheap/malloc allocator dump tree.
  const TRACING_OVERHEAD_PATH = ['allocated_objects', 'tracing_overhead'];

  const SIZE_NUMERIC_NAME = tr.model.MemoryAllocatorDump.SIZE_NUMERIC_NAME;
  const RESIDENT_SIZE_NUMERIC_NAME =
      tr.model.MemoryAllocatorDump.RESIDENT_SIZE_NUMERIC_NAME;

  function getSizeNumericValue(dump, sizeNumericName) {
    const sizeNumeric = dump.numerics[sizeNumericName];
    if (sizeNumeric === undefined) return 0;
    return sizeNumeric.value;
  }

  /**
   * The ProcessMemoryDump represents a memory dump of a single process.
   * @constructor
   */
  function ProcessMemoryDump(globalMemoryDump, process, start) {
    tr.model.ContainerMemoryDump.call(this, start);
    this.process = process;
    this.globalMemoryDump = globalMemoryDump;

    // Process memory totals (optional object) with the following fields (also
    // optional):
    //   - residentBytes: Total resident bytes (number)
    //   - peakResidentBytes: Peak resident bytes (number)
    //   - arePeakResidentBytesResettable: Flag whether peak resident bytes are
    //     resettable (boolean)
    //   - privateFootprintBytes: Private footprint bytes (number)
    //   - platformSpecific: Map from OS-specific total names (string) to sizes
    //     (number)
    this.totals = undefined;

    this.vmRegions = undefined;

    // Map from allocator names to heap dumps.
    this.heapDumps = undefined;

    this.tracingOverheadOwnershipSetUp_ = false;
    this.tracingOverheadDiscountedFromVmRegions_ = false;
  }

  ProcessMemoryDump.prototype = {
    __proto__: tr.model.ContainerMemoryDump.prototype,

    get userFriendlyName() {
      return 'Process memory dump at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.start);
    },

    get containerName() {
      return this.process.userFriendlyName;
    },

    get processMemoryDumps() {
      const dumps = {};
      dumps[this.process.pid] = this;
      return dumps;
    },

    get hasOwnVmRegions() {
      return this.vmRegions !== undefined;
    },

    setUpTracingOverheadOwnership(opt_model) {
      // Make sure that calling this method twice won't lead to
      // 'double-discounting'.
      if (this.tracingOverheadOwnershipSetUp_) return;

      this.tracingOverheadOwnershipSetUp_ = true;

      const tracingDump = this.getMemoryAllocatorDumpByFullName('tracing');
      if (tracingDump === undefined || tracingDump.owns !== undefined) {
        // The tracing dump either doesn't exist, or it already owns another
        // dump.
        return;
      }

      if (tracingDump.owns !== undefined) return;

      // Add an ownership link from tracing to
      // malloc/allocated_objects/tracing_overhead or
      // winheap/allocated_objects/tracing_overhead.
      const hasDiscountedFromAllocatorDumps = DISCOUNTED_ALLOCATOR_NAMES.some(
          function(allocatorName) {
            // First check if the allocator root exists.
            const allocatorDump = this.getMemoryAllocatorDumpByFullName(
                allocatorName);
            if (allocatorDump === undefined) {
              return false;  // Allocator doesn't exist, try another one.
            }

            let nextPathIndex = 0;
            let currentDump = allocatorDump;
            let currentFullName = allocatorName;

            // Descend from the root towards tracing_overhead as long as the
            // dumps on the path exist.
            for (; nextPathIndex < TRACING_OVERHEAD_PATH.length;
                 nextPathIndex++) {
              const childFullName = currentFullName + '/' +
              TRACING_OVERHEAD_PATH[nextPathIndex];
              const childDump = this.getMemoryAllocatorDumpByFullName(
                  childFullName);
              if (childDump === undefined) break;

              currentDump = childDump;
              currentFullName = childFullName;
            }

            // Create the missing descendant dumps on the path from the root
            // towards tracing_overhead.
            for (; nextPathIndex < TRACING_OVERHEAD_PATH.length;
                 nextPathIndex++) {
              const childFullName = currentFullName + '/' +
              TRACING_OVERHEAD_PATH[nextPathIndex];
              const childDump = new tr.model.MemoryAllocatorDump(
              currentDump.containerMemoryDump, childFullName);
              childDump.parent = currentDump;
              currentDump.children.push(childDump);

              currentFullName = childFullName;
              currentDump = childDump;
            }

            // Add the ownership link.
            const ownershipLink =
            new tr.model.MemoryAllocatorDumpLink(tracingDump, currentDump);
            tracingDump.owns = ownershipLink;
            currentDump.ownedBy.push(ownershipLink);
            return true;
          }, this);

      // Force rebuilding the memory allocator dump index (if we've just added
      // a new memory allocator dump).
      if (hasDiscountedFromAllocatorDumps) {
        this.forceRebuildingMemoryAllocatorDumpByFullNameIndex();
      }
    },

    discountTracingOverheadFromVmRegions(opt_model) {
      // Make sure that calling this method twice won't lead to
      // 'double-discounting'.
      if (this.tracingOverheadDiscountedFromVmRegions_) return;
      this.tracingOverheadDiscountedFromVmRegions_ = true;

      const tracingDump = this.getMemoryAllocatorDumpByFullName('tracing');
      if (tracingDump === undefined) return;

      const discountedSize =
          getSizeNumericValue(tracingDump, SIZE_NUMERIC_NAME);
      const discountedResidentSize =
          getSizeNumericValue(tracingDump, RESIDENT_SIZE_NUMERIC_NAME);

      if (discountedSize <= 0 && discountedResidentSize <= 0) return;

      // Subtract the tracing size from the totals.
      if (this.totals !== undefined) {
        if (this.totals.residentBytes !== undefined) {
          this.totals.residentBytes -= discountedResidentSize;
        }
        if (this.totals.peakResidentBytes !== undefined) {
          this.totals.peakResidentBytes -= discountedResidentSize;
        }
      }

      // Subtract the tracing size from VM regions. More precisely, subtract
      // tracing resident_size from byte stats (private dirty and PSS) and
      // tracing size from virtual size by injecting a fake VM region with
      // negative values.
      if (this.vmRegions !== undefined) {
        const hasSizeInBytes = this.vmRegions.sizeInBytes !== undefined;
        const hasPrivateDirtyResident =
            this.vmRegions.byteStats.privateDirtyResident !== undefined;
        const hasProportionalResident =
            this.vmRegions.byteStats.proportionalResident !== undefined;

        if ((hasSizeInBytes && discountedSize > 0) ||
            ((hasPrivateDirtyResident || hasProportionalResident) &&
                discountedResidentSize > 0)) {
          const byteStats = {};
          if (hasPrivateDirtyResident) {
            byteStats.privateDirtyResident = -discountedResidentSize;
          }
          if (hasProportionalResident) {
            byteStats.proportionalResident = -discountedResidentSize;
          }
          this.vmRegions.addRegion(tr.model.VMRegion.fromDict({
            mappedFile: '[discounted tracing overhead]',
            sizeInBytes: hasSizeInBytes ? -discountedSize : undefined,
            byteStats
          }));
        }
      }
    }
  };

  ProcessMemoryDump.hookUpMostRecentVmRegionsLinks = function(processDumps) {
    let mostRecentVmRegions = undefined;

    processDumps.forEach(function(processDump) {
      // Update the most recent VM regions from the current dump.
      if (processDump.vmRegions !== undefined) {
        mostRecentVmRegions = processDump.vmRegions;
      }

      // Set the most recent VM regions of the current dump.
      processDump.mostRecentVmRegions = mostRecentVmRegions;
    });
  };

  tr.model.EventRegistry.register(
      ProcessMemoryDump,
      {
        name: 'processMemoryDump',
        pluralName: 'processMemoryDumps'
      });

  return {
    ProcessMemoryDump,
  };
});


'use strict';

/**
 * @fileoverview Provides the Process class.
 */
tr.exportTo('tr.model', function() {
  const ProcessBase = tr.model.ProcessBase;
  const ProcessInstantEvent = tr.model.ProcessInstantEvent;
  const Frame = tr.model.Frame;
  const ProcessMemoryDump = tr.model.ProcessMemoryDump;

  /**
   * The Process represents a single userland process in the
   * trace.
   * @constructor
   */
  function Process(model, pid) {
    if (model === undefined) {
      throw new Error('model must be provided');
    }
    if (pid === undefined) {
      throw new Error('pid must be provided');
    }
    tr.model.ProcessBase.call(this, model);
    this.pid = pid;
    this.name = undefined;
    this.labels = [];
    this.uptime_seconds = 0;
    this.instantEvents = [];
    this.memoryDumps = [];
    this.frames = [];
    this.activities = [];
  }

  /**
   * Comparison between processes that orders by pid.
   */
  Process.compare = function(x, y) {
    let tmp = tr.model.ProcessBase.compare(x, y);
    if (tmp) return tmp;

    if (x.name !== undefined) {
      if (y.name !== undefined) {
        tmp = x.name.localeCompare(y.name);
      } else {
        tmp = -1;
      }
    } else if (y.name !== undefined) {
      tmp = 1;
    }
    if (tmp) return tmp;

    tmp = tr.b.compareArrays(x.labels, y.labels,
        function(x, y) { return x.localeCompare(y); });
    if (tmp) return tmp;

    return x.pid - y.pid;
  };

  Process.prototype = {
    __proto__: tr.model.ProcessBase.prototype,

    get stableId() {
      return this.pid;
    },

    compareTo(that) {
      return Process.compare(this, that);
    },

    * childEvents() {
      yield* ProcessBase.prototype.childEvents.call(this);
      yield* this.instantEvents;
      yield* this.frames;
      yield* this.memoryDumps;
    },

    addLabelIfNeeded(labelName) {
      for (let i = 0; i < this.labels.length; i++) {
        if (this.labels[i] === labelName) return;
      }
      this.labels.push(labelName);
    },

    get userFriendlyName() {
      let res;
      if (this.name) {
        res = this.name + ' (pid ' + this.pid + ')';
      } else {
        res = 'Process ' + this.pid;
      }
      if (this.labels.length) {
        res += ': ' + this.labels.join(', ');
      }
      if (this.uptime_seconds) {
        res += ', uptime:' + this.uptime_seconds + 's';
      }
      return res;
    },

    get userFriendlyDetails() {
      if (this.name) {
        return this.name + ' (pid ' + this.pid + ')';
      }
      return 'pid: ' + this.pid;
    },

    getSettingsKey() {
      if (!this.name) return undefined;
      if (!this.labels.length) return 'processes.' + this.name;
      return 'processes.' + this.name + '.' + this.labels.join('.');
    },

    shiftTimestampsForward(amount) {
      for (let i = 0; i < this.instantEvents.length; i++) {
        this.instantEvents[i].start += amount;
      }

      for (let i = 0; i < this.frames.length; i++) {
        this.frames[i].shiftTimestampsForward(amount);
      }

      for (let i = 0; i < this.memoryDumps.length; i++) {
        this.memoryDumps[i].shiftTimestampsForward(amount);
      }

      for (let i = 0; i < this.activities.length; i++) {
        this.activities[i].shiftTimestampsForward(amount);
      }

      tr.model.ProcessBase.prototype
          .shiftTimestampsForward.apply(this, arguments);
    },

    updateBounds() {
      tr.model.ProcessBase.prototype.updateBounds.apply(this);

      for (let i = 0; i < this.frames.length; i++) {
        this.frames[i].addBoundsToRange(this.bounds);
      }

      for (let i = 0; i < this.memoryDumps.length; i++) {
        this.memoryDumps[i].addBoundsToRange(this.bounds);
      }

      for (let i = 0; i < this.activities.length; i++) {
        this.activities[i].addBoundsToRange(this.bounds);
      }
    },

    sortMemoryDumps() {
      this.memoryDumps.sort(function(x, y) {
        return x.start - y.start;
      });
      tr.model.ProcessMemoryDump.hookUpMostRecentVmRegionsLinks(
          this.memoryDumps);
    }
  };

  return {
    Process,
  };
});


'use strict';

/**
 * @fileoverview Provides the Sample class.
 */
tr.exportTo('tr.model', function() {
  /**
   * A Sample represents a sample taken at an instant in time,
   * plus its call stack and parameters associated with that sample.
   *
   * @constructor
   */
  function Sample(start, title, leafNode, thread, opt_cpu, opt_weight,
      opt_args) {
    tr.model.TimedEvent.call(this, start);

    this.start_ = start;
    this.title_ = title;
    this.leafNode_ = leafNode;
    this.thread_ = thread;
    this.colorId_ = leafNode.colorId;

    this.cpu_ = opt_cpu;
    this.weight_ = opt_weight;
    this.args = opt_args || {};
  }

  Sample.prototype = {
    __proto__: tr.model.TimedEvent.prototype,

    get title() {
      return this.title_;
    },

    get colorId() {
      return this.colorId_;
    },

    get thread() {
      return this.thread_;
    },

    get leafNode() {
      return this.leafNode_;
    },

    get userFriendlyName() {
      return 'Sample at ' +
        tr.b.Unit.byName.timeStampInMs.format(this.start);
    },

    get userFriendlyStack() {
      return this.leafNode_.userFriendlyStack;
    },

    getNodesAsArray() {
      const nodes = [];
      let node = this.leafNode_;
      while (node !== undefined) {
        nodes.push(node);
        node = node.parentNode;
      }
      return nodes;
    },

    get cpu() {
      return this.cpu_;
    },

    get weight() {
      return this.weight_;
    },
  };

  tr.model.EventRegistry.register(
      Sample,
      {
        name: 'Sample',
        pluralName: 'Samples'
      });

  return {
    Sample,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  function StackFrame(parentFrame, id, title, colorId, opt_sourceInfo) {
    if (id === undefined) {
      throw new Error('id must be given');
    }
    this.parentFrame_ = parentFrame;
    this.id = id;
    this.title_ = title;
    this.colorId = colorId;
    this.children = [];
    this.sourceInfo_ = opt_sourceInfo;

    if (this.parentFrame_) {
      this.parentFrame_.addChild(this);
    }
  }

  StackFrame.prototype = {
    get parentFrame() {
      return this.parentFrame_;
    },

    get title() {
      if (this.sourceInfo_) {
        const src = this.sourceInfo_.toString();
        return this.title_ + (src === '' ? '' : ' ' + src);
      }
      return this.title_;
    },

    /**
     * Attempts to find the domain of the origin of the script either from this
     * stack trace or from its ancestors.
     */
    get domain() {
      let result = 'unknown';
      if (this.sourceInfo_ && this.sourceInfo_.domain) {
        result = this.sourceInfo_.domain;
      }
      if (result === 'unknown' && this.parentFrame) {
        result = this.parentFrame.domain;
      }
      return result;
    },

    get sourceInfo() {
      return this.sourceInfo_;
    },

    set parentFrame(parentFrame) {
      if (this.parentFrame_) {
        Polymer.dom(this.parentFrame_).removeChild(this);
      }
      this.parentFrame_ = parentFrame;
      if (this.parentFrame_) {
        this.parentFrame_.addChild(this);
      }
    },

    addChild(child) {
      this.children.push(child);
    },

    removeChild(child) {
      const i = this.children.indexOf(child.id);
      if (i === -1) {
        throw new Error('omg');
      }
      this.children.splice(i, 1);
    },

    removeAllChildren() {
      for (let i = 0; i < this.children.length; i++) {
        this.children[i].parentFrame_ = undefined;
      }
      this.children.splice(0, this.children.length);
    },

    /**
     * Returns stackFrames where the most specific frame is first.
     */
    get stackTrace() {
      const stack = [this];
      let cur = this.parentFrame;
      while (cur) {
        stack.push(cur);
        cur = cur.parentFrame;
      }
      return stack;
    },

    getUserFriendlyStackTrace() {
      return this.stackTrace.map(function(x) { return x.title; });
    }
  };

  return {
    StackFrame,
  };
});


'use strict';

/**
 * @fileoverview Provides event merging functionality for grouping/analysis.
 */
tr.exportTo('tr.b.math', function() {
  function convertEventsToRanges(events) {
    return events.map(function(event) {
      return tr.b.math.Range.fromExplicitRange(event.start, event.end);
    });
  }

  function mergeRanges(inRanges, mergeThreshold, mergeFunction) {
    const remainingEvents = inRanges.slice();
    remainingEvents.sort(function(x, y) {
      return x.min - y.min;
    });

    if (remainingEvents.length <= 1) {
      const merged = [];
      if (remainingEvents.length === 1) {
        merged.push(mergeFunction(remainingEvents));
      }
      return merged;
    }

    const mergedEvents = [];

    let currentMergeBuffer = [];
    let rightEdge;
    function beginMerging() {
      currentMergeBuffer.push(remainingEvents[0]);
      remainingEvents.splice(0, 1);
      rightEdge = currentMergeBuffer[0].max;
    }

    function flushCurrentMergeBuffer() {
      if (currentMergeBuffer.length === 0) return;

      mergedEvents.push(mergeFunction(currentMergeBuffer));
      currentMergeBuffer = [];

      // Refill merge buffer if needed.
      if (remainingEvents.length !== 0) beginMerging();
    }

    beginMerging();

    while (remainingEvents.length) {
      const currentEvent = remainingEvents[0];

      const distanceFromRightEdge = currentEvent.min - rightEdge;
      if (distanceFromRightEdge < mergeThreshold) {
        rightEdge = Math.max(rightEdge, currentEvent.max);
        remainingEvents.splice(0, 1);
        currentMergeBuffer.push(currentEvent);
        continue;
      }

      // Too big a gap.
      flushCurrentMergeBuffer();
    }
    flushCurrentMergeBuffer();

    return mergedEvents;
  }

  // Pass in |opt_totalRange| in order to find empty ranges before the first of
  // |inRanges| and after the last of |inRanges|.
  function findEmptyRangesBetweenRanges(inRanges, opt_totalRange) {
    if (opt_totalRange && opt_totalRange.isEmpty) opt_totalRange = undefined;

    const emptyRanges = [];
    if (!inRanges.length) {
      if (opt_totalRange) emptyRanges.push(opt_totalRange);
      return emptyRanges;
    }

    inRanges = inRanges.slice();
    inRanges.sort(function(x, y) {
      return x.min - y.min;
    });
    if (opt_totalRange &&
        (opt_totalRange.min < inRanges[0].min)) {
      emptyRanges.push(tr.b.math.Range.fromExplicitRange(
          opt_totalRange.min, inRanges[0].min));
    }

    inRanges.forEach(function(range, index) {
      for (let otherIndex = 0; otherIndex < inRanges.length; ++otherIndex) {
        if (index === otherIndex) continue;
        const other = inRanges[otherIndex];

        if (other.min > range.max) {
          // |inRanges| is sorted, so |other| is the first range after |range|,
          // and there is an empty range between them.
          emptyRanges.push(tr.b.math.Range.fromExplicitRange(
              range.max, other.min));
          return;
        }
        // Otherwise, |other| starts before |range| ends, so |other| might
        // possibly contain the end of |range|.

        if (other.max > range.max) {
          // |other| does contain the end of |range|, so no empty range starts
          // at the end of this |range|.
          return;
        }
      }
      if (opt_totalRange && (range.max < opt_totalRange.max)) {
        emptyRanges.push(tr.b.math.Range.fromExplicitRange(
            range.max, opt_totalRange.max));
      }
    });
    return emptyRanges;
  }

  return {
    convertEventsToRanges,
    findEmptyRangesBetweenRanges,
    mergeRanges,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  /**
   * Indicates how much of a compound-event is selected [if any].
   *
   * The CompoundEventSelectionState enum is used with events that are
   * directly selectable, but also have associated events, too, that can be
   * selected. In this situation, there are a variety of different
   * selected states other than just "yes, no". This enum encodes those
   * various possible states.
   */
  const CompoundEventSelectionState = {
    // Basic bit states.
    NOT_SELECTED: 0,
    EVENT_SELECTED: 0x1,
    SOME_ASSOCIATED_EVENTS_SELECTED: 0x2,
    ALL_ASSOCIATED_EVENTS_SELECTED: 0x4,

    // Common combinations.
    EVENT_AND_SOME_ASSOCIATED_SELECTED: 0x1 | 0x2,
    EVENT_AND_ALL_ASSOCIATED_SELECTED: 0x1 | 0x4
  };

  return {
    CompoundEventSelectionState,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  const CompoundEventSelectionState = tr.model.CompoundEventSelectionState;

  function UserExpectation(parentModel, initiatorType, start, duration) {
    tr.model.TimedEvent.call(this, start);
    this.associatedEvents = new tr.model.EventSet();
    this.duration = duration;
    this.initiatorType_ = initiatorType;
    this.parentModel = parentModel;
    this.typeInfo_ = undefined;

    // sourceEvents are the ones that caused the UserModelBuilder to create this
    // UserExpectation.
    this.sourceEvents = new tr.model.EventSet();
  }

  // Strings used to name UEs.
  const INITIATOR_TYPE = {
    KEYBOARD: 'Keyboard',
    MOUSE: 'Mouse',
    MOUSE_WHEEL: 'MouseWheel',
    TAP: 'Tap',
    PINCH: 'Pinch',
    FLING: 'Fling',
    TOUCH: 'Touch',
    SCROLL: 'Scroll',
    CSS: 'CSS',
    WEBGL: 'WebGL',
    VIDEO: 'Video',
    VR: 'VR',
  };

  UserExpectation.prototype = {
    __proto__: tr.model.TimedEvent.prototype,

    computeCompoundEvenSelectionState(selection) {
      let cess = CompoundEventSelectionState.NOT_SELECTED;
      if (selection.contains(this)) {
        cess |= CompoundEventSelectionState.EVENT_SELECTED;
      }

      if (this.associatedEvents.intersectionIsEmpty(selection)) {
        return cess;
      }

      const allContained = this.associatedEvents.every(function(event) {
        return selection.contains(event);
      });

      if (allContained) {
        cess |= CompoundEventSelectionState.ALL_ASSOCIATED_EVENTS_SELECTED;
      } else {
        cess |= CompoundEventSelectionState.SOME_ASSOCIATED_EVENTS_SELECTED;
      }
      return cess;
    },

    // Returns samples which are overlapping with V8.Execute
    get associatedSamples() {
      const samples = new tr.model.EventSet();
      this.associatedEvents.forEach(function(event) {
        if (event instanceof tr.model.ThreadSlice) {
          samples.addEventSet(event.overlappingSamples);
        }
      });
      return samples;
    },

    get userFriendlyName() {
      return this.title + ' User Expectation at ' +
          tr.b.Unit.byName.timeStampInMs.format(this.start);
    },

    get stableId() {
      return ('UserExpectation.' + this.guid);
    },

    get typeInfo() {
      if (!this.typeInfo_) {
        this.typeInfo_ = UserExpectation.subTypes.findTypeInfo(
            this.constructor);
      }

      // If you set Subclass.prototype = {}, then you must explicitly specify
      // constructor in that prototype object!
      // http://javascript.info/tutorial/constructor

      if (!this.typeInfo_) {
        throw new Error('Unregistered UserExpectation');
      }

      return this.typeInfo_;
    },

    get colorId() {
      return this.typeInfo.metadata.colorId;
    },

    get stageTitle() {
      return this.typeInfo.metadata.stageTitle;
    },

    get initiatorType() {
      return this.initiatorType_;
    },

    get title() {
      if (!this.initiatorType) {
        return this.stageTitle;
      }

      return this.initiatorType + ' ' + this.stageTitle;
    },

    /**
     * Returns the sum of the number of CPU ms spent by this UserExpectation.
     */
    get totalCpuMs() {
      let cpuMs = 0;
      this.associatedEvents.forEach(function(event) {
        if (event.cpuSelfTime) {
          cpuMs += event.cpuSelfTime;
        }
      });
      return cpuMs;
    }
  };

  const subTypes = {};
  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  tr.b.decorateExtensionRegistry(subTypes, options);

  subTypes.addEventListener('will-register', function(e) {
    const metadata = e.typeInfo.metadata;

    if (metadata.stageTitle === undefined) {
      throw new Error('Registered UserExpectations must provide ' +
          'stageTitle');
    }

    if (metadata.colorId === undefined) {
      throw new Error('Registered UserExpectations must provide ' +
          'colorId');
    }
  });

  tr.model.EventRegistry.register(
      UserExpectation,
      {
        name: 'userExpectation',
        pluralName: 'userExpectations',
        subTypes
      });

  return {
    UserExpectation,
    INITIATOR_TYPE,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  /**
   * Segment represents a range of time during which the set of active
   * UserExpectations does not change. Segments are guaranteed to not overlap,
   * whereas UserExpectations can overlap. After UserModelBuilder builds the
   * UserExpectations in the model, it segments the timeline into
   * non-overlapping Segments and adds the constituent UserExpectations to each
   * Segment.
   */
  class Segment extends tr.model.TimedEvent {
    constructor(start, duration) {
      super(start);
      this.duration = duration;
      this.expectations_ = [];
    }

    get expectations() {
      return this.expectations_;
    }

    clone() {
      const clone = new Segment(this.start, this.duration);
      clone.expectations.push(...this.expectations);
      return clone;
    }

    addSegment(other) {
      this.duration += other.duration;
      this.expectations.push(...other.expectations);
    }
  }

  return {
    Segment,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  class UserModel extends tr.model.EventContainer {
    constructor(parentModel) {
      super();
      this.parentModel_ = parentModel;
      this.expectations_ = new tr.model.EventSet();
      this.segments_ = [];
    }

    get stableId() {
      return 'UserModel';
    }

    get parentModel() {
      return this.parentModel_;
    }

    sortExpectations() {
      this.expectations_.sortEvents((x, y) => (x.start - y.start));
    }

    get expectations() {
      return this.expectations_;
    }

    shiftTimestampsForward(amount) {
    }

    addCategoriesToDict(categoriesDict) {
    }

    get segments() {
      return this.segments_;
    }

    * childEvents() {
      yield* this.expectations;
    }

    * childEventContainers() {
    }

    updateBounds() {
      this.bounds.reset();
      for (const expectation of this.expectations) {
        expectation.addBoundsToRange(this.bounds);
      }
    }

    /**
     * Return a new array of new Segments by merging adjacent segments when
     * |getKeyForSegment| returns identical keys.
     * |getKeyForSegment| is called with each Segment and the index of that
     * Segment.
     *
     * @param {!function(!tr.model.um.Segment, number):*} getKeyForSegment
     * @return {!Array.<!tr.model.um.Segment>}
     */
    resegment(getKeyForSegment) {
      const newSegments = [];
      let prevKey = undefined;
      let prevSegment = undefined;
      for (let i = 0; i < this.segments.length; ++i) {
        const segment = this.segments[i];
        const key = getKeyForSegment(segment, i);
        if (prevSegment !== undefined && key === prevKey) {
          prevSegment.addSegment(segment);
        } else {
          prevSegment = segment.clone();
          newSegments.push(prevSegment);
        }
        prevKey = key;
      }
      return newSegments;
    }
  }

  return {
    UserModel,
  };
});


'use strict';

/**
 * @fileoverview Model is a parsed representation of the
 * TraceEvents obtained from base/trace_event in which the begin-end
 * tokens are converted into a hierarchy of processes, threads,
 * subrows, and slices.
 *
 * The building block of the model is a slice. A slice is roughly
 * equivalent to function call executing on a specific thread. As a
 * result, slices may have one or more subslices.
 *
 * A thread contains one or more subrows of slices. Row 0 corresponds to
 * the "root" slices, e.g. the topmost slices. Row 1 contains slices that
 * are nested 1 deep in the stack, and so on. We use these subrows to draw
 * nesting tasks.
 *
 */
tr.exportTo('tr', function() {
  const Process = tr.model.Process;
  const Device = tr.model.Device;
  const Kernel = tr.model.Kernel;
  const GlobalMemoryDump = tr.model.GlobalMemoryDump;
  const GlobalInstantEvent = tr.model.GlobalInstantEvent;
  const FlowEvent = tr.model.FlowEvent;
  const Alert = tr.model.Alert;
  const Sample = tr.model.Sample;

  /**
   * @constructor
   */
  function Model() {
    tr.model.EventContainer.call(this);
    tr.b.EventTarget.decorate(this);

    this.timestampShiftToZeroAmount_ = 0;

    this.faviconHue = 'blue'; // Should be a key from favicons.html

    this.device = new Device(this);
    this.kernel = new Kernel(this);
    this.processes = {};
    this.metadata = [];
    this.categories = [];
    this.instantEvents = [];
    this.flowEvents = [];
    this.clockSyncManager = new tr.model.ClockSyncManager();
    this.intrinsicTimeUnit_ = undefined;

    this.stackFrames = {};
    this.samples = [];

    this.alerts = [];
    this.userModel = new tr.model.um.UserModel(this);

    this.flowIntervalTree = new tr.b.IntervalTree((f) => f.start, (f) => f.end);
    this.globalMemoryDumps = [];

    this.userFriendlyCategoryDrivers_ = [];

    this.annotationsByGuid_ = {};
    this.modelIndices = undefined;

    this.stats = new tr.model.ModelStats();

    this.importWarnings_ = [];
    this.reportedImportWarnings_ = {};

    this.isTimeHighResolution_ = true;

    this.patchupsToApply_ = [];

    this.doesHelperGUIDSupportThisModel_ = {};
    this.helpersByConstructorGUID_ = {};
    this.eventsByStableId_ = undefined;
  }

  Model.prototype = {
    __proto__: tr.model.EventContainer.prototype,

    getEventByStableId(stableId) {
      if (this.eventsByStableId_ === undefined) {
        this.eventsByStableId_ = {};
        for (const event of this.getDescendantEvents()) {
          this.eventsByStableId_[event.stableId] = event;
        }
      }
      return this.eventsByStableId_[stableId];
    },

    getOrCreateHelper(constructor) {
      if (!constructor.guid) {
        throw new Error('Helper constructors must have GUIDs');
      }

      if (this.helpersByConstructorGUID_[constructor.guid] === undefined) {
        if (this.doesHelperGUIDSupportThisModel_[constructor.guid] ===
            undefined) {
          this.doesHelperGUIDSupportThisModel_[constructor.guid] =
            constructor.supportsModel(this);
        }

        if (!this.doesHelperGUIDSupportThisModel_[constructor.guid]) {
          return undefined;
        }

        this.helpersByConstructorGUID_[constructor.guid] = new constructor(
            this);
      }
      return this.helpersByConstructorGUID_[constructor.guid];
    },

    * childEvents() {
      yield* this.globalMemoryDumps;
      yield* this.instantEvents;
      yield* this.flowEvents;
      yield* this.alerts;
      yield* this.samples;
    },

    * childEventContainers() {
      yield this.userModel;
      yield this.device;
      yield this.kernel;
      yield* Object.values(this.processes);
    },

    /**
     * Some objects in the model can persist their state in ModelSettings.
     *
     * This iterates through them.
     */
    iterateAllPersistableObjects(callback) {
      this.kernel.iterateAllPersistableObjects(callback);
      for (const pid in this.processes) {
        this.processes[pid].iterateAllPersistableObjects(callback);
      }
    },

    updateBounds() {
      this.bounds.reset();
      const bounds = this.bounds;
      for (const ec of this.childEventContainers()) {
        ec.updateBounds();
        bounds.addRange(ec.bounds);
      }
      for (const event of this.childEvents()) {
        event.addBoundsToRange(bounds);
      }
    },

    shiftWorldToZero() {
      const shiftAmount = -this.bounds.min;
      this.timestampShiftToZeroAmount_ = shiftAmount;
      for (const ec of this.childEventContainers()) {
        ec.shiftTimestampsForward(shiftAmount);
      }

      for (const event of this.childEvents()) {
        event.start += shiftAmount;
      }
      this.updateBounds();
    },

    convertTimestampToModelTime(sourceClockDomainName, ts) {
      if (sourceClockDomainName !== 'traceEventClock') {
        throw new Error('Only traceEventClock is supported.');
      }
      return tr.b.Unit.timestampFromUs(ts) +
        this.timestampShiftToZeroAmount_;
    },

    get numProcesses() {
      let n = 0;
      for (const p in this.processes) {
        n++;
      }
      return n;
    },

    /**
     * @return {Process} Gets a TimelineProcess for a specified pid. Returns
     * undefined if the process doesn't exist.
     */
    getProcess(pid) {
      return this.processes[pid];
    },

    /**
     * @return {Process} Gets a TimelineProcess for a specified pid or
     * creates one if it does not exist.
     */
    getOrCreateProcess(pid) {
      if (!this.processes[pid]) {
        this.processes[pid] = new Process(this, pid);
      }
      return this.processes[pid];
    },

    addStackFrame(stackFrame) {
      if (this.stackFrames[stackFrame.id]) {
        throw new Error('Stack frame already exists');
      }
      this.stackFrames[stackFrame.id] = stackFrame;
      return stackFrame;
    },

    /**
     * Generates the set of categories from the slices and counters.
     */
    updateCategories_() {
      const categoriesDict = {};
      this.userModel.addCategoriesToDict(categoriesDict);
      this.device.addCategoriesToDict(categoriesDict);
      this.kernel.addCategoriesToDict(categoriesDict);
      for (const pid in this.processes) {
        this.processes[pid].addCategoriesToDict(categoriesDict);
      }

      this.categories = [];
      for (const category in categoriesDict) {
        if (category !== '') {
          this.categories.push(category);
        }
      }
    },

    getAllThreads() {
      const threads = [];
      for (const tid in this.kernel.threads) {
        threads.push(process.threads[tid]);
      }
      for (const pid in this.processes) {
        const process = this.processes[pid];
        for (const tid in process.threads) {
          threads.push(process.threads[tid]);
        }
      }
      return threads;
    },

    /**
     * @param {(!function(!tr.model.Process): boolean)=} opt_predicate Optional
     *     predicate for filtering the returned processes. If undefined, all
     *     process in the model will be returned.
     * @return {!Array<!tr.model.Process>} An array of processes in the model.
     */
    getAllProcesses(opt_predicate) {
      const processes = [];
      for (const pid in this.processes) {
        const process = this.processes[pid];
        if (opt_predicate === undefined || opt_predicate(process)) {
          processes.push(process);
        }
      }
      return processes;
    },

    /**
     * @return {Array} An array of all the counters in the model.
     */
    getAllCounters() {
      const counters = [];
      counters.push.apply(
          counters, Object.values(this.device.counters || {}));
      counters.push.apply(
          counters, Object.values(this.kernel.counters || {}));
      for (const pid in this.processes) {
        const process = this.processes[pid];
        for (const tid in process.counters) {
          counters.push(process.counters[tid]);
        }
      }
      return counters;
    },

    getAnnotationByGUID(guid) {
      return this.annotationsByGuid_[guid];
    },

    addAnnotation(annotation) {
      if (!annotation.guid) {
        throw new Error('Annotation with undefined guid given');
      }

      this.annotationsByGuid_[annotation.guid] = annotation;
      tr.b.dispatchSimpleEvent(this, 'annotationChange');
    },

    removeAnnotation(annotation) {
      this.annotationsByGuid_[annotation.guid].onRemove();
      delete this.annotationsByGuid_[annotation.guid];
      tr.b.dispatchSimpleEvent(this, 'annotationChange');
    },

    getAllAnnotations() {
      return Object.values(this.annotationsByGuid_);
    },

    addUserFriendlyCategoryDriver(ufcd) {
      this.userFriendlyCategoryDrivers_.push(ufcd);
    },

    /**
     * Gets the user friendly category string from an event.
     *
     * Returns undefined if none is known.
     */
    getUserFriendlyCategoryFromEvent(event) {
      for (let i = 0; i < this.userFriendlyCategoryDrivers_.length; i++) {
        const ufc = this.userFriendlyCategoryDrivers_[i].fromEvent(event);
        if (ufc !== undefined) return ufc;
      }
      return undefined;
    },

    /**
     * @param {String} The name of the thread to find.
     * @return {Array} An array of all the matched threads.
     */
    findAllThreadsNamed(name) {
      const namedThreads = [];
      namedThreads.push.apply(
          namedThreads,
          this.kernel.findAllThreadsNamed(name));
      for (const pid in this.processes) {
        namedThreads.push.apply(
            namedThreads,
            this.processes[pid].findAllThreadsNamed(name));
      }
      return namedThreads;
    },

    get importOptions() {
      return this.importOptions_;
    },

    set importOptions(options) {
      this.importOptions_ = options;
    },

    /**
     * Returns a time unit that is used to format values and determines the
     * precision of the timestamp values.
     */
    get intrinsicTimeUnit() {
      if (this.intrinsicTimeUnit_ === undefined) {
        return tr.b.TimeDisplayModes.ms;
      }
      return this.intrinsicTimeUnit_;
    },

    set intrinsicTimeUnit(value) {
      if (this.intrinsicTimeUnit_ === value) return;
      if (this.intrinsicTimeUnit_ !== undefined) {
        throw new Error('Intrinsic time unit already set');
      }
      this.intrinsicTimeUnit_ = value;
    },

    get isTimeHighResolution() {
      return this.isTimeHighResolution_;
    },

    set isTimeHighResolution(value) {
      this.isTimeHighResolution_ = value;
    },

    /**
     * Returns a link to a trace data file that this model was imported from.
     * This is NOT the URL of a site being traced, but instead an indicator of
     * where the data is stored.
     */
    get canonicalUrl() {
      return this.canonicalUrl_;
    },

    set canonicalUrl(value) {
      if (this.canonicalUrl_ === value) return;
      if (this.canonicalUrl_ !== undefined) {
        throw new Error('canonicalUrl already set');
      }
      this.canonicalUrl_ = value;
    },

    /**
     * Saves a warning that happened during import.
     *
     * Warnings are typically logged to the console, and optionally, the
     * more critical ones are shown to the user.
     *
     * @param {Object} data The import warning data. Data must provide two
     *    accessors: type, message. The types are used to determine if we
     *    should output the message, we'll only output one message of each type.
     *    The message is the actual warning content.
     */
    importWarning(data) {
      data.showToUser = !!data.showToUser;

      this.importWarnings_.push(data);

      // Only log each warning type once. We may want to add some kind of
      // flag to allow reporting all importer warnings.
      if (this.reportedImportWarnings_[data.type] === true) return;

      this.reportedImportWarnings_[data.type] = true;
    },

    get hasImportWarnings() {
      return (this.importWarnings_.length > 0);
    },

    get importWarnings() {
      return this.importWarnings_;
    },

    get importWarningsThatShouldBeShownToUser() {
      return this.importWarnings_.filter(function(warning) {
        return warning.showToUser;
      });
    },

    autoCloseOpenSlices() {
      // Sort the samples.
      this.samples.sort(function(x, y) {
        return x.start - y.start;
      });

      this.updateBounds();
      this.kernel.autoCloseOpenSlices();
      for (const pid in this.processes) {
        this.processes[pid].autoCloseOpenSlices();
      }
    },

    createSubSlices() {
      this.kernel.createSubSlices();
      for (const pid in this.processes) {
        this.processes[pid].createSubSlices();
      }
    },

    preInitializeObjects() {
      for (const pid in this.processes) {
        this.processes[pid].preInitializeObjects();
      }
    },

    initializeObjects() {
      for (const pid in this.processes) {
        this.processes[pid].initializeObjects();
      }
    },

    pruneEmptyContainers() {
      this.kernel.pruneEmptyContainers();
      for (const pid in this.processes) {
        this.processes[pid].pruneEmptyContainers();
      }
    },

    mergeKernelWithUserland() {
      for (const pid in this.processes) {
        this.processes[pid].mergeKernelWithUserland();
      }
    },

    computeWorldBounds(shiftWorldToZero) {
      this.updateBounds();
      this.updateCategories_();

      if (shiftWorldToZero) {
        this.shiftWorldToZero();
      }
    },

    buildFlowEventIntervalTree() {
      for (let i = 0; i < this.flowEvents.length; ++i) {
        const flowEvent = this.flowEvents[i];
        this.flowIntervalTree.insert(flowEvent);
      }
      this.flowIntervalTree.updateHighValues();
    },

    cleanupUndeletedObjects() {
      for (const pid in this.processes) {
        this.processes[pid].autoDeleteObjects(this.bounds.max);
      }
    },

    sortMemoryDumps() {
      this.globalMemoryDumps.sort(function(x, y) {
        return x.start - y.start;
      });

      for (const pid in this.processes) {
        this.processes[pid].sortMemoryDumps();
      }
    },

    finalizeMemoryGraphs() {
      this.globalMemoryDumps.forEach(function(dump) {
        dump.finalizeGraph();
      });
    },

    buildEventIndices() {
      this.modelIndices = new tr.model.ModelIndices(this);
    },

    sortAlerts() {
      this.alerts.sort(function(x, y) {
        return x.start - y.start;
      });
    },

    applyObjectRefPatchups() {
      // Change all the fields pointing at id_refs to their real values.
      const unresolved = [];
      this.patchupsToApply_.forEach(function(patchup) {
        if (patchup.pidRef in this.processes) {
          const snapshot = this.processes[patchup.pidRef].objects.getSnapshotAt(
              patchup.scopedId, patchup.ts);
          if (snapshot) {
            patchup.object[patchup.field] = snapshot;
            snapshot.referencedAt(patchup.item, patchup.object, patchup.field);
            return;
          }
        }
        unresolved.push(patchup);
      }, this);
      this.patchupsToApply_ = unresolved;
    },

    replacePIDRefsInPatchups(oldPidRef, newPidRef) {
      this.patchupsToApply_.forEach(function(patchup) {
        if (patchup.pidRef === oldPidRef) {
          patchup.pidRef = newPidRef;
        }
      });
    },

    /**
     * Called by the model to join references between objects, after final model
     * bounds have been computed.
     */
    joinRefs() {
      this.joinObjectRefs_();
      this.applyObjectRefPatchups();
    },

    joinObjectRefs_() {
      for (const [pid, process] of Object.entries(this.processes)) {
        this.joinObjectRefsForProcess_(pid, process);
      }
    },

    joinObjectRefsForProcess_(pid, process) {
      // Iterate the world, looking for id_refs
      for (const thread of Object.values(process.threads)) {
        thread.asyncSliceGroup.slices.forEach(function(item) {
          this.searchItemForIDRefs_(pid, 'start', item);
        }, this);
        thread.sliceGroup.slices.forEach(function(item) {
          this.searchItemForIDRefs_(pid, 'start', item);
        }, this);
      }
      process.objects.iterObjectInstances(function(instance) {
        instance.snapshots.forEach(function(item) {
          this.searchItemForIDRefs_(pid, 'ts', item);
        }, this);
      }, this);
    },

    searchItemForIDRefs_(pid, itemTimestampField, item) {
      if (!item.args && !item.contexts) return;
      const patchupsToApply = this.patchupsToApply_;

      function handleField(object, fieldName, fieldValue) {
        if (!fieldValue || (!fieldValue.id_ref && !fieldValue.idRef)) {
          return;
        }

        const scope = fieldValue.scope || tr.model.OBJECT_DEFAULT_SCOPE;
        const idRef = fieldValue.id_ref || fieldValue.idRef;
        const scopedId = new tr.model.ScopedId(scope, idRef);
        const pidRef = fieldValue.pid_ref || fieldValue.pidRef || pid;
        const ts = item[itemTimestampField];
        // We have to delay the actual change to the new value until after all
        // refs have been located. Otherwise, we could end up recursing in
        // ways we definitely didn't intend.
        patchupsToApply.push({
          item,
          object,
          field: fieldName,
          pidRef,
          scopedId,
          ts});
      }
      function iterObjectFieldsRecursively(object) {
        if (!(object instanceof Object)) return;

        if ((object instanceof tr.model.ObjectSnapshot) ||
            (object instanceof Float32Array) ||
            (object instanceof tr.b.math.Quad)) {
          return;
        }

        if (object instanceof Array) {
          for (let i = 0; i < object.length; i++) {
            handleField(object, i, object[i]);
            iterObjectFieldsRecursively(object[i]);
          }
          return;
        }

        for (const key in object) {
          const value = object[key];
          handleField(object, key, value);
          iterObjectFieldsRecursively(value);
        }
      }

      iterObjectFieldsRecursively(item.args);
      iterObjectFieldsRecursively(item.contexts);
    }
  };

  return {
    Model,
  };
});


'use strict';

/**
 * @fileoverview Provides the ProfileNode class.
 */
tr.exportTo('tr.model', function() {
  /**
   * A ProfileNode represents a node in the profile tree,
   * it is essentially a frame in the stack when the sample gets recorded.
   */
  // TODO(lpy) Move V8 specific part out of ProfileNode.
  function ProfileNode(id, title, parentNode) {
    this.id_ = id;
    this.title_ = title;
    this.parentNode_ = parentNode;
    this.colorId_ = -1;
    // Cache the constructed call stack starting from this node to root.
    this.userFriendlyStack_ = [];
  }

  ProfileNode.prototype = {
    __proto__: Object.prototype,

    get title() {
      return this.title_;
    },

    get parentNode() {
      return this.parentNode_;
    },

    set parentNode(value) {
      this.parentNode_ = value;
    },

    get id() {
      return this.id_;
    },

    get colorId() {
      return this.colorId_;
    },

    set colorId(value) {
      this.colorId_ = value;
    },

    get userFriendlyName() {
      return this.title_;
    },

    get userFriendlyStack() {
      if (this.userFriendlyStack_.length === 0) {
        this.userFriendlyStack_ = [this.userFriendlyName];
        if (this.parentNode_ !== undefined) {
          this.userFriendlyStack_ =
            this.userFriendlyStack_.concat(this.parentNode_.userFriendlyStack);
        }
      }
      return this.userFriendlyStack_;
    },

    get sampleTitle() {
      throw new Error('Not implemented.');
    }
  };

  tr.model.EventRegistry.register(
      ProfileNode,
      {
        name: 'Node',
        pluralName: 'Nodes'
      }
  );

  return {
    ProfileNode,
  };
});


'use strict';

/**
 * @fileoverview Provides the Sample class.
 */
tr.exportTo('tr.model', function() {
  /**
   * A ProfileTree represents all call stack we collect in sampling
   * in the form of a tree.
   * By traversing from root to a leaf we get a call stack
   * that belongs to some samples we collect.
   */
  function ProfileTree() {
    this.startTime_ = undefined;
    this.endTime_ = undefined;
    this.tree_ = new Map();
    this.pid_ = -1;
    this.tid_ = -1;
  }

  ProfileTree.prototype = {
    __proto__: Object.prototype,

    get pid() {
      return this.pid_;
    },

    set pid(value) {
      this.pid_ = value;
    },

    get tid() {
      return this.tid_;
    },

    set tid(value) {
      this.tid_ = value;
    },

    get tree() {
      return this.tree_;
    },

    get startTime() {
      return this.startTime_;
    },

    set startTime(value) {
      this.startTime_ = value;
      this.endTime_ = value;
    },

    get endTime() {
      return this.endTime_;
    },

    set endTime(value) {
      this.endTime_ = value;
    },

    add(node) {
      if (this.tree_.has(node.id)) {
        throw new Error('Conflict id in the profile tree.');
      }
      this.tree_.set(node.id, node);
      return node;
    },

    getNode(nodeId) {
      return this.tree_.get(nodeId);
    }
  };

  return {
    ProfileTree,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  function ScopedId(scope, id, pid) {
    if (scope === undefined) {
      throw new Error('Scope should be defined. Use \'' +
                      tr.model.OBJECT_DEFAULT_SCOPE +
                      '\' as the default scope.');
    }
    this.scope = scope;
    this.id = id;
    this.pid = pid;
  }

  ScopedId.prototype = {
    toString() {
      const pidStr = this.pid === undefined ? '' : 'pid: ' + this.pid + ', ';
      return '{' + pidStr + 'scope: ' + this.scope + ', id: ' + this.id + '}';
    },

    toStringWithDelimiter(delim) {
      return (this.pid === undefined ? '' : this.pid) + delim +
          this.scope + delim + this.id;
    }
  };

  return {
    ScopedId,
  };
});


'use strict';

tr.exportTo('tr.ui.annotations', function() {
  /**
   * A view that draws a vertical line on the timeline at a specific timestamp.
   * @extends {AnnotationView}
   * @constructor
   */
  function XMarkerAnnotationView(viewport, annotation) {
    this.viewport_ = viewport;
    this.annotation_ = annotation;
  }

  XMarkerAnnotationView.prototype = {
    __proto__: tr.ui.annotations.AnnotationView.prototype,

    draw(ctx) {
      const dt = this.viewport_.currentDisplayTransform;
      const viewX = dt.xWorldToView(this.annotation_.timestamp);

      ctx.beginPath();
      tr.ui.b.drawLine(ctx, viewX, 0, viewX, ctx.canvas.height);
      ctx.strokeStyle = this.annotation_.strokeStyle;
      ctx.stroke();
    }
  };

  return {
    XMarkerAnnotationView,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  function XMarkerAnnotation(timestamp) {
    tr.model.Annotation.apply(this, arguments);

    this.timestamp = timestamp;
    this.strokeStyle = 'rgba(0, 0, 255, 0.5)';
  }

  XMarkerAnnotation.fromDict = function(dict) {
    return new XMarkerAnnotation(dict.args.timestamp);
  };

  XMarkerAnnotation.prototype = {
    __proto__: tr.model.Annotation.prototype,

    toDict() {
      return {
        typeName: 'xmarker',
        args: {
          timestamp: this.timestamp
        }
      };
    },

    createView_(viewport) {
      return new tr.ui.annotations.XMarkerAnnotationView(viewport, this);
    }
  };

  tr.model.Annotation.register(
      XMarkerAnnotation, {typeName: 'xmarker'});

  return {
    XMarkerAnnotation,
  };
});


'use strict';

/**
 * @fileoverview TraceEventImporter imports TraceEvent-formatted data
 * into the provided model.
 */
tr.exportTo('tr.e.importer', function() {
  const Base64 = tr.b.Base64;
  const deepCopy = tr.b.deepCopy;
  const ColorScheme = tr.b.ColorScheme;
  const HeapDumpTraceEventImporter = tr.e.importer.HeapDumpTraceEventImporter;
  const LegacyHeapDumpTraceEventImporter =
      tr.e.importer.LegacyHeapDumpTraceEventImporter;
  const StreamingEventExpander = tr.e.importer.StreamingEventExpander;
  const ProfilingDictionaryReader = tr.e.importer.ProfilingDictionaryReader;

  function getEventColor(event, opt_customName) {
    if (event.cname) {
      return ColorScheme.getColorIdForReservedName(event.cname);
    } else if (opt_customName || event.name) {
      return ColorScheme.getColorIdForGeneralPurposeString(
          opt_customName || event.name);
    }
  }

  function isLegacyChromeClockSyncEvent(event) {
    return event.name !== undefined &&
        event.name.startsWith(LEGACY_CHROME_CLOCK_SYNC_EVENT_NAME_PREFIX) &&
        ((event.ph === 'S') || (event.ph === 'F'));
  }

  const PRODUCER = 'producer';
  const CONSUMER = 'consumer';
  const STEP = 'step';

  const BACKGROUND = tr.model.ContainerMemoryDump.LevelOfDetail.BACKGROUND;
  const LIGHT = tr.model.ContainerMemoryDump.LevelOfDetail.LIGHT;
  const DETAILED = tr.model.ContainerMemoryDump.LevelOfDetail.DETAILED;
  const MEMORY_DUMP_LEVEL_OF_DETAIL_ORDER = [undefined, BACKGROUND, LIGHT,
    DETAILED];

  const GLOBAL_MEMORY_ALLOCATOR_DUMP_PREFIX = 'global/';

  const LEGACY_CHROME_CLOCK_SYNC_EVENT_NAME_PREFIX = 'ClockSyncEvent.';

  // Map from raw memory dump byte stat names to model byte stat names. See
  // //base/trace_event/process_memory_maps.cc in Chromium.
  const BYTE_STAT_NAME_MAP = {
    'pc': 'privateCleanResident',
    'pd': 'privateDirtyResident',
    'sc': 'sharedCleanResident',
    'sd': 'sharedDirtyResident',
    'pss': 'proportionalResident',
    'sw': 'swapped'
  };

  // See tr.model.MemoryAllocatorDump 'weak' field and
  // base::trace_event::MemoryAllocatorDump::Flags::WEAK in the Chromium
  // codebase.
  const WEAK_MEMORY_ALLOCATOR_DUMP_FLAG = 1 << 0;

  // Object type name patterns for various compilers.
  const OBJECT_TYPE_NAME_PATTERNS = [
    {
      // Clang.
      prefix: 'const char *WTF::getStringWithTypeName() [T = ',
      suffix: ']'
    },
    {
      // GCC.
      prefix: 'const char* WTF::getStringWithTypeName() [with T = ',
      suffix: ']'
    },
    {
      // Microsoft Visual C++
      prefix: 'const char *__cdecl WTF::getStringWithTypeName<',
      suffix: '>(void)'
    }
  ];

  // The list of fields on the trace that are known to contain subtraces.
  const SUBTRACE_FIELDS = new Set([
    'powerTraceAsString',
    'systemTraceEvents',
  ]);

  // The complete list of fields on the trace that should not be treated as
  // trace metadata.
  const NON_METADATA_FIELDS = new Set([
    'displayTimeUnit',
    'samples',
    'stackFrames',
    'traceAnnotations',
    'traceEvents',
    ...SUBTRACE_FIELDS
  ]);

  function TraceEventImporter(model, eventData) {
    this.hasEvents_ = undefined;  // Set properly when importEvents is called.
    this.importPriority = 1;
    this.model_ = model;
    this.events_ = undefined;
    this.sampleEvents_ = undefined;
    this.stackFrameEvents_ = undefined;
    this.stackFrameTree_ = new tr.model.ProfileTree();
    this.subtraces_ = [];
    this.eventsWereFromString_ = false;
    this.softwareMeasuredCpuCount_ = undefined;


    this.allAsyncEvents_ = [];
    this.allFlowEvents_ = [];
    this.allObjectEvents_ = [];

    this.contextProcessorPerThread = {};

    this.traceEventSampleStackFramesByName_ = {};

    this.v8ProcessCodeMaps_ = {};
    this.v8ProcessRootStackFrame_ = {};
    this.v8SamplingData_ = [];

    // Profile Tree Map.
    // Type of Profile Tree -> Map(ID -> Profile Tree)
    this.profileTrees_ = new Map();
    // ID -> Info Object
    this.profileInfo_ = new Map();

    // For tracking async events that is used to create back-compat clock sync
    // event.
    this.legacyChromeClockSyncStartEvent_ = undefined;
    this.legacyChromeClockSyncFinishEvent_ = undefined;

    // Dump ID -> PID -> [process memory dump events].
    this.allMemoryDumpEvents_ = {};

    // Unpacks size, count, stackId and heapId from 'P' events. Also remembers
    // stack frame and type information.
    this.heapProfileExpander = new ProfilingDictionaryReader();

    // PID -> Object type ID -> Object type name.
    this.objectTypeNameMap_ = {};

    // For old Chrome traces with no clock domain metadata, just use a
    // placeholder clock domain.
    this.clockDomainId_ = tr.model.ClockDomainId.UNKNOWN_CHROME_LEGACY;
    // A function able to transform timestamps in |clockDomainId| to timestamps
    // in the model clock domain.
    this.toModelTime_ = undefined;

    if (typeof(eventData) === 'string' || eventData instanceof String) {
      eventData = eventData.trim();
      // If the event data begins with a [, then we know it should end with a ].
      // The reason we check for this is because some tracing implementations
      // cannot guarantee that a ']' gets written to the trace file. So, we are
      // forgiving and if this is obviously the case, we fix it up before
      // throwing the string at JSON.parse.
      if (eventData[0] === '[') {
        eventData = eventData.replace(/\s*,\s*$/, '');
        if (eventData[eventData.length - 1] !== ']') {
          eventData = eventData + ']';
        }
      }

      this.events_ = JSON.parse(eventData);
      this.eventsWereFromString_ = true;
    } else {
      this.events_ = eventData;
    }

    // Some trace_event implementations put the actual trace events
    // inside a container. E.g { ... , traceEvents: [ ] }
    // If we see that, just pull out the trace events.
    if (this.events_.traceEvents) {
      const container = this.events_;
      this.events_ = this.events_.traceEvents;

      for (const subtraceField of SUBTRACE_FIELDS) {
        if (container[subtraceField]) {
          this.storeSubtrace_(container[subtraceField]);
        }
      }
      this.storeSamples_(container.samples);
      this.storeStackFrames_(container.stackFrames);
      this.storeDisplayTimeUnit_(container.displayTimeUnit);
      this.storeTraceAnnotations_(container.traceAnnotations);
      this.storeMetadata_(container);
    } else if (this.events_ instanceof tr.b.TraceStream) {
      const parser = oboe()
          .node('{cat ph}', function(e) { return oboe.drop; })
          .node('!.powerTraceAsString', this.storeSubtrace_.bind(this))
          .node('!.systemTraceEvents', this.storeSubtrace_.bind(this))
          .node('!.samples', this.storeSamples_.bind(this))
          .node('!.stackFrames', this.storeStackFrames_.bind(this))
          .node('!.displayTimeUnit', this.storeDisplayTimeUnit_.bind(this))
          .node('!.traceAnnotations', this.storeTraceAnnotations_.bind(this))
          .done(this.storeMetadata_.bind(this));
      this.events_.rewind();
      while (this.events_.hasData) {
        parser.write(this.events_.readNumBytes());
      }
      parser.finish();
    }
  }

  /**
   * @return {boolean} Whether obj is a TraceEvent array.
   */
  TraceEventImporter.canImport = function(eventData) {
    // May be encoded JSON. But we dont want to parse it fully yet.
    // Use a simple heuristic:
    //   - eventData that starts with [ are probably trace_event
    //   - eventData that starts with { are probably trace_event
    // May be encoded JSON. Treat files that start with { as importable by us.
    if (eventData instanceof tr.b.TraceStream) {
      if (eventData.isBinary) return false;
      eventData = eventData.header;
    }

    if (typeof(eventData) === 'string' || eventData instanceof String) {
      eventData = eventData.trim();
      return eventData[0] === '{' || eventData[0] === '[';
    }

    // Might just be an array of events
    if (eventData instanceof Array && eventData.length && eventData[0].ph) {
      return true;
    }

    // Might be an object with a traceEvents field in it.
    if (eventData.traceEvents) {
      if (eventData.traceEvents instanceof Array) {
        if (eventData.traceEvents.length && eventData.traceEvents[0].ph) {
          return true;
        }
        if (eventData.samples && eventData.samples.length &&
            eventData.stackFrames !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  /**
   * Extracts a scoped ID from an event.
   *
   * In legacy trace files, the ID of an event is always stored in the 'id'
   * field and the event phase determines if the ID is process-local or
   * global. For example, async event IDs are considered global and object
   * event IDs are considered process-local.
   *
   * New trace files can explicitly specify whether an event ID is
   * process-local or global. These new IDs are stored in the 'id2' field so
   * that old trace importers that do not implement this logic break when they
   * try to import a new trace file. The value of id2 can be either of the
   * form '{global: 0x1000}' or of the form '{local: 0x1000}'.
   *
   * @param {!Object} event A trace event.
   * @return {!tr.model.ScopedId}
   */
  TraceEventImporter.scopedIdForEvent_ = function(event) {
    const scope = event.scope || tr.model.OBJECT_DEFAULT_SCOPE;
    let pid = undefined;
    if (event.id !== undefined) {
      if (event.id2 !== undefined) {
        throw new Error('Event has both id and id2');
      }
      pid = tr.model.LOCAL_ID_PHASES.has(event.ph) ? event.pid : undefined;
      return new tr.model.ScopedId(scope, event.id, pid);
    } else if (event.id2 !== undefined) {
      if (event.id2.global !== undefined) {
        return new tr.model.ScopedId(scope, event.id2.global);
      } else if (event.id2.local !== undefined) {
        return new tr.model.ScopedId(scope, event.id2.local, event.pid);
      }
      throw new Error(
          'Event that uses id2 must have either a global or local ID');
    }
    return undefined;
  };

  TraceEventImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'TraceEventImporter';
    },

    extractSubtraces() {
      // Because subtraces can be quite large, we need to make sure that we
      // don't hold a reference to the memory.
      const subtraces = this.subtraces_;
      this.subtraces_ = [];
      return subtraces;
    },

    /**
     * Deep copying is only needed if the trace was given to us as events.
     */
    deepCopyIfNeeded_(obj) {
      if (obj === undefined) obj = {};
      if (this.eventsWereFromString_) return obj;
      return deepCopy(obj);
    },

    /**
     * Always perform deep copying.
     */
    deepCopyAlways_(obj) {
      if (obj === undefined) obj = {};
      return deepCopy(obj);
    },

    /**
     * Helper to process an async event.
     */
    processAsyncEvent(event) {
      const thread = this.model_.getOrCreateProcess(event.pid).
          getOrCreateThread(event.tid);
      this.allAsyncEvents_.push({
        sequenceNumber: this.allAsyncEvents_.length,
        event,
        thread
      });
    },

    /**
     * Helper to process a flow event.
     */
    processFlowEvent(event, opt_slice) {
      const thread = this.model_.getOrCreateProcess(event.pid).
          getOrCreateThread(event.tid);
      this.allFlowEvents_.push({
        refGuid: tr.b.GUID.getLastSimpleGuid(),
        sequenceNumber: this.allFlowEvents_.length,
        event,
        slice: opt_slice,  // slice for events that have flow info
        thread
      });
    },

    /**
     * Helper that creates and adds samples to a Counter object based on
     * 'C' phase events.
     */
    processCounterEvent(event) {
      let ctrName;
      if (event.id !== undefined) {
        ctrName = event.name + '[' + event.id + ']';
      } else {
        ctrName = event.name;
      }

      const ctr = this.model_.getOrCreateProcess(event.pid)
          .getOrCreateCounter(event.cat, ctrName);
      const reservedColorId = event.cname ? getEventColor(event) : undefined;

      // Initialize the counter's series fields if needed.
      if (ctr.numSeries === 0) {
        for (const seriesName in event.args) {
          const colorId = reservedColorId ||
              getEventColor(event, ctr.name + '.' + seriesName);
          ctr.addSeries(new tr.model.CounterSeries(seriesName, colorId));
        }

        if (ctr.numSeries === 0) {
          this.model_.importWarning({
            type: 'counter_parse_error',
            message: 'Expected counter ' + event.name +
                ' to have at least one argument to use as a value.'
          });

          // Drop the counter.
          delete ctr.parent.counters[ctr.name];
          return;
        }
      }

      const ts = this.toModelTimeFromUs_(event.ts);
      ctr.series.forEach(function(series) {
        const val = event.args[series.name] ? event.args[series.name] : 0;
        series.addCounterSample(ts, val);
      });
    },

    processObjectEvent(event) {
      const thread = this.model_.getOrCreateProcess(event.pid).
          getOrCreateThread(event.tid);
      this.allObjectEvents_.push({
        sequenceNumber: this.allObjectEvents_.length,
        event,
        thread});
      if (thread.guid in this.contextProcessorPerThread) {
        const processor = this.contextProcessorPerThread[thread.guid];
        const scopedId = TraceEventImporter.scopedIdForEvent_(event);
        if (event.ph === 'D') {
          processor.destroyContext(scopedId);
        }
        // The context processor maintains a cache of unique context objects and
        // active context sets to reduce memory usage. If an object is modified,
        // we should invalidate this cache, because otherwise context sets from
        // before and after the modification may erroneously point to the same
        // context snapshot (as both are the same set/object instances).
        processor.invalidateContextCacheForSnapshot(scopedId);
      }
    },

    processContextEvent(event) {
      const thread = this.model_.getOrCreateProcess(event.pid).
          getOrCreateThread(event.tid);
      if (!(thread.guid in this.contextProcessorPerThread)) {
        this.contextProcessorPerThread[thread.guid] =
            new tr.importer.ContextProcessor(this.model_);
      }
      const scopedId = TraceEventImporter.scopedIdForEvent_(event);
      const contextType = event.name;
      const processor = this.contextProcessorPerThread[thread.guid];
      if (event.ph === '(') {
        processor.enterContext(contextType, scopedId);
      } else if (event.ph === ')') {
        processor.leaveContext(contextType, scopedId);
      } else {
        this.model_.importWarning({
          type: 'unknown_context_phase',
          message: 'Unknown context event phase: ' + event.ph + '.'
        });
      }
    },

    setContextsFromThread_(thread, slice) {
      if (thread.guid in this.contextProcessorPerThread) {
        slice.contexts =
            this.contextProcessorPerThread[thread.guid].activeContexts;
      }
    },

    processDurationEvent(event) {
      const thread = this.model_.getOrCreateProcess(event.pid)
        .getOrCreateThread(event.tid);
      const ts = this.toModelTimeFromUs_(event.ts);
      if (!thread.sliceGroup.isTimestampValidForBeginOrEnd(ts)) {
        this.model_.importWarning({
          type: 'duration_parse_error',
          message: 'Timestamps are moving backward.'
        });
        return;
      }

      if (event.ph === 'B') {
        const slice = thread.sliceGroup.beginSlice(
            event.cat, event.name, this.toModelTimeFromUs_(event.ts),
            this.deepCopyIfNeeded_(event.args),
            this.toModelTimeFromUs_(event.tts), event.argsStripped,
            getEventColor(event));
        slice.startStackFrame = this.getStackFrameForEvent_(event);
        this.setContextsFromThread_(thread, slice);
      } else if (event.ph === 'I' || event.ph === 'i' || event.ph === 'R') {
        if (event.s !== undefined && event.s !== 't') {
          throw new Error('This should never happen');
        }

        thread.sliceGroup.beginSlice(event.cat, event.name,
            this.toModelTimeFromUs_(event.ts),
            this.deepCopyIfNeeded_(event.args),
            this.toModelTimeFromUs_(event.tts),
            event.argsStripped,
            getEventColor(event));
        const slice = thread.sliceGroup.endSlice(
            this.toModelTimeFromUs_(event.ts),
            this.toModelTimeFromUs_(event.tts));
        slice.startStackFrame = this.getStackFrameForEvent_(event);
        slice.endStackFrame = undefined;
      } else {
        if (!thread.sliceGroup.openSliceCount) {
          this.model_.importWarning({
            type: 'duration_parse_error',
            message: 'E phase event without a matching B phase event.'
          });
          return;
        }

        const slice = thread.sliceGroup.endSlice(
            this.toModelTimeFromUs_(event.ts),
            this.toModelTimeFromUs_(event.tts),
            getEventColor(event));
        if (event.name && slice.title !== event.name) {
          this.model_.importWarning({
            type: 'title_match_error',
            message: 'Titles do not match. Title is ' +
                slice.title + ' in openSlice, and is ' +
                event.name + ' in endSlice'
          });
        }
        slice.endStackFrame = this.getStackFrameForEvent_(event);

        this.mergeArgsInto_(slice.args, event.args, slice.title);
      }
    },

    mergeArgsInto_(dstArgs, srcArgs, eventName) {
      for (const arg in srcArgs) {
        if (dstArgs[arg] !== undefined) {
          this.model_.importWarning({
            type: 'arg_merge_error',
            message: 'Different phases of ' + eventName +
                ' provided values for argument ' + arg + '.' +
                ' The last provided value will be used.'
          });
        }
        dstArgs[arg] = this.deepCopyIfNeeded_(srcArgs[arg]);
      }
    },

    processCompleteEvent(event) {
      // Preventing the overhead slices from making it into the model. This
      // only applies to legacy traces, as the overhead traces have been
      // removed from the chromium code.
      if (event.cat !== undefined &&
          event.cat.indexOf('trace_event_overhead') > -1) {
        return undefined;
      }

      const thread = this.model_.getOrCreateProcess(event.pid)
          .getOrCreateThread(event.tid);

      if (event.flow_out) {
        if (event.flow_in) {
          event.flowPhase = STEP;
        } else {
          event.flowPhase = PRODUCER;
        }
      } else if (event.flow_in) {
        event.flowPhase = CONSUMER;
      }

      const slice = thread.sliceGroup.pushCompleteSlice(event.cat, event.name,

          this.toModelTimeFromUs_(event.ts),
          this.maybeToModelTimeFromUs_(event.dur),
          this.maybeToModelTimeFromUs_(event.tts),
          this.maybeToModelTimeFromUs_(event.tdur),
          this.deepCopyIfNeeded_(event.args),
          event.argsStripped,
          getEventColor(event),
          event.bind_id);
      slice.startStackFrame = this.getStackFrameForEvent_(event);
      slice.endStackFrame = this.getStackFrameForEvent_(event, true);
      this.setContextsFromThread_(thread, slice);

      return slice;
    },

    processJitCodeEvent(event) {
      if (this.v8ProcessCodeMaps_[event.pid] === undefined) {
        this.v8ProcessCodeMaps_[event.pid] = new tr.e.importer.TraceCodeMap();
      }
      const map = this.v8ProcessCodeMaps_[event.pid];

      const data = event.args.data;
      // TODO(dsinclair): There are _a lot_ of JitCode events so I'm skipping
      // the display for now. Can revisit later if we want to show them.
      // Handle JitCodeMoved and JitCodeAdded event.
      if (event.name === 'JitCodeMoved') {
        map.moveEntry(data.code_start, data.new_code_start, data.code_len);
      } else {  // event.name === 'JitCodeAdded'
        map.addEntry(data.code_start, data.code_len, data.name, data.script_id);
      }
    },

    processMetadataEvent(event) {
      // V8 JIT events are currently logged as phase 'M' so we need to
      // separate them out and handle specially.
      if (event.name === 'JitCodeAdded' || event.name === 'JitCodeMoved') {
        this.v8SamplingData_.push(event);
        return;
      }

      // The metadata events aren't useful without args.
      if (event.argsStripped) return;

      if (event.name === 'process_name') {
        const process = this.model_.getOrCreateProcess(event.pid);
        process.name = event.args.name;
      } else if (event.name === 'process_labels') {
        const process = this.model_.getOrCreateProcess(event.pid);
        const labels = event.args.labels.split(',');
        for (let i = 0; i < labels.length; i++) {
          process.addLabelIfNeeded(labels[i]);
        }
      } else if (event.name === 'process_uptime_seconds') {
        const process = this.model_.getOrCreateProcess(event.pid);
        process.uptime_seconds = event.args.uptime;
      } else if (event.name === 'process_sort_index') {
        const process = this.model_.getOrCreateProcess(event.pid);
        process.sortIndex = event.args.sort_index;
      } else if (event.name === 'thread_name') {
        const thread = this.model_.getOrCreateProcess(event.pid).
            getOrCreateThread(event.tid);
        thread.name = event.args.name;
      } else if (event.name === 'thread_sort_index') {
        const thread = this.model_.getOrCreateProcess(event.pid).
            getOrCreateThread(event.tid);
        thread.sortIndex = event.args.sort_index;
      } else if (event.name === 'num_cpus') {
        let n = event.args.number;
        // Not all render processes agree on the cpu count in trace_event. Some
        // processes will report 1, while others will report the actual cpu
        // count. To deal with this, take the max of what is reported.
        if (this.softwareMeasuredCpuCount_ !== undefined) {
          n = Math.max(n, this.softwareMeasuredCpuCount_);
        }
        this.softwareMeasuredCpuCount_ = n;
      } else if (event.name === 'stackFrames') {
        const stackFrames = event.args.stackFrames;
        if (stackFrames === undefined) {
          this.model_.importWarning({
            type: 'metadata_parse_error',
            message: 'No stack frames found in a \'' + event.name +
                '\' metadata event'
          });
        } else {
          this.importStackFrames_(stackFrames, 'p' + event.pid + ':');
        }
      } else if (event.name === 'typeNames') {
        const objectTypeNameMap = event.args.typeNames;
        if (objectTypeNameMap === undefined) {
          this.model_.importWarning({
            type: 'metadata_parse_error',
            message: 'No mapping from object type IDs to names found in a \'' +
                event.name + '\' metadata event'
          });
        } else {
          this.importObjectTypeNameMap_(objectTypeNameMap, event.pid);
        }
      } else if (event.name === 'TraceConfig') {
        this.model_.metadata.push(
              {name: 'TraceConfig', value: event.args.value});
      } else {
        this.model_.importWarning({
          type: 'metadata_parse_error',
          message: 'Unrecognized metadata name: ' + event.name
        });
      }
    },

    processInstantEvent(event) {
      // V8 JIT events were logged as phase 'I' in the old format,
      // so we need to separate them out and handle specially.
      if (event.name === 'JitCodeAdded' || event.name === 'JitCodeMoved') {
        this.v8SamplingData_.push(event);
        return;
      }

      // Thread-level instant events are treated as zero-duration slices.
      if (event.s === 't' || event.s === undefined) {
        this.processDurationEvent(event);
        return;
      }

      let constructor;
      switch (event.s) {
        case 'g':
          constructor = tr.model.GlobalInstantEvent;
          break;
        case 'p':
          constructor = tr.model.ProcessInstantEvent;
          break;
        default:
          this.model_.importWarning({
            type: 'instant_parse_error',
            message: 'I phase event with unknown "s" field value.'
          });
          return;
      }

      const instantEvent = new constructor(event.cat, event.name,
          getEventColor(event), this.toModelTimeFromUs_(event.ts),
          this.deepCopyIfNeeded_(event.args));

      switch (instantEvent.type) {
        case tr.model.InstantEventType.GLOBAL:
          this.model_.instantEvents.push(instantEvent);
          break;

        case tr.model.InstantEventType.PROCESS: {
          const process = this.model_.getOrCreateProcess(event.pid);
          process.instantEvents.push(instantEvent);
          break;
        }

        default:
          throw new Error('Unknown instant event type: ' + event.s);
      }
    },

    getOrCreateProfileTree_(sampleType, id) {
      if (!this.profileTrees_.has(sampleType)) {
        this.profileTrees_.set(sampleType, new Map());
      }
      const profileTreeMap = this.profileTrees_.get(sampleType);
      if (profileTreeMap.has(id)) {
        return profileTreeMap.get(id);
      }
      const profileTree = new tr.model.ProfileTree();
      profileTreeMap.set(id, profileTree);
      const info = this.profileInfo_.get(id);
      if (info !== undefined) {
        profileTree.startTime = info.startTime;
        profileTree.pid = info.pid;
        profileTree.tid = info.tid;
      }
      return profileTree;
    },

    processSample(event) {
      if (event.args === undefined || event.args.data === undefined) {
        return;
      }
      if (event.id === undefined) {
        throw new Error('No event ID in sample');
      }

      const data = event.args.data;
      // Sampling usually happens in a separate thread, but start time is issued
      // in the main thread, in order to get the correct thread object,
      // we should use pid and tid from main thread.
      if (data.startTime !== undefined) {
        this.profileInfo_.set(event.id, {
          startTime: data.startTime,
          pid: event.pid,
          tid: event.tid
        });
      }
      const timeDeltas = data.timeDeltas;
      for (const sampleType in data) {
        if (sampleType === 'timeDeltas' || sampleType === 'startTime') {
          continue;
        }
        // The length of samples array and the length of timeDeltas array
        // should be the same.
        if (data[sampleType].samples && timeDeltas &&
            data[sampleType].samples.length !== timeDeltas.length) {
          // eslint-disable-next-line
          throw new Error('samples and timeDeltas array should have same length');
        }

        const profileTree = this.getOrCreateProfileTree_(sampleType, event.id);
        const nodes = data[sampleType].nodes;
        const samples = data[sampleType].samples;
        if (nodes !== undefined) {
          for (const node of nodes) {
            // Get the sepcific ProfileNode type based on sampleType.
            const ProfileNodeType =
                tr.model.ProfileNode.subTypes.getConstructor(undefined,
                    sampleType);
            const profileNode = ProfileNodeType.constructFromObject(profileTree,
                node);
            if (profileNode === undefined) {
              continue;
            }
            profileTree.add(profileNode);
          }
        }
        // The samples array contains id pointing to the profile node.
        if (samples !== undefined) {
          const thread = this.model_.getOrCreateProcess(profileTree.pid)
              .getOrCreateThread(profileTree.tid);
          for (let i = 0, len = samples.length; i < len; ++i) {
            const node = profileTree.getNode(samples[i]);
            profileTree.endTime += timeDeltas[i];
            if (node === undefined) continue;
            const start = this.toModelTimeFromUs_(profileTree.endTime);
            this.model_.samples.push(
                new tr.model.Sample(start, node.sampleTitle, node, thread));
          }
        }
      }
    },

    processLegacyV8Sample(event) {
      const data = event.args.data;
      const sampleType = 'legacySample';
      const ProfileNodeType =
          tr.model.ProfileNode.subTypes.getConstructor(undefined, sampleType);

      // As-per DevTools, the backend sometimes creates bogus samples. Skip it.
      if (data.vm_state === 'js' && !data.stack.length) return;

      const profileTree = this.getOrCreateProfileTree_(sampleType, event.pid);
      if (profileTree.getNode(-1) === undefined) {
        profileTree.add(
            new ProfileNodeType(-1, {
              url: '',
              scriptId: -1,
              functionName: 'unknown'
            }, undefined));
      }
      // There are several types of v8 sample events, gc, native, compiler, etc.
      // Some of these types have stacks and some don't, we handle those two
      // cases differently. For types that don't have any stack frames attached
      // we synthesize one based on the type of thing that's happening so when
      // we view all the samples we'll see something like 'external' or 'gc'
      // as a fraction of the time spent.
      let node = undefined;
      if (data.stack.length > 0 && this.v8ProcessCodeMaps_[event.pid]) {
        const map = this.v8ProcessCodeMaps_[event.pid];
        // Stacks have the leaf node first, flip them around so the root
        // comes first.
        data.stack.reverse();
        let parentNode = undefined;
        for (let i = 0; i < data.stack.length; i++) {
          const entry = map.lookupEntry(data.stack[i]);
          if (entry === undefined) {
            node = profileTree.getNode(-1);
          } else {
            node = profileTree.getNode(entry.id);
            if (node === undefined) {
              const sourceInfo = entry.sourceInfo;
              node = new ProfileNodeType(entry.id, {
                functionName: entry.name,
                url: entry.sourceInfo.file,
                lineNumber: sourceInfo.line !== -1 ? sourceInfo.line :
                                                     undefined,
                columnNumber: sourceInfo.column !== -1 ? sourceInfo.column :
                                                         undefined,
                scriptid: entry.sourceInfo.scriptId
              }, parentNode);
              profileTree.add(node);
            }
          }
          parentNode = node;
        }
      } else {
        node = profileTree.getNode(data.vm_state);
        if (node === undefined) {
          node = new ProfileNodeType(data.vm_state, {
            url: '',
            functionName: data.vm_state
          }, undefined);
          profileTree.add(node);
        }
      }

      const thread = this.model_.getOrCreateProcess(event.pid)
          .getOrCreateThread(event.tid);

      this.model_.samples.push(
          new tr.model.Sample(this.toModelTimeFromUs_(event.ts),
                            node.sampleTitle, node, thread));
    },

    processTraceSampleEvent(event) {
      if (event.name === 'V8Sample' || event.name.startsWith('Profile')) {
        this.v8SamplingData_.push(event);
        return;
      }

      let node = this.stackFrameTree_.getNode(event.name);
      if (node === undefined && event.sf !== undefined) {
        node = this.stackFrameTree_.getNode('g' + event.sf);
      }

      if (node === undefined) {
        let id = event.name;
        if (event.sf) {
          id = 'g' + event.sf;
        }
        const ProfileNodeType =
            tr.model.ProfileNode.subTypes.getConstructor(undefined,
                'legacySample');
        node = this.stackFrameTree_.add(new ProfileNodeType(
          id, {
            functionName: event.name
          }, undefined
        ));
      }
      const thread = this.model_.getOrCreateProcess(event.pid)
          .getOrCreateThread(event.tid);

      const sample = new tr.model.Sample(
        this.toModelTimeFromUs_(event.ts), 'Trace Event Sample',
        node, thread, undefined, 1,
        this.deepCopyIfNeeded_(event.args));
      this.setContextsFromThread_(thread, sample);
      this.model_.samples.push(sample);
    },

    processMemoryDumpEvent(event) {
      // TODO(chiniforooshan): Make memory dumps either use local or global IDs
      // instead of the generic IDs with different phases.
      // https://github.com/catapult-project/catapult/issues/2957
      if (event.ph !== 'v') {
        throw new Error('Invalid memory dump event phase "' + event.ph + '".');
      }

      const dumpId = event.id;
      if (dumpId === undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'Memory dump event (phase \'' + event.ph +
              '\') without a dump ID.'
        });
        return;
      }

      const pid = event.pid;
      if (pid === undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'Memory dump event (phase\'' + event.ph + '\', dump ID \'' +
              dumpId + '\') without a PID.'
        });
        return;
      }

      // Dump ID -> PID -> [process memory dump events].
      const allEvents = this.allMemoryDumpEvents_;

      // PID -> [process memory dump events].
      let dumpIdEvents = allEvents[dumpId];
      if (dumpIdEvents === undefined) {
        allEvents[dumpId] = dumpIdEvents = {};
      }

      // [process memory dump events].
      let processEvents = dumpIdEvents[pid];
      if (processEvents === undefined) {
        dumpIdEvents[pid] = processEvents = [];
      }

      processEvents.push(event);
    },

    processClockSyncEvent(event) {
      if (event.ph !== 'c') {
        throw new Error('Invalid clock sync event phase "' + event.ph + '".');
      }

      const syncId = event.args.sync_id;
      if (syncId === undefined) {
        this.model_.importWarning({
          type: 'clock_sync_parse_error',
          message: 'Clock sync at time ' + event.ts + ' without an ID.'
        });
        return;
      }

      if (event.args && event.args.issue_ts !== undefined) {
        // When Chrome is the tracing controller and is the requester of the
        // clock sync, the clock sync event looks like:
        //
        //   {
        //     "args": {
        //       "sync_id": "abc123",
        //       "issue_ts": 12340
        //     }
        //     "ph": "c"
        //     "ts": 12345
        //     ...
        //   }
        this.model_.clockSyncManager.addClockSyncMarker(
            this.clockDomainId_, syncId,
            tr.b.Unit.timestampFromUs(event.args.issue_ts),
            tr.b.Unit.timestampFromUs(event.ts));
      } else {
        // When Chrome is a tracing agent and is the recipient of the clock
        // sync request, the clock sync event looks like:
        //
        //   {
        //     "args": { "sync_id": "abc123" }
        //     "ph": "c"
        //     "ts": 12345
        //     ...
        //   }
        this.model_.clockSyncManager.addClockSyncMarker(
            this.clockDomainId_, syncId, tr.b.Unit.timestampFromUs(event.ts));
      }
    },

    processLegacyChromeClockSyncEvent(event) {
      // Older versions of Chrome don't support the devtools clock sync API, but
      // Telemetry can work around this by creating clock sync events via
      // console.time & console.timeEnd, which issue trace events as long as the
      // 'blink.console' category is enabled. When we encounter async events
      // with names starting with the prefix 'ClockSyncEvent.' , treat these as
      // clock sync markers.
      if (event.ph === 'S') {
        this.legacyChromeClockSyncStartEvent_ = event;
      } else if (event.ph === 'F') {
        this.legacyChromeClockSyncFinishEvent_ = event;
      }

      if (this.legacyChromeClockSyncStartEvent_ === undefined ||
          this.legacyChromeClockSyncFinishEvent_ === undefined) {
        return;
      }

      const startSyncId = this.legacyChromeClockSyncStartEvent_.name.substring(
          LEGACY_CHROME_CLOCK_SYNC_EVENT_NAME_PREFIX.length);
      const finishSyncId =
        this.legacyChromeClockSyncFinishEvent_.name.substring(
            LEGACY_CHROME_CLOCK_SYNC_EVENT_NAME_PREFIX.length);

      if (startSyncId !== finishSyncId) {
        throw new Error(
            'Inconsistent clock sync ID of legacy Chrome clock sync events');
      }

      this.model_.clockSyncManager.addClockSyncMarker(
          this.clockDomainId_, startSyncId,
          tr.b.Unit.timestampFromUs(this.legacyChromeClockSyncStartEvent_.ts),
          tr.b.Unit.timestampFromUs(this.legacyChromeClockSyncFinishEvent_.ts));
    },

    // Because the order of Jit code events and V8 samples are not guaranteed,
    // We store them in an array, sort by timestamp, and then process them.
    processV8Events() {
      this.v8SamplingData_.sort(function(a, b) {
        if (a.ts !== b.ts) return a.ts - b.ts;
        if (a.ph === 'M' || a.ph === 'I') {
          return -1;
        } else if (b.ph === 'M' || b.ph === 'I') {
          return 1;
        }
        return 0;
      });
      const length = this.v8SamplingData_.length;
      for (let i = 0; i < length; ++i) {
        const event = this.v8SamplingData_[i];
        if (event.ph === 'M' || event.ph === 'I') {
          this.processJitCodeEvent(event);
        } else if (event.ph === 'P') {
          // The current sampling format and legacy sampling format
          // have the same ph, but the current sampling format will
          // start with 'Profile' in its name.
          if (event.name.startsWith('Profile')) {
            this.processSample(event);
          } else {
            this.processLegacyV8Sample(event);
          }
        }
      }
    },

    importClockSyncMarkers() {
      if (this.events_ instanceof tr.b.TraceStream) {
        const parser = oboe().node(
            '{cat ph}', this.importClockSyncMarker_.bind(this));
        this.events_.rewind();
        while (this.events_.hasData) {
          parser.write(this.events_.readNumBytes());
        }
        parser.finish();
      } else {
        for (let i = 0; i < this.events_.length; i++) {
          this.importClockSyncMarker_(this.events_[i]);
        }
      }
    },

    importClockSyncMarker_(event) {
      const isLegacyChromeClockSync = isLegacyChromeClockSyncEvent(event);
      if (event.ph !== 'c' && !isLegacyChromeClockSync) return;

      const eventSizeInBytes =
          this.model_.importOptions.trackDetailedModelStats ?
              JSON.stringify(event).length : undefined;

      this.model_.stats.willProcessBasicTraceEvent(
          'clock_sync', event.cat, event.name, event.ts, eventSizeInBytes);

      if (isLegacyChromeClockSync) {
        this.processLegacyChromeClockSyncEvent(event);
      } else {
        this.processClockSyncEvent(event);
      }
    },

    /**
     * Walks through the events_ list and outputs the structures discovered to
     * model_.
     */
    importEvents() {
      this.hasEvents_ = false;
      if (this.stackFrameEvents_) {
        this.importStackFrames_(this.stackFrameEvents_, 'g');
      }

      if (this.traceAnnotations_) this.importAnnotations_();

      if (this.events_ instanceof tr.b.TraceStream) {
        const parser = oboe().node('{cat ph}', this.processEvent_.bind(this));
        this.events_.rewind();
        while (this.events_.hasData) {
          parser.write(this.events_.readNumBytes());
        }
        parser.finish();
      } else {
        for (let eI = 0; eI < this.events_.length; eI++) {
          this.processEvent_(this.events_[eI]);
        }
      }

      // Import calls importEvents then autoCloseOpenSlices then finalizeImport.
      // AsyncSlices must be created in importEvents so they can be auto-closed.
      this.createAsyncSlices_();

      this.processV8Events();

      // Remove all the root stack frame children as they should
      // already be added.
      for (const frame of Object.values(this.v8ProcessRootStackFrame_)) {
        frame.removeAllChildren();
      }
    },

    // Some trace authors store subtraces as specific properties of the trace.
    storeSubtrace_(subtrace) {
      this.subtraces_.push(subtrace);
      return oboe.drop;
    },

    storeSamples_(samples) {
      this.sampleEvents_ = samples;
      return oboe.drop;
    },

    storeStackFrames_(stackFrames) {
      this.stackFrameEvents_ = stackFrames;
      return oboe.drop;
    },

    // Some implementations specify displayTimeUnit
    storeDisplayTimeUnit_(unitName) {
      if (!unitName) return;
      const unit = tr.b.TimeDisplayModes[unitName];
      if (unit === undefined) {
        throw new Error('Unit ' + unitName + ' is not supported.');
      }
      this.model_.intrinsicTimeUnit = unit;
      return oboe.drop;
    },

    storeTraceAnnotations_(traceAnnotations) {
      this.traceAnnotations_ = traceAnnotations;
      return oboe.drop;
    },

    // Any fields in the container that is not in NON_METADATA_FIELDS should be
    // treated as metadata.
    storeMetadata_(container) {
      for (const fieldName of Object.keys(container)) {
        if (NON_METADATA_FIELDS.has(fieldName)) continue;
        this.model_.metadata.push(
            { name: fieldName, value: container[fieldName] });
        if (fieldName !== 'metadata') continue;
        const metadata = container[fieldName];
        if (metadata['highres-ticks']) {
          this.model_.isTimeHighResolution = metadata['highres-ticks'];
        }
        if (metadata['clock-domain']) {
          this.clockDomainId_ = metadata['clock-domain'];
        }
      }
      return oboe.drop;
    },

    processEvent_(event) {
      this.hasEvents_ = true;
      const importOptions = this.model_.importOptions;
      const trackDetailedModelStats = importOptions.trackDetailedModelStats;
      const modelStats = this.model_.stats;

      if (event.args === '__stripped__') {
        event.argsStripped = true;
        event.args = undefined;
      }

      let eventSizeInBytes = undefined;
      if (trackDetailedModelStats) {
        eventSizeInBytes = JSON.stringify(event).length;
      }

      switch (event.ph) {
        case 'B':
        case 'E':
          modelStats.willProcessBasicTraceEvent(
              'begin_end (non-compact)', event.cat, event.name, event.ts,
              eventSizeInBytes);
          this.processDurationEvent(event);
          break;

        case 'X': {
          modelStats.willProcessBasicTraceEvent(
              'begin_end (compact)', event.cat, event.name, event.ts,
              eventSizeInBytes);
          const slice = this.processCompleteEvent(event);
          // TODO(yuhaoz): If Chrome supports creating other events with flow,
          // we will need to call processFlowEvent for them also.
          // https://github.com/catapult-project/catapult/issues/1259
          if (slice !== undefined && event.bind_id !== undefined) {
            this.processFlowEvent(event, slice);
          }
          break;
        }

        case 'b':
        case 'e':
        case 'n':
        case 'S':
        case 'F':
        case 'T':
        case 'p':
          modelStats.willProcessBasicTraceEvent(
              'async', event.cat, event.name, event.ts, eventSizeInBytes);
          this.processAsyncEvent(event);
          break;

        // Note, I is historic. The instant event marker got changed, but we
        // want to support loading old trace files so we have both I and i.
        case 'I':
        case 'i':
        case 'R':
          modelStats.willProcessBasicTraceEvent(
              'instant', event.cat, event.name, event.ts, eventSizeInBytes);
          this.processInstantEvent(event);
          break;

        case 'P':
          modelStats.willProcessBasicTraceEvent(
              'samples', event.cat, event.name, event.ts, eventSizeInBytes);
          this.processTraceSampleEvent(event);
          break;

        case 'C':
          modelStats.willProcessBasicTraceEvent(
              'counters', event.cat, event.name, event.ts, eventSizeInBytes);
          this.processCounterEvent(event);
          break;

        case 'M':
          modelStats.willProcessBasicTraceEvent(
              'metadata', event.cat, event.name, event.ts, eventSizeInBytes);
          this.processMetadataEvent(event);
          break;

        case 'N':
        case 'D':
        case 'O':
          modelStats.willProcessBasicTraceEvent(
              'objects', event.cat, event.name, event.ts, eventSizeInBytes);
          this.processObjectEvent(event);
          break;

        case 's':
        case 't':
        case 'f':
          modelStats.willProcessBasicTraceEvent(
              'flows', event.cat, event.name, event.ts, eventSizeInBytes);
          this.processFlowEvent(event);
          break;

        case 'v':
          modelStats.willProcessBasicTraceEvent(
              'memory_dumps', event.cat, event.name, event.ts,
              eventSizeInBytes);
          this.processMemoryDumpEvent(event);
          break;

        case '(':
        case ')':
          this.processContextEvent(event);
          break;

        // No-op. Clock sync events have already been processed in
        // importClockSyncMarkers().
        case 'c':
          break;

        default:
          modelStats.willProcessBasicTraceEvent(
              'unknown', event.cat, event.name, event.ts, eventSizeInBytes);
          this.model_.importWarning({
            type: 'parse_error',
            message: 'Unrecognized event phase: ' +
                event.ph + ' (' + event.name + ')'
          });
      }
      return oboe.drop;
    },

    importStackFrames_(rawStackFrames, idPrefix) {
      const model = this.model_;

      for (const id in rawStackFrames) {
        const rawStackFrame = rawStackFrames[id];
        const fullId = idPrefix + id;
        const textForColor = rawStackFrame.category ?
            rawStackFrame.category : rawStackFrame.name;
        const stackFrame = new tr.model.StackFrame(
            undefined /* parentFrame */, fullId, rawStackFrame.name,
            ColorScheme.getColorIdForGeneralPurposeString(textForColor));
        model.addStackFrame(stackFrame);
      }

      for (const id in rawStackFrames) {
        const fullId = idPrefix + id;
        const stackFrame = model.stackFrames[fullId];
        if (stackFrame === undefined) {
          throw new Error('Internal error');
        }

        const rawStackFrame = rawStackFrames[id];
        const parentId = rawStackFrame.parent;
        let parentStackFrame;
        if (parentId === undefined) {
          parentStackFrame = undefined;
        } else {
          const parentFullId = idPrefix + parentId;
          parentStackFrame = model.stackFrames[parentFullId];
          if (parentStackFrame === undefined) {
            this.model_.importWarning({
              type: 'metadata_parse_error',
              message: 'Missing parent frame with ID ' + parentFullId +
                  ' for stack frame \'' + stackFrame.name + '\' (ID ' + fullId +
                  ').'
            });
          }
        }
        stackFrame.parentFrame = parentStackFrame;
      }

      // This section is a reimplementation of the above behaviour but using
      // the new ProfileNode type instead of StackFrame.
      // We keep the StackFrame version for compatibility for now.
      const ProfileNodeType =
          tr.model.ProfileNode.subTypes.getConstructor(undefined,
              'legacySample');
      if (idPrefix === 'g') {
        for (const id in rawStackFrames) {
          const rawStackFrame = rawStackFrames[id];
          const textForColor = rawStackFrame.category ?
              rawStackFrame.category : rawStackFrame.name;
          const node = this.stackFrameTree_.add(new ProfileNodeType(
            'g' + id, {
              functionName: rawStackFrame.name
            }, undefined));
          node.colorId =
            ColorScheme.getColorIdForGeneralPurposeString(textForColor);
          node.parentId = rawStackFrame.parent;
        }

        for (const id in rawStackFrames) {
          const node = this.stackFrameTree_.getNode('g' + id);
          const parentId = node.parentId;
          let parentNode = undefined;
          if (parentId !== undefined) {
            parentNode = this.stackFrameTree_.getNode('g' + parentId);
            if (parentNode === undefined) {
              this.model_.importWarning({
                type: 'metadata_parse_error',
                message: 'Missing parent frame with ID ' + parentId +
                  ' for stack frame \'' + node.name + '\' (ID ' + node.id +
                  ').'
              });
            }
            node.parentNode = parentNode;
          }
        }
      }
    },

    importObjectTypeNameMap_(rawObjectTypeNameMap, pid) {
      if (pid in this.objectTypeNameMap_) {
        this.model_.importWarning({
          type: 'metadata_parse_error',
          message: 'Mapping from object type IDs to names provided for pid=' +
              pid + ' multiple times.'
        });
        return;
      }

      let objectTypeNamePrefix = undefined;
      let objectTypeNameSuffix = undefined;
      const objectTypeNameMap = {};
      for (const objectTypeId in rawObjectTypeNameMap) {
        const rawObjectTypeName = rawObjectTypeNameMap[objectTypeId];

        // If we haven't figured out yet which compiler the object type names
        // come from, we try to do it now.
        if (objectTypeNamePrefix === undefined) {
          for (let i = 0; i < OBJECT_TYPE_NAME_PATTERNS.length; i++) {
            const pattern = OBJECT_TYPE_NAME_PATTERNS[i];
            if (rawObjectTypeName.startsWith(pattern.prefix) &&
                rawObjectTypeName.endsWith(pattern.suffix)) {
              objectTypeNamePrefix = pattern.prefix;
              objectTypeNameSuffix = pattern.suffix;
              break;
            }
          }
        }

        if (objectTypeNamePrefix !== undefined &&
            rawObjectTypeName.startsWith(objectTypeNamePrefix) &&
            rawObjectTypeName.endsWith(objectTypeNameSuffix)) {
          // With compiler-specific prefix and suffix (automatically annotated
          // object types).
          objectTypeNameMap[objectTypeId] = rawObjectTypeName.substring(
              objectTypeNamePrefix.length,
              rawObjectTypeName.length - objectTypeNameSuffix.length);
        } else {
          // Without compiler-specific prefix and suffix (manually annotated
          // object types and '[unknown]').
          objectTypeNameMap[objectTypeId] = rawObjectTypeName;
        }
      }

      this.objectTypeNameMap_[pid] = objectTypeNameMap;
    },

    importAnnotations_() {
      for (const id in this.traceAnnotations_) {
        const annotation = tr.model.Annotation.fromDictIfPossible(
            this.traceAnnotations_[id]);
        if (!annotation) {
          this.model_.importWarning({
            type: 'annotation_warning',
            message: 'Unrecognized traceAnnotation typeName \"' +
                this.traceAnnotations_[id].typeName + '\"'
          });
          continue;
        }
        this.model_.addAnnotation(annotation);
      }
    },

    /**
     * Called by the Model after all other importers have imported their
     * events.
     */
    finalizeImport() {
      if (this.softwareMeasuredCpuCount_ !== undefined) {
        this.model_.kernel.softwareMeasuredCpuCount =
            this.softwareMeasuredCpuCount_;
      }
      this.createFlowSlices_();
      this.createExplicitObjects_();
      this.createImplicitObjects_();
      this.createMemoryDumps_();
    },

    /* Events can have one or more stack frames associated with them, but
     * that frame might be encoded either as a stack trace of program counters,
     * or as a direct stack frame reference. This handles either case and
     * if found, returns the stackframe.
     */
    getStackFrameForEvent_(event, opt_lookForEndEvent) {
      let sf;
      let stack;
      if (opt_lookForEndEvent) {
        sf = event.esf;
        stack = event.estack;
      } else {
        sf = event.sf;
        stack = event.stack;
      }
      if (stack !== undefined && sf !== undefined) {
        this.model_.importWarning({
          type: 'stack_frame_and_stack_error',
          message: 'Event at ' + event.ts +
              ' cannot have both a stack and a stackframe.'
        });
        return undefined;
      }

      if (stack !== undefined) {
        return this.model_.resolveStackToStackFrame_(event.pid, stack);
      }
      if (sf === undefined) return undefined;

      const stackFrame = this.model_.stackFrames['g' + sf];
      if (stackFrame === undefined) {
        this.model_.importWarning({
          type: 'sample_import_error',
          message: 'No frame for ' + sf
        });
        return;
      }
      return stackFrame;
    },

    resolveStackToStackFrame_(pid, stack) {
      // TODO(alph,fmeawad): Add codemap resolution code here.
      return undefined;
    },

    importSampleData() {
      if (!this.sampleEvents_) return;
      const m = this.model_;

      // If this is the only importer, then fake-create the threads.
      const events = this.sampleEvents_;
      if (this.hasEvents_ === undefined) {
        throw new Error('importEvents is not run before importSampleData');
      } else if (!this.hasEvents_) {
        for (let i = 0; i < events.length; i++) {
          const event = events[i];
          m.getOrCreateProcess(event.tid).getOrCreateThread(event.tid);
        }
      }

      const threadsByTid = {};
      m.getAllThreads().forEach(function(t) {
        threadsByTid[t.tid] = t;
      });

      for (let i = 0; i < events.length; i++) {
        const event = events[i];
        const thread = threadsByTid[event.tid];
        if (thread === undefined) {
          m.importWarning({
            type: 'sample_import_error',
            message: 'Thread ' + events.tid + 'not found'
          });
          continue;
        }

        let cpu;
        if (event.cpu !== undefined) {
          cpu = m.kernel.getOrCreateCpu(event.cpu);
        }

        const leafNode = this.stackFrameTree_.getNode('g' + event.sf);

        const sample = new tr.model.Sample(
          this.toModelTimeFromUs_(event.ts),
          event.name,
          leafNode,
          thread,
          cpu,
          event.weight
        );
        m.samples.push(sample);
      }
    },

    createAsyncSlices_() {
      if (this.allAsyncEvents_.length === 0) return;

      this.allAsyncEvents_.sort(function(x, y) {
        const d = x.event.ts - y.event.ts;
        if (d !== 0) return d;
        return x.sequenceNumber - y.sequenceNumber;
      });

      const legacyEvents = [];
      // Group nestable async events by ID. Events with the same ID should
      // belong to the same parent async event.
      const nestableAsyncEventsByKey = {};
      const nestableMeasureAsyncEventsByKey = {};
      for (let i = 0; i < this.allAsyncEvents_.length; i++) {
        const asyncEventState = this.allAsyncEvents_[i];
        const event = asyncEventState.event;
        if (event.ph === 'S' || event.ph === 'F' || event.ph === 'T' ||
            event.ph === 'p') {
          legacyEvents.push(asyncEventState);
          continue;
        }
        if (event.cat === undefined) {
          this.model_.importWarning({
            type: 'async_slice_parse_error',
            message: 'Nestable async events (ph: b, e, or n) require a ' +
                'cat parameter.'
          });
          continue;
        }

        if (event.name === undefined) {
          this.model_.importWarning({
            type: 'async_slice_parse_error',
            message: 'Nestable async events (ph: b, e, or n) require a ' +
                'name parameter.'
          });
          continue;
        }

        const id = TraceEventImporter.scopedIdForEvent_(event);
        if (id === undefined) {
          this.model_.importWarning({
            type: 'async_slice_parse_error',
            message: 'Nestable async events (ph: b, e, or n) require an ' +
                'id parameter.'
          });
          continue;
        }

        if (event.cat === 'blink.user_timing') {
          const matched = /([^\/:]+):([^\/:]+)\/?(.*)/.exec(event.name);
          if (matched !== null) {
            const key = matched[1] + ':' + event.cat;
            event.args = JSON.parse(Base64.atob(matched[3]) || '{}');
            if (nestableMeasureAsyncEventsByKey[key] === undefined) {
              nestableMeasureAsyncEventsByKey[key] = [];
            }
            nestableMeasureAsyncEventsByKey[key].push(asyncEventState);
            continue;
          }
        }

        const key = event.cat + ':' + id.toStringWithDelimiter(':');
        if (nestableAsyncEventsByKey[key] === undefined) {
          nestableAsyncEventsByKey[key] = [];
        }
        nestableAsyncEventsByKey[key].push(asyncEventState);
      }
      // Handle legacy async events.
      this.createLegacyAsyncSlices_(legacyEvents);

      // Parse nestable measure async events into AsyncSlices.
      this.createNestableAsyncSlices_(nestableMeasureAsyncEventsByKey);

      // Parse nestable async events into AsyncSlices.
      this.createNestableAsyncSlices_(nestableAsyncEventsByKey);
    },

    createLegacyAsyncSlice_(events) {
      const asyncEventState = events[events.length - 1];
      const event = asyncEventState.event;
      const name = event.name;
      const id = TraceEventImporter.scopedIdForEvent_(event);
      const key = id.toStringWithDelimiter(':');
      const asyncSliceConstructor = tr.model.AsyncSlice.subTypes.getConstructor(
          events[0].event.cat, name);
      let duration;
      if (event.ts !== undefined) {
        duration = this.toModelTimeFromUs_(event.ts - events[0].event.ts);
      }
      const slice = new asyncSliceConstructor(
          events[0].event.cat,
          name,
          getEventColor(events[0].event),
          this.toModelTimeFromUs_(events[0].event.ts),
          Object.assign({}, events[0].event.args, event.args),
          duration || 0,
          true,
          undefined,
          undefined,
          events[0].event.argsStripped);
      if (duration === undefined) {
        slice.didNotFinish = true;
        slice.error = 'Slice has no matching END. End time has been adjusted.';
        // End time will be adjusted by AsyncSliceGroup.autoCloseOpenSlices().
        this.model_.importWarning({
          type: 'async_slice_parse_error',
          message: 'Legacy async BEGIN event at ' +
            events[0].event.ts + ' with name="' +
            name + '" and id=' + key + ' was unmatched.'
        });
      }
      slice.startThread = events[0].thread;
      slice.endThread = asyncEventState.thread;
      slice.id = key;

      const stepType = events[1].event.ph;
      let isValid = true;

      // Create subSlices for each step. Skip the start and finish events,
      // which are always first and last respectively.
      for (let j = 1; j < events.length - 1; ++j) {
        if (events[j].event.ph === 'T' || events[j].event.ph === 'p') {
          isValid = this.assertStepTypeMatches_(stepType, events[j]);
          if (!isValid) break;
        }

        if (events[j].event.ph === 'S') {
          this.model_.importWarning({
            type: 'async_slice_parse_error',
            message: 'At ' + events[j].event.ts + ', a slice named "' +
                name + '" with id=' + id +
                ' had a step before the start event.'
          });
          continue;
        }

        if (events[j].event.ph === 'F') {
          this.model_.importWarning({
            type: 'async_slice_parse_error',
            message: 'At ' + events[j].event.ts + ', a slice named ' +
                name + ' with id=' + id +
                ' had a step after the finish event.'
          });
          continue;
        }

        const startIndex = j + (stepType === 'T' ? 0 : -1);
        const endIndex = startIndex + 1;

        let subName = name;
        if (!events[j].event.argsStripped &&
            (events[j].event.ph === 'T' || events[j].event.ph === 'p')) {
          subName = events[j].event.args.step;
        }

        const asyncSliceConstructor =
            tr.model.AsyncSlice.subTypes.getConstructor(
                events[0].event.cat,
                subName);
        let duration;
        if (events[endIndex].event.ts !== undefined) {
          duration = this.toModelTimeFromUs_(
              events[endIndex].event.ts - events[startIndex].event.ts);
        }
        const subSlice = new asyncSliceConstructor(
            events[0].event.cat,
            subName,
            getEventColor(events[0].event, subName + j),
            this.toModelTimeFromUs_(events[startIndex].event.ts),
            this.deepCopyIfNeeded_(events[j].event.args),
            duration || 0,
            undefined,
            undefined,
            events[startIndex].event.argsStripped);
        if (duration === undefined) {
          subSlice.didNotFinish = true;
          subSlice.error =
              'Slice has no matching END. End time has been adjusted.';
          // End time will be adjusted by AsyncSliceGroup.autoCloseOpenSlices().
        }
        subSlice.startThread = events[startIndex].thread;
        subSlice.endThread = events[endIndex].thread;
        subSlice.id = key;

        slice.subSlices.push(subSlice);
      }

      if (isValid) {
        // Add |slice| to the start-thread's asyncSlices.
        slice.startThread.asyncSliceGroup.push(slice);
      }
    },

    createLegacyAsyncSlices_(legacyEvents) {
      if (legacyEvents.length === 0) return;

      legacyEvents.sort(function(x, y) {
        const d = x.event.ts - y.event.ts;
        if (d !== 0) return d;
        return x.sequenceNumber - y.sequenceNumber;
      });

      const asyncEventStatesByNameThenID = {};

      for (let i = 0; i < legacyEvents.length; i++) {
        const asyncEventState = legacyEvents[i];

        const event = asyncEventState.event;
        const name = event.name;
        if (name === undefined) {
          this.model_.importWarning({
            type: 'async_slice_parse_error',
            message: 'Async events (ph: S, T, p, or F) require a name ' +
                ' parameter.'
          });
          continue;
        }

        const id = TraceEventImporter.scopedIdForEvent_(event);
        if (id === undefined) {
          this.model_.importWarning({
            type: 'async_slice_parse_error',
            message: 'Async events (ph: S, T, p, or F) require an id parameter.'
          });
          continue;
        }
        const key = id.toStringWithDelimiter(':');
        // TODO(simonjam): Add a synchronous tick on the appropriate thread.

        if (event.ph === 'S') {
          if (asyncEventStatesByNameThenID[name] === undefined) {
            asyncEventStatesByNameThenID[name] = {};
          }
          if (asyncEventStatesByNameThenID[name][key]) {
            this.model_.importWarning({
              type: 'async_slice_parse_error',
              message: 'At ' + event.ts + ', a slice of the same id ' + id +
                  ' was alrady open.'
            });
            continue;
          }
          asyncEventStatesByNameThenID[name][key] = [];
          asyncEventStatesByNameThenID[name][key].push(asyncEventState);
        } else {
          if (asyncEventStatesByNameThenID[name] === undefined) {
            this.model_.importWarning({
              type: 'async_slice_parse_error',
              message: `At ${event.ts}, no slice named "${name}" was open.`,
            });
            continue;
          }
          if (asyncEventStatesByNameThenID[name][key] === undefined) {
            this.model_.importWarning({
              type: 'async_slice_parse_error',
              message:
                `At ${event.ts}, no slice named "${name}" with id=${id} was ` +
                'open.',
            });
            continue;
          }
          const events = asyncEventStatesByNameThenID[name][key];
          events.push(asyncEventState);

          if (event.ph === 'F') {
            this.createLegacyAsyncSlice_(events);
            delete asyncEventStatesByNameThenID[name][key];
          }
        }
      }

      // Auto-close unmatched S events by creating a fake F event.
      for (const [name, statesByID] of
          Object.entries(asyncEventStatesByNameThenID)) {
        for (const [id, states] of Object.entries(statesByID)) {
          const startEvent = states[0].event;
          // Don't set 'ts' in the fake 'F' event. createLegacyAsyncSlice_ will
          // set duration=undefined and didNotFinish=true.
          // AsyncSliceGroup.autoCloseOpenSlices() will set duration so that the
          // AsyncSlice ends when the trace ends.
          states.push({
            sequenceNumber: 1 + states[states.length - 1].sequenceNumber,
            event: {
              ph: 'F',
              name,
              id: startEvent.id,
              id2: startEvent.id2,
              scope: startEvent.scope,
              pid: startEvent.pid,
              tid: startEvent.tid,
              cat: startEvent.cat,
              args: {},
            },
            thread: this.model_.getOrCreateProcess(startEvent.pid).
                getOrCreateThread(startEvent.tid),
          });
          this.createLegacyAsyncSlice_(states);
        }
      }
    },

    createNestableAsyncSlices_(nestableEventsByKey) {
      for (const key in nestableEventsByKey) {
        const eventStateEntries = nestableEventsByKey[key];
        // Stack of enclosing BEGIN events.
        const parentStack = [];
        for (let i = 0; i < eventStateEntries.length; ++i) {
          const eventStateEntry = eventStateEntries[i];
          // If this is the end of an event, match it to the start.
          if (eventStateEntry.event.ph === 'e') {
            // Walk up the parent stack to find the corresponding BEGIN for
            // this END.
            let parentIndex = -1;
            for (let k = parentStack.length - 1; k >= 0; --k) {
              if (parentStack[k].event.name === eventStateEntry.event.name) {
                parentIndex = k;
                break;
              }
            }
            if (parentIndex === -1) {
              // Unmatched end.
              eventStateEntry.finished = false;
            } else {
              parentStack[parentIndex].end = eventStateEntry;
              // Pop off all enclosing unmatched BEGINs util parentIndex.
              while (parentIndex < parentStack.length) {
                parentStack.pop();
              }
            }
          }
          // Inherit the current parent.
          if (parentStack.length > 0) {
            eventStateEntry.parentEntry = parentStack[parentStack.length - 1];
          }
          if (eventStateEntry.event.ph === 'b') {
            parentStack.push(eventStateEntry);
          }
        }
        const topLevelSlices = [];
        for (let i = 0; i < eventStateEntries.length; ++i) {
          const eventStateEntry = eventStateEntries[i];
          // Skip matched END, as its slice will be created when we
          // encounter its corresponding BEGIN.
          if (eventStateEntry.event.ph === 'e' &&
              eventStateEntry.finished === undefined) {
            continue;
          }
          let startState = undefined;
          let endState = undefined;
          let sliceArgs = eventStateEntry.event.args || {};
          let sliceError = undefined;
          const id = TraceEventImporter.scopedIdForEvent_(
              eventStateEntry.event);
          if (eventStateEntry.event.ph === 'n') {
            startState = eventStateEntry;
            endState = eventStateEntry;
          } else if (eventStateEntry.event.ph === 'b') {
            if (eventStateEntry.end === undefined) {
              // Unmatched BEGIN. End it when last event with this ID ends.
              eventStateEntry.end =
                eventStateEntries[eventStateEntries.length - 1];
              sliceError =
                'Slice has no matching END. End time has been adjusted.';
              this.model_.importWarning({
                type: 'async_slice_parse_error',
                message: 'Nestable async BEGIN event at ' +
                  eventStateEntry.event.ts + ' with name="' +
                  eventStateEntry.event.name + '" and id=' + id +
                  ' was unmatched.'
              });
            } else {
              // Include args for both END and BEGIN for a matched pair.
              function concatenateArguments(args1, args2) {
                if (args1.params === undefined || args2.params === undefined) {
                  return Object.assign({}, args1, args2);
                }
                // Make an argument object to hold the combined params.
                const args3 = {};
                args3.params = Object.assign({}, args1.params, args2.params);
                return Object.assign({}, args1, args2, args3);
              }
              const endArgs = eventStateEntry.end.event.args || {};
              sliceArgs = concatenateArguments(sliceArgs, endArgs);
            }
            startState = eventStateEntry;
            endState = eventStateEntry.end;
          } else {
            // Unmatched END. Start it at the first event with this ID starts.
            sliceError =
              'Slice has no matching BEGIN. Start time has been adjusted.';
            this.model_.importWarning({
              type: 'async_slice_parse_error',
              message: 'Nestable async END event at ' +
                eventStateEntry.event.ts + ' with name=' +
                eventStateEntry.event.name +
                ' and id=' + id + ' was unmatched.'
            });
            startState = eventStateEntries[0];
            endState = eventStateEntry;
          }

          const isTopLevel = (eventStateEntry.parentEntry === undefined);
          const asyncSliceConstructor =
              tr.model.AsyncSlice.subTypes.getConstructor(
                  eventStateEntry.event.cat,
                  eventStateEntry.event.name);

          let threadStart = undefined;
          let threadDuration = undefined;
          if (startState.event.tts && startState.event.use_async_tts) {
            threadStart = this.toModelTimeFromUs_(startState.event.tts);
            if (endState.event.tts) {
              const threadEnd = this.toModelTimeFromUs_(endState.event.tts);
              threadDuration = threadEnd - threadStart;
            }
          }

          const slice = new asyncSliceConstructor(
            eventStateEntry.event.cat,
            eventStateEntry.event.name,
            getEventColor(endState.event),
            this.toModelTimeFromUs_(startState.event.ts),
            sliceArgs,
            this.toModelTimeFromUs_(endState.event.ts - startState.event.ts),
            isTopLevel,
            threadStart,
            threadDuration,
            startState.event.argsStripped);

          slice.startThread = startState.thread;
          slice.endThread = endState.thread;

          slice.startStackFrame = this.getStackFrameForEvent_(startState.event);
          slice.endStackFrame = this.getStackFrameForEvent_(endState.event);

          slice.id = key;
          if (sliceError !== undefined) {
            slice.error = sliceError;
          }
          eventStateEntry.slice = slice;
          // Add the slice to the topLevelSlices array if there is no parent.
          // Otherwise, add the slice to the subSlices of its parent.
          if (isTopLevel) {
            topLevelSlices.push(slice);
          } else if (eventStateEntry.parentEntry.slice !== undefined) {
            eventStateEntry.parentEntry.slice.subSlices.push(slice);
          }
        }
        for (let si = 0; si < topLevelSlices.length; si++) {
          topLevelSlices[si].startThread.asyncSliceGroup.push(
              topLevelSlices[si]);
        }
      }
    },

    assertStepTypeMatches_(stepType, event) {
      if (stepType !== event.event.ph) {
        this.model_.importWarning({
          type: 'async_slice_parse_error',
          message: 'At ' + event.event.ts + ', a slice named ' +
              event.event.name + ' with id=' +
              TraceEventImporter.scopedIdForEvent_(event.event) +
              ' had both begin and end steps, which is not allowed.'
        });
        return false;
      }
      return true;
    },

    validateFlowEvent_(event) {
      if (event.name === undefined) {
        this.model_.importWarning({
          type: 'flow_slice_parse_error',
          message: 'Flow events (ph: s, t or f) require a name parameter.'
        });
        return false;
      }

      // Support Flow API v1.
      if (event.ph === 's' || event.ph === 'f' || event.ph === 't') {
        if (event.id === undefined) {
          this.model_.importWarning({
            type: 'flow_slice_parse_error',
            message: 'Flow events (ph: s, t or f) require an id parameter.'
          });
          return false;
        }
        return true;
      }

      // Support Flow API v2.
      if (event.bind_id) {
        if (event.flow_in === undefined && event.flow_out === undefined) {
          this.model_.importWarning({
            type: 'flow_slice_parse_error',
            message: 'Flow producer or consumer require flow_in or flow_out.'
          });
          return false;
        }
        return true;
      }

      return false;
    },

    createFlowSlices_() {
      if (this.allFlowEvents_.length === 0) return;

      const createFlowEvent = function(thread, event, opt_slice) {
        let startSlice;
        let flowId;
        let flowStartTs;

        if (event.bind_id) {
          // Support Flow API v2.
          startSlice = opt_slice;
          flowId = event.bind_id;
          flowStartTs = this.toModelTimeFromUs_(event.ts + event.dur);
        } else {
          // Support Flow API v1.
          const ts = this.toModelTimeFromUs_(event.ts);
          startSlice = thread.sliceGroup.findSliceAtTs(ts);
          if (startSlice === undefined) return undefined;
          flowId = event.id;
          flowStartTs = ts;
        }

        const flowEvent = new tr.model.FlowEvent(
            event.cat,
            flowId,
            event.name,
            getEventColor(event),
            flowStartTs,
            this.deepCopyAlways_(event.args));
        flowEvent.startSlice = startSlice;
        flowEvent.startStackFrame = this.getStackFrameForEvent_(event);
        flowEvent.endStackFrame = undefined;
        startSlice.outFlowEvents.push(flowEvent);
        return flowEvent;
      }.bind(this);

      const finishFlowEventWith = function(
          flowEvent, thread, event, refGuid, bindToParent, opt_slice) {
        let endSlice;

        if (event.bind_id) {
          // Support Flow API v2.
          endSlice = opt_slice;
        } else {
          // Support Flow API v1.
          const ts = this.toModelTimeFromUs_(event.ts);
          if (bindToParent) {
            endSlice = thread.sliceGroup.findSliceAtTs(ts);
          } else {
            endSlice = thread.sliceGroup.findNextSliceAfter(ts, refGuid);
          }
          if (endSlice === undefined) return false;
        }

        endSlice.inFlowEvents.push(flowEvent);
        flowEvent.endSlice = endSlice;
        flowEvent.duration =
            this.toModelTimeFromUs_(event.ts) - flowEvent.start;
        flowEvent.endStackFrame = this.getStackFrameForEvent_(event);
        this.mergeArgsInto_(flowEvent.args, event.args, flowEvent.title);
        return true;
      }.bind(this);

      const processFlowConsumer = function(
          flowIdToEvent, sliceGuidToEvent, event, slice) {
        let flowEvent = flowIdToEvent[event.bind_id];
        if (flowEvent === undefined) {
          this.model_.importWarning({
            type: 'flow_slice_ordering_error',
            message: 'Flow consumer ' + event.bind_id + ' does not have ' +
                  'a flow producer'});
          return false;
        } else if (flowEvent.endSlice) {
          // One flow producer can have more than one flow consumers.
          // In this case, create a new flow event using the flow producer.
          const flowProducer = flowEvent.startSlice;
          flowEvent = createFlowEvent(undefined,
              sliceGuidToEvent[flowProducer.guid], flowProducer);
        }

        const refGuid = undefined;
        const ok = finishFlowEventWith(flowEvent, undefined, event,
            refGuid, undefined, slice);
        if (ok) {
          this.model_.flowEvents.push(flowEvent);
        } else {
          this.model_.importWarning({
            type: 'flow_slice_end_error',
            message: 'Flow consumer ' + event.bind_id + ' does not end ' +
                  'at an actual slice, so cannot be created.'});
          return false;
        }

        return true;
      }.bind(this);

      const processFlowProducer = function(
          flowIdToEvent, flowStatus, event, slice) {
        if (flowIdToEvent[event.bind_id] &&
            flowStatus[event.bind_id]) {
          // Can't open the same flow again while it's still open.
          // This is essentially the multi-producer case which we don't support
          this.model_.importWarning({
            type: 'flow_slice_start_error',
            message: 'Flow producer ' + event.bind_id + ' already seen'});
          return false;
        }

        const flowEvent = createFlowEvent(undefined, event, slice);
        if (!flowEvent) {
          this.model_.importWarning({
            type: 'flow_slice_start_error',
            message: 'Flow producer ' + event.bind_id + ' does not start' +
                  'a flow'});
          return false;
        }
        flowIdToEvent[event.bind_id] = flowEvent;
      }.bind(this);

      // Actual import.
      this.allFlowEvents_.sort(function(x, y) {
        const d = x.event.ts - y.event.ts;
        if (d !== 0) return d;
        return x.sequenceNumber - y.sequenceNumber;
      });

      const flowIdToEvent = {};
      const sliceGuidToEvent = {};
      const flowStatus = {}; // true: open; false: closed.
      for (let i = 0; i < this.allFlowEvents_.length; ++i) {
        const data = this.allFlowEvents_[i];
        const refGuid = data.refGuid;
        const event = data.event;
        const thread = data.thread;

        if (!this.validateFlowEvent_(event)) continue;

        // Support for Flow API v2.
        if (event.bind_id) {
          const slice = data.slice;
          sliceGuidToEvent[slice.guid] = event;

          if (event.flowPhase === PRODUCER) {
            if (!processFlowProducer(flowIdToEvent, flowStatus, event, slice)) {
              continue;
            }
            flowStatus[event.bind_id] = true; // open the flow.
          } else {
            if (!processFlowConsumer(flowIdToEvent, sliceGuidToEvent,
                event, slice)) {
              continue;
            }
            flowStatus[event.bind_id] = false; // close the flow.

            if (event.flowPhase === STEP) {
              if (!processFlowProducer(flowIdToEvent, flowStatus,
                  event, slice)) {
                continue;
              }
              flowStatus[event.bind_id] = true; // open the flow again.
            }
          }
          continue;
        }

        // Support for Flow API v1.
        let flowEvent;
        if (event.ph === 's') {
          if (flowIdToEvent[event.id]) {
            this.model_.importWarning({
              type: 'flow_slice_start_error',
              message: 'event id ' + event.id + ' already seen when ' +
                  'encountering start of flow event.'});
            continue;
          }
          flowEvent = createFlowEvent(thread, event);
          if (!flowEvent) {
            this.model_.importWarning({
              type: 'flow_slice_start_error',
              message: 'event id ' + event.id + ' does not start ' +
                  'at an actual slice, so cannot be created.'});
            continue;
          }
          flowIdToEvent[event.id] = flowEvent;
        } else if (event.ph === 't' || event.ph === 'f') {
          flowEvent = flowIdToEvent[event.id];
          if (flowEvent === undefined) {
            this.model_.importWarning({
              type: 'flow_slice_ordering_error',
              message: 'Found flow phase ' + event.ph + ' for id: ' + event.id +
                  ' but no flow start found.'
            });
            continue;
          }

          let bindToParent = event.ph === 't';

          if (event.ph === 'f') {
            if (event.bp === undefined) {
              // TODO(yuhaoz): In flow V2, there is no notion of binding point.
              // Removal of binding point is tracked in
              // https://github.com/google/trace-viewer/issues/991.
              if (event.cat.indexOf('input') > -1) {
                bindToParent = true;
              } else if (event.cat.indexOf('ipc.flow') > -1) {
                bindToParent = true;
              }
            } else {
              if (event.bp !== 'e') {
                this.model_.importWarning({
                  type: 'flow_slice_bind_point_error',
                  message: 'Flow event with invalid binding point (event.bp).'
                });
                continue;
              }
              bindToParent = true;
            }
          }

          const ok = finishFlowEventWith(flowEvent, thread, event,
              refGuid, bindToParent);
          if (ok) {
            this.model_.flowEvents.push(flowEvent);
          } else {
            this.model_.importWarning({
              type: 'flow_slice_end_error',
              message: 'event id ' + event.id + ' does not end ' +
                  'at an actual slice, so cannot be created.'});
          }
          flowIdToEvent[event.id] = undefined;

          // If this is a step, then create another flow event.
          if (ok && event.ph === 't') {
            flowEvent = createFlowEvent(thread, event);
            flowIdToEvent[event.id] = flowEvent;
          }
        }
      }
    },

    /**
     * This function creates objects described via the N, D, and O phase
     * events.
     */
    createExplicitObjects_() {
      if (this.allObjectEvents_.length === 0) return;

      const processEvent = function(objectEventState) {
        const event = objectEventState.event;
        const scopedId = TraceEventImporter.scopedIdForEvent_(event);
        const thread = objectEventState.thread;
        if (event.name === undefined) {
          this.model_.importWarning({
            type: 'object_parse_error',
            message: 'While processing ' + JSON.stringify(event) + ': ' +
                'Object events require an name parameter.'
          });
        }

        if (scopedId === undefined || scopedId.id === undefined) {
          this.model_.importWarning({
            type: 'object_parse_error',
            message: 'While processing ' + JSON.stringify(event) + ': ' +
                'Object events require an id parameter.'
          });
        }
        const process = thread.parent;
        const ts = this.toModelTimeFromUs_(event.ts);
        let instance;
        if (event.ph === 'N') {
          try {
            instance = process.objects.idWasCreated(
                scopedId, event.cat, event.name, ts);
          } catch (e) {
            this.model_.importWarning({
              type: 'object_parse_error',
              message: 'While processing create of ' +
                  scopedId + ' at ts=' + ts + ': ' + e
            });
            return;
          }
        } else if (event.ph === 'O') {
          if (event.args.snapshot === undefined) {
            this.model_.importWarning({
              type: 'object_parse_error',
              message: 'While processing ' + scopedId + ' at ts=' + ts + ': ' +
                  'Snapshots must have args: {snapshot: ...}'
            });
            return;
          }
          let snapshot;
          try {
            const args = this.deepCopyIfNeeded_(event.args.snapshot);
            let cat;
            if (args.cat) {
              cat = args.cat;
              delete args.cat;
            } else {
              cat = event.cat;
            }

            let baseTypename;
            if (args.base_type) {
              baseTypename = args.base_type;
              delete args.base_type;
            } else {
              baseTypename = undefined;
            }
            snapshot = process.objects.addSnapshot(
                scopedId, cat, event.name, ts, args, baseTypename);
            snapshot.snapshottedOnThread = thread;
          } catch (e) {
            this.model_.importWarning({
              type: 'object_parse_error',
              message: 'While processing snapshot of ' +
                  scopedId + ' at ts=' + ts + ': ' + e
            });
            return;
          }
          instance = snapshot.objectInstance;
        } else if (event.ph === 'D') {
          try {
            process.objects.idWasDeleted(scopedId, event.cat, event.name, ts);
            const instanceMap = process.objects.getOrCreateInstanceMap_(
                scopedId);
            instance = instanceMap.lastInstance;
          } catch (e) {
            this.model_.importWarning({
              type: 'object_parse_error',
              message: 'While processing delete of ' +
                  scopedId + ' at ts=' + ts + ': ' + e
            });
            return;
          }
        }

        if (instance) {
          instance.colorId = getEventColor(event, instance.typeName);
        }
      }.bind(this);

      this.allObjectEvents_.sort(function(x, y) {
        const d = x.event.ts - y.event.ts;
        if (d !== 0) return d;
        return x.sequenceNumber - y.sequenceNumber;
      });

      const allObjectEvents = this.allObjectEvents_;
      for (let i = 0; i < allObjectEvents.length; i++) {
        const objectEventState = allObjectEvents[i];
        try {
          processEvent.call(this, objectEventState);
        } catch (e) {
          this.model_.importWarning({
            type: 'object_parse_error',
            message: e.message
          });
        }
      }
    },

    createImplicitObjects_() {
      for (const proc of Object.values(this.model_.processes)) {
        this.createImplicitObjectsForProcess_(proc);
      }
    },

    // Here, we collect all the snapshots that internally contain a
    // Javascript-level object inside their args list that has an "id" field,
    // and turn that into a snapshot of the instance referred to by id.
    createImplicitObjectsForProcess_(process) {
      function processField(referencingObject,
          referencingObjectFieldName,
          referencingObjectFieldValue,
          containingSnapshot) {
        if (!referencingObjectFieldValue) return;

        if (referencingObjectFieldValue instanceof
            tr.model.ObjectSnapshot) {
          return null;
        }
        if (referencingObjectFieldValue.id === undefined) return;

        const implicitSnapshot = referencingObjectFieldValue;

        const rawId = implicitSnapshot.id;
        const m = /(.+)\/(.+)/.exec(rawId);
        if (!m) {
          throw new Error('Implicit snapshots must have names.');
        }
        delete implicitSnapshot.id;
        const name = m[1];
        const id = m[2];
        let res;

        let cat;
        if (implicitSnapshot.cat !== undefined) {
          cat = implicitSnapshot.cat;
        } else {
          cat = containingSnapshot.objectInstance.category;
        }

        let baseTypename;
        if (implicitSnapshot.base_type) {
          baseTypename = implicitSnapshot.base_type;
        } else {
          baseTypename = undefined;
        }

        const scope = containingSnapshot.objectInstance.scopedId.scope;

        try {
          res = process.objects.addSnapshot(
              new tr.model.ScopedId(scope, id), cat,
              name, containingSnapshot.ts,
              implicitSnapshot, baseTypename);
        } catch (e) {
          this.model_.importWarning({
            type: 'object_snapshot_parse_error',
            message: 'While processing implicit snapshot of ' +
                rawId + ' at ts=' + containingSnapshot.ts + ': ' + e
          });
          return;
        }
        res.objectInstance.hasImplicitSnapshots = true;
        res.containingSnapshot = containingSnapshot;
        res.snapshottedOnThread = containingSnapshot.snapshottedOnThread;
        referencingObject[referencingObjectFieldName] = res;
        if (!(res instanceof tr.model.ObjectSnapshot)) {
          throw new Error('Created object must be instanceof snapshot');
        }
        return res.args;
      }

      /**
       * Iterates over the fields in the object, calling func for every
       * field/value found.
       *
       * @return {object} If the function does not want the field's value to be
       * iterated, return null. If iteration of the field value is desired, then
       * return either undefined (if the field value did not change) or the new
       * field value if it was changed.
       */
      function iterObject(object, func, containingSnapshot, thisArg) {
        if (!(object instanceof Object)) return;

        if (object instanceof Array) {
          for (let i = 0; i < object.length; i++) {
            const res = func.call(thisArg, object, i, object[i],
                containingSnapshot);
            if (res === null) continue;
            if (res) {
              iterObject(res, func, containingSnapshot, thisArg);
            } else {
              iterObject(object[i], func, containingSnapshot, thisArg);
            }
          }
          return;
        }

        for (const key in object) {
          const res = func.call(thisArg, object, key, object[key],
              containingSnapshot);
          if (res === null) continue;
          if (res) {
            iterObject(res, func, containingSnapshot, thisArg);
          } else {
            iterObject(object[key], func, containingSnapshot, thisArg);
          }
        }
      }

      // TODO(nduca): We may need to iterate the instances in sorted order by
      // creationTs.
      process.objects.iterObjectInstances(function(instance) {
        instance.snapshots.forEach(function(snapshot) {
          if (snapshot.args.id !== undefined) {
            throw new Error('args cannot have an id field inside it');
          }
          iterObject(snapshot.args, processField, snapshot, this);
        }, this);
      }, this);
    },

    // Takes an object of type: PID -> [process memory dump events]
    // Returns smallest timestamp among events or Infinity if there are none.
    minimalTimestampInPidToEvents_(pidToEvents) {
      let smallestTs = Infinity;
      for (const events of Object.values(pidToEvents)) {
        for (const event of events) {
          if (event.ts < smallestTs) {
            smallestTs = event.ts;
          }
        }
      }
      return smallestTs;
    },

    createMemoryDumps_() {
      // We must create the global dumps in chronological order since later
      // heap dumps can depend on earlier ones. Not all events within a single
      // global dump have the same timestamp but events for two different
      // global dumps can not be interspersed. However, for consistency,
      // we sort the global dumps by the earliest timestamp present in an event
      // in that dump.
      const pairs = Object.entries(this.allMemoryDumpEvents_);
      const key = x => this.minimalTimestampInPidToEvents_(x);
      pairs.sort((x, y) => key(x[1]) - key(y[1]));
      for (const [dumpId, pidToEvents] of pairs) {
        this.createGlobalMemoryDump_(pidToEvents, dumpId);
      }
    },

    createGlobalMemoryDump_(dumpIdEvents, dumpId) {
      // 1. Create a GlobalMemoryDump for the provided process memory dump
      // the events, all of which have the same dump ID.

      // Calculate the range of the global memory dump.
      const globalRange = new tr.b.math.Range();
      for (const pid in dumpIdEvents) {
        const processEvents = dumpIdEvents[pid];
        for (let i = 0; i < processEvents.length; i++) {
          globalRange.addValue(this.toModelTimeFromUs_(processEvents[i].ts));
        }
      }
      if (globalRange.isEmpty) {
        throw new Error('Internal error: Global memory dump without events');
      }

      // Create the global memory dump.
      const globalMemoryDump = new tr.model.GlobalMemoryDump(
          this.model_, globalRange.min);
      globalMemoryDump.duration = globalRange.range;
      this.model_.globalMemoryDumps.push(globalMemoryDump);

      const globalMemoryAllocatorDumpsByFullName = {};
      const levelsOfDetail = {};
      const allMemoryAllocatorDumpsByGuid = {};

      // 2. Create a ProcessMemoryDump for each PID in the provided process
      // memory dump events. Everything except for edges between memory
      // allocator dumps is parsed from the process memory dump trace events at
      // this step.
      for (const pid in dumpIdEvents) {
        this.createProcessMemoryDump_(globalMemoryDump,
            globalMemoryAllocatorDumpsByFullName, levelsOfDetail,
            allMemoryAllocatorDumpsByGuid, dumpIdEvents[pid], pid, dumpId);
      }

      // 3. Set the level of detail and memory allocator dumps of the
      // GlobalMemoryDump, which come from the process memory dump trace
      // events parsed in the prebvious step.
      globalMemoryDump.levelOfDetail = levelsOfDetail.global;

      // Find the root allocator dumps and establish the parent links of
      // the global memory dump.
      globalMemoryDump.memoryAllocatorDumps =
          this.inferMemoryAllocatorDumpTree_(
              globalMemoryAllocatorDumpsByFullName);

      // 4. Finally, parse the edges between all memory allocator dumps within
      // the GlobalMemoryDump. This can only be done once all memory allocator
      // dumps have been parsed (i.e. it is necessary to iterate over the
      // process memory dump trace events once more).
      this.parseMemoryDumpAllocatorEdges_(allMemoryAllocatorDumpsByGuid,
          dumpIdEvents, dumpId);
    },

    createProcessMemoryDump_(globalMemoryDump,
        globalMemoryAllocatorDumpsByFullName, levelsOfDetail,
        allMemoryAllocatorDumpsByGuid, processEvents, pid, dumpId) {
      // Calculate the range of the process memory dump.
      const processRange = new tr.b.math.Range();
      for (let i = 0; i < processEvents.length; i++) {
        processRange.addValue(this.toModelTimeFromUs_(processEvents[i].ts));
      }
      if (processRange.isEmpty) {
        throw new Error('Internal error: Process memory dump without events');
      }

      // Create the process memory dump.
      const process = this.model_.getOrCreateProcess(pid);
      const processMemoryDump = new tr.model.ProcessMemoryDump(
          globalMemoryDump, process, processRange.min);
      processMemoryDump.duration = processRange.range;
      process.memoryDumps.push(processMemoryDump);
      globalMemoryDump.processMemoryDumps[pid] = processMemoryDump;

      const processMemoryAllocatorDumpsByFullName = {};

      // Parse all process memory dump trace events for the newly created
      // ProcessMemoryDump.
      for (let i = 0; i < processEvents.length; i++) {
        const processEvent = processEvents[i];

        const dumps = processEvent.args.dumps;
        if (dumps === undefined) {
          this.model_.importWarning({
            type: 'memory_dump_parse_error',
            message: '\'dumps\' field not found in a process memory dump' +
                ' event for PID=' + pid + ' and dump ID=' + dumpId + '.'
          });
          continue;
        }

        // Totals, VM regions, and heap dumps for the newly created
        // ProcessMemoryDump should be present in at most one event, so they
        // can be added to the ProcessMemoryDump immediately.
        this.parseMemoryDumpTotals_(processMemoryDump, dumps, pid, dumpId);
        this.parseMemoryDumpVmRegions_(processMemoryDump, dumps, pid, dumpId);
        this.parseMemoryDumpHeapDumps_(processMemoryDump, dumps, pid, dumpId);

        // All process memory dump trace events for the newly created
        // ProcessMemoryDump must be processed before level of detail and
        // allocator dumps can be added to it.
        this.parseMemoryDumpLevelOfDetail_(levelsOfDetail, dumps, pid,
            dumpId);
        this.parseMemoryDumpAllocatorDumps_(processMemoryDump, globalMemoryDump,
            processMemoryAllocatorDumpsByFullName,
            globalMemoryAllocatorDumpsByFullName,
            allMemoryAllocatorDumpsByGuid, dumps, pid, dumpId);
      }

      if (levelsOfDetail.process === undefined) {
        // Infer level of detail from the presence of VM regions in legacy
        // traces (where raw process memory dump events don't contain the
        // level_of_detail field). These traces will not have BACKGROUND mode.
        levelsOfDetail.process = processMemoryDump.vmRegions ? DETAILED : LIGHT;
      }
      if (!this.updateMemoryDumpLevelOfDetail_(
          levelsOfDetail, 'global', levelsOfDetail.process)) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'diffent levels of detail provided for global memory' +
              ' dump (dump ID=' + dumpId + ').'
        });
      }
      processMemoryDump.levelOfDetail = levelsOfDetail.process;
      delete levelsOfDetail.process;  // Reused for all process dumps.

      // Find the root allocator dumps and establish the parent links of
      // the process memory dump.
      processMemoryDump.memoryAllocatorDumps =
          this.inferMemoryAllocatorDumpTree_(
              processMemoryAllocatorDumpsByFullName);
    },

    parseMemoryDumpTotals_(processMemoryDump, dumps, pid, dumpId) {
      const rawTotals = dumps.process_totals;
      if (rawTotals === undefined) return;

      if (processMemoryDump.totals !== undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'Process totals provided multiple times for' +
              ' process memory dump for PID=' + pid +
              ' and dump ID=' + dumpId + '.'
        });
        return;
      }

      const totals = {};
      let platformSpecificTotals = undefined;

      for (const rawTotalName in rawTotals) {
        const rawTotalValue = rawTotals[rawTotalName];
        if (rawTotalValue === undefined) continue;

        // Total resident bytes.
        if (rawTotalName === 'resident_set_bytes') {
          totals.residentBytes = parseInt(rawTotalValue, 16);
          continue;
        }

        // Peak resident bytes.
        if (rawTotalName === 'peak_resident_set_bytes') {
          totals.peakResidentBytes = parseInt(rawTotalValue, 16);
          continue;
        }
        if (rawTotalName === 'is_peak_rss_resetable') {
          totals.arePeakResidentBytesResettable = !!rawTotalValue;
          continue;
        }

        // Private footprint
        if (rawTotalName === 'private_footprint_bytes') {
          totals.privateFootprintBytes = parseInt(rawTotalValue, 16);
          continue;
        }

        // OS-specific totals (e.g. private resident on Mac).
        if (platformSpecificTotals === undefined) {
          platformSpecificTotals = {};
          totals.platformSpecific = platformSpecificTotals;
        }
        platformSpecificTotals[rawTotalName] = parseInt(rawTotalValue, 16);
      }

      // Either both peak_resident_set_bytes and is_peak_rss_resetable should
      // be present in the trace, or neither.
      if (totals.peakResidentBytes === undefined &&
          totals.arePeakResidentBytesResettable !== undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'Optional field peak_resident_set_bytes found' +
                ' but is_peak_rss_resetable not found in' +
                ' process memory dump for PID=' + pid +
                ' and dump ID=' + dumpId + '.'
        });
      }
      if (totals.arePeakResidentBytesResettable !== undefined &&
          totals.peakResidentBytes === undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'Optional field is_peak_rss_resetable found' +
                ' but peak_resident_set_bytes not found in' +
                ' process memory dump for PID=' + pid +
                ' and dump ID=' + dumpId + '.'
        });
      }

      processMemoryDump.totals = totals;
    },

    parseMemoryDumpVmRegions_(processMemoryDump, dumps, pid, dumpId) {
      const rawProcessMmaps = dumps.process_mmaps;
      if (rawProcessMmaps === undefined) return;

      const rawVmRegions = rawProcessMmaps.vm_regions;
      if (rawVmRegions === undefined) return;

      if (processMemoryDump.vmRegions !== undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'VM regions provided multiple times for' +
              ' process memory dump for PID=' + pid +
              ' and dump ID=' + dumpId + '.'
        });
        return;
      }

      // See //base/trace_event/process_memory_maps.cc in Chromium.
      const vmRegions = new Array(rawVmRegions.length);
      for (let i = 0; i < rawVmRegions.length; i++) {
        const rawVmRegion = rawVmRegions[i];

        const byteStats = {};
        const rawByteStats = rawVmRegion.bs;
        for (const rawByteStatName in rawByteStats) {
          const rawByteStatValue = rawByteStats[rawByteStatName];
          if (rawByteStatValue === undefined) {
            this.model_.importWarning({
              type: 'memory_dump_parse_error',
              message: 'Byte stat \'' + rawByteStatName + '\' of VM region ' +
                  i + ' (' + rawVmRegion.mf + ') in process memory dump for ' +
                  'PID=' + pid + ' and dump ID=' + dumpId +
                  ' does not have a value.'
            });
            continue;
          }
          const byteStatName = BYTE_STAT_NAME_MAP[rawByteStatName];
          if (byteStatName === undefined) {
            this.model_.importWarning({
              type: 'memory_dump_parse_error',
              message: 'Unknown byte stat name \'' + rawByteStatName + '\' (' +
                  rawByteStatValue + ') of VM region ' + i + ' (' +
                  rawVmRegion.mf + ') in process memory dump for PID=' + pid +
                  ' and dump ID=' + dumpId + '.'
            });
            continue;
          }
          byteStats[byteStatName] = parseInt(rawByteStatValue, 16);
          // OSX does not report PSS and instead emits all zeros.
          // Zero is a valid value for some byteStats but not PSS so this could
          // could to confusion when we later compute with and display the PSS.
          // To avoid this we ignore zero PSS values (since PSS should never
          // be zero). See: github.com/catapult-project/catapult/issues/3501
          if (byteStatName === 'proportionalResident' &&
              byteStats[byteStatName] === 0) {
            byteStats[byteStatName] = undefined;
          }
        }

        vmRegions[i] = new tr.model.VMRegion(
            parseInt(rawVmRegion.sa, 16),  // startAddress
            parseInt(rawVmRegion.sz, 16),  // sizeInBytes
            rawVmRegion.pf,  // protectionFlags
            rawVmRegion.mf,  // mappedFile
            byteStats);
      }

      processMemoryDump.vmRegions =
          tr.model.VMRegionClassificationNode.fromRegions(vmRegions);
    },

    parseMemoryDumpHeapDumps_(processMemoryDump, dumps, pid, dumpId) {
      const idPrefix = 'p' + pid + ':';
      let importer;
      if (dumps.heaps) {
        const processTypeMap = this.objectTypeNameMap_[pid];
        if (processTypeMap === undefined) {
          this.model_.importWarning({
            type: 'memory_dump_parse_error',
            message: 'Missing mapping from object type IDs to names.'
          });
        }
        importer = new LegacyHeapDumpTraceEventImporter(this.model_,
            processMemoryDump, processTypeMap, idPrefix, dumpId, dumps.heaps);
      } else if (dumps.heaps_v2) {
        const data = dumps.heaps_v2;
        this.heapProfileExpander = this.heapProfileExpander.expandData(data);
        // TODO(hjd): Unify how we are reading & inflating stack frame data.
        this.addNewStackFramesFromExpander_(this.heapProfileExpander, idPrefix);
        importer = new HeapDumpTraceEventImporter(this.heapProfileExpander,
            this.model_.stackFrames, processMemoryDump, idPrefix, this.model_);
      }

      if (!importer) return;

      const heapDumps = importer.parse();
      if (!heapDumps) return;

      if (processMemoryDump.heapDumps !== undefined) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'Heap dumps provided multiple times for' +
              ' process memory dump for PID=' + pid +
              ' and dump ID=' + dumpId + '.'
        });
        return;
      }

      if (Object.keys(heapDumps).length > 0) {
        processMemoryDump.heapDumps = heapDumps;
      }
    },

    addNewStackFramesFromExpander_(expander, idPrefix) {
      const nodeMap = expander.getNewMap('nodes');
      const newStackFrames = {};
      for (const [id, stackFrame] of nodeMap.entries()) {
        if (!this.model_.stackFrames[idPrefix + id]) {
          newStackFrames[id] = {
            id,
            name: expander.getString(stackFrame.name_sid),
          };
          if (stackFrame.parent) newStackFrames[id].parent = stackFrame.parent;
        }
      }
      this.importStackFrames_(newStackFrames, idPrefix);
    },

    parseMemoryDumpLevelOfDetail_(levelsOfDetail, dumps, pid,
        dumpId) {
      const rawLevelOfDetail = dumps.level_of_detail;
      let level;
      switch (rawLevelOfDetail) {
        case 'background':
          level = BACKGROUND;
          break;
        case 'light':
          level = LIGHT;
          break;
        case 'detailed':
          level = DETAILED;
          break;
        case undefined:
          level = undefined;
          break;
        default:
          this.model_.importWarning({
            type: 'memory_dump_parse_error',
            message: 'unknown raw level of detail \'' + rawLevelOfDetail +
                '\' of process memory dump for PID=' + pid +
                ' and dump ID=' + dumpId + '.'
          });
          return;
      }

      if (!this.updateMemoryDumpLevelOfDetail_(
          levelsOfDetail, 'process', level)) {
        this.model_.importWarning({
          type: 'memory_dump_parse_error',
          message: 'diffent levels of detail provided for process memory' +
              ' dump for PID=' + pid + ' (dump ID=' + dumpId + ').'
        });
      }
    },

    updateMemoryDumpLevelOfDetail_(levelsOfDetail, scope, level) {
      // If all process memory dump events have the same level of detail (for
      // the particular 'process' or 'global' scope), return true.
      if (!(scope in levelsOfDetail) || level === levelsOfDetail[scope]) {
        levelsOfDetail[scope] = level;
        return true;
      }

      // If the process memory dump events have different levels of detail (for
      // the particular 'process' or 'global' scope), use the highest level and
      // return false.
      if (MEMORY_DUMP_LEVEL_OF_DETAIL_ORDER.indexOf(level) >
          MEMORY_DUMP_LEVEL_OF_DETAIL_ORDER.indexOf(levelsOfDetail[scope])) {
        levelsOfDetail[scope] = level;
      }
      return false;
    },

    parseMemoryDumpAllocatorDumps_(processMemoryDump,
        globalMemoryDump, processMemoryAllocatorDumpsByFullName,
        globalMemoryAllocatorDumpsByFullName, allMemoryAllocatorDumpsByGuid,
        dumps, pid, dumpId) {
      const rawAllocatorDumps = dumps.allocators;
      if (rawAllocatorDumps === undefined) return;

      // Construct the MemoryAllocatorDump objects without parent links
      // and add them to the processMemoryAllocatorDumpsByName and
      // globalMemoryAllocatorDumpsByName indices appropriately.
      for (let fullName in rawAllocatorDumps) {
        const rawAllocatorDump = rawAllocatorDumps[fullName];

        // Every memory allocator dump should have a GUID. If not, then
        // it cannot be associated with any edges.
        const guid = rawAllocatorDump.guid;
        if (guid === undefined) {
          this.model_.importWarning({
            type: 'memory_dump_parse_error',
            message: 'Memory allocator dump ' + fullName + ' for PID=' + pid +
                ' and dump ID=' + dumpId + ' does not have a GUID.'
          });
        }

        // A memory allocator dump can have optional flags.
        const flags = rawAllocatorDump.flags || 0;
        const isWeakDump = !!(flags & WEAK_MEMORY_ALLOCATOR_DUMP_FLAG);

        // Determine if this is a global memory allocator dump (check if
        // it's prefixed with 'global/').
        let containerMemoryDump;
        let dstIndex;
        if (fullName.startsWith(GLOBAL_MEMORY_ALLOCATOR_DUMP_PREFIX)) {
          // Global memory allocator dump.
          fullName = fullName.substring(
              GLOBAL_MEMORY_ALLOCATOR_DUMP_PREFIX.length);
          containerMemoryDump = globalMemoryDump;
          dstIndex = globalMemoryAllocatorDumpsByFullName;
        } else {
          // Process memory allocator dump.
          containerMemoryDump = processMemoryDump;
          dstIndex = processMemoryAllocatorDumpsByFullName;
        }

        // Construct or retrieve a memory allocator dump with the provided
        // GUID.
        let allocatorDump = allMemoryAllocatorDumpsByGuid[guid];
        if (allocatorDump === undefined) {
          if (fullName in dstIndex) {
            this.model_.importWarning({
              type: 'memory_dump_parse_error',
              message: 'Multiple GUIDs provided for' +
                  ' memory allocator dump ' + fullName + ': ' +
                  dstIndex[fullName].guid + ', ' + guid + ' (ignored) for' +
                  ' PID=' + pid + ' and dump ID=' + dumpId + '.'
            });
            continue;
          }
          allocatorDump = new tr.model.MemoryAllocatorDump(
              containerMemoryDump, fullName, guid);
          allocatorDump.weak = isWeakDump;
          dstIndex[fullName] = allocatorDump;
          if (guid !== undefined) {
            allMemoryAllocatorDumpsByGuid[guid] = allocatorDump;
          }
        } else {
          // A memory allocator dump with this GUID has already been
          // dumped (so we will only add new attributes). Check that it
          // belonged to the same process or was also global.
          if (allocatorDump.containerMemoryDump !== containerMemoryDump) {
            this.model_.importWarning({
              type: 'memory_dump_parse_error',
              message: 'Memory allocator dump ' + fullName +
                ' (GUID=' + guid + ') for PID=' + pid + ' and dump ID=' +
                dumpId + ' dumped in different contexts.'
            });
            continue;
          }
          // Check that the names of the memory allocator dumps match.
          if (allocatorDump.fullName !== fullName) {
            this.model_.importWarning({
              type: 'memory_dump_parse_error',
              message: 'Memory allocator dump with GUID=' + guid + ' for PID=' +
                pid + ' and dump ID=' + dumpId + ' has multiple names: ' +
                allocatorDump.fullName + ', ' + fullName + ' (ignored).'
            });
            continue;
          }
          if (!isWeakDump) {
            // A MemoryAllocatorDump is non-weak if at least one process dumped
            // it without WEAK_MEMORY_ALLOCATOR_DUMP_FLAG.
            allocatorDump.weak = false;
          }
        }

        // Add all new attributes to the memory allocator dump.
        let attributes = rawAllocatorDump.attrs;
        if (attributes === undefined) {
          this.model_.importWarning({
            type: 'memory_dump_parse_error',
            message: 'Memory allocator dump ' + fullName + ' (GUID=' + guid +
                ') for PID=' + pid + ' and dump ID=' + dumpId +
                ' does not have attributes.'
          });
          attributes = {};
        }

        for (const attrName in attributes) {
          const attrArgs = attributes[attrName];
          const attrType = attrArgs.type;
          const attrValue = attrArgs.value;

          switch (attrType) {
            case 'scalar': {
              if (attrName in allocatorDump.numerics) {
                this.model_.importWarning({
                  type: 'memory_dump_parse_error',
                  message: 'Multiple values provided for scalar attribute ' +
                    attrName + ' of memory allocator dump ' + fullName +
                    ' (GUID=' + guid + ') for PID=' + pid + ' and dump ID=' +
                    dumpId + '.'
                });
                break;
              }
              const unit = attrArgs.units === 'bytes' ?
                  tr.b.Unit.byName.sizeInBytes_smallerIsBetter :
                  tr.b.Unit.byName.unitlessNumber_smallerIsBetter;
              const value = parseInt(attrValue, 16);
              allocatorDump.addNumeric(attrName,
                  new tr.b.Scalar(unit, value));
              break;
            }

            case 'string':
              if (attrName in allocatorDump.diagnostics) {
                this.model_.importWarning({
                  type: 'memory_dump_parse_error',
                  message: 'Multiple values provided for string attribute ' +
                    attrName + ' of memory allocator dump ' + fullName +
                    ' (GUID=' + guid + ') for PID=' + pid + ' and dump ID=' +
                    dumpId + '.'
                });
                break;
              }
              allocatorDump.addDiagnostic(attrName, attrValue);
              break;

            default:
              this.model_.importWarning({
                type: 'memory_dump_parse_error',
                message: 'Unknown type provided for attribute ' + attrName +
                  ' of memory allocator dump ' + fullName + ' (GUID=' + guid +
                  ') for PID=' + pid + ' and dump ID=' + dumpId + ': ' +
                  attrType
              });
              break;
          }
        }
      }
    },

    inferMemoryAllocatorDumpTree_(memoryAllocatorDumpsByFullName) {
      const rootAllocatorDumps = [];

      const fullNames = Object.keys(memoryAllocatorDumpsByFullName);
      fullNames.sort();
      for (let i = 0; i < fullNames.length; i++) {
        let fullName = fullNames[i];
        let allocatorDump = memoryAllocatorDumpsByFullName[fullName];

        // This is a loop because we might need to build implicit
        // ancestors in case they were not present in the trace.
        while (true) {
          const lastSlashIndex = fullName.lastIndexOf('/');
          if (lastSlashIndex === -1) {
            // If the dump is a root, add it to the top-level
            // rootAllocatorDumps list.
            rootAllocatorDumps.push(allocatorDump);
            break;
          }

          // If the dump is not a root, find its parent.
          const parentFullName = fullName.substring(0, lastSlashIndex);
          let parentAllocatorDump =
              memoryAllocatorDumpsByFullName[parentFullName];

          // If the parent dump does not exist yet, we build an implicit
          // one and continue up the ancestor chain.
          let parentAlreadyExisted = true;
          if (parentAllocatorDump === undefined) {
            parentAlreadyExisted = false;
            parentAllocatorDump = new tr.model.MemoryAllocatorDump(
                allocatorDump.containerMemoryDump, parentFullName);
            if (allocatorDump.weak !== false) {
              // If we are inferring a parent dump (e.g. 'root/parent') of a
              // current dump (e.g. 'root/parent/current') which is weak (or
              // was also inferred and we don't know yet whether it's weak or
              // not), then we clear the weak flag on the parent dump because
              // we don't know yet whether it should be weak or non-weak:
              //
              //   * We can't mark the parent as non-weak straightaway because
              //     the parent might have no non-weak descendants (in which
              //     case we want the inferred parent to be weak, so that it
              //     would be later removed like the current dump).
              //   * We can't mark the parent as weak immediately either. If we
              //     did and later encounter a non-weak child of the parent
              //     (e.g. 'root/parent/another_child'), then we couldn't
              //     retroactively mark the inferred parent dump as non-weak
              //     because we couldn't tell whether the parent dump was
              //     dumped in the trace as weak (in which case it should stay
              //     weak and be subsequently removed) or whether it was
              //     inferred as weak (in which case it should be changed to
              //     non-weak).
              //
              // Therefore, we defer marking the inferred parent as
              // weak/non-weak. If an inferred parent dump does not have any
              // non-weak child, it will be marked as weak at the end of this
              // method.
              //
              // Note that this should not be confused with the recursive
              // propagation of the weak flag from parent dumps to their
              // children and from owned dumps to their owners, which is
              // performed in GlobalMemoryDump.prototype.removeWeakDumps().
              parentAllocatorDump.weak = undefined;
            }
            memoryAllocatorDumpsByFullName[parentFullName] =
                parentAllocatorDump;
          }

          // Setup the parent <-> children relationships
          allocatorDump.parent = parentAllocatorDump;
          parentAllocatorDump.children.push(allocatorDump);

          // If the parent already existed, then its ancestors were/will be
          // constructed in another iteration of the forEach loop.
          if (parentAlreadyExisted) {
            if (!allocatorDump.weak) {
              // If the current dump is non-weak, then we must ensure that all
              // its inferred ancestors are also non-weak.
              while (parentAllocatorDump !== undefined &&
                     parentAllocatorDump.weak === undefined) {
                parentAllocatorDump.weak = false;
                parentAllocatorDump = parentAllocatorDump.parent;
              }
            }
            break;
          }

          fullName = parentFullName;
          allocatorDump = parentAllocatorDump;
        }
      }

      // All inferred ancestor dumps that have a non-weak child have already
      // been marked as non-weak. We now mark the rest as weak.
      for (const fullName in memoryAllocatorDumpsByFullName) {
        const allocatorDump = memoryAllocatorDumpsByFullName[fullName];
        if (allocatorDump.weak === undefined) {
          allocatorDump.weak = true;
        }
      }

      return rootAllocatorDumps;
    },

    parseMemoryDumpAllocatorEdges_(allMemoryAllocatorDumpsByGuid,
        dumpIdEvents, dumpId) {
      for (const pid in dumpIdEvents) {
        const processEvents = dumpIdEvents[pid];

        for (let i = 0; i < processEvents.length; i++) {
          const processEvent = processEvents[i];

          const dumps = processEvent.args.dumps;
          if (dumps === undefined) continue;

          const rawEdges = dumps.allocators_graph;
          if (rawEdges === undefined) continue;

          for (let j = 0; j < rawEdges.length; j++) {
            const rawEdge = rawEdges[j];

            const sourceGuid = rawEdge.source;
            const sourceDump = allMemoryAllocatorDumpsByGuid[sourceGuid];
            if (sourceDump === undefined) {
              this.model_.importWarning({
                type: 'memory_dump_parse_error',
                message: 'Edge for PID=' + pid + ' and dump ID=' + dumpId +
                    ' is missing source memory allocator dump (GUID=' +
                    sourceGuid + ').'
              });
              continue;
            }

            const targetGuid = rawEdge.target;
            const targetDump = allMemoryAllocatorDumpsByGuid[targetGuid];
            if (targetDump === undefined) {
              this.model_.importWarning({
                type: 'memory_dump_parse_error',
                message: 'Edge for PID=' + pid + ' and dump ID=' + dumpId +
                    ' is missing target memory allocator dump (GUID=' +
                    targetGuid + ').'
              });
              continue;
            }

            const importance = rawEdge.importance;
            const edge = new tr.model.MemoryAllocatorDumpLink(
                sourceDump, targetDump, importance);

            switch (rawEdge.type) {
              case 'ownership':
                if (sourceDump.owns !== undefined) {
                  this.model_.importWarning({
                    type: 'memory_dump_parse_error',
                    message: 'Memory allocator dump ' + sourceDump.fullName +
                        ' (GUID=' + sourceGuid + ') already owns a memory' +
                        ' allocator dump (' +
                        sourceDump.owns.target.fullName + ').'
                  });
                } else {
                  sourceDump.owns = edge;
                  targetDump.ownedBy.push(edge);
                }
                break;

              case 'retention':
                sourceDump.retains.push(edge);
                targetDump.retainedBy.push(edge);
                break;

              default:
                this.model_.importWarning({
                  type: 'memory_dump_parse_error',
                  message: 'Invalid edge type: ' + rawEdge.type +
                      ' (PID=' + pid + ', dump ID=' + dumpId +
                      ', source=' + sourceGuid + ', target=' + targetGuid +
                      ', importance=' + importance + ').'
                });
            }
          }
        }
      }
    },

    /**
     * Converts |ts| (in microseconds) to a timestamp in the model clock domain
     * (in milliseconds).
     */
    toModelTimeFromUs_(ts) {
      if (!this.toModelTime_) {
        this.toModelTime_ =
            this.model_.clockSyncManager.getModelTimeTransformer(
                this.clockDomainId_);
      }

      return this.toModelTime_(tr.b.Unit.timestampFromUs(ts));
    },

    /**
     * Converts |ts| (in microseconds) to a timestamp in the model clock domain
     * (in milliseconds). If |ts| is undefined, undefined is returned.
     */
    maybeToModelTimeFromUs_(ts) {
      if (ts === undefined) {
        return undefined;
      }

      return this.toModelTimeFromUs_(ts);
    }
  };

  tr.importer.Importer.register(TraceEventImporter);

  return {
    TraceEventImporter,
  };
});


'use strict';

/**
 * @fileoverview Base class for trace data importers.
 */
tr.exportTo('tr.importer', function() {
  /**
   * Importer for empty strings and arrays.
   * @constructor
   */
  function EmptyImporter(events) {
    this.importPriority = 0;
  }

  EmptyImporter.canImport = function(eventData) {
    if (eventData instanceof Array && eventData.length === 0) {
      return true;
    }
    if (typeof(eventData) === 'string' || eventData instanceof String) {
      return eventData.length === 0;
    }
    return false;
  };

  EmptyImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'EmptyImporter';
    }
  };

  tr.importer.Importer.register(EmptyImporter);

  return {
    EmptyImporter,
  };
});


'use strict';

/**
 * @fileoverview Utilities for accessing trace data about the Chrome browser.
 */
tr.exportTo('tr.model.helpers', function() {
  const MAIN_FRAMETIME_TYPE = 'main_frametime_type';
  const IMPL_FRAMETIME_TYPE = 'impl_frametime_type';

  const MAIN_RENDERING_STATS =
      'BenchmarkInstrumentation::MainThreadRenderingStats';
  const IMPL_RENDERING_STATS =
      'BenchmarkInstrumentation::ImplThreadRenderingStats';


  function getSlicesIntersectingRange(rangeOfInterest, slices) {
    const slicesInFilterRange = [];
    for (let i = 0; i < slices.length; i++) {
      const slice = slices[i];
      if (rangeOfInterest.intersectsExplicitRangeInclusive(
          slice.start, slice.end)) {
        slicesInFilterRange.push(slice);
      }
    }
    return slicesInFilterRange;
  }


  function ChromeProcessHelper(modelHelper, process) {
    this.modelHelper = modelHelper;
    this.process = process;
    this.telemetryInternalRanges_ = undefined;
  }

  ChromeProcessHelper.prototype = {
    get pid() {
      return this.process.pid;
    },

    isTelemetryInternalEvent(slice) {
      if (this.telemetryInternalRanges_ === undefined) {
        this.findTelemetryInternalRanges_();
      }
      for (const range of this.telemetryInternalRanges_) {
        if (range.containsExplicitRangeInclusive(slice.start, slice.end)) {
          return true;
        }
      }
      return false;
    },

    findTelemetryInternalRanges_() {
      this.telemetryInternalRanges_ = [];
      let start = 0;
      for (const thread of Object.values(this.process.threads)) {
        for (const slice of thread.asyncSliceGroup.getDescendantEvents()) {
          if (/^telemetry\.internal\..*\.start$/.test(slice.title)) {
            start = slice.start;
          } else if (/^telemetry\.internal\..*\.end$/.test(slice.title) &&
              start !== undefined) {
            this.telemetryInternalRanges_.push(
                tr.b.math.Range.fromExplicitRange(start, slice.end));
            start = undefined;
          }
        }
      }
    },

    getFrameEventsInRange(frametimeType, range) {
      const titleToGet = (frametimeType === MAIN_FRAMETIME_TYPE ?
        MAIN_RENDERING_STATS : IMPL_RENDERING_STATS);

      const frameEvents = [];
      for (const event of this.process.getDescendantEvents()) {
        if (event.title === titleToGet) {
          if (range.intersectsExplicitRangeInclusive(event.start, event.end)) {
            frameEvents.push(event);
          }
        }
      }

      frameEvents.sort(function(a, b) {return a.start - b.start;});
      return frameEvents;
    }
  };

  function getFrametimeDataFromEvents(frameEvents) {
    const frametimeData = [];
    for (let i = 1; i < frameEvents.length; i++) {
      const diff = frameEvents[i].start - frameEvents[i - 1].start;
      frametimeData.push({
        'x': frameEvents[i].start,
        'frametime': diff
      });
    }
    return frametimeData;
  }

  return {
    ChromeProcessHelper,

    MAIN_FRAMETIME_TYPE,
    IMPL_FRAMETIME_TYPE,
    MAIN_RENDERING_STATS,
    IMPL_RENDERING_STATS,

    getSlicesIntersectingRange,
    getFrametimeDataFromEvents,
  };
});


'use strict';

/**
 * @fileoverview Utilities for accessing trace data about the Chrome browser.
 */
tr.exportTo('tr.model.helpers', function() {
  function ChromeBrowserHelper(modelHelper, process) {
    tr.model.helpers.ChromeProcessHelper.call(this, modelHelper, process);
    this.mainThread_ = process.findAtMostOneThreadNamed('CrBrowserMain');
    if (!process.name) {
      process.name = ChromeBrowserHelper.PROCESS_NAME;
    }
  }

  ChromeBrowserHelper.PROCESS_NAME = 'Browser';

  ChromeBrowserHelper.isBrowserProcess = function(process) {
    return !!process.findAtMostOneThreadNamed('CrBrowserMain');
  };

  ChromeBrowserHelper.prototype = {
    __proto__: tr.model.helpers.ChromeProcessHelper.prototype,

    // TODO(petrcermak): Pass browser name in a metadata event (see
    // crbug.com/605088).
    get browserName() {
      const hasInProcessRendererThread = this.process.findAllThreadsNamed(
          'Chrome_InProcRendererThread').length > 0;
      return hasInProcessRendererThread ? 'webview' : 'chrome';
    },

    get mainThread() {
      return this.mainThread_;
    },

    get rendererHelpers() {
      return this.modelHelper.rendererHelpers;
    },

    getLoadingEventsInRange(rangeOfInterest) {
      return this.getAllAsyncSlicesMatching(function(slice) {
        return slice.title.indexOf('WebContentsImpl Loading') === 0 &&
            rangeOfInterest.intersectsExplicitRangeInclusive(
                slice.start, slice.end);
      });
    },

    getCommitProvisionalLoadEventsInRange(rangeOfInterest) {
      return this.getAllAsyncSlicesMatching(function(slice) {
        return slice.title === 'RenderFrameImpl::didCommitProvisionalLoad' &&
            rangeOfInterest.intersectsExplicitRangeInclusive(
                slice.start, slice.end);
      });
    },

    get hasLatencyEvents() {
      let hasLatency = false;
      for (const thread of this.modelHelper.model.getAllThreads()) {
        for (const event of thread.getDescendantEvents()) {
          if (!event.isTopLevel) continue;
          if (!(event instanceof tr.e.cc.InputLatencyAsyncSlice)) {
            continue;
          }
          hasLatency = true;
        }
      }
      return hasLatency;
    },

    getLatencyEventsInRange(rangeOfInterest) {
      return this.getAllAsyncSlicesMatching(function(slice) {
        return (slice.title.indexOf('InputLatency') === 0) &&
            rangeOfInterest.intersectsExplicitRangeInclusive(
                slice.start, slice.end);
      });
    },

    getAllAsyncSlicesMatching(pred, opt_this) {
      const events = [];
      this.iterAllThreads(function(thread) {
        for (const slice of thread.getDescendantEvents()) {
          if (pred.call(opt_this, slice)) {
            events.push(slice);
          }
        }
      });
      return events;
    },

    iterAllThreads(func, opt_this) {
      for (const thread of Object.values(this.process.threads)) {
        func.call(opt_this, thread);
      }

      for (const rendererHelper of Object.values(this.rendererHelpers)) {
        const rendererProcess = rendererHelper.process;
        for (const thread of Object.values(rendererProcess.threads)) {
          func.call(opt_this, thread);
        }
      }
    }
  };

  return {
    ChromeBrowserHelper,
  };
});


'use strict';

/**
 * @fileoverview Utilities for accessing the Chrome GPU Process.
 */
tr.exportTo('tr.model.helpers', function() {
  // TODO(charliea): This method should probably throw if this isn't a Chrome
  // GPU process.
  function ChromeGpuHelper(modelHelper, process) {
    tr.model.helpers.ChromeProcessHelper.call(this, modelHelper, process);
    if (!process.name) {
      process.name = ChromeGpuHelper.PROCESS_NAME;
    }
  }

  ChromeGpuHelper.PROCESS_NAME = 'GPU Process';

  ChromeGpuHelper.isGpuProcess = function(process) {
    // In some Android builds the GPU thread is not in a separate process.
    if (process.findAtMostOneThreadNamed('CrBrowserMain') ||
        process.findAtMostOneThreadNamed('CrRendererMain')) {
      return false;
    }

    // On Android, there can sometimes be GPU processes with multiple main
    // threads. We need to recognize those processes as GPU processes.
    return process.findAllThreadsNamed('CrGpuMain').length > 0;
  };

  ChromeGpuHelper.prototype = {
    __proto__: tr.model.helpers.ChromeProcessHelper.prototype
  };

  return {
    ChromeGpuHelper,
  };
});


'use strict';

tr.exportTo('tr.model.helpers', function() {
  const NET_CATEGORIES = new Set(['net', 'netlog',
    'disabled-by-default-netlog', 'disabled-by-default-network']);

  class ChromeThreadHelper {
    constructor(thread) {
      this.thread = thread;
    }

    getNetworkEvents() {
      const networkEvents = [];
      for (const slice of this.thread.asyncSliceGroup.slices) {
        const categories = tr.b.getCategoryParts(slice.category);
        const isNetEvent = category => NET_CATEGORIES.has(category);
        if (categories.filter(isNetEvent).length === 0) continue;
        networkEvents.push(slice);
      }
      return networkEvents;
    }
  }

  return {
    ChromeThreadHelper,
  };
});


'use strict';

tr.exportTo('tr.model.helpers', function() {
  const ChromeThreadHelper = tr.model.helpers.ChromeThreadHelper;

  function ChromeRendererHelper(modelHelper, process) {
    tr.model.helpers.ChromeProcessHelper.call(this, modelHelper, process);
    this.mainThread_ = process.findAtMostOneThreadNamed('CrRendererMain') ||
        process.findAtMostOneThreadNamed('Chrome_InProcRendererThread');
    this.compositorThread_ = process.findAtMostOneThreadNamed('Compositor');
    this.rasterWorkerThreads_ = process.findAllThreadsMatching(function(t) {
      if (t.name === undefined) return false;
      if (t.name.indexOf('CompositorTileWorker') === 0) return true;
      if (t.name.indexOf('CompositorRasterWorker') === 0) return true;
      return false;
    });

    if (!process.name) {
      process.name = ChromeRendererHelper.PROCESS_NAME;
    }
  }

  ChromeRendererHelper.PROCESS_NAME = 'Renderer';

  // Returns true if there is either a main thread or a compositor thread.
  ChromeRendererHelper.isRenderProcess = function(process) {
    if (process.findAtMostOneThreadNamed('CrRendererMain')) return true;
    if (process.findAtMostOneThreadNamed('Compositor')) return true;
    return false;
  };

  ChromeRendererHelper.isTracingProcess = function(process) {
    return process.labels !== undefined &&
        process.labels.length === 1 &&
        process.labels[0] === 'chrome://tracing';
  };

  ChromeRendererHelper.prototype = {
    __proto__: tr.model.helpers.ChromeProcessHelper.prototype,

    // May be undefined.
    get mainThread() {
      return this.mainThread_;
    },

    // May be undefined.
    get compositorThread() {
      return this.compositorThread_;
    },

    // May be empty.
    get rasterWorkerThreads() {
      return this.rasterWorkerThreads_;
    },

    get isChromeTracingUI() {
      return ChromeRendererHelper.isTracingProcess(this.process);
    },
  };

  return {
    ChromeRendererHelper,
  };
});


'use strict';

/**
 * @fileoverview Utilities for accessing trace data about the Chrome browser.
 */
tr.exportTo('tr.model.helpers', function() {
  function findChromeBrowserProcesses(model) {
    return model.getAllProcesses(
        tr.model.helpers.ChromeBrowserHelper.isBrowserProcess);
  }

  function findChromeRenderProcesses(model) {
    return model.getAllProcesses(
        tr.model.helpers.ChromeRendererHelper.isRenderProcess);
  }

  function findChromeGpuProcess(model) {
    const gpuProcesses = model.getAllProcesses(
        tr.model.helpers.ChromeGpuHelper.isGpuProcess);
    if (gpuProcesses.length !== 1) return undefined;
    return gpuProcesses[0];
  }

  function ChromeModelHelper(model) {
    this.model_ = model;

    // Find browserHelpers.
    const browserProcesses = findChromeBrowserProcesses(model);
    this.browserHelpers_ = browserProcesses.map(
        p => new tr.model.helpers.ChromeBrowserHelper(this, p));

    // Find gpuHelper.
    const gpuProcess = findChromeGpuProcess(model);
    if (gpuProcess) {
      this.gpuHelper_ = new tr.model.helpers.ChromeGpuHelper(
          this, gpuProcess);
    } else {
      this.gpuHelper_ = undefined;
    }

    // Find rendererHelpers.
    const rendererProcesses_ = findChromeRenderProcesses(model);

    this.rendererHelpers_ = {};
    rendererProcesses_.forEach(function(renderProcess) {
      const rendererHelper = new tr.model.helpers.ChromeRendererHelper(
          this, renderProcess);
      this.rendererHelpers_[rendererHelper.pid] = rendererHelper;
    }, this);

    this.chromeBounds_ = undefined;
  }

  ChromeModelHelper.guid = tr.b.GUID.allocateSimple();

  ChromeModelHelper.supportsModel = function(model) {
    if (findChromeBrowserProcesses(model).length) return true;
    if (findChromeRenderProcesses(model).length) return true;
    return false;
  };

  ChromeModelHelper.prototype = {
    get pid() {
      throw new Error('woah');
    },

    get process() {
      throw new Error('woah');
    },

    get model() {
      return this.model_;
    },

    // TODO: Make all users of ChromeModelHelper support multiple browsers and
    // remove this getter (see #2119).
    get browserProcess() {
      if (this.browserHelper === undefined) return undefined;
      return this.browserHelper.process;
    },

    // TODO: Make all users of ChromeModelHelper support multiple browsers and
    // remove this getter (see #2119).
    get browserHelper() {
      return this.browserHelpers_[0];
    },

    get browserHelpers() {
      return this.browserHelpers_;
    },

    get gpuHelper() {
      return this.gpuHelper_;
    },

    get rendererHelpers() {
      return this.rendererHelpers_;
    },


    // TODO(dproy): Remove this when loading_metric supports all renderers.
    // https://github.com/catapult-project/catapult/issues/2820
    /**
     * Returns the renderer with the largest PID that is not the Chrome tracing
     * UI.
     *
     * This is a very hacky approach to find the "target" renderer in metrics
     * calculation. Often in Telemetry tests we are only interested in
     * calculating metrics for the page opened by the automated testing system,
     * but there's currently no reliable way to find this renderer. One useful
     * heuristic is that the page Telemetry opens is opened after all the other
     * renderers in Chrome were opened, and therefore has the largest PID.
     */
    get rendererWithLargestPid() {
      let largestPid = -1;
      for (const pid in this.rendererHelpers) {
        const rendererHelper = this.rendererHelpers[pid];
        if (rendererHelper.isChromeTracingUI) continue;
        if (pid > largestPid) largestPid = pid;
      }

      if (largestPid === -1) return undefined;

      return this.rendererHelpers[largestPid];
    },

    /**
     * Returns the minimal bounds that includes all Chrome-related slices, or
     * undefined if no such minimal bounds could be established. This relies on
     * the assumption that all Chrome-relevant traces are bounded by the browser
     * process.
     */
    get chromeBounds() {
      if (!this.chromeBounds_) {
        this.chromeBounds_ = new tr.b.math.Range();
        for (const browserHelper of Object.values(this.browserHelpers)) {
          this.chromeBounds_.addRange(browserHelper.process.bounds);
        }

        for (const rendererHelper of Object.values(this.rendererHelpers)) {
          this.chromeBounds_.addRange(rendererHelper.process.bounds);
        }

        if (this.gpuHelper) {
          this.chromeBounds_.addRange(this.gpuHelper.process.bounds);
        }
      }

      if (this.chromeBounds_.isEmpty) {
        return undefined;
      }

      return this.chromeBounds_;
    }
  };

  return {
    ChromeModelHelper,
  };
});


'use strict';

tr.exportTo('tr.e.cc', function() {
  const AsyncSlice = tr.model.AsyncSlice;
  const EventSet = tr.model.EventSet;

  const UI_COMP_NAME = 'INPUT_EVENT_LATENCY_UI_COMPONENT';
  const ORIGINAL_COMP_NAME = 'INPUT_EVENT_LATENCY_ORIGINAL_COMPONENT';
  const BEGIN_COMP_NAME = 'INPUT_EVENT_LATENCY_BEGIN_RWH_COMPONENT';
  const END_COMP_NAME = 'INPUT_EVENT_LATENCY_TERMINATED_FRAME_SWAP_COMPONENT';

  const MAIN_RENDERER_THREAD_NAME = 'CrRendererMain';
  const COMPOSITOR_THREAD_NAME = 'Compositor';

  const POSTTASK_FLOW_EVENT = 'disabled-by-default-toplevel.flow';
  const IPC_FLOW_EVENT = 'disabled-by-default-ipc.flow';

  const INPUT_EVENT_TYPE_NAMES = {
    CHAR: 'Char',
    CLICK: 'GestureClick',
    CONTEXT_MENU: 'ContextMenu',
    FLING_CANCEL: 'GestureFlingCancel',
    FLING_START: 'GestureFlingStart',
    KEY_DOWN: 'KeyDown',
    KEY_DOWN_RAW: 'RawKeyDown',
    KEY_UP: 'KeyUp',
    LATENCY_SCROLL_UPDATE: 'ScrollUpdate',
    MOUSE_DOWN: 'MouseDown',
    MOUSE_ENTER: 'MouseEnter',
    MOUSE_LEAVE: 'MouseLeave',
    MOUSE_MOVE: 'MouseMove',
    MOUSE_UP: 'MouseUp',
    MOUSE_WHEEL: 'MouseWheel',
    PINCH_BEGIN: 'GesturePinchBegin',
    PINCH_END: 'GesturePinchEnd',
    PINCH_UPDATE: 'GesturePinchUpdate',
    SCROLL_BEGIN: 'GestureScrollBegin',
    SCROLL_END: 'GestureScrollEnd',
    SCROLL_UPDATE: 'GestureScrollUpdate',
    SCROLL_UPDATE_RENDERER: 'ScrollUpdate',
    SHOW_PRESS: 'GestureShowPress',
    TAP: 'GestureTap',
    TAP_CANCEL: 'GestureTapCancel',
    TAP_DOWN: 'GestureTapDown',
    TOUCH_CANCEL: 'TouchCancel',
    TOUCH_END: 'TouchEnd',
    TOUCH_MOVE: 'TouchMove',
    TOUCH_START: 'TouchStart',
    UNKNOWN: 'UNKNOWN'
  };

  function InputLatencyAsyncSlice() {
    AsyncSlice.apply(this, arguments);
    this.associatedEvents_ = new EventSet();
    this.typeName_ = undefined;
    if (!this.isLegacyEvent) {
      this.determineModernTypeName_();
    }
  }

  InputLatencyAsyncSlice.prototype = {
    __proto__: AsyncSlice.prototype,

    // Legacy InputLatencyAsyncSlices involve a top-level slice titled
    // "InputLatency" containing a subSlice whose title starts with
    // "InputLatency:". Modern InputLatencyAsyncSlices involve a single
    // top-level slice whose title starts with "InputLatency::".
    // Legacy subSlices are not available at construction time, so
    // determineLegacyTypeName_() must be called at get time.
    // So this returns false for the legacy subSlice events titled like
    // "InputLatency:Foo" even though they are technically legacy events.
    get isLegacyEvent() {
      return this.title === 'InputLatency';
    },

    get typeName() {
      if (!this.typeName_) {
        this.determineLegacyTypeName_();
      }
      return this.typeName_;
    },

    checkTypeName_() {
      if (!this.typeName_) {
        throw new Error('Unable to determine typeName');
      }
      let found = false;
      for (const typeName in INPUT_EVENT_TYPE_NAMES) {
        if (this.typeName === INPUT_EVENT_TYPE_NAMES[typeName]) {
          found = true;
          break;
        }
      }
      if (!found) {
        this.typeName_ = INPUT_EVENT_TYPE_NAMES.UNKNOWN;
      }
    },

    determineModernTypeName_() {
      // This method works both on modern events titled like
      // "InputLatency::Foo" and also on the legacy subSlices titled like
      // "InputLatency:Foo". Modern events' titles contain 2 colons, whereas the
      // legacy subSlices events contain 1 colon.

      const lastColonIndex = this.title.lastIndexOf(':');
      if (lastColonIndex < 0) return;

      const characterAfterLastColonIndex = lastColonIndex + 1;
      this.typeName_ = this.title.slice(characterAfterLastColonIndex);

      // Check that the determined typeName is known.
      this.checkTypeName_();
    },

    determineLegacyTypeName_() {
      // Iterate over all descendent subSlices.
      for (const subSlice of this.enumerateAllDescendents()) {
        // If |subSlice| is not an InputLatencyAsyncSlice, then ignore it.
        const subSliceIsAInputLatencyAsyncSlice = (
            subSlice instanceof InputLatencyAsyncSlice);
        if (!subSliceIsAInputLatencyAsyncSlice) continue;

        // If |subSlice| does not have a typeName, then ignore it.
        if (!subSlice.typeName) continue;

        // If |this| already has a typeName and |subSlice| has a different
        // typeName, then explode!
        if (this.typeName_ && subSlice.typeName_) {
          const subSliceHasDifferentTypeName = (
              this.typeName_ !== subSlice.typeName_);
          if (subSliceHasDifferentTypeName) {
            throw new Error(
                'InputLatencyAsyncSlice.determineLegacyTypeName_() ' +
                ' found multiple typeNames');
          }
        }

        // The typeName of |this| top-level event is whatever the typeName of
        // |subSlice| is. Set |this.typeName_| to the subSlice's typeName.
        this.typeName_ = subSlice.typeName_;
      }

      // If typeName could not be determined, then explode!
      if (!this.typeName_) {
        throw new Error(
            'InputLatencyAsyncSlice.determineLegacyTypeName_() failed');
      }

      // Check that the determined typeName is known.
      this.checkTypeName_();
    },

    getRendererHelper(sourceSlices) {
      const traceModel = this.startThread.parent.model;
      const modelHelper = traceModel.getOrCreateHelper(
          tr.model.helpers.ChromeModelHelper);
      if (!modelHelper) return undefined;

      let mainThread = undefined;
      let compositorThread = undefined;

      for (const i in sourceSlices) {
        if (sourceSlices[i].parentContainer.name ===
            MAIN_RENDERER_THREAD_NAME) {
          mainThread = sourceSlices[i].parentContainer;
        } else if (sourceSlices[i].parentContainer.name ===
            COMPOSITOR_THREAD_NAME) {
          compositorThread = sourceSlices[i].parentContainer;
        }

        if (mainThread && compositorThread) break;
      }

      const rendererHelpers = modelHelper.rendererHelpers;

      const pids = Object.keys(rendererHelpers);
      for (let i = 0; i < pids.length; i++) {
        const pid = pids[i];
        const rendererHelper = rendererHelpers[pid];
        if (rendererHelper.mainThread === mainThread ||
            rendererHelper.compositorThread === compositorThread) {
          return rendererHelper;
        }
      }

      return undefined;
    },

    addEntireSliceHierarchy(slice) {
      this.associatedEvents_.push(slice);
      slice.iterateAllSubsequentSlices(function(subsequentSlice) {
        this.associatedEvents_.push(subsequentSlice);
      }, this);
    },

    addDirectlyAssociatedEvents(flowEvents) {
      const slices = [];

      flowEvents.forEach(function(flowEvent) {
        this.associatedEvents_.push(flowEvent);
        const newSource = flowEvent.startSlice.mostTopLevelSlice;
        if (slices.indexOf(newSource) === -1) {
          slices.push(newSource);
        }
      }, this);

      const lastFlowEvent = flowEvents[flowEvents.length - 1];
      const lastSource = lastFlowEvent.endSlice.mostTopLevelSlice;
      if (slices.indexOf(lastSource) === -1) {
        slices.push(lastSource);
      }

      return slices;
    },

    // Find the Latency::ScrollUpdate slice that corresponds to the
    // InputLatency::GestureScrollUpdate slice.
    // The C++ CL that makes this connection is at:
    // https://codereview.chromium.org/1178963003
    addScrollUpdateEvents(rendererHelper) {
      if (!rendererHelper || !rendererHelper.compositorThread) {
        return;
      }

      const compositorThread = rendererHelper.compositorThread;
      const gestureScrollUpdateStart = this.start;
      const gestureScrollUpdateEnd = this.end;

      const allCompositorAsyncSlices =
        compositorThread.asyncSliceGroup.slices;

      for (const i in allCompositorAsyncSlices) {
        const slice = allCompositorAsyncSlices[i];

        if (slice.title !== 'Latency::ScrollUpdate') continue;

        const parentId = slice.args.data.
            INPUT_EVENT_LATENCY_FORWARD_SCROLL_UPDATE_TO_MAIN_COMPONENT.
            sequence_number;

        if (parentId === undefined) {
          // Old trace, we can only rely on the timestamp to find the slice
          if (slice.start < gestureScrollUpdateStart ||
              slice.start >= gestureScrollUpdateEnd) {
            continue;
          }
        } else {
          // New trace, we can definitively find the latency slice by comparing
          // its sequence number with gesture id
          if (parseInt(parentId) !== parseInt(this.id)) {
            continue;
          }
        }

        slice.associatedEvents.forEach(function(event) {
          this.associatedEvents_.push(event);
        }, this);
        break;
      }
    },

    // Return true if the slice hierarchy is tracked by LatencyInfo of other
    // input latency events. If the slice hierarchy is tracked by both, this
    // function still returns true.
    belongToOtherInputs(slice, flowEvents) {
      let fromOtherInputs = false;

      slice.iterateEntireHierarchy(function(subsequentSlice) {
        if (fromOtherInputs) return;

        subsequentSlice.inFlowEvents.forEach(function(inflow) {
          if (fromOtherInputs) return;

          if (inflow.category.indexOf('input') > -1) {
            if (flowEvents.indexOf(inflow) === -1) {
              fromOtherInputs = true;
            }
          }
        }, this);
      }, this);

      return fromOtherInputs;
    },

    // Return true if |event| triggers slices of other inputs.
    triggerOtherInputs(event, flowEvents) {
      if (event.outFlowEvents === undefined ||
          event.outFlowEvents.length === 0) {
        return false;
      }

      // Once we fix the bug of flow event binding, there should exist one and
      // only one outgoing flow (PostTask) from ScheduleBeginImplFrameDeadline
      // and PostComposite.
      const flow = event.outFlowEvents[0];

      if (flow.category !== POSTTASK_FLOW_EVENT ||
          !flow.endSlice) {
        return false;
      }

      const endSlice = flow.endSlice;
      if (this.belongToOtherInputs(endSlice.mostTopLevelSlice, flowEvents)) {
        return true;
      }

      return false;
    },

    // Follow outgoing flow of subsequentSlices in the current hierarchy.
    // We also handle cases where different inputs interfere with each other.
    followSubsequentSlices(event, queue, visited, flowEvents) {
      let stopFollowing = false;
      let inputAck = false;

      event.iterateAllSubsequentSlices(function(slice) {
        if (stopFollowing) return;

        // Do not follow TaskQueueManager::RunTask because it causes
        // many false events to be included.
        if (slice.title === 'TaskQueueManager::RunTask') return;

        // Do not follow ScheduledActionSendBeginMainFrame because the real
        // main thread BeginMainFrame is already traced by LatencyInfo flow.
        if (slice.title === 'ThreadProxy::ScheduledActionSendBeginMainFrame') {
          return;
        }

        // Do not follow ScheduleBeginImplFrameDeadline that triggers an
        // OnBeginImplFrameDeadline that is tracked by another LatencyInfo.
        if (slice.title === 'Scheduler::ScheduleBeginImplFrameDeadline') {
          if (this.triggerOtherInputs(slice, flowEvents)) return;
        }

        // Do not follow PostComposite that triggers CompositeImmediately
        // that is tracked by another LatencyInfo.
        if (slice.title === 'CompositorImpl::PostComposite') {
          if (this.triggerOtherInputs(slice, flowEvents)) return;
        }

        // Stop following the rest of the current slice hierarchy if
        // FilterAndSendWebInputEvent occurs after ProcessInputEventAck.
        if (slice.title === 'InputRouterImpl::ProcessInputEventAck') {
          inputAck = true;
        }
        if (inputAck &&
            slice.title === 'InputRouterImpl::FilterAndSendWebInputEvent') {
          stopFollowing = true;
        }

        this.followCurrentSlice(slice, queue, visited);
      }, this);
    },

    // Follow outgoing flow events of the current slice.
    followCurrentSlice(event, queue, visited) {
      event.outFlowEvents.forEach(function(outflow) {
        if ((outflow.category === POSTTASK_FLOW_EVENT ||
            outflow.category === IPC_FLOW_EVENT) &&
            outflow.endSlice) {
          this.associatedEvents_.push(outflow);

          const nextEvent = outflow.endSlice.mostTopLevelSlice;
          if (!visited.contains(nextEvent)) {
            visited.push(nextEvent);
            queue.push(nextEvent);
          }
        }
      }, this);
    },

    backtraceFromDraw(beginImplFrame, visited) {
      const pendingEventQueue = [];
      pendingEventQueue.push(beginImplFrame.mostTopLevelSlice);

      while (pendingEventQueue.length !== 0) {
        const event = pendingEventQueue.pop();

        this.addEntireSliceHierarchy(event);

        // TODO(yuhao): For now, we backtrace all the way to the source input.
        // But is this really needed? I will have an entry in the design
        // doc to discuss this.
        event.inFlowEvents.forEach(function(inflow) {
          if (inflow.category === POSTTASK_FLOW_EVENT && inflow.startSlice) {
            const nextEvent = inflow.startSlice.mostTopLevelSlice;
            if (!visited.contains(nextEvent)) {
              visited.push(nextEvent);
              pendingEventQueue.push(nextEvent);
            }
          }
        }, this);
      }
    },

    sortRasterizerSlices(rasterWorkerThreads,
        sortedRasterizerSlices) {
      rasterWorkerThreads.forEach(function(rasterizer) {
        Array.prototype.push.apply(sortedRasterizerSlices,
            rasterizer.sliceGroup.slices);
      }, this);

      sortedRasterizerSlices.sort(function(a, b) {
        if (a.start !== b.start) {
          return a.start - b.start;
        }
        return a.guid - b.guid;
      });
    },

    // Find rasterization slices that have the source_prepare_tiles_id
    // same as the prepare_tiles_id of TileManager::PrepareTiles
    // The C++ CL that makes this connection is at:
    // https://codereview.chromium.org/1208683002/
    addRasterizationEvents(prepareTiles, rendererHelper,
        visited, flowEvents, sortedRasterizerSlices) {
      if (!prepareTiles.args.prepare_tiles_id) return;

      if (!rendererHelper || !rendererHelper.rasterWorkerThreads) {
        return;
      }

      const rasterWorkerThreads = rendererHelper.rasterWorkerThreads;
      const prepareTileId = prepareTiles.args.prepare_tiles_id;
      const pendingEventQueue = [];

      // Collect all the rasterizer tasks. Return the cached copy if possible.
      if (sortedRasterizerSlices.length === 0) {
        this.sortRasterizerSlices(rasterWorkerThreads, sortedRasterizerSlices);
      }

      // TODO(yuhao): Once TaskSetFinishedTaskImpl also get the prepareTileId
      // we can simply track by checking id rather than counting.
      let numFinishedTasks = 0;
      const RASTER_TASK_TITLE = 'RasterizerTaskImpl::RunOnWorkerThread';
      const IMAGEDECODE_TASK_TITLE = 'ImageDecodeTaskImpl::RunOnWorkerThread';
      const FINISHED_TASK_TITLE = 'TaskSetFinishedTaskImpl::RunOnWorkerThread';

      for (let i = 0; i < sortedRasterizerSlices.length; i++) {
        const task = sortedRasterizerSlices[i];

        if (task.title === RASTER_TASK_TITLE ||
            task.title === IMAGEDECODE_TASK_TITLE) {
          if (task.args.source_prepare_tiles_id === prepareTileId) {
            this.addEntireSliceHierarchy(task.mostTopLevelSlice);
          }
        } else if (task.title === FINISHED_TASK_TITLE) {
          if (task.start > prepareTiles.start) {
            pendingEventQueue.push(task.mostTopLevelSlice);
            if (++numFinishedTasks === 3) break;
          }
        }
      }

      // Trace PostTask from rasterizer tasks.
      while (pendingEventQueue.length !== 0) {
        const event = pendingEventQueue.pop();

        this.addEntireSliceHierarchy(event);
        this.followSubsequentSlices(event, pendingEventQueue, visited,
            flowEvents);
      }
    },

    addOtherCausallyRelatedEvents(rendererHelper, sourceSlices,
        flowEvents, sortedRasterizerSlices) {
      const pendingEventQueue = [];
      // Keep track of visited nodes when traversing a DAG
      const visitedEvents = new EventSet();
      let beginImplFrame = undefined;
      let prepareTiles = undefined;
      sortedRasterizerSlices = [];

      sourceSlices.forEach(function(sourceSlice) {
        if (!visitedEvents.contains(sourceSlice)) {
          visitedEvents.push(sourceSlice);
          pendingEventQueue.push(sourceSlice);
        }
      }, this);

      while (pendingEventQueue.length !== 0) {
        const event = pendingEventQueue.pop();

        // Push the current event chunk into associatedEvents.
        this.addEntireSliceHierarchy(event);

        this.followCurrentSlice(event, pendingEventQueue, visitedEvents);

        this.followSubsequentSlices(event, pendingEventQueue, visitedEvents,
            flowEvents);

        // The rasterization work (CompositorTileWorker thread) and the
        // Compositor tile manager are connect by the prepare_tiles_id
        // instead of flow events.
        const COMPOSITOR_PREPARE_TILES = 'TileManager::PrepareTiles';
        prepareTiles = event.findDescendentSlice(COMPOSITOR_PREPARE_TILES);
        if (prepareTiles) {
          this.addRasterizationEvents(prepareTiles, rendererHelper,
              visitedEvents, flowEvents, sortedRasterizerSlices);
        }

        // OnBeginImplFrameDeadline could be triggered by other inputs.
        // For now, we backtrace from it.
        // TODO(yuhao): There are more such slices that we need to backtrace
        const COMPOSITOR_ON_BIFD = 'Scheduler::OnBeginImplFrameDeadline';
        beginImplFrame = event.findDescendentSlice(COMPOSITOR_ON_BIFD);
        if (beginImplFrame) {
          this.backtraceFromDraw(beginImplFrame, visitedEvents);
        }
      }

      // A separate pass on GestureScrollUpdate.
      // Scroll update doesn't go through the main thread, but the compositor
      // may go back to the main thread if there is an onscroll event handler.
      // This is captured by a different flow event, which does not have the
      // same ID as the Input Latency Event, but it is technically causally
      // related to the GestureScrollUpdate input. Add them manually for now.
      const INPUT_GSU = 'InputLatency::GestureScrollUpdate';
      if (this.title === INPUT_GSU) {
        this.addScrollUpdateEvents(rendererHelper);
      }
    },

    get associatedEvents() {
      if (this.associatedEvents_.length !== 0) {
        return this.associatedEvents_;
      }

      const modelIndices = this.startThread.parent.model.modelIndices;
      const flowEvents = modelIndices.getFlowEventsWithId(this.id);

      if (flowEvents.length === 0) {
        return this.associatedEvents_;
      }

      // Step 1: Get events that are directly connected by the LatencyInfo
      // flow events. This gives us a small set of events that are guaranteed
      // to be associated with the input, but are almost certain incomplete.
      // We call this set "source" event set.
      // This step returns the "source" event set (sourceSlices), which is then
      // used in the second step.
      const sourceSlices = this.addDirectlyAssociatedEvents(flowEvents);

      // Step 2: Start from the previously constructed "source" event set, we
      // follow the toplevel (i.e., PostTask) and IPC flow events. Any slices
      // that are reachable from the "source" event set via PostTasks or IPCs
      // are conservatively considered associated with the input event.
      // We then deal with specific cases where flow events either over include
      // or miss capturing slices.
      const rendererHelper = this.getRendererHelper(sourceSlices);
      this.addOtherCausallyRelatedEvents(rendererHelper, sourceSlices,
          flowEvents);

      return this.associatedEvents_;
    },

    get inputLatency() {
      if (!('data' in this.args)) return undefined;

      const data = this.args.data;
      if (!(END_COMP_NAME in data)) return undefined;

      let latency = 0;
      const endTime = data[END_COMP_NAME].time;
      if (ORIGINAL_COMP_NAME in data) {
        latency = endTime - data[ORIGINAL_COMP_NAME].time;
      } else if (UI_COMP_NAME in data) {
        latency = endTime - data[UI_COMP_NAME].time;
      } else if (BEGIN_COMP_NAME in data) {
        latency = endTime - data[BEGIN_COMP_NAME].time;
      } else {
        throw new Error('No valid begin latency component');
      }
      return latency;
    }
  };

  const eventTypeNames = [
    'Char',
    'ContextMenu',
    'GestureClick',
    'GestureFlingCancel',
    'GestureFlingStart',
    'GestureScrollBegin',
    'GestureScrollEnd',
    'GestureScrollUpdate',
    'GestureShowPress',
    'GestureTap',
    'GestureTapCancel',
    'GestureTapDown',
    'GesturePinchBegin',
    'GesturePinchEnd',
    'GesturePinchUpdate',
    'KeyDown',
    'KeyUp',
    'MouseDown',
    'MouseEnter',
    'MouseLeave',
    'MouseMove',
    'MouseUp',
    'MouseWheel',
    'RawKeyDown',
    'ScrollUpdate',
    'TouchCancel',
    'TouchEnd',
    'TouchMove',
    'TouchStart'
  ];
  const allTypeNames = ['InputLatency'];
  eventTypeNames.forEach(function(eventTypeName) {
    // Old style.
    allTypeNames.push('InputLatency:' + eventTypeName);

    // New style.
    allTypeNames.push('InputLatency::' + eventTypeName);
  });

  AsyncSlice.subTypes.register(
      InputLatencyAsyncSlice,
      {
        typeNames: allTypeNames,
        categoryParts: ['latencyInfo']
      });

  return {
    InputLatencyAsyncSlice,
    INPUT_EVENT_TYPE_NAMES,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  function AnimationExpectation(
      parentModel, initiatorTitle, start, duration) {
    tr.model.um.UserExpectation.call(
        this, parentModel, initiatorTitle, start, duration);
    this.frameEvents_ = undefined;
  }

  AnimationExpectation.prototype = {
    __proto__: tr.model.um.UserExpectation.prototype,
    constructor: AnimationExpectation,

    get frameEvents() {
      if (this.frameEvents_) {
        return this.frameEvents_;
      }

      this.frameEvents_ = new tr.model.EventSet();

      this.associatedEvents.forEach(function(event) {
        if (event.title === tr.model.helpers.IMPL_RENDERING_STATS) {
          this.frameEvents_.push(event);
        }
      }, this);

      return this.frameEvents_;
    }
  };

  tr.model.um.UserExpectation.subTypes.register(AnimationExpectation, {
    stageTitle: 'Animation',
    colorId: tr.b.ColorScheme.getColorIdForReservedName('rail_animation')
  });

  return {
    AnimationExpectation,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  function ResponseExpectation(
      parentModel, initiatorTitle, start, duration, opt_isAnimationBegin) {
    tr.model.um.UserExpectation.call(
        this, parentModel, initiatorTitle, start, duration);
    this.isAnimationBegin = opt_isAnimationBegin || false;
  }

  ResponseExpectation.prototype = {
    __proto__: tr.model.um.UserExpectation.prototype,
    constructor: ResponseExpectation
  };

  tr.model.um.UserExpectation.subTypes.register(ResponseExpectation, {
    stageTitle: 'Response',
    colorId: tr.b.ColorScheme.getColorIdForReservedName('rail_response')
  });

  return {
    ResponseExpectation,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  // This is an intermediate data format between InputLatencyAsyncSlices and
  // Responses and Animations.
  function ProtoExpectation(type, initiatorType) {
    this.type = type;
    this.initiatorType = initiatorType;
    this.start = Infinity;
    this.end = -Infinity;
    this.associatedEvents = new tr.model.EventSet();
    this.isAnimationBegin = false;
  }

  ProtoExpectation.RESPONSE_TYPE = 'r';
  ProtoExpectation.ANIMATION_TYPE = 'a';

  // Explicitly ignore some input events to allow
  // UserModelBuilder.checkAllInputEventsHandled() to determine which events
  // were unintentionally ignored due to a bug.
  ProtoExpectation.IGNORED_TYPE = 'ignored';

  /**
   * Combine initiator titles by selecting the initiator title first in a
   * hard-coded hierarchy. Higher up in the hierarchy are more "specific"
   * initiator titles (e.g. a scroll is higher than a touch, because a
   * touch could mean many different things, of which a scroll is one)
   */
  const INITIATOR_HIERARCHY = [
    tr.model.um.INITIATOR_TYPE.PINCH,
    tr.model.um.INITIATOR_TYPE.FLING,
    tr.model.um.INITIATOR_TYPE.MOUSE_WHEEL,
    tr.model.um.INITIATOR_TYPE.SCROLL,
    tr.model.um.INITIATOR_TYPE.VR,
    tr.model.um.INITIATOR_TYPE.VIDEO,
    tr.model.um.INITIATOR_TYPE.WEBGL,
    tr.model.um.INITIATOR_TYPE.CSS,
    tr.model.um.INITIATOR_TYPE.MOUSE,
    tr.model.um.INITIATOR_TYPE.KEYBOARD,
    tr.model.um.INITIATOR_TYPE.TAP,
    tr.model.um.INITIATOR_TYPE.TOUCH
  ];

  function combineInitiatorTypes(title1, title2) {
    for (const item of INITIATOR_HIERARCHY) {
      if (title1 === item || title2 === item) return item;
    }
    throw new Error('Invalid titles in combineInitiatorTypes');
  }

  ProtoExpectation.prototype = {
    get isValid() {
      return this.end > this.start;
    },

    // Return true if any associatedEvent's typeName is in typeNames.
    containsTypeNames(typeNames) {
      return this.associatedEvents.some(
          x => typeNames.indexOf(x.typeName) >= 0);
    },

    containsSliceTitle(title) {
      return this.associatedEvents.some(x => title === x.title);
    },

    createInteractionRecord(model) {
      if (this.type !== ProtoExpectation.IGNORED_TYPE && !this.isValid) {
        model.importWarning({
          type: 'ProtoExpectation',
          message: 'Please file a bug with this trace. ' + this.debug(),
          showToUser: true
        });
        return undefined;
      }

      const duration = this.end - this.start;

      let ir = undefined;
      switch (this.type) {
        case ProtoExpectation.RESPONSE_TYPE:
          ir = new tr.model.um.ResponseExpectation(
              model, this.initiatorType, this.start, duration,
              this.isAnimationBegin);
          break;
        case ProtoExpectation.ANIMATION_TYPE:
          ir = new tr.model.um.AnimationExpectation(
              model, this.initiatorType, this.start, duration);
          break;
      }
      if (!ir) return undefined;

      ir.sourceEvents.addEventSet(this.associatedEvents);

      function pushAssociatedEvents(event) {
        ir.associatedEvents.push(event);

        // |event| is either an InputLatencyAsyncSlice (which collects all of
        // its associated events transitively) or a CSS Animation (which doesn't
        // have any associated events). So this does not need to recurse.
        if (event.associatedEvents) {
          ir.associatedEvents.addEventSet(event.associatedEvents);
        }
      }

      this.associatedEvents.forEach(function(event) {
        pushAssociatedEvents(event);

        // Old-style InputLatencyAsyncSlices have subSlices.
        if (event.subSlices) {
          event.subSlices.forEach(pushAssociatedEvents);
        }
      });

      return ir;
    },

    // Merge the other ProtoExpectation into this one.
    // The types need not match: ignored ProtoExpectations might be merged
    // into overlapping ProtoExpectations, and Touch-only Animations are merged
    // into Tap Responses.
    merge(other) {
      this.initiatorType = combineInitiatorTypes(
          this.initiatorType, other.initiatorType);

      // Don't use pushEvent(), which would lose special start, end.
      this.associatedEvents.addEventSet(other.associatedEvents);
      this.start = Math.min(this.start, other.start);
      this.end = Math.max(this.end, other.end);
      if (other.isAnimationBegin) {
        this.isAnimationBegin = true;
      }
    },

    // Include |event| in this ProtoExpectation, expanding start/end to include
    // it.
    pushEvent(event) {
      // Usually, this method will be called while iterating over a list of
      // events sorted by start time, so this method won't usually change
      // this.start. However, this will sometimes be called for
      // ProtoExpectations created by previous handlers, in which case
      // event.start could possibly be before this.start.
      this.start = Math.min(this.start, event.start);
      this.end = Math.max(this.end, event.end);
      this.associatedEvents.push(event);
    },

    // Include |sample| in this ProtoExpectation, expanding start/end to
    // include it.
    pushSample(sample) {
      this.start = Math.min(this.start, sample.timestamp);
      this.end = Math.max(this.end, sample.timestamp);
      this.associatedEvents.push(sample);
    },

    // Returns true if timestamp is contained in this ProtoExpectation.
    containsTimestampInclusive(timestamp) {
      return (this.start <= timestamp) && (timestamp <= this.end);
    },

    // Return true if the other event intersects this ProtoExpectation.
    intersects(other) {
      // http://stackoverflow.com/questions/325933
      return (other.start < this.end) && (other.end > this.start);
    },

    isNear(event, threshold) {
      return (this.end + threshold) > event.start;
    },

    // Return a string describing this ProtoExpectation for debugging.
    debug() {
      let debugString = this.type + '(';
      debugString += parseInt(this.start) + ' ';
      debugString += parseInt(this.end);
      this.associatedEvents.forEach(function(event) {
        debugString += ' ' + event.typeName;
      });
      return debugString + ')';
    }
  };

  return {
    ProtoExpectation,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  const ProtoExpectation = tr.importer.ProtoExpectation;
  const INITIATOR_TYPE = tr.model.um.INITIATOR_TYPE;
  const INPUT_TYPE = tr.e.cc.INPUT_EVENT_TYPE_NAMES;

  const KEYBOARD_TYPE_NAMES = [
    INPUT_TYPE.CHAR,
    INPUT_TYPE.KEY_DOWN_RAW,
    INPUT_TYPE.KEY_DOWN,
    INPUT_TYPE.KEY_UP
  ];
  const MOUSE_RESPONSE_TYPE_NAMES = [
    INPUT_TYPE.CLICK,
    INPUT_TYPE.CONTEXT_MENU
  ];
  const MOUSE_WHEEL_TYPE_NAMES = [
    INPUT_TYPE.MOUSE_WHEEL
  ];
  const MOUSE_DRAG_TYPE_NAMES = [
    INPUT_TYPE.MOUSE_DOWN,
    INPUT_TYPE.MOUSE_MOVE,
    INPUT_TYPE.MOUSE_UP
  ];
  const TAP_TYPE_NAMES = [
    INPUT_TYPE.TAP,
    INPUT_TYPE.TAP_CANCEL,
    INPUT_TYPE.TAP_DOWN
  ];
  const PINCH_TYPE_NAMES = [
    INPUT_TYPE.PINCH_BEGIN,
    INPUT_TYPE.PINCH_END,
    INPUT_TYPE.PINCH_UPDATE
  ];
  const FLING_TYPE_NAMES = [
    INPUT_TYPE.FLING_CANCEL,
    INPUT_TYPE.FLING_START
  ];
  const TOUCH_TYPE_NAMES = [
    INPUT_TYPE.TOUCH_END,
    INPUT_TYPE.TOUCH_MOVE,
    INPUT_TYPE.TOUCH_START
  ];
  const SCROLL_TYPE_NAMES = [
    INPUT_TYPE.SCROLL_BEGIN,
    INPUT_TYPE.SCROLL_END,
    INPUT_TYPE.SCROLL_UPDATE
  ];
  const ALL_HANDLED_TYPE_NAMES = [].concat(
      KEYBOARD_TYPE_NAMES,
      MOUSE_RESPONSE_TYPE_NAMES,
      MOUSE_WHEEL_TYPE_NAMES,
      MOUSE_DRAG_TYPE_NAMES,
      PINCH_TYPE_NAMES,
      TAP_TYPE_NAMES,
      FLING_TYPE_NAMES,
      TOUCH_TYPE_NAMES,
      SCROLL_TYPE_NAMES
  );

  const RENDERER_FLING_TITLE = 'InputHandlerProxy::HandleGestureFling::started';
  const PLAYBACK_EVENT_TITLE = 'VideoPlayback';

  const CSS_ANIMATION_TITLE = 'Animation';

  const VR_COUNTER_NAMES = [
    'gpu.WebVR FPS',
    'gpu.WebVR frame time (ms)',
    'gpu.WebVR pose prediction (ms)',
  ];
  const VR_EVENT_NAMES = [
    'VrShellGl::AcquireFrame',
    'VrShellGl::DrawFrame',
    'VrShellGl::DrawSubmitFrameWhenReady',
    'VrShellGl::DrawUiView',
    'VrShellGl::UpdateController',
  ];
  /* 500 ms is a bit arbitrary, but it reliably avoids all the jank caused by
   * VR entry.
   */
  const VR_RESPONSE_MS = 500;

  /**
   * If there's less than this much time between the end of one event and the
   * start of the next, then they might be merged.
   * There was not enough thought given to this value, so if you have any slight
   * reason to change it, then please do so. It might also be good to split this
   * into multiple values.
   */
  const INPUT_MERGE_THRESHOLD_MS = 200;
  const ANIMATION_MERGE_THRESHOLD_MS = 32;   // 2x 60FPS frames

  /**
   * If two MouseWheel events begin this close together, then they're an
   * Animation, not two responses.
   */
  const MOUSE_WHEEL_THRESHOLD_MS = 40;

  /**
   * If two MouseMoves are more than this far apart, then they're two Responses,
   * not Animation.
   */
  const MOUSE_MOVE_THRESHOLD_MS = 40;

  // TODO(#3813) Move this.
  function compareEvents(x, y) {
    if (x.start !== y.start) {
      return x.start - y.start;
    }
    if (x.end !== y.end) {
      return x.end - y.end;
    }
    if (x.guid && y.guid) {
      return x.guid - y.guid;
    }
    return 0;
  }

  function forEventTypesIn(events, typeNames, cb, opt_this) {
    events.forEach(function(event) {
      if (typeNames.indexOf(event.typeName) >= 0) {
        cb.call(opt_this, event);
      }
    });
  }

  function causedFrame(event) {
    return event.associatedEvents.some(
        x => x.title === tr.model.helpers.IMPL_RENDERING_STATS);
  }

  function getSortedFrameEventsByProcess(modelHelper) {
    const frameEventsByPid = {};
    for (const [pid, rendererHelper] of
        Object.entries(modelHelper.rendererHelpers)) {
      frameEventsByPid[pid] = rendererHelper.getFrameEventsInRange(
          tr.model.helpers.IMPL_FRAMETIME_TYPE, modelHelper.model.bounds);
    }
    return frameEventsByPid;
  }

  function getSortedInputEvents(modelHelper) {
    const inputEvents = [];

    const browserProcess = modelHelper.browserHelper.process;
    const mainThread = browserProcess.findAtMostOneThreadNamed(
        'CrBrowserMain');
    for (const slice of mainThread.asyncSliceGroup.getDescendantEvents()) {
      if (!slice.isTopLevel) continue;

      if (!(slice instanceof tr.e.cc.InputLatencyAsyncSlice)) continue;

      if (isNaN(slice.start) ||
          isNaN(slice.duration) ||
          isNaN(slice.end)) {
        continue;
      }

      inputEvents.push(slice);
    }

    return inputEvents.sort(compareEvents);
  }

  function findProtoExpectations(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    // This order is not important. Handlers are independent.
    const handlers = [
      handleKeyboardEvents,
      handleMouseResponseEvents,
      handleMouseWheelEvents,
      handleMouseDragEvents,
      handleTapResponseEvents,
      handlePinchEvents,
      handleFlingEvents,
      handleTouchEvents,
      handleScrollEvents,
      handleCSSAnimations,
      handleWebGLAnimations,
      handleVideoAnimations,
      handleVrAnimations,
    ];
    handlers.forEach(function(handler) {
      protoExpectations.push.apply(protoExpectations, handler(
          modelHelper, sortedInputEvents, warn));
    });
    protoExpectations.sort(compareEvents);
    return protoExpectations;
  }

  /**
   * Every keyboard event is a Response.
   */
  function handleKeyboardEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    forEventTypesIn(sortedInputEvents, KEYBOARD_TYPE_NAMES, function(event) {
      const pe = new ProtoExpectation(
          ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.KEYBOARD);
      pe.pushEvent(event);
      protoExpectations.push(pe);
    });
    return protoExpectations;
  }

  /**
   * Some mouse events can be translated directly into Responses.
   */
  function handleMouseResponseEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    forEventTypesIn(
        sortedInputEvents, MOUSE_RESPONSE_TYPE_NAMES, function(event) {
          const pe = new ProtoExpectation(
          ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.MOUSE);
          pe.pushEvent(event);
          protoExpectations.push(pe);
        });
    return protoExpectations;
  }
  /**
   * MouseWheel events are caused either by a physical wheel on a physical
   * mouse, or by a touch-drag gesture on a track-pad. The physical wheel
   * causes MouseWheel events that are much more spaced out, and have no
   * chance of hitting 60fps, so they are each turned into separate Response
   * UEs. The track-pad causes MouseWheel events that are much closer
   * together, and are expected to be 60fps, so the first event in a sequence
   * is turned into a Response, and the rest are merged into an Animation.
   * NB this threshold uses the two events' start times, unlike
   * ProtoExpectation.isNear, which compares the end time of the previous event
   * with the start time of the next.
   */
  function handleMouseWheelEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    let currentPE = undefined;
    let prevEvent_ = undefined;
    forEventTypesIn(
        sortedInputEvents, MOUSE_WHEEL_TYPE_NAMES, function(event) {
      // Switch prevEvent in one place so that we can early-return later.
          const prevEvent = prevEvent_;
          prevEvent_ = event;

          if (currentPE &&
          (prevEvent.start + MOUSE_WHEEL_THRESHOLD_MS) >= event.start) {
            if (currentPE.type === ProtoExpectation.ANIMATION_TYPE) {
              currentPE.pushEvent(event);
            } else {
              currentPE = new ProtoExpectation(ProtoExpectation.ANIMATION_TYPE,
              INITIATOR_TYPE.MOUSE_WHEEL);
              currentPE.pushEvent(event);
              protoExpectations.push(currentPE);
            }
            return;
          }
          currentPE = new ProtoExpectation(
          ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.MOUSE_WHEEL);
          currentPE.pushEvent(event);
          protoExpectations.push(currentPE);
        });
    return protoExpectations;
  }

  /**
   * Down events followed closely by Up events are click Responses, but the
   * Response doesn't start until the Up event.
   *
   *     RRR
   * DDD UUU
   *
   * If there are any Move events in between a Down and an Up, then the Down
   * and the first Move are a Response, then the rest of the Moves are an
   * Animation:
   *
   * RRRRRRRAAAAAAAAAAAAAAAAAAAA
   * DDD MMM MMM MMM MMM MMM UUU
   */
  function handleMouseDragEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    let currentPE = undefined;
    let mouseDownEvent = undefined;
    forEventTypesIn(
        sortedInputEvents, MOUSE_DRAG_TYPE_NAMES, function(event) {
          switch (event.typeName) {
            case INPUT_TYPE.MOUSE_DOWN:
              if (causedFrame(event)) {
                const pe = new ProtoExpectation(
                    ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.MOUSE);
                pe.pushEvent(event);
                protoExpectations.push(pe);
              } else {
            // Responses typically don't start until the mouse up event.
            // Add this MouseDown to the Response that starts at the MouseUp.
                mouseDownEvent = event;
              }
              break;

          // There may be more than 100ms between the start of the mouse down
          // and the start of the mouse up. Chrome and the web don't start to
          // respond until the mouse up. Responses start deducting comfort
          // at 100ms duration. If more than that 100ms duration is burned
          // through while waiting for the user to release the
          // mouse button, then ResponseExpectation will unfairly start
          // deducting comfort before Chrome even has a mouse up to respond to.
          // It is technically possible for a site to afford one response on
          // mouse down and another on mouse up, but that is an edge case. The
          // vast majority of mouse downs are not responses.

            case INPUT_TYPE.MOUSE_MOVE:
              if (!causedFrame(event)) {
            // Ignore MouseMoves that do not affect the screen. They are not
            // part of an interaction record by definition.
                const pe = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
                pe.pushEvent(event);
                protoExpectations.push(pe);
              } else if (!currentPE ||
                      !currentPE.isNear(event, MOUSE_MOVE_THRESHOLD_MS)) {
            // The first MouseMove after a MouseDown or after a while is a
            // Response.
                currentPE = new ProtoExpectation(
                ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.MOUSE);
                currentPE.pushEvent(event);
                if (mouseDownEvent) {
                  currentPE.associatedEvents.push(mouseDownEvent);
                  mouseDownEvent = undefined;
                }
                protoExpectations.push(currentPE);
              } else {
            // Merge this event into an Animation.
                if (currentPE.type === ProtoExpectation.ANIMATION_TYPE) {
                  currentPE.pushEvent(event);
                } else {
                  currentPE = new ProtoExpectation(
                  ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.MOUSE);
                  currentPE.pushEvent(event);
                  protoExpectations.push(currentPE);
                }
              }
              break;

            case INPUT_TYPE.MOUSE_UP:
              if (!mouseDownEvent) {
                const pe = new ProtoExpectation(
                    causedFrame(event) ? ProtoExpectation.RESPONSE_TYPE :
                    ProtoExpectation.IGNORED_TYPE,
                    INITIATOR_TYPE.MOUSE);
                pe.pushEvent(event);
                protoExpectations.push(pe);
                break;
              }

              if (currentPE) {
                currentPE.pushEvent(event);
              } else {
                currentPE = new ProtoExpectation(
                ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.MOUSE);
                if (mouseDownEvent) {
                  currentPE.associatedEvents.push(mouseDownEvent);
                }
                currentPE.pushEvent(event);
                protoExpectations.push(currentPE);
              }
              mouseDownEvent = undefined;
              currentPE = undefined;
              break;
          }
        });
    if (mouseDownEvent) {
      currentPE = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
      currentPE.pushEvent(mouseDownEvent);
      protoExpectations.push(currentPE);
    }
    return protoExpectations;
  }

  /**
   * Solitary Tap events are simple Responses:
   *
   * RRR
   * TTT
   *
   * TapDowns are part of Responses.
   *
   * RRRRRRR
   * DDD TTT
   *
   * TapCancels are part of Responses, which seems strange. They always go
   * with scrolls, so they'll probably be merged with scroll Responses.
   * TapCancels can take a significant amount of time and account for a
   * significant amount of work, which should be grouped with the scroll UEs
   * if possible.
   *
   * RRRRRRR
   * DDD CCC
   **/
  function handleTapResponseEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    let currentPE = undefined;
    forEventTypesIn(sortedInputEvents, TAP_TYPE_NAMES, function(event) {
      switch (event.typeName) {
        case INPUT_TYPE.TAP_DOWN:
          currentPE = new ProtoExpectation(
              ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.TAP);
          currentPE.pushEvent(event);
          protoExpectations.push(currentPE);
          break;

        case INPUT_TYPE.TAP:
          if (currentPE) {
            currentPE.pushEvent(event);
          } else {
            // Sometimes we get Tap events with no TapDown, sometimes we get
            // TapDown events. Handle both.
            currentPE = new ProtoExpectation(
                ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.TAP);
            currentPE.pushEvent(event);
            protoExpectations.push(currentPE);
          }
          currentPE = undefined;
          break;

        case INPUT_TYPE.TAP_CANCEL:
          if (!currentPE) {
            const pe = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
            pe.pushEvent(event);
            protoExpectations.push(pe);
            break;
          }

          if (currentPE.isNear(event, INPUT_MERGE_THRESHOLD_MS)) {
            currentPE.pushEvent(event);
          } else {
            currentPE = new ProtoExpectation(
                ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.TAP);
            currentPE.pushEvent(event);
            protoExpectations.push(currentPE);
          }
          currentPE = undefined;
          break;
      }
    });
    return protoExpectations;
  }

  /**
   * The PinchBegin and the first PinchUpdate comprise a Response, then the
   * rest of the PinchUpdates comprise an Animation.
   *
   * RRRRRRRAAAAAAAAAAAAAAAAAAAA
   * BBB UUU UUU UUU UUU UUU EEE
   */
  function handlePinchEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    let currentPE = undefined;
    let sawFirstUpdate = false;
    const modelBounds = modelHelper.model.bounds;
    forEventTypesIn(sortedInputEvents, PINCH_TYPE_NAMES, function(event) {
      switch (event.typeName) {
        case INPUT_TYPE.PINCH_BEGIN:
          if (currentPE &&
              currentPE.isNear(event, INPUT_MERGE_THRESHOLD_MS)) {
            currentPE.pushEvent(event);
            break;
          }
          currentPE = new ProtoExpectation(
              ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.PINCH);
          currentPE.pushEvent(event);
          currentPE.isAnimationBegin = true;
          protoExpectations.push(currentPE);
          sawFirstUpdate = false;
          break;

        case INPUT_TYPE.PINCH_UPDATE:
          // Like ScrollUpdates, the Begin and the first Update constitute a
          // Response, then the rest of the Updates constitute an Animation
          // that begins when the Response ends. If the user pauses in the
          // middle of an extended pinch gesture, then multiple Animations
          // will be created.
          if (!currentPE ||
              ((currentPE.type === ProtoExpectation.RESPONSE_TYPE) &&
                sawFirstUpdate) ||
              !currentPE.isNear(event, INPUT_MERGE_THRESHOLD_MS)) {
            currentPE = new ProtoExpectation(
                ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.PINCH);
            currentPE.pushEvent(event);
            protoExpectations.push(currentPE);
          } else {
            currentPE.pushEvent(event);
            sawFirstUpdate = true;
          }
          break;

        case INPUT_TYPE.PINCH_END:
          if (currentPE) {
            currentPE.pushEvent(event);
          } else {
            const pe = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
            pe.pushEvent(event);
            protoExpectations.push(pe);
          }
          currentPE = undefined;
          break;
      }
    });
    return protoExpectations;
  }

  /**
   * Flings are defined by 3 types of events: FlingStart, FlingCancel, and the
   * renderer fling event. Flings do not begin with a Response. Flings end
   * either at the beginning of a FlingCancel, or at the end of the renderer
   * fling event.
   *
   * AAAAAAAAAAAAAAAAAAAAAAAAAA
   * SSS
   *     RRRRRRRRRRRRRRRRRRRRRR
   *
   *
   * AAAAAAAAAAA
   * SSS        CCC
   */
  function handleFlingEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    let currentPE = undefined;

    function isRendererFling(event) {
      return event.title === RENDERER_FLING_TITLE;
    }
    const browserHelper = modelHelper.browserHelper;
    const flingEvents = browserHelper.getAllAsyncSlicesMatching(
        isRendererFling);

    forEventTypesIn(sortedInputEvents, FLING_TYPE_NAMES, function(event) {
      flingEvents.push(event);
    });
    flingEvents.sort(compareEvents);

    flingEvents.forEach(function(event) {
      if (event.title === RENDERER_FLING_TITLE) {
        if (currentPE) {
          currentPE.pushEvent(event);
        } else {
          currentPE = new ProtoExpectation(
              ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.FLING);
          currentPE.pushEvent(event);
          protoExpectations.push(currentPE);
        }
        return;
      }

      switch (event.typeName) {
        case INPUT_TYPE.FLING_START:
          if (currentPE) {
            warn({
              type: 'UserModelBuilder',
              message: 'Unexpected FlingStart',
              showToUser: false,
            });
            currentPE.pushEvent(event);
          } else {
            currentPE = new ProtoExpectation(
                ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.FLING);
            currentPE.pushEvent(event);
            // Set end to an invalid value so that it can be noticed and fixed
            // later.
            currentPE.end = 0;
            protoExpectations.push(currentPE);
          }
          break;

        case INPUT_TYPE.FLING_CANCEL:
          if (currentPE) {
            currentPE.pushEvent(event);
            // FlingCancel events start when TouchStart events start, which is
            // typically when a Response starts. FlingCancel events end when
            // chrome acknowledges them, not when they update the screen. So
            // there might be one more frame during the FlingCancel, after
            // this Animation ends. That won't affect the scoring algorithms,
            // and it will make the UEs look more correct if they don't
            // overlap unnecessarily.
            currentPE.end = event.start;
            currentPE = undefined;
          } else {
            const pe = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
            pe.pushEvent(event);
            protoExpectations.push(pe);
          }
          break;
      }
    });
    // If there was neither a FLING_CANCEL nor a renderer fling after the
    // FLING_START, then assume that it ends at the end of the model, so set
    // the end of currentPE to the end of the model.
    if (currentPE && !currentPE.end) {
      currentPE.end = modelHelper.model.bounds.max;
    }
    return protoExpectations;
  }

  /**
   * The TouchStart and the first TouchMove comprise a Response, then the
   * rest of the TouchMoves comprise an Animation.
   *
   * RRRRRRRAAAAAAAAAAAAAAAAAAAA
   * SSS MMM MMM MMM MMM MMM EEE
   *
   * If there are no TouchMove events in between a TouchStart and a TouchEnd,
   * then it's just a Response.
   *
   * RRRRRRR
   * SSS EEE
   */
  function handleTouchEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    let currentPE = undefined;
    let sawFirstMove = false;
    forEventTypesIn(sortedInputEvents, TOUCH_TYPE_NAMES, function(event) {
      switch (event.typeName) {
        case INPUT_TYPE.TOUCH_START:
          if (currentPE) {
            // NB: currentPE will probably be merged with something from
            // handlePinchEvents(). Multiple TouchStart events without an
            // intervening TouchEnd logically implies that multiple fingers
            // are on the screen, so this is probably a pinch gesture.
            currentPE.pushEvent(event);
          } else {
            currentPE = new ProtoExpectation(
                ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.TOUCH);
            currentPE.pushEvent(event);
            currentPE.isAnimationBegin = true;
            protoExpectations.push(currentPE);
            sawFirstMove = false;
          }
          break;

        case INPUT_TYPE.TOUCH_MOVE:
          if (!currentPE) {
            currentPE = new ProtoExpectation(
                ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.TOUCH);
            currentPE.pushEvent(event);
            protoExpectations.push(currentPE);
            break;
          }

          // Like Scrolls and Pinches, the Response is defined to be the
          // TouchStart plus the first TouchMove, then the rest of the
          // TouchMoves constitute an Animation.
          if ((sawFirstMove &&
              (currentPE.type === ProtoExpectation.RESPONSE_TYPE)) ||
              !currentPE.isNear(event, INPUT_MERGE_THRESHOLD_MS)) {
            // If there's already a touchmove in the currentPE or it's not
            // near event, then finish it and start a new animation.
            const prevEnd = currentPE.end;
            currentPE = new ProtoExpectation(
                ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.TOUCH);
            currentPE.pushEvent(event);
            // It's possible for there to be a gap between TouchMoves, but
            // that doesn't mean that there should be an Idle UE there.
            currentPE.start = prevEnd;
            protoExpectations.push(currentPE);
          } else {
            currentPE.pushEvent(event);
            sawFirstMove = true;
          }
          break;

        case INPUT_TYPE.TOUCH_END:
          if (!currentPE) {
            const pe = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
            pe.pushEvent(event);
            protoExpectations.push(pe);
            break;
          }
          if (currentPE.isNear(event, INPUT_MERGE_THRESHOLD_MS)) {
            currentPE.pushEvent(event);
          } else {
            const pe = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
            pe.pushEvent(event);
            protoExpectations.push(pe);
          }
          currentPE = undefined;
          break;
      }
    });
    return protoExpectations;
  }

  /**
   * The first ScrollBegin and the first ScrollUpdate comprise a Response,
   * then the rest comprise an Animation.
   *
   * RRRRRRRAAAAAAAAAAAAAAAAAAAA
   * BBB UUU UUU UUU UUU UUU EEE
   */
  function handleScrollEvents(modelHelper, sortedInputEvents, warn) {
    const protoExpectations = [];
    let currentPE = undefined;
    let sawFirstUpdate = false;
    forEventTypesIn(sortedInputEvents, SCROLL_TYPE_NAMES, function(event) {
      switch (event.typeName) {
        case INPUT_TYPE.SCROLL_BEGIN:
          // Always begin a new PE even if there already is one, unlike
          // PinchBegin.
          currentPE = new ProtoExpectation(
              ProtoExpectation.RESPONSE_TYPE, INITIATOR_TYPE.SCROLL);
          currentPE.pushEvent(event);
          currentPE.isAnimationBegin = true;
          protoExpectations.push(currentPE);
          sawFirstUpdate = false;
          break;

        case INPUT_TYPE.SCROLL_UPDATE:
          if (currentPE) {
            if (currentPE.isNear(event, INPUT_MERGE_THRESHOLD_MS) &&
                ((currentPE.type === ProtoExpectation.ANIMATION_TYPE) ||
                !sawFirstUpdate)) {
              currentPE.pushEvent(event);
              sawFirstUpdate = true;
            } else {
              currentPE = new ProtoExpectation(ProtoExpectation.ANIMATION_TYPE,
                  INITIATOR_TYPE.SCROLL);
              currentPE.pushEvent(event);
              protoExpectations.push(currentPE);
            }
          } else {
             // ScrollUpdate without ScrollBegin.
            currentPE = new ProtoExpectation(
                ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.SCROLL);
            currentPE.pushEvent(event);
            protoExpectations.push(currentPE);
          }
          break;

        case INPUT_TYPE.SCROLL_END:
          if (!currentPE) {
            warn({
              type: 'UserModelBuilder',
              message: 'Unexpected ScrollEnd',
              showToUser: false,
            });
            const pe = new ProtoExpectation(ProtoExpectation.IGNORED_TYPE);
            pe.pushEvent(event);
            protoExpectations.push(pe);
            break;
          }
          currentPE.pushEvent(event);
          break;
      }
    });
    return protoExpectations;
  }

  /**
   * Returns proto expectations for video animation events.
   *
   * Video animations represent video playback, and are based on
   * VideoPlayback async events (going from the VideoFrameCompositor::Start
   * to VideoFrameCompositor::Stop calls)
   */
  function handleVideoAnimations(modelHelper, sortedInputEvents, warn) {
    const events = [];
    for (const pid in modelHelper.rendererHelpers) {
      for (const tid in modelHelper.rendererHelpers[pid].process.threads) {
        for (const asyncSlice of
            modelHelper.rendererHelpers[pid].process.threads[tid]
                .asyncSliceGroup.slices) {
          if (asyncSlice.title === PLAYBACK_EVENT_TITLE) {
            events.push(asyncSlice);
          }
        }
      }
    }

    events.sort(tr.importer.compareEvents);

    const protoExpectations = [];
    for (const event of events) {
      const currentPE = new ProtoExpectation(
          ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.VIDEO);
      currentPE.start = event.start;
      currentPE.end = event.end;
      currentPE.pushEvent(event);
      protoExpectations.push(currentPE);
    }

    return protoExpectations;
  }

  /**
   * Returns proto expectations for VR animation events.
   */
  function handleVrAnimations(modelHelper, sortedInputEvents, warn) {
    const events = [];

    // Find all the processes we should check
    const processes = [];
    if (typeof modelHelper.gpuHelper !== 'undefined') {
      processes.push(modelHelper.gpuHelper.process);
    }
    for (const helper of Object.values(modelHelper.rendererHelpers)) {
      processes.push(helper.process);
    }
    for (const helper of Object.values(modelHelper.browserHelpers)) {
      processes.push(helper.process);
    }

    // Add all counter samples to the list of events we care about
    let vrCounterStart = Number.MAX_SAFE_INTEGER;
    let vrEventStart = Number.MAX_SAFE_INTEGER;
    for (const proc of processes) {
      for (const [counterName, counterSeries] of
          Object.entries(proc.counters)) {
        if (VR_COUNTER_NAMES.includes(counterName)) {
          for (const series of counterSeries.series) {
            for (const sample of series.samples) {
              events.push(sample);
              vrCounterStart = Math.min(vrCounterStart, sample.timestamp);
            }
          }
        }
      }
      for (const thread of Object.values(proc.threads)) {
        for (const container of thread.childEventContainers()) {
          for (const slice of container.slices) {
            if (VR_EVENT_NAMES.includes(slice.title)) {
              events.push(slice);
              vrEventStart = Math.min(vrEventStart, slice.start);
            }
          }
        }
      }
    }

    if (events.length === 0) {
      return [];
    }

    events.sort(function(x, y) {
      if (x.range.min !== y.range.min) {
        return x.range.min - y.range.min;
      }
      return x.guid - y.guid;
    });

    vrCounterStart = (vrCounterStart === Number.MAX_SAFE_INTEGER) ?
      0 : vrCounterStart;
    vrEventStart = (vrEventStart === Number.MAX_SAFE_INTEGER) ?
      0 : vrEventStart;
    const vrAnimationStart = Math.max(vrCounterStart, vrEventStart) +
        VR_RESPONSE_MS;
    const responsePE = new ProtoExpectation(ProtoExpectation.RESPONSE_TYPE,
        INITIATOR_TYPE.VR);
    const animationPE = new ProtoExpectation(ProtoExpectation.ANIMATION_TYPE,
        INITIATOR_TYPE.VR);
    let lastResponseEvent;

    for (const event of events) {
      // Categorize the first 500 ms of VR time as entry/response
      // TODO(bsheedy): Make this smarter by basing response duration off trace
      // data instead of a fixed duration
      if (event.range.min < vrAnimationStart) {
        if (event instanceof tr.model.CounterSample) {
          responsePE.pushSample(event);
        } else {
          responsePE.pushEvent(event);
        }
        lastResponseEvent = event;
      } else {
        if (event instanceof tr.model.CounterSample) {
          animationPE.pushSample(event);
        } else {
          animationPE.pushEvent(event);
        }
      }
    }

    // Make sure that there isn't a gap between the two expectations
    if (lastResponseEvent instanceof tr.model.CounterSample) {
      animationPE.pushSample(lastResponseEvent);
    } else {
      animationPE.pushEvent(lastResponseEvent);
    }
    return [responsePE, animationPE];
  }

  /**
   * CSS Animations are merged into AnimationExpectations when they intersect.
   */
  function handleCSSAnimations(modelHelper, sortedInputEvents, warn) {
    // First find all the top-level CSS Animation async events.
    const animationEvents = modelHelper.browserHelper.
        getAllAsyncSlicesMatching(function(event) {
          return ((event.title === CSS_ANIMATION_TITLE) &&
                  event.isTopLevel &&
                  (event.duration > 0));
        });


    // Time ranges where animations are actually running will be collected here.
    // Each element will contain {min, max, animation}.
    const animationRanges = [];

    // This helper function will be called when a time range is found
    // during which the animation is actually running.
    function pushAnimationRange(start, end, animation) {
      const range = tr.b.math.Range.fromExplicitRange(start, end);
      range.animation = animation;
      animationRanges.push(range);
    }

    animationEvents.forEach(function(animation) {
      if (animation.subSlices.length === 0) {
        pushAnimationRange(animation.start, animation.end, animation);
      } else {
        // Now run a state machine over the animation's subSlices, which
        // indicate the animations running/paused/finished states, in order to
        // find ranges where the animation was actually running.
        let start = undefined;
        animation.subSlices.forEach(function(sub) {
          if ((sub.args.data.state === 'running') &&
              (start === undefined)) {
            // It's possible for the state to alternate between running and
            // pending, but the animation is still running in that case,
            // so only set start if the state is changing from one of the halted
            // states.
            start = sub.start;
          } else if ((sub.args.data.state === 'paused') ||
                     (sub.args.data.state === 'idle') ||
                     (sub.args.data.state === 'finished')) {
            if (start === undefined) {
              // An animation was already running when the trace started.
              // (Actually, it's possible that the animation was in the 'idle'
              // state when tracing started, but that should be rare, and will
              // be fixed when async events are buffered.)
              // http: //crbug.com/565627
              start = modelHelper.model.bounds.min;
            }

            pushAnimationRange(start, sub.start, animation);
            start = undefined;
          }
        });

        // An animation was still running when the
        // top-level animation event ended.
        if (start !== undefined) {
          pushAnimationRange(start, animation.end, animation);
        }
      }
    });

    // Now we have a set of time ranges when css animations were actually
    // running.
    // Leave merging intersecting animations to mergeIntersectingAnimations(),
    // after findFrameEventsForAnimations removes frame-less animations.

    return animationRanges.map(function(range) {
      const protoExpectation = new ProtoExpectation(
          ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.CSS);
      protoExpectation.start = range.min;
      protoExpectation.end = range.max;
      protoExpectation.associatedEvents.push(range.animation);
      return protoExpectation;
    });
  }

  /**
   * Get all the events (prepareMailbox and serviceScriptedAnimations)
   * relevant to WebGL. Note that modelHelper is the helper object containing
   * the model, and mailboxEvents and animationEvents are arrays where the
   * events are being pushed into (DrawingBuffer::prepareMailbox events go
   * into mailboxEvents; PageAnimator::serviceScriptedAnimations events go
   * into animationEvents). The function does not return anything but
   * modifies mailboxEvents and animationEvents.
   */
  function findWebGLEvents(modelHelper, mailboxEvents, animationEvents) {
    for (const event of modelHelper.model.getDescendantEvents()) {
      if (event.title === 'DrawingBuffer::prepareMailbox') {
        mailboxEvents.push(event);
      } else if (event.title === 'PageAnimator::serviceScriptedAnimations') {
        animationEvents.push(event);
      }
    }
  }

  /**
   * Returns a list of events in mailboxEvents that have an event in
   * animationEvents close by (within ANIMATION_MERGE_THRESHOLD_MS).
   */
  function findMailboxEventsNearAnimationEvents(
      mailboxEvents, animationEvents) {
    if (animationEvents.length === 0) return [];

    mailboxEvents.sort(compareEvents);
    animationEvents.sort(compareEvents);
    const animationIterator = animationEvents[Symbol.iterator]();
    let animationEvent = animationIterator.next().value;

    const filteredEvents = [];

    // We iterate through the mailboxEvents. With each event, we check if
    // there is a animationEvent near it, and if so, add it to the result.
    for (const event of mailboxEvents) {
      // If the current animationEvent is too far before the mailboxEvent,
      // we advance until we get to the next animationEvent that is not too
      // far before the animationEvent.
      while (animationEvent &&
          (animationEvent.start < (
           event.start - ANIMATION_MERGE_THRESHOLD_MS))) {
        animationEvent = animationIterator.next().value;
      }

      // If there aren't any more animationEvents, then that means all the
      // remaining mailboxEvents are too far after the animationEvents, so
      // we can quit now.
      if (!animationEvent) break;

      // If there's a animationEvent close to the mailboxEvent, then we push
      // the current mailboxEvent onto the stack.
      if (animationEvent.start < (event.start + ANIMATION_MERGE_THRESHOLD_MS)) {
        filteredEvents.push(event);
      }
    }
    return filteredEvents;
  }

  /**
   * Merge consecutive mailbox events into a ProtoExpectation. Note: Only
   * the drawingBuffer::prepareMailbox events will end up in the
   * associatedEvents. The PageAnimator::serviceScriptedAnimations events
   * will not end up in the associatedEvents.
   */
  function createProtoExpectationsFromMailboxEvents(mailboxEvents) {
    const protoExpectations = [];
    let currentPE = undefined;
    for (const event of mailboxEvents) {
      if (currentPE === undefined || !currentPE.isNear(
          event, ANIMATION_MERGE_THRESHOLD_MS)) {
        currentPE = new ProtoExpectation(
            ProtoExpectation.ANIMATION_TYPE, INITIATOR_TYPE.WEBGL);
        currentPE.pushEvent(event);
        protoExpectations.push(currentPE);
      } else {
        currentPE.pushEvent(event);
      }
    }
    return protoExpectations;
  }

  // WebGL animations are identified by the DrawingBuffer::prepareMailbox
  // and PageAnimator::serviceScriptedAnimations events (one of each per frame)
  // and consecutive frames are merged into the same animation.
  function handleWebGLAnimations(modelHelper, sortedInputEvents, warn) {
    // Get the prepareMailbox and scriptedAnimation events.
    const prepareMailboxEvents = [];
    const scriptedAnimationEvents = [];

    findWebGLEvents(modelHelper, prepareMailboxEvents, scriptedAnimationEvents);
    const webGLMailboxEvents = findMailboxEventsNearAnimationEvents(
        prepareMailboxEvents, scriptedAnimationEvents);

    return createProtoExpectationsFromMailboxEvents(webGLMailboxEvents);
  }


  function postProcessProtoExpectations(modelHelper, protoExpectations) {
    // protoExpectations is input only. Returns a modified set of
    // ProtoExpectations.  The order is important.
    protoExpectations = findFrameEventsForAnimations(
        modelHelper, protoExpectations);
    protoExpectations = mergeIntersectingResponses(protoExpectations);
    protoExpectations = mergeIntersectingAnimations(protoExpectations);
    protoExpectations = fixResponseAnimationStarts(protoExpectations);
    protoExpectations = fixTapResponseTouchAnimations(protoExpectations);
    return protoExpectations;
  }

  /**
   * TouchStarts happen at the same time as ScrollBegins.
   * It's easier to let multiple handlers create multiple overlapping
   * Responses and then merge them, rather than make the handlers aware of the
   * other handlers' PEs.
   *
   * For example:
   * RR
   *  RRR  -> RRRRR
   *    RR
   *
   * protoExpectations is input only.
   * Returns a modified set of ProtoExpectations.
   */
  function mergeIntersectingResponses(protoExpectations) {
    const newPEs = [];
    while (protoExpectations.length) {
      const pe = protoExpectations.shift();
      newPEs.push(pe);

      // Only consider Responses for now.
      if (pe.type !== ProtoExpectation.RESPONSE_TYPE) continue;

      for (let i = 0; i < protoExpectations.length; ++i) {
        const otherPE = protoExpectations[i];

        if (otherPE.type !== pe.type) continue;

        if (!otherPE.intersects(pe)) continue;

        // Don't merge together Responses of the same type.
        // If handleTouchEvents wanted two of its Responses to be merged, then
        // it would have made them that way to begin with.
        const typeNames = pe.associatedEvents.map(function(event) {
          return event.typeName;
        });
        if (otherPE.containsTypeNames(typeNames)) continue;

        pe.merge(otherPE);
        protoExpectations.splice(i, 1);

        // Don't skip the next otherPE!
        --i;
      }
    }
    return newPEs;
  }

  /**
   * An animation is simply an expectation of 60fps between start and end.
   * If two animations overlap, then merge them.
   *
   * For example:
   * AA
   *  AAA  -> AAAAA
   *    AA
   *
   * protoExpectations is input only.
   * Returns a modified set of ProtoExpectations.
   */
  function mergeIntersectingAnimations(protoExpectations) {
    const newPEs = [];
    while (protoExpectations.length) {
      const pe = protoExpectations.shift();
      newPEs.push(pe);

      // Only consider Animations for now.
      if (pe.type !== ProtoExpectation.ANIMATION_TYPE) continue;

      const isCSS = pe.initiatorType === INITIATOR_TYPE.CSS;
      const isFling = pe.containsTypeNames([INPUT_TYPE.FLING_START]);
      const isVideo = pe.initiatorType === INITIATOR_TYPE.VIDEO;

      for (let i = 0; i < protoExpectations.length; ++i) {
        const otherPE = protoExpectations[i];

        if (otherPE.type !== pe.type) continue;

        // Don't merge some animation types with others.
        if ((isCSS && otherPE.initiatorType !== INITIATOR_TYPE.CSS) ||
            isFling !== otherPE.containsTypeNames([INPUT_TYPE.FLING_START]) ||
            isVideo && otherPE.initiatorType !== INITIATOR_TYPE.VIDEO ||
            otherPE.initiatorType === INITIATOR_TYPE.VR) {
          continue;
        }

        if (isCSS) {
          if (!pe.isNear(otherPE, ANIMATION_MERGE_THRESHOLD_MS)) {
            continue;
          }
        } else if (!otherPE.intersects(pe)) {
          continue;
        }

        pe.merge(otherPE);
        protoExpectations.splice(i, 1);
        // Don't skip the next otherPE!
        --i;
      }
    }
    return newPEs;
  }

  /**
   * The ends of responses frequently overlap the starts of animations.
   * Fix the animations to reflect the fact that the user can only start to
   * expect 60fps after the response.
   *
   * For example:
   * RRR   -> RRRAA
   *  AAAA
   *
   * protoExpectations is input only.
   * Returns a modified set of ProtoExpectations.
   */
  function fixResponseAnimationStarts(protoExpectations) {
    protoExpectations.forEach(function(ape) {
      // Only consider animations for now.
      if (ape.type !== ProtoExpectation.ANIMATION_TYPE) {
        return;
      }

      protoExpectations.forEach(function(rpe) {
        // Only consider responses for now.
        if (rpe.type !== ProtoExpectation.RESPONSE_TYPE) {
          return;
        }

        // Only consider responses that end during the animation.
        if (!ape.containsTimestampInclusive(rpe.end)) {
          return;
        }

        // Ignore Responses that are entirely contained by the animation.
        if (ape.containsTimestampInclusive(rpe.start)) {
          return;
        }

        // Move the animation start to the response end.
        ape.start = rpe.end;
      });
    });
    return protoExpectations;
  }

  /**
   * Merge Tap Responses that overlap Touch-only Animations.
   * https: *github.com/catapult-project/catapult/issues/1431
   */
  function fixTapResponseTouchAnimations(protoExpectations) {
    function isTapResponse(pe) {
      return (pe.type === ProtoExpectation.RESPONSE_TYPE) &&
              pe.containsTypeNames([INPUT_TYPE.TAP]);
    }
    function isTouchAnimation(pe) {
      return (pe.type === ProtoExpectation.ANIMATION_TYPE) &&
              pe.containsTypeNames([INPUT_TYPE.TOUCH_MOVE]) &&
              !pe.containsTypeNames([
                INPUT_TYPE.SCROLL_UPDATE, INPUT_TYPE.PINCH_UPDATE]);
    }
    const newPEs = [];
    while (protoExpectations.length) {
      const pe = protoExpectations.shift();
      newPEs.push(pe);

      // protoExpectations are sorted by start time, and we don't know whether
      // the Tap Response or the Touch Animation will be first
      const peIsTapResponse = isTapResponse(pe);
      const peIsTouchAnimation = isTouchAnimation(pe);
      if (!peIsTapResponse && !peIsTouchAnimation) {
        continue;
      }

      for (let i = 0; i < protoExpectations.length; ++i) {
        const otherPE = protoExpectations[i];

        if (!otherPE.intersects(pe)) continue;

        if (peIsTapResponse && !isTouchAnimation(otherPE)) continue;

        if (peIsTouchAnimation && !isTapResponse(otherPE)) continue;

        // pe might be the Touch Animation, but the merged ProtoExpectation
        // should be a Response.
        pe.type = ProtoExpectation.RESPONSE_TYPE;

        pe.merge(otherPE);
        protoExpectations.splice(i, 1);
        // Don't skip the next otherPE!
        --i;
      }
    }
    return newPEs;
  }

  function findFrameEventsForAnimations(modelHelper, protoExpectations) {
    const newPEs = [];
    const frameEventsByPid = getSortedFrameEventsByProcess(modelHelper);

    for (const pe of protoExpectations) {
      if (pe.type !== ProtoExpectation.ANIMATION_TYPE) {
        newPEs.push(pe);
        continue;
      }

      const frameEvents = [];
      for (const pid of Object.keys(modelHelper.rendererHelpers)) {
        const range = tr.b.math.Range.fromExplicitRange(pe.start, pe.end);
        frameEvents.push.apply(frameEvents,
            range.filterArray(frameEventsByPid[pid], e => e.start));
      }

      // If a tree falls in a forest...
      // If there were not actually any frames while the animation was
      // running, then it wasn't really an animation, now, was it?
      // Philosophy aside, the system_health Animation metrics fail hard if
      // there are no frames in an AnimationExpectation.
      // Since WebGL and VR animations don't generate this type of frame
      // event, don't remove them if it's a WebGL or VR animation.
      if (frameEvents.length === 0 &&
              !(pe.initiatorType === INITIATOR_TYPE.WEBGL ||
                pe.initiatorType === INITIATOR_TYPE.VR)) {
        pe.type = ProtoExpectation.IGNORED_TYPE;
        newPEs.push(pe);
        continue;
      }

      pe.associatedEvents.addEventSet(frameEvents);
      newPEs.push(pe);
    }

    return newPEs;
  }

  /**
   * Check that none of the handlers accidentally ignored an input event.
   */
  function checkAllInputEventsHandled(
      modelHelper, sortedInputEvents, protoExpectations, warn) {
    const handledEvents = [];
    protoExpectations.forEach(function(protoExpectation) {
      protoExpectation.associatedEvents.forEach(function(event) {
        // Ignore CSS Animations that might have multiple active ranges.
        if ((event.title === CSS_ANIMATION_TITLE) &&
            (event.subSlices.length > 0)) {
          return;
        }

        if ((handledEvents.indexOf(event) >= 0) &&
            (event.title !== tr.model.helpers.IMPL_RENDERING_STATS)) {
          warn({
            type: 'UserModelBuilder',
            message: `double-handled event: ${event.typeName} @ ${event.start}`,
            showToUser: false,
          });
          return;
        }
        handledEvents.push(event);
      });
    });

    sortedInputEvents.forEach(function(event) {
      if (handledEvents.indexOf(event) < 0) {
        warn({
          type: 'UserModelBuilder',
          message: `double-handled event: ${event.typeName} @ ${event.start}`,
          showToUser: false,
        });
      }
    });
  }

  /**
   * Find ProtoExpectations, post-process them, convert them to real UEs.
   */
  function findInputExpectations(modelHelper) {
    // Prevent helper functions from producing too many import warnings.
    let warning;
    function warn(w) {
      // Keep only the first warning.
      if (warning) return;
      warning = w;
    }

    const sortedInputEvents = getSortedInputEvents(modelHelper);
    let protoExpectations = findProtoExpectations(
        modelHelper, sortedInputEvents, warn);
    protoExpectations = postProcessProtoExpectations(
        modelHelper, protoExpectations);
    checkAllInputEventsHandled(
        modelHelper, sortedInputEvents, protoExpectations, warn);

    if (warning) modelHelper.model.importWarning(warning);

    const expectations = [];
    protoExpectations.forEach(function(protoExpectation) {
      const ir = protoExpectation.createInteractionRecord(modelHelper.model);
      if (ir) {
        expectations.push(ir);
      }
    });
    return expectations;
  }

  return {
    findInputExpectations,
    compareEvents,
    CSS_ANIMATION_TITLE,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  const LOAD_SUBTYPE_NAMES = {
    SUCCESSFUL: 'Successful',
    FAILED: 'Failed',
  };

  const DOES_LOAD_SUBTYPE_NAME_EXIST = {};
  for (const key in LOAD_SUBTYPE_NAMES) {
    DOES_LOAD_SUBTYPE_NAME_EXIST[LOAD_SUBTYPE_NAMES[key]] = true;
  }

  function LoadExpectation(parentModel, initiatorTitle, start, duration) {
    if (!DOES_LOAD_SUBTYPE_NAME_EXIST[initiatorTitle]) {
      throw new Error(initiatorTitle + ' is not in LOAD_SUBTYPE_NAMES');
    }

    tr.model.um.UserExpectation.call(
        this, parentModel, initiatorTitle, start, duration);

    // |renderProcess| is the renderer process that contains the loading
    // RenderFrame.
    this.renderProcess = undefined;

    // |renderMainThread| is the CrRendererMain thread in the |renderProcess|
    // that contains the loading RenderFrame.
    this.renderMainThread = undefined;

    // |routingId| identifies the loading RenderFrame within the renderer
    // process.
    this.routingId = undefined;

    // |parentRoutingId| identifies the RenderFrame that created and contains
    // the loading RenderFrame.
    this.parentRoutingId = undefined;

    // |loadFinishedEvent|, if present, signals that this is a main frame.
    this.loadFinishedEvent = undefined;

    // Startup LoadExpectations do not have renderProcess, routingId, or
    // parentRoutingId. Maybe RenderLoadExpectation should be a separate class?
  }

  LoadExpectation.prototype = {
    __proto__: tr.model.um.UserExpectation.prototype,
    constructor: LoadExpectation
  };

  tr.model.um.UserExpectation.subTypes.register(LoadExpectation, {
    stageTitle: 'Load',
    colorId: tr.b.ColorScheme.getColorIdForReservedName('rail_load')
  });

  return {
    LOAD_SUBTYPE_NAMES,
    LoadExpectation,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  // This global instant event marks the start of a navigation.
  const NAVIGATION_START = 'NavigationTiming navigationStart';

  // This render-process instant event marks the first contentful paint in a
  // main frame.
  const FIRST_CONTENTFUL_PAINT_TITLE = 'firstContentfulPaint';

  function findLoadExpectations(modelHelper) {
    const events = [];
    for (const event of modelHelper.model.getDescendantEvents()) {
      if ((event.title === NAVIGATION_START) ||
          (event.title === FIRST_CONTENTFUL_PAINT_TITLE)) {
        events.push(event);
      }
    }
    events.sort(tr.importer.compareEvents);

    const loads = [];
    let startEvent = undefined;
    // TODO(alexandermont): What's supposed to happen if there are two
    // NAVIGATION_STARTs with no FIRST_CONTENTFUL_PAINT_TITLE between
    // them? Are you supposed to just "lose" the first NAVIGATION_START,
    // like what's happening now?
    for (const event of events) {
      if (event.title === NAVIGATION_START) {
        startEvent = event;
      } else if (event.title === FIRST_CONTENTFUL_PAINT_TITLE) {
        if (startEvent) {
          loads.push(new tr.model.um.LoadExpectation(
              modelHelper.model, tr.model.um.LOAD_SUBTYPE_NAMES.SUCCESSFUL,
              startEvent.start, event.start - startEvent.start));
          startEvent = undefined;
        }
      }
    }

    // If the trace ended between navigation start and first contentful paint,
    // then make a LoadExpectation that ends at the end of the trace.
    if (startEvent) {
      loads.push(new tr.model.um.LoadExpectation(
            modelHelper.model, tr.model.um.LOAD_SUBTYPE_NAMES.SUCCESSFUL,
            startEvent.start, modelHelper.model.bounds.max - startEvent.start));
    }

    return loads;
  }

  return {
    findLoadExpectations,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  function StartupExpectation(parentModel, start, duration) {
    tr.model.um.UserExpectation.call(
        this, parentModel, '', start, duration);
  }

  StartupExpectation.prototype = {
    __proto__: tr.model.um.UserExpectation.prototype,
    constructor: StartupExpectation
  };

  tr.model.um.UserExpectation.subTypes.register(StartupExpectation, {
    stageTitle: 'Startup',
    colorId: tr.b.ColorScheme.getColorIdForReservedName('startup')
  });

  return {
    StartupExpectation,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  function getAllFrameEvents(modelHelper) {
    const frameEvents = [];
    frameEvents.push.apply(frameEvents,
        modelHelper.browserHelper.getFrameEventsInRange(
            tr.model.helpers.IMPL_FRAMETIME_TYPE, modelHelper.model.bounds));

    for (const renderer of Object.values(modelHelper.rendererHelpers)) {
      frameEvents.push.apply(frameEvents, renderer.getFrameEventsInRange(
          tr.model.helpers.IMPL_FRAMETIME_TYPE, modelHelper.model.bounds));
    }
    return frameEvents.sort(tr.importer.compareEvents);
  }

  // If a thread contains a typical initialization slice, then the first event
  // on that thread is a startup event.
  function getStartupEvents(modelHelper) {
    function isStartupSlice(slice) {
      return slice.title === 'BrowserMainLoop::CreateThreads';
    }
    const events = modelHelper.browserHelper.getAllAsyncSlicesMatching(
        isStartupSlice);
    const deduper = new tr.model.EventSet();
    events.forEach(function(event) {
      const sliceGroup = event.parentContainer.sliceGroup;
      const slice = sliceGroup && sliceGroup.findFirstSlice();
      if (slice) {
        deduper.push(slice);
      }
    });
    return deduper.toArray();
  }

  // Match every event in |openingEvents| to the first following event from
  // |closingEvents| and return an array containing a load interaction record
  // for each pair.
  function findStartupExpectations(modelHelper) {
    const openingEvents = getStartupEvents(modelHelper);
    const closingEvents = getAllFrameEvents(modelHelper);
    const startups = [];
    openingEvents.forEach(function(openingEvent) {
      closingEvents.forEach(function(closingEvent) {
        // Ignore opening event that already have a closing event.
        if (openingEvent.closingEvent) return;

        // Ignore closing events that already belong to an opening event.
        if (closingEvent.openingEvent) return;

        // Ignore closing events before |openingEvent|.
        if (closingEvent.start <= openingEvent.start) return;

        // Ignore events from different threads.
        if (openingEvent.parentContainer.parent.pid !==
            closingEvent.parentContainer.parent.pid) {
          return;
        }

        // This is the first closing event for this opening event, record it.
        openingEvent.closingEvent = closingEvent;
        closingEvent.openingEvent = openingEvent;
        const se = new tr.model.um.StartupExpectation(
            modelHelper.model, openingEvent.start,
            closingEvent.end - openingEvent.start);
        se.associatedEvents.push(openingEvent);
        se.associatedEvents.push(closingEvent);
        startups.push(se);
      });
    });
    return startups;
  }

  return {
    findStartupExpectations,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  function getAssociatedEvents(irs) {
    const allAssociatedEvents = new tr.model.EventSet();
    irs.forEach(function(ir) {
      ir.associatedEvents.forEach(function(event) {
        // FlowEvents don't have parentContainers or cpuDurations, and it's
        // annoying to highlight them.
        if (event instanceof tr.model.FlowEvent) return;
        allAssociatedEvents.push(event);
      });
    });
    return allAssociatedEvents;
  }

  function getUnassociatedEvents(model, associatedEvents) {
    const unassociatedEvents = new tr.model.EventSet();
    // The set of unassociated events contains only events that are not in
    // the set of associated events.
    // Only add event to the set of unassociated events if it is not in
    // the set of associated events.
    for (const proc of model.getAllProcesses()) {
      for (const thread of Object.values(proc.threads)) {
        for (const event of thread.sliceGroup.getDescendantEvents()) {
          if (!associatedEvents.contains(event)) {
            unassociatedEvents.push(event);
          }
        }
      }
    }
    return unassociatedEvents;
  }

  function getTotalCpuDuration(events) {
    let cpuMs = 0;
    events.forEach(function(event) {
      // Add up events' cpu self time if they have any.
      if (event.cpuSelfTime) {
        cpuMs += event.cpuSelfTime;
      }
    });
    return cpuMs;
  }

  function getIRCoverageFromModel(model) {
    const associatedEvents = getAssociatedEvents(model.userModel.expectations);

    if (!associatedEvents.length) return undefined;

    const unassociatedEvents = getUnassociatedEvents(
        model, associatedEvents);

    const associatedCpuMs = getTotalCpuDuration(associatedEvents);
    const unassociatedCpuMs = getTotalCpuDuration(unassociatedEvents);

    const totalEventCount = associatedEvents.length + unassociatedEvents.length;
    const totalCpuMs = associatedCpuMs + unassociatedCpuMs;
    let coveredEventsCpuTimeRatio = undefined;
    if (totalCpuMs !== 0) {
      coveredEventsCpuTimeRatio = associatedCpuMs / totalCpuMs;
    }

    return {
      associatedEventsCount: associatedEvents.length,
      unassociatedEventsCount: unassociatedEvents.length,
      associatedEventsCpuTimeMs: associatedCpuMs,
      unassociatedEventsCpuTimeMs: unassociatedCpuMs,
      coveredEventsCountRatio: associatedEvents.length / totalEventCount,
      coveredEventsCpuTimeRatio
    };
  }

  return {
    getIRCoverageFromModel,
    getAssociatedEvents,
    getUnassociatedEvents,
  };
});


'use strict';

tr.exportTo('tr.model.um', function() {
  function IdleExpectation(parentModel, start, duration) {
    const initiatorTitle = '';
    tr.model.um.UserExpectation.call(
        this, parentModel, initiatorTitle, start, duration);
  }

  IdleExpectation.prototype = {
    __proto__: tr.model.um.UserExpectation.prototype,
    constructor: IdleExpectation
  };

  tr.model.um.UserExpectation.subTypes.register(IdleExpectation, {
    stageTitle: 'Idle',
    colorId: tr.b.ColorScheme.getColorIdForReservedName('rail_idle')
  });

  return {
    IdleExpectation,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  const INSIGNIFICANT_MS = 1;

  class UserModelBuilder {
    constructor(model) {
      this.model = model;
      this.modelHelper = model.getOrCreateHelper(
          tr.model.helpers.ChromeModelHelper);
    }

    static supportsModelHelper(modelHelper) {
      return modelHelper.browserHelper !== undefined;
    }

    /**
     * This is called during the trace model import process.
     */
    buildUserModel() {
      if (!this.modelHelper || !this.modelHelper.browserHelper) return;

      try {
        for (const ue of this.findUserExpectations()) {
          // This is an EventSet, not an Array, so it can't use push(...).
          // https://github.com/catapult-project/catapult/issues/3157
          this.model.userModel.expectations.push(ue);
        }
        this.model.userModel.segments.push(...this.findSegments());
        // There are not currently any known cases when this could throw,
        // but there have been in the past and there could be again, so
        // keep handling exceptions here to be friendly to the future.
      } catch (error) {
        this.model.importWarning({
          type: 'UserModelBuilder',
          message: error,
          showToUser: true
        });
      }
    }

    /**
     * Returns an array of Segments covering the trace Model. A Segment
     * represents a range of time during which the set of active
     * UserExpectations does not change. Because of this, segments are
     * guaranteed to not overlap, whereas UserExpectations can.
     *
     * @return {!Array.<!tr.model.um.Segment>}
     */
    findSegments() {
      let timestamps = new Set();
      for (const expectation of this.model.userModel.expectations) {
        timestamps.add(expectation.start);
        timestamps.add(expectation.end);
      }
      timestamps = [...timestamps];
      timestamps.sort((x, y) => x - y);
      const segments = [];
      for (let i = 0; i < timestamps.length - 1; ++i) {
        const segment = new tr.model.um.Segment(
            timestamps[i], timestamps[i + 1] - timestamps[i]);
        segments.push(segment);
        const segmentRange = tr.b.math.Range.fromExplicitRange(
            segment.start, segment.end);
        for (const expectation of this.model.userModel.expectations) {
          const expectationRange = tr.b.math.Range.fromExplicitRange(
              expectation.start, expectation.end);
          if (segmentRange.intersectsRangeExclusive(expectationRange)) {
            segment.expectations.push(expectation);
          }
        }
      }
      return segments;
    }

    /**
     * Returns an array of UserExpectations covering the trace Model. A
     * UserExpectation represents a range of time during which the user is
     * expecting something from Chrome, either to startup or load a page or
     * respond to input or play an animation, or just sit there idle. Users can
     * have multiple expectations at any given time, so UserExpectations can
     * overlap.
     *
     * @return {!Array.<!tr.model.um.UserExpectation>}
     */
    findUserExpectations() {
      const expectations = [];
      expectations.push.apply(expectations, tr.importer.findStartupExpectations(
          this.modelHelper));
      expectations.push.apply(expectations, tr.importer.findLoadExpectations(
          this.modelHelper));
      expectations.push.apply(expectations, tr.importer.findInputExpectations(
          this.modelHelper));
      // findIdleExpectations must be called last!
      expectations.push.apply(
          expectations, this.findIdleExpectations(expectations));
      this.collectUnassociatedEvents_(expectations);
      return expectations;
    }

    // Find all unassociated top-level ThreadSlices. If they start during an
    // Idle or Load UE, then add their entire hierarchy to that UE.
    collectUnassociatedEvents_(expectations) {
      const vacuumUEs = [];
      for (const expectation of expectations) {
        if (expectation instanceof tr.model.um.IdleExpectation ||
            expectation instanceof tr.model.um.LoadExpectation ||
            expectation instanceof tr.model.um.StartupExpectation) {
          vacuumUEs.push(expectation);
        }
      }
      if (vacuumUEs.length === 0) return;

      const allAssociatedEvents = tr.model.getAssociatedEvents(expectations);
      const unassociatedEvents = tr.model.getUnassociatedEvents(
          this.model, allAssociatedEvents);

      for (const event of unassociatedEvents) {
        if (!(event instanceof tr.model.ThreadSlice)) continue;

        if (!event.isTopLevel) continue;

        for (let index = 0; index < vacuumUEs.length; ++index) {
          const expectation = vacuumUEs[index];

          if ((event.start >= expectation.start) &&
              (event.start < expectation.end)) {
            expectation.associatedEvents.addEventSet(event.entireHierarchy);
            break;
          }
        }
      }
    }

    // Fill in the empty space between UEs with IdleUEs.
    findIdleExpectations(otherUEs) {
      if (this.model.bounds.isEmpty) return;

      const emptyRanges = tr.b.math.findEmptyRangesBetweenRanges(
          tr.b.math.convertEventsToRanges(otherUEs),
          this.model.bounds);
      const expectations = [];
      const model = this.model;
      for (const range of emptyRanges) {
        // Ignore insignificantly tiny idle ranges.
        if (range.max < (range.min + INSIGNIFICANT_MS)) continue;

        expectations.push(new tr.model.um.IdleExpectation(
            model, range.min, range.max - range.min));
      }
      return expectations;
    }
  }

  function createCustomizeModelLinesFromModel(model) {
    const modelLines = [];
    modelLines.push('      audits.addEvent(model.browserMain,');
    modelLines.push('          {title: \'model start\', start: 0, end: 1});');

    const typeNames = {};
    for (const typeName in tr.e.cc.INPUT_EVENT_TYPE_NAMES) {
      typeNames[tr.e.cc.INPUT_EVENT_TYPE_NAMES[typeName]] = typeName;
    }

    let modelEvents = new tr.model.EventSet();
    for (const ue of model.userModel.expectations) {
      modelEvents.addEventSet(ue.sourceEvents);
    }
    modelEvents = modelEvents.toArray();
    modelEvents.sort(tr.importer.compareEvents);

    for (const event of modelEvents) {
      const startAndEnd = 'start: ' + parseInt(event.start) + ', ' +
                        'end: ' + parseInt(event.end) + '});';
      if (event instanceof tr.e.cc.InputLatencyAsyncSlice) {
        modelLines.push('      audits.addInputEvent(model, INPUT_TYPE.' +
                        typeNames[event.typeName] + ',');
      } else if (event.title === 'RenderFrameImpl::didCommitProvisionalLoad') {
        modelLines.push('      audits.addCommitLoadEvent(model,');
      } else if (event.title ===
                 'InputHandlerProxy::HandleGestureFling::started') {
        modelLines.push('      audits.addFlingAnimationEvent(model,');
      } else if (event.title === tr.model.helpers.IMPL_RENDERING_STATS) {
        modelLines.push('      audits.addFrameEvent(model,');
      } else if (event.title === tr.importer.CSS_ANIMATION_TITLE) {
        modelLines.push('      audits.addEvent(model.rendererMain, {');
        modelLines.push('        title: \'Animation\', ' + startAndEnd);
        return;
      } else {
        throw new Error(
            'You must extend createCustomizeModelLinesFromModel()' +
            'to support this event:\n' + event.title + '\n');
      }
      modelLines.push('          {' + startAndEnd);
    }

    modelLines.push('      audits.addEvent(model.browserMain,');
    modelLines.push('          {' +
                    'title: \'model end\', ' +
                    'start: ' + (parseInt(model.bounds.max) - 1) + ', ' +
                    'end: ' + parseInt(model.bounds.max) + '});');
    return modelLines;
  }

  function createExpectedUELinesFromModel(model) {
    const expectedLines = [];
    const ueCount = model.userModel.expectations.length;
    for (let index = 0; index < ueCount; ++index) {
      const expectation = model.userModel.expectations[index];
      let ueString = '      {';
      ueString += 'title: \'' + expectation.title + '\', ';
      ueString += 'start: ' + parseInt(expectation.start) + ', ';
      ueString += 'end: ' + parseInt(expectation.end) + ', ';
      ueString += 'eventCount: ' + expectation.sourceEvents.length;
      ueString += '}';
      if (index < (ueCount - 1)) ueString += ',';
      expectedLines.push(ueString);
    }
    return expectedLines;
  }

  function createUEFinderTestCaseStringFromModel(model) {
    const filename = window.location.hash.substr(1);
    let testName = filename.substr(filename.lastIndexOf('/') + 1);
    testName = testName.substr(0, testName.indexOf('.'));

    // createCustomizeModelLinesFromModel() throws an error if there's an
    // unsupported event.
    try {
      const testLines = [];
      testLines.push('  /*');
      testLines.push('    This test was generated from');
      testLines.push('    ' + filename + '');
      testLines.push('   */');
      testLines.push('  test(\'' + testName + '\', function() {');
      testLines.push('    const verifier = new UserExpectationVerifier();');
      testLines.push('    verifier.customizeModelCallback = function(model) {');
      testLines.push.apply(testLines,
          createCustomizeModelLinesFromModel(model));
      testLines.push('    };');
      testLines.push('    verifier.expectedUEs = [');
      testLines.push.apply(testLines, createExpectedUELinesFromModel(model));
      testLines.push('    ];');
      testLines.push('    verifier.verify();');
      testLines.push('  });');
      return testLines.join('\n');
    } catch (error) {
      return error;
    }
  }

  return {
    UserModelBuilder,
    createUEFinderTestCaseStringFromModel,
  };
});


'use strict';

tr.exportTo('tr.ui.b', function() {
  /**
   * Decorates elements as an instance of a class.
   * @param {string|!Element} source The way to find the element(s) to decorate.
   *     If this is a string then {@code querySeletorAll} is used to find the
   *     elements to decorate.
   * @param {!Function} constr The constructor to decorate with. The constr
   *     needs to have a {@code decorate} function.
   */
  function decorate(source, constr) {
    let elements;
    if (typeof source === 'string') {
      elements = Polymer.dom(tr.doc).querySelectorAll(source);
    } else {
      elements = [source];
    }

    for (let i = 0, el; el = elements[i]; i++) {
      if (!(el instanceof constr)) {
        constr.decorate(el);
      }
    }
  }

  /**
   * Defines a tracing UI component, a function that can be called to construct
   * the component.
   *
   * tr class:
   * const List = tr.ui.b.define('list');
   * List.prototype = {
   *   __proto__: HTMLUListElement.prototype,
   *   decorate: function() {
   *     ...
   *   },
   *   ...
   * };
   *
   * Derived class:
   * const CustomList = tr.ui.b.define('custom-list', List);
   * CustomList.prototype = {
   *   __proto__: List.prototype,
   *   decorate: function() {
   *     ...
   *   },
   *   ...
   * };
   *
   * @param {string} className The className of the newly created subtype. If
   *     subclassing by passing in opt_parentConstructor, this is used for
   *     debugging. If not subclassing, then it is the tag name that will be
   *     created by the component.

   * @param {function=} opt_parentConstructor The parent class for this new
   *     element, if subclassing is desired. If provided, the parent class must
   *     be also a function created by tr.ui.b.define.
   *
   * @param {string=} opt_tagNS The namespace in which to create the base
   *     element. Has no meaning when opt_parentConstructor is passed and must
   *     either be undefined or the same namespace as the parent class.
   *
   * @return {function(Object=):Element} The newly created component
   *     constructor.
   */
  function define(className, opt_parentConstructor, opt_tagNS) {
    if (typeof className === 'function') {
      throw new Error('Passing functions as className is deprecated. Please ' +
                      'use (className, opt_parentConstructor) to subclass');
    }

    className = className.toLowerCase();
    if (opt_parentConstructor && !opt_parentConstructor.tagName) {
      throw new Error('opt_parentConstructor was not ' +
                      'created by tr.ui.b.define');
    }

    // Walk up the parent constructors until we can find the type of tag
    // to create.
    let tagName = className;
    let tagNS = undefined;
    if (opt_parentConstructor) {
      if (opt_tagNS) {
        throw new Error('Must not specify tagNS if parentConstructor is given');
      }
      let parent = opt_parentConstructor;
      while (parent && parent.tagName) {
        tagName = parent.tagName;
        tagNS = parent.tagNS;
        parent = parent.parentConstructor;
      }
    } else {
      tagNS = opt_tagNS;
    }

    /**
     * Creates a new UI element constructor.
     * Arguments passed to the constuctor are provided to the decorate method.
     * You will need to call the parent elements decorate method from within
     * your decorate method and pass any required parameters.
     * @constructor
     */
    function f() {
      if (opt_parentConstructor &&
          f.prototype.__proto__ !== opt_parentConstructor.prototype) {
        throw new Error(
            className + ' prototye\'s __proto__ field is messed up. ' +
            'It MUST be the prototype of ' + opt_parentConstructor.tagName);
      }

      let el;
      if (tagNS === undefined) {
        el = tr.doc.createElement(tagName);
      } else {
        el = tr.doc.createElementNS(tagNS, tagName);
      }
      f.decorate.call(this, el, arguments);
      return el;
    }

    /**
     * Decorates an element as a UI element class.
     * @param {!Element} el The element to decorate.
     */
    f.decorate = function(el) {
      el.__proto__ = f.prototype;
      el.decorate.apply(el, arguments[1]);
      el.constructor = f;
    };

    f.className = className;
    f.tagName = tagName;
    f.tagNS = tagNS;
    f.parentConstructor = (opt_parentConstructor ? opt_parentConstructor :
                                                   undefined);
    f.toString = function() {
      if (!f.parentConstructor) {
        return f.tagName;
      }
      return f.parentConstructor.toString() + '::' + f.className;
    };

    return f;
  }

  function elementIsChildOf(el, potentialParent) {
    if (el === potentialParent) return false;

    let cur = el;
    while (Polymer.dom(cur).parentNode) {
      if (cur === potentialParent) return true;
      cur = Polymer.dom(cur).parentNode;
    }
    return false;
  }

  return {
    decorate,
    define,
    elementIsChildOf,
  };
});


'use strict';

tr.exportTo('tr.b.math', function() {
  /**
   * Tracks a 2D bounding box.
   * @constructor
   */
  function Rect() {
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
  }

  Rect.fromXYWH = function(x, y, w, h) {
    const rect = new Rect();
    rect.x = x;
    rect.y = y;
    rect.width = w;
    rect.height = h;
    return rect;
  };

  Rect.fromArray = function(ary) {
    if (ary.length !== 4) {
      throw new Error('ary.length must be 4');
    }
    const rect = new Rect();
    rect.x = ary[0];
    rect.y = ary[1];
    rect.width = ary[2];
    rect.height = ary[3];
    return rect;
  };

  Rect.prototype = {
    __proto__: Object.prototype,

    get left() {
      return this.x;
    },

    get top() {
      return this.y;
    },

    get right() {
      return this.x + this.width;
    },

    get bottom() {
      return this.y + this.height;
    },

    toString() {
      return 'Rect(' + this.x + ', ' + this.y + ', ' +
          this.width + ', ' + this.height + ')';
    },

    toArray() {
      return [this.x, this.y, this.width, this.height];
    },

    clone() {
      const rect = new Rect();
      rect.x = this.x;
      rect.y = this.y;
      rect.width = this.width;
      rect.height = this.height;
      return rect;
    },

    enlarge(pad) {
      const rect = new Rect();
      this.enlargeFast(rect, pad);
      return rect;
    },

    enlargeFast(out, pad) {
      out.x = this.x - pad;
      out.y = this.y - pad;
      out.width = this.width + 2 * pad;
      out.height = this.height + 2 * pad;
      return out;
    },

    size() {
      return {width: this.width, height: this.height};
    },

    scale(s) {
      const rect = new Rect();
      this.scaleFast(rect, s);
      return rect;
    },

    scaleSize(s) {
      return Rect.fromXYWH(this.x, this.y, this.width * s, this.height * s);
    },

    scaleFast(out, s) {
      out.x = this.x * s;
      out.y = this.y * s;
      out.width = this.width * s;
      out.height = this.height * s;
      return out;
    },

    translate(v) {
      const rect = new Rect();
      this.translateFast(rect, v);
      return rect;
    },

    translateFast(out, v) {
      out.x = this.x + v[0];
      out.y = this.x + v[1];
      out.width = this.width;
      out.height = this.height;
      return out;
    },

    asUVRectInside(containingRect) {
      const rect = new Rect();
      rect.x = (this.x - containingRect.x) / containingRect.width;
      rect.y = (this.y - containingRect.y) / containingRect.height;
      rect.width = this.width / containingRect.width;
      rect.height = this.height / containingRect.height;
      return rect;
    },

    intersects(that) {
      let ok = true;
      ok &= this.x < that.right;
      ok &= this.right > that.x;
      ok &= this.y < that.bottom;
      ok &= this.bottom > that.y;
      return ok;
    },

    equalTo(rect) {
      return rect &&
             (this.x === rect.x) &&
             (this.y === rect.y) &&
             (this.width === rect.width) &&
             (this.height === rect.height);
    }
  };

  return {
    Rect,
  };
});


'use strict';

tr.exportTo('tr.ui.b', function() {
  function instantiateTemplate(selector, doc) {
    doc = doc || document;
    const el = Polymer.dom(doc).querySelector(selector);
    if (!el) {
      throw new Error('Element not found');
    }
    return doc.importNode(el.content, true);
//    return el.createInstance();
  }

  function windowRectForElement(element) {
    const position = [element.offsetLeft, element.offsetTop];
    const size = [element.offsetWidth, element.offsetHeight];
    let node = element.offsetParent;
    while (node) {
      position[0] += node.offsetLeft;
      position[1] += node.offsetTop;
      node = node.offsetParent;
    }
    return tr.b.math.Rect.fromXYWH(position[0], position[1], size[0], size[1]);
  }

  function scrollIntoViewIfNeeded(el) {
    const pr = el.parentElement.getBoundingClientRect();
    const cr = el.getBoundingClientRect();
    if (cr.top < pr.top) {
      el.scrollIntoView(true);
    } else if (cr.bottom > pr.bottom) {
      el.scrollIntoView(false);
    }
  }

  function extractUrlString(url) {
    let extracted = url.replace(/url\((.*)\)/, '$1');

    // In newer versions of chrome, the contents of url() will be quoted. Remove
    // these quotes as well. If quotes are not present, match will fail and this
    // becomes a no-op.
    extracted = extracted.replace(/\"(.*)\"/, '$1');

    return extracted;
  }

  function toThreeDigitLocaleString(value) {
    return value.toLocaleString(
        undefined, {minimumFractionDigits: 3, maximumFractionDigits: 3});
  }

  /**
   * Returns true if |name| is the name of an unknown HTML element.  Registered
   * polymer elements are known, so this returns false.  Typos of registered
   * polymer element names are unknown, so this returns true for typos.
   *
   * @return {boolean}
   */
  function isUnknownElementName(name) {
    return document.createElement(name) instanceof HTMLUnknownElement;
  }

  return {
    isUnknownElementName,
    toThreeDigitLocaleString,
    instantiateTemplate,
    windowRectForElement,
    scrollIntoViewIfNeeded,
    extractUrlString,
  };
});


'use strict';

/**
 * @fileoverview Implements an element that is hidden by default, but
 * when shown, dims and (attempts to) disable the main document.
 *
 * You can turn any div into an overlay. Note that while an
 * overlay element is shown, its parent is changed. Hiding the overlay
 * restores its original parentage.
 *
 */
tr.exportTo('tr.ui.b', function() {
  if (tr.isHeadless) return {};

  const THIS_DOC = document.currentScript.ownerDocument;

  /**
   * Creates a new overlay element. It will not be visible until shown.
   * @constructor
   * @extends {HTMLDivElement}
   */
  const Overlay = tr.ui.b.define('overlay');

  Overlay.prototype = {
    __proto__: HTMLDivElement.prototype,

    /**
     * Initializes the overlay element.
     */
    decorate() {
      Polymer.dom(this).classList.add('overlay');

      this.parentEl_ = this.ownerDocument.body;

      this.visible_ = false;
      this.userCanClose_ = true;

      this.onKeyDown_ = this.onKeyDown_.bind(this);
      this.onClick_ = this.onClick_.bind(this);
      this.onFocusIn_ = this.onFocusIn_.bind(this);
      this.onDocumentClick_ = this.onDocumentClick_.bind(this);
      this.onClose_ = this.onClose_.bind(this);

      this.addEventListener('visible-change',
          tr.ui.b.Overlay.prototype.onVisibleChange_.bind(this), true);

      // Setup the shadow root
      const createShadowRoot = this.createShadowRoot ||
          this.webkitCreateShadowRoot;
      this.shadow_ = createShadowRoot.call(this);
      Polymer.dom(this.shadow_).appendChild(
          tr.ui.b.instantiateTemplate('#overlay-template', THIS_DOC));

      this.closeBtn_ = Polymer.dom(this.shadow_).querySelector('close-button');
      this.closeBtn_.addEventListener('click', this.onClose_);

      Polymer.dom(this.shadow_)
          .querySelector('overlay-frame')
          .addEventListener('click', this.onClick_);

      this.observer_ = new WebKitMutationObserver(
          this.didButtonBarMutate_.bind(this));
      this.observer_.observe(
          Polymer.dom(this.shadow_).querySelector('button-bar'),
          { childList: true });

      // title is a variable on regular HTMLElements. However, we want to
      // use it for something more useful.
      Object.defineProperty(
          this, 'title', {
            get() {
              return Polymer.dom(Polymer.dom(this.shadow_)
                  .querySelector('title')).textContent;
            },
            set(title) {
              Polymer.dom(Polymer.dom(this.shadow_).querySelector('title'))
                  .textContent = title;
            }
          });
    },

    set userCanClose(userCanClose) {
      this.userCanClose_ = userCanClose;
      this.closeBtn_.style.display =
          userCanClose ? 'block' : 'none';
    },

    get buttons() {
      return Polymer.dom(this.shadow_).querySelector('button-bar');
    },

    get visible() {
      return this.visible_;
    },

    set visible(newValue) {
      if (this.visible_ === newValue) return;

      this.visible_ = newValue;
      const e = new tr.b.Event('visible-change');
      this.dispatchEvent(e);
    },

    onVisibleChange_() {
      this.visible_ ? this.show_() : this.hide_();
    },

    show_() {
      Polymer.dom(this.parentEl_).appendChild(this);

      if (this.userCanClose_) {
        this.addEventListener('keydown', this.onKeyDown_.bind(this));
        this.addEventListener('click', this.onDocumentClick_.bind(this));
        this.closeBtn_.addEventListener('click', this.onClose_);
      }

      this.parentEl_.addEventListener('focusin', this.onFocusIn_);
      this.tabIndex = 0;

      // Focus the first thing we find that makes sense. (Skip the close button
      // as it doesn't make sense as the first thing to focus.)
      const elList =
          Polymer.dom(this).querySelectorAll('button, input, list, select, a');
      if (elList.length > 0) {
        if (elList[0] === this.closeBtn_) {
          if (elList.length > 1) return elList[1].focus();
        } else {
          return elList[0].focus();
        }
      }
      this.focus();
    },

    hide_() {
      Polymer.dom(this.parentEl_).removeChild(this);

      this.parentEl_.removeEventListener('focusin', this.onFocusIn_);

      if (this.closeBtn_) {
        this.closeBtn_.removeEventListener('click', this.onClose_);
      }

      document.removeEventListener('keydown', this.onKeyDown_);
      document.removeEventListener('click', this.onDocumentClick_);
    },

    onClose_(e) {
      this.visible = false;
      if ((e.type !== 'keydown') ||
          (e.type === 'keydown' && e.keyCode === 27)) {
        e.stopPropagation();
      }
      e.preventDefault();
      tr.b.dispatchSimpleEvent(this, 'closeclick');
    },

    onFocusIn_(e) {
      // Prevent focus from leaving the overlay.

      let node = e.target;
      while (node) {
        if (node === this) {
          // |this| contains |e.target|, so nothing needs to be done. Allow
          // focus to move from |this| to |e.target|.
          return;
        }
        node = node.parentNode;
      }

      // |e.target| is outside of |this|, so focus |this|.
      tr.b.timeout(0).then(() => this.focus());
      e.preventDefault();
      e.stopPropagation();
    },

    didButtonBarMutate_(e) {
      const hasButtons = this.buttons.children.length > 0;
      if (hasButtons) {
        Polymer.dom(this.shadow_).querySelector('button-bar').style.display =
            undefined;
      } else {
        Polymer.dom(this.shadow_).querySelector('button-bar').style.display =
            'none';
      }
    },

    onKeyDown_(e) {
      // Disallow shift-tab back to another element.
      if (e.keyCode === 9 &&  // tab
          e.shiftKey &&
          e.target === this) {
        e.preventDefault();
        return;
      }

      if (e.keyCode !== 27) return;  // escape

      this.onClose_(e);
    },

    onClick_(e) {
      e.stopPropagation();
    },

    onDocumentClick_(e) {
      if (!this.userCanClose_) return;

      this.onClose_(e);
    }
  };

  Overlay.showError = function(msg, opt_err) {
    const o = new Overlay();
    o.title = 'Error';
    Polymer.dom(o).textContent = msg;
    if (opt_err) {
      const e = tr.b.normalizeException(opt_err);

      const stackDiv = document.createElement('pre');
      Polymer.dom(stackDiv).textContent = e.stack;
      stackDiv.style.paddingLeft = '8px';
      stackDiv.style.margin = 0;
      Polymer.dom(o).appendChild(stackDiv);
    }
    const b = document.createElement('button');
    Polymer.dom(b).textContent = 'OK';
    b.addEventListener('click', function() {
      o.visible = false;
    });
    Polymer.dom(o.buttons).appendChild(b);
    o.visible = true;
    return o;
  };

  return {
    Overlay,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  const Timing = tr.b.Timing;

  function ImportOptions() {
    this.shiftWorldToZero = true;
    this.pruneEmptyContainers = true;
    this.showImportWarnings = true;
    this.trackDetailedModelStats = false;

    // Callback called after
    // importers run in which more data can be added to the model, before it is
    // finalized.
    this.customizeModelCallback = undefined;

    const auditorTypes = tr.c.Auditor.getAllRegisteredTypeInfos();
    this.auditorConstructors = auditorTypes.map(function(typeInfo) {
      return typeInfo.constructor;
    });
  }

  function Import(model, opt_options) {
    if (model === undefined) {
      throw new Error('Must provide model to import into.');
    }

    // TODO(dsinclair): Check the model is empty.

    this.importing_ = false;
    this.importOptions_ = opt_options || new ImportOptions();

    this.model_ = model;
    this.model_.importOptions = this.importOptions_;
  }

  Import.prototype = {
    __proto__: Object.prototype,

    /**
     * Imports the provided traces into the model. The eventData type
     * is undefined and will be passed to all the importers registered
     * via Importer.register. The first importer that returns true
     * for canImport(events) will be used to import the events.
     *
     * The primary trace is provided via the eventData variable. If multiple
     * traces are to be imported, specify the first one as events, and the
     * remainder in the opt_additionalEventData array.
     *
     * @param {Array} traces An array of eventData to be imported. Each
     * eventData should correspond to a single trace file and will be handled by
     * a separate importer.
     */
    importTraces(traces) {
      const progressMeter = {
        update(msg) {}
      };

      tr.b.Task.RunSynchronously(
          this.createImportTracesTask(progressMeter, traces));
    },

    /**
     * Imports a trace with the usual options from importTraces, but
     * does so using idle callbacks, putting up an import dialog
     * during the import process.
     */
    importTracesWithProgressDialog(traces) {
      if (tr.isHeadless) {
        throw new Error('Cannot use this method in headless mode.');
      }

      const overlay = tr.ui.b.Overlay();
      overlay.title = 'Importing...';
      overlay.userCanClose = false;
      overlay.msgEl = document.createElement('div');
      Polymer.dom(overlay).appendChild(overlay.msgEl);
      overlay.msgEl.style.margin = '20px';
      overlay.update = function(msg) {
        Polymer.dom(this.msgEl).textContent = msg;
      };
      overlay.visible = true;

      const promise =
          tr.b.Task.RunWhenIdle(this.createImportTracesTask(overlay, traces));
      promise.then(
          function() { overlay.visible = false; },
          function(err) { overlay.visible = false; }
      );
      return promise;
    },

    /**
     * Creates a task that will import the provided traces into the model,
     * updating the progressMeter as it goes. Parameters are as defined in
     * importTraces.
     */
    createImportTracesTask(progressMeter, traces) {
      const importStartTimeMs = tr.b.Timing.getCurrentTimeMs();

      if (this.importing_) {
        throw new Error('Already importing.');
      }
      this.importing_ = true;

      // Just some simple setup. It is useful to have a no-op first
      // task so that we can set up the lastTask = lastTask.after()
      // pattern that follows.
      const importTask = new tr.b.Task(function prepareImport() {
        progressMeter.update('I will now import your traces for you...');
      }, this);
      let lastTask = importTask;

      const importers = [];

      function addImportStage(title, callback) {
        lastTask = lastTask.after(() => progressMeter.update(title));
        lastTask.updatesUi = true;
        lastTask = lastTask.after(callback);
      }

      function addStageForEachImporter(title, callback) {
        lastTask = lastTask.after((task) => {
          importers.forEach((importer, index) => {
            const uiSubTask = task.subTask(() => {
              progressMeter.update(
                  `${title} ${index + 1} of ${importers.length}`);
            });
            uiSubTask.updatesUi = true;
            task.subTask(() => callback(importer));
          });
        });
      }

      addImportStage('Creating importers...', () => {
        // Copy the traces array, we may mutate it.
        traces = traces.slice(0);
        progressMeter.update('Creating importers...');
        // Figure out which importers to use.
        for (let i = 0; i < traces.length; ++i) {
          importers.push(this.createImporter_(traces[i]));
        }

        // Some traces have other traces inside them. Before doing the full
        // import, ask the importer if it has any subtraces, and if so, create
        // importers for them, also.
        for (let i = 0; i < importers.length; i++) {
          const subtraces = importers[i].extractSubtraces();
          for (let j = 0; j < subtraces.length; j++) {
            try {
              traces.push(subtraces[j]);
              importers.push(this.createImporter_(subtraces[j]));
            } catch (error) {
              this.model_.importWarning({
                type: error.name,
                message: error.message,
                showToUser: true,
              });
              continue;
            }
          }
        }

        if (traces.length && !this.hasEventDataDecoder_(importers)) {
          throw new Error(
              'Could not find an importer for the provided eventData.');
        }

        // Sort them on priority. This ensures importing happens in a
        // predictable order, e.g. ftrace_importer before
        // trace_event_importer.
        importers.sort(function(x, y) {
          return x.importPriority - y.importPriority;
        });
      });

      // We import clock sync markers before all other events. This is necessary
      // because we need the clock sync markers in order to know by how much we
      // need to shift the timestamps of other events.
      addStageForEachImporter('Importing clock sync markers',
          importer => importer.importClockSyncMarkers());

      addStageForEachImporter('Importing', importer => importer.importEvents());

      // Run the cusomizeModelCallback if needed.
      if (this.importOptions_.customizeModelCallback) {
        addImportStage('Customizing', () => {
          this.importOptions_.customizeModelCallback(this.model_);
        });
      }

      // Import sample data.
      addStageForEachImporter('Importing sample data',
          importer => importer.importSampleData());

      // Autoclose open slices and create subSlices.
      addImportStage('Autoclosing open slices...', () => {
        this.model_.autoCloseOpenSlices();
        this.model_.createSubSlices();
      });

      // Finalize import.
      addStageForEachImporter('Finalizing import',
          importer => importer.finalizeImport());

      // Run preinit.
      addImportStage('Initializing objects (step 1/2)...',
          () => this.model_.preInitializeObjects());

      // Prune empty containers.
      if (this.importOptions_.pruneEmptyContainers) {
        addImportStage('Pruning empty containers...',
            () => this.model_.pruneEmptyContainers());
      }

      // Merge kernel and userland slices on each thread.
      addImportStage('Merging kernel with userland...',
          () => this.model_.mergeKernelWithUserland());

      // Create auditors
      let auditors = [];
      addImportStage('Adding arbitrary data to model...', () => {
        auditors = this.importOptions_.auditorConstructors.map(
            auditorConstructor => new auditorConstructor(this.model_));
        auditors.forEach((auditor) => {
          auditor.runAnnotate();
          auditor.installUserFriendlyCategoryDriverIfNeeded();
        });
      });

      addImportStage('Computing final world bounds...', () => {
        this.model_.computeWorldBounds(this.importOptions_.shiftWorldToZero);
      });

      addImportStage('Building flow event map...',
          () => this.model_.buildFlowEventIntervalTree());

      // Join refs.
      addImportStage('Joining object refs...', () => this.model_.joinRefs());

      // Delete any undeleted objects.
      addImportStage('Cleaning up undeleted objects...',
          () => this.model_.cleanupUndeletedObjects());

      // Sort global and process memory dumps.
      addImportStage('Sorting memory dumps...',
          () => this.model_.sortMemoryDumps());

      // Finalize memory dump graphs.
      addImportStage('Finalizing memory dump graphs...',
          () => this.model_.finalizeMemoryGraphs());

      // Run initializers.
      addImportStage('Initializing objects (step 2/2)...',
          () => this.model_.initializeObjects());

      // Build event indices mapping from an event id to all flow events.
      addImportStage('Building event indices...',
          () => this.model_.buildEventIndices());

      // Build the UserModel.
      addImportStage('Building UserModel...', () => {
        const userModelBuilder = new tr.importer.UserModelBuilder(this.model_);
        userModelBuilder.buildUserModel();
      });

      // Sort Expectations.
      addImportStage('Sorting user expectations...',
          () => this.model_.userModel.sortExpectations());

      // Run audits.
      addImportStage('Running auditors...', () => {
        auditors.forEach(auditor => auditor.runAudit());
      });

      addImportStage('Updating alerts...', () => this.model_.sortAlerts());

      addImportStage('Update bounds...', () => this.model_.updateBounds());

      addImportStage('Looking for warnings...', () => {
        // Log an import warning if the clock is low resolution.
        if (!this.model_.isTimeHighResolution) {
          this.model_.importWarning({
            type: 'low_resolution_timer',
            message: 'Trace time is low resolution, trace may be unusable.',
            showToUser: true
          });
        }
      });

      // Cleanup.
      lastTask.after(() => {
        this.importing_ = false;
        this.model_.stats.traceImportDurationMs =
            tr.b.Timing.getCurrentTimeMs() - importStartTimeMs;
      });
      return importTask;
    },

    createImporter_(eventData) {
      const importerConstructor = tr.importer.Importer.findImporterFor(
          eventData);
      if (!importerConstructor) {
        throw new Error('Couldn\'t create an importer for the provided ' +
                        'eventData.');
      }
      return new importerConstructor(this.model_, eventData);
    },

    hasEventDataDecoder_(importers) {
      for (let i = 0; i < importers.length; ++i) {
        if (!importers[i].isTraceDataContainer()) return true;
      }

      return false;
    }
  };

  return {
    ImportOptions,
    Import,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  function MetricRegistry() {}

  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  options.defaultMetadata = {};
  tr.b.decorateExtensionRegistry(MetricRegistry, options);

  function camelCaseToHackerString(camelCase) {
    let hackerString = '';
    for (const c of camelCase) {
      const lowered = c.toLocaleLowerCase();
      if (lowered === c) {
        hackerString += c;
      } else {
        hackerString += '_' + lowered;
      }
    }
    return hackerString;
  }

  function getCallStack() {
    try {
      throw new Error();
    } catch (error) {
      return error.stack;
    }
  }

  function getPathsFromStack(stack) {
    return stack.split('\n').map(line => {
      line = line.replace(/^ */, '').split(':');
      if (line.length < 4) return '';
      return line[line.length - 3].split('/');
    }).filter(x => x);
  }

  MetricRegistry.checkFilename = function(metricName, opt_metricPathForTest) {
    if (metricName === 'runtimeStatsTotalMetric' ||
        metricName === 'v8AndMemoryMetrics') {
      // TODO(crbug.com/688342) Remove the runtimeStatsTotalMetric exception.
      // TODO(3275) Remove the v8AndMemoryMetrics exception.
      // https://github.com/catapult-project/catapult/issues/3275
      return;
    }

    const expectedFilename = camelCaseToHackerString(metricName) + '.html';
    const stack = getCallStack();

    let metricPath = opt_metricPathForTest;
    if (metricPath === undefined) {
      const paths = getPathsFromStack(stack);
      const METRIC_STACK_INDEX = 5;

      // This filename is in paths[0]. If this file is not vulcanized, then the
      // metric's filename is in paths[METRIC_STACK_INDEX]. If this file is
      // vulcanized, then they are the same, and paths[METRIC_STACK_INDEX] is
      // not the metric's filename.
      if (paths.length <= METRIC_STACK_INDEX ||
          paths[METRIC_STACK_INDEX].join('/') === paths[0].join('/')) {
        return;
      }

      metricPath = paths[METRIC_STACK_INDEX].slice(
          paths[METRIC_STACK_INDEX].length - 2);
    }

    if (!metricPath[1].endsWith('_test.html') &&
        metricPath[1] !== expectedFilename &&
        metricPath.join('_') !== expectedFilename) {
      throw new Error(
          'Expected ' + metricName + ' to be in a file named ' +
          expectedFilename + '; actual: ' + metricPath.join('/') +
          '; stack: ' + stack.replace(/\n/g, '\n  '));
    }
  };

  MetricRegistry.addEventListener('will-register', function(e) {
    const metric = e.typeInfo.constructor;
    if (!(metric instanceof Function)) {
      throw new Error('Metrics must be functions.');
    }

    if (!metric.name.endsWith('Metric') &&
        !metric.name.endsWith('Metrics')) {
      throw new Error('Metric names must end with "Metric" or "Metrics".');
    }

    if (metric.length < 2) {
      throw new Error('Metrics take a HistogramSet and a Model and ' +
                      'optionally an options dictionary.');
    }

    MetricRegistry.checkFilename(metric.name);
  });

  return {
    MetricRegistry,
  };
});


'use strict';

tr.exportTo('tr.b.math', function() {
  /**
   * An object of this class computes basic statistics online in O(1).
   * Usage:
   * 1. Create an instance.
   * 2. Add numbers using the |add| method.
   * 3. Query statistics.
   * 4. Repeat from step 2.
   */
  class RunningStatistics {
    constructor() {
      this.mean_ = 0;
      this.count_ = 0;
      this.max_ = -Infinity;
      this.min_ = Infinity;
      this.sum_ = 0;
      this.variance_ = 0;

      // Mean of logarithms of absolute values of samples, or undefined if any
      // samples were <= 0.
      this.meanlogs_ = 0;
    }

    get count() {
      return this.count_;
    }

    get geometricMean() {
      if (this.meanlogs_ === undefined) return 0;
      return Math.exp(this.meanlogs_);
    }

    get mean() {
      if (this.count_ === 0) return undefined;
      return this.mean_;
    }

    get max() {
      return this.max_;
    }

    get min() {
      return this.min_;
    }

    get sum() {
      return this.sum_;
    }

    get variance() {
      if (this.count_ === 0) return undefined;
      if (this.count_ === 1) return 0;
      return this.variance_ / (this.count_ - 1);
    }

    get stddev() {
      if (this.count_ === 0) return undefined;
      return Math.sqrt(this.variance);
    }

    add(x) {
      this.count_++;
      this.max_ = Math.max(this.max_, x);
      this.min_ = Math.min(this.min_, x);
      this.sum_ += x;

      // The geometric mean is computed using the arithmetic mean of logarithms.
      if (x <= 0) {
        this.meanlogs_ = undefined;
      } else if (this.meanlogs_ !== undefined) {
        this.meanlogs_ += (Math.log(Math.abs(x)) - this.meanlogs_) / this.count;
      }

      // The following uses Welford's algorithm for computing running mean
      // and variance. See http://www.johndcook.com/blog/standard_deviation.
      if (this.count_ === 1) {
        this.mean_ = x;
        this.variance_ = 0;
      } else {
        const oldMean = this.mean_;
        const oldVariance = this.variance_;
        // Using the 2nd formula for updating the mean yields better precision
        // but it doesn't work for the case oldMean is Infinity. Hence we handle
        // that case separately.
        if (oldMean === Infinity || oldMean === -Infinity) {
          this.mean_ = this.sum_ / this.count_;
        } else {
          this.mean_ = oldMean + (x - oldMean) / this.count_;
        }
        this.variance_ = oldVariance + (x - oldMean) * (x - this.mean_);
      }
    }

    merge(other) {
      const result = new RunningStatistics();
      result.count_ = this.count_ + other.count_;
      result.sum_ = this.sum_ + other.sum_;
      result.min_ = Math.min(this.min_, other.min_);
      result.max_ = Math.max(this.max_, other.max_);
      if (result.count === 0) {
        result.mean_ = 0;
        result.variance_ = 0;
        result.meanlogs_ = 0;
      } else {
        // Combine the mean and the variance using the formulas from
        // https://goo.gl/ddcAep.
        result.mean_ = result.sum / result.count;
        const deltaMean = (this.mean || 0) - (other.mean || 0);
        result.variance_ = this.variance_ + other.variance_ +
          (this.count * other.count * deltaMean * deltaMean / result.count);

        // Merge the arithmetic means of logarithms of absolute values of
        // samples, weighted by counts.
        if (this.meanlogs_ === undefined || other.meanlogs_ === undefined) {
          result.meanlogs_ = undefined;
        } else {
          result.meanlogs_ = (this.count * this.meanlogs_ +
              other.count * other.meanlogs_) / result.count;
        }
      }
      return result;
    }

    asDict() {
      if (!this.count) {
        return [];
      }
      // It's more efficient to serialize these fields in an array. If you
      // add any other fields, you should re-evaluate whether it would be more
      // efficient to serialize as a dict.
      return [
        this.count_,
        this.max_,
        this.meanlogs_,
        this.mean_,
        this.min_,
        this.sum_,
        this.variance_,
      ];
    }

    static fromDict(dict) {
      const result = new RunningStatistics();
      if (dict.length !== 7) {
        return result;
      }
      [
        result.count_,
        result.max_,
        result.meanlogs_,
        result.mean_,
        result.min_,
        result.sum_,
        result.variance_,
      ] = dict;
      return result;
    }
  }

  return {
    RunningStatistics,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class Diagnostic {
    constructor() {
      this.guid_ = undefined;
    }

    /**
     * Returns a new Diagnostic that is like this one but distinct.
     * This is useful when merging Diagnostics.
     * @return {!tr.v.d.Diagnostic}
     */
    clone() {
      return new this.constructor();
    }

    /**
     * Return true if |this| can be merged with |otherDiagnostic|.
     *
     * @param {!tr.v.d.Diagnostic} otherDiagnostic
     * @return {!boolean}
     */
    canAddDiagnostic(otherDiagnostic) {
      return false;
    }

    /**
     * If subclasses override canAddDiagnostic() then they must also override
     * this method to modify |this| to include information from
     * |otherDiagnostic|.
     *
     * @param {!tr.v.d.Diagnostic} otherDiagnostic
     */
    addDiagnostic(otherDiagnostic) {
      throw new Error('Abstract virtual method: subclasses must override ' +
          'this method if they override canAddDiagnostic');
    }

    get guid() {
      if (this.guid_ === undefined) {
        this.guid_ = tr.b.GUID.allocateUUID4();
      }

      return this.guid_;
    }

    set guid(guid) {
      if (this.guid_ !== undefined) {
        throw new Error('Cannot reset guid');
      }

      this.guid_ = guid;
    }

    get hasGuid() {
      return this.guid_ !== undefined;
    }

    /**
     * If this Diagnostic is shared between multiple Histograms, then return its
     * |guid|. Otherwise, serialize this Diagnostic to a dictionary.
     *
     * @return {string|!Object}
     */
    asDictOrReference() {
      if (this.guid_ !== undefined) {
        return this.guid_;
      }
      return this.asDict();
    }

    /**
     * Serialize all of the information in this Diagnostic to a dictionary,
     * regardless of whether it is shared between multiple Histograms.
     *
     * @return {!Object}
     */
    asDict() {
      const result = {type: this.constructor.name};
      if (this.guid_ !== undefined) {
        result.guid = this.guid_;
      }
      this.asDictInto_(result);
      return result;
    }

    asDictInto_(d) {
      throw new Error('Abstract virtual method: subclasses must override ' +
          'this method if they override canAddDiagnostic');
    }

    static fromDict(d) {
      const typeInfo = Diagnostic.findTypeInfoWithName(d.type);
      if (!typeInfo) {
        throw new Error('Unrecognized diagnostic type: ' + d.type);
      }

      const diagnostic = typeInfo.constructor.fromDict(d);
      if (d.guid !== undefined) diagnostic.guid = d.guid;
      return diagnostic;
    }
  }

  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  options.defaultMetadata = {};
  options.mandatoryBaseClass = Diagnostic;
  tr.b.decorateExtensionRegistry(Diagnostic, options);

  Diagnostic.addEventListener('will-register', function(e) {
    const constructor = e.typeInfo.constructor;
    if (!(constructor.fromDict instanceof Function) ||
        (constructor.fromDict === Diagnostic.fromDict) ||
        (constructor.fromDict.length !== 1)) {
      throw new Error('Diagnostics must define fromDict(d)');
    }
  });

  return {
    Diagnostic,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class Breakdown extends tr.v.d.Diagnostic {
    constructor() {
      super();
      this.values_ = new Map();
      this.colorScheme = undefined;
    }

    clone() {
      const clone = new Breakdown();
      clone.colorScheme = this.colorScheme;
      clone.addDiagnostic(this);
      return clone;
    }

    canAddDiagnostic(otherDiagnostic) {
      return ((otherDiagnostic instanceof Breakdown) &&
              (otherDiagnostic.colorScheme === this.colorScheme));
    }

    addDiagnostic(otherDiagnostic) {
      for (const [name, value] of otherDiagnostic) {
        this.set(name, this.get(name) + value);
      }
      return this;
    }

    /**
     * Add a Value by an explicit name to this map.
     *
     * @param {string} name
     * @param {number} value
     */
    set(name, value) {
      if (typeof name !== 'string' ||
          typeof value !== 'number') {
        throw new Error('Breakdown maps from strings to numbers');
      }
      this.values_.set(name, value);
    }

    /**
     * @param {string} name
     * @return {number}
     */
    get(name) {
      return this.values_.get(name) || 0;
    }

    * [Symbol.iterator]() {
      for (const pair of this.values_) {
        yield pair;
      }
    }

    get size() {
      return this.values_.size;
    }

    asDictInto_(d) {
      d.values = {};
      for (const [name, value] of this) {
        d.values[name] = tr.b.numberToJson(value);
      }
      if (this.colorScheme) {
        d.colorScheme = this.colorScheme;
      }
    }

    static fromEntries(entries) {
      const breakdown = new Breakdown();
      for (const [name, value] of entries) {
        breakdown.set(name, value);
      }
      return breakdown;
    }

    static fromDict(d) {
      const breakdown = new Breakdown();
      for (const [name, value] of Object.entries(d.values)) {
        breakdown.set(name, tr.b.numberFromJson(value));
      }
      if (d.colorScheme) {
        breakdown.colorScheme = d.colorScheme;
      }
      return breakdown;
    }
  }

  tr.v.d.Diagnostic.register(Breakdown, {
    elementName: 'tr-v-ui-breakdown-span'
  });

  return {
    Breakdown,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class CollectedRelatedEventSet extends tr.v.d.Diagnostic {
    constructor() {
      super();
      this.eventSetsByCanonicalUrl_ = new Map();
    }

    asDictInto_(d) {
      d.events = {};
      for (const [canonicalUrl, eventSet] of this) {
        d.events[canonicalUrl] = [];
        for (const event of eventSet) {
          d.events[canonicalUrl].push({
            stableId: event.stableId,
            title: event.title,
            start: event.start,
            duration: event.duration
          });
        }
      }
    }

    static fromDict(d) {
      const result = new CollectedRelatedEventSet();
      for (const [canonicalUrl, events] of Object.entries(d.events)) {
        result.eventSetsByCanonicalUrl_.set(canonicalUrl, events.map(
            e => new tr.v.d.EventRef(e)));
      }
      return result;
    }

    get size() {
      return this.eventSetsByCanonicalUrl_.size;
    }

    get(canonicalUrl) {
      return this.eventSetsByCanonicalUrl_.get(canonicalUrl);
    }

    * [Symbol.iterator]() {
      for (const [canonicalUrl, eventSet] of this.eventSetsByCanonicalUrl_) {
        yield [canonicalUrl, eventSet];
      }
    }

    canAddDiagnostic(otherDiagnostic) {
      return otherDiagnostic instanceof tr.v.d.RelatedEventSet ||
        otherDiagnostic instanceof tr.v.d.CollectedRelatedEventSet;
    }

    addEventSetForCanonicalUrl(canonicalUrl, events) {
      let myEventSet = this.eventSetsByCanonicalUrl_.get(canonicalUrl);
      if (myEventSet === undefined) {
        myEventSet = new Set();
        this.eventSetsByCanonicalUrl_.set(canonicalUrl, myEventSet);
      }
      for (const event of events) {
        myEventSet.add(event);
      }
    }

    addDiagnostic(otherDiagnostic) {
      if (otherDiagnostic instanceof tr.v.d.CollectedRelatedEventSet) {
        // Merge Maps of Sets.
        for (const [canonicalUrl, otherEventSet] of otherDiagnostic) {
          this.addEventSetForCanonicalUrl(canonicalUrl, otherEventSet);
        }
        return;
      }

      if (!otherDiagnostic.canonicalUrl) return;
      this.addEventSetForCanonicalUrl(
          otherDiagnostic.canonicalUrl, otherDiagnostic);
    }
  }

  tr.v.d.Diagnostic.register(CollectedRelatedEventSet, {
    elementName: 'tr-v-ui-collected-related-event-set-span'
  });

  return {
    CollectedRelatedEventSet,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /**
   * This class represents a mergeable range of Date objects.
   * This range can contain 1 or 2 Dates.
   */
  class DateRange extends tr.v.d.Diagnostic {
    /**
     * @param {number} ms
     */
    constructor(ms) {
      super();
      this.range_ = new tr.b.math.Range();
      this.range_.addValue(ms);
    }

    get minDate() {
      return new Date(this.range_.min);
    }

    get maxDate() {
      return new Date(this.range_.max);
    }

    get durationMs() {
      return this.range_.duration;
    }

    clone() {
      const clone = new tr.v.d.DateRange(this.range_.min);
      clone.addDiagnostic(this);
      return clone;
    }

    equals(other) {
      if (!(other instanceof DateRange)) return false;
      return this.range_.equals(other.range_);
    }

    canAddDiagnostic(otherDiagnostic) {
      return otherDiagnostic instanceof DateRange;
    }

    addDiagnostic(other) {
      this.range_.addRange(other.range_);
    }

    toString() {
      const minDate = tr.b.formatDate(this.minDate);
      if (this.durationMs === 0) return minDate;
      const maxDate = tr.b.formatDate(this.maxDate);
      return `${minDate} - ${maxDate}`;
    }

    asDictInto_(d) {
      d.min = this.range_.min;
      if (this.durationMs === 0) return;
      d.max = this.range_.max;
    }

    static fromDict(d) {
      const dateRange = new DateRange(d.min);
      if (d.max !== undefined) dateRange.range_.addValue(d.max);
      return dateRange;
    }
  }

  tr.v.d.Diagnostic.register(DateRange, {
    elementName: 'tr-v-ui-date-range-span'
  });

  return {
    DateRange,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /**
   * This is a placeholder to allow many DiagnosticMaps to contain references to
   * the same Diagnostic.
   */
  class DiagnosticRef {
    /**
     * @param {string} guid
     */
    constructor(guid) {
      this.guid = guid;
    }

    asDict() {
      return this.guid;
    }

    asDictOrReference() {
      return this.asDict();
    }
  }

  return {
    DiagnosticRef,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /**
   * Stringify Arrays or dictionaries. Sorts dictionaries keys. Non-recursive.
   *
   * @param {!Object} obj
   * @return {string}
   */
  function stableStringify(obj) {
    let replacer;
    if (!(obj instanceof Array)) replacer = Object.keys(obj).sort();
    return JSON.stringify(obj, replacer);
  }

  /**
   * @typedef {(null|number|string|boolean|Array.<!PlainOldData>|!Object)}
   * PlainOldData
   */

  class GenericSet extends tr.v.d.Diagnostic {
    /**
     * @param {!Iterable.<!PlainOldData>} values
     */
    constructor(values) {
      super();
      this.values_ = new Set(values);
    }

    get size() {
      return this.values_.size;
    }

    get length() {
      return this.values_.size;
    }

    * [Symbol.iterator]() {
      for (const value of this.values_) {
        yield value;
      }
    }

    has(value) {
      if (typeof value !== 'object') return this.values_.has(value);
      const json = JSON.stringify(value);
      for (const x of this) {
        if (typeof x !== 'object') continue;
        if (json === JSON.stringify(x)) return true;
      }
      return false;
    }

    equals(other) {
      if (!(other instanceof GenericSet)) return false;
      if (this.size !== other.size) return false;
      for (const value of this) {
        if (!other.has(value)) return false;
      }
      return true;
    }

    asDictInto_(d) {
      d.values = Array.from(this);
    }

    static fromDict(d) {
      return new GenericSet(d.values);
    }

    clone() {
      return new GenericSet(this.values_);
    }

    canAddDiagnostic(otherDiagnostic) {
      return otherDiagnostic instanceof GenericSet;
    }

    addDiagnostic(otherDiagnostic) {
      const jsons = new Set();
      for (const value of this) {
        if (typeof value !== 'object') continue;
        jsons.add(stableStringify(value));
      }

      for (const value of otherDiagnostic) {
        if (typeof value === 'object' && jsons.has(stableStringify(value))) {
          continue;
        }
        this.values_.add(value);
      }
    }
  }

  tr.v.d.Diagnostic.register(GenericSet, {
    elementName: 'tr-v-ui-generic-set-span'
  });

  return {
    GenericSet,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /*
   * Histograms are merged using trees of maps produced by
   * HistogramSet.groupHistogramsRecursively().
   * GroupingPath diagnostics record the path through that tree so that
   * RelatedHistogram{Set,Map}.mergeRelationships() can relate merged source
   * Histograms that pertain to specific stories for example to merged related
   * Histograms that also pertain to those specific stories.
   */
  class GroupingPath extends tr.v.d.Diagnostic {
    /**
     * @param {!Array.<string>} groupingPath
     */
    constructor(groupingPath) {
      super();
      this.groupingPath_ = groupingPath;
    }

    clone() {
      return new GroupingPath(Array.from(this.groupingPath_));
    }

    addToHistogram(hist) {
      hist.diagnostics.set(tr.v.d.RESERVED_NAMES.GROUPING_PATH, this);
    }

    static getFromHistogram(hist) {
      return hist.diagnostics.get(tr.v.d.RESERVED_NAMES.GROUPING_PATH);
    }

    equals(other) {
      return 0 === tr.b.compareArrays(
          this.groupingPath_, other.groupingPath_,
          (x, y) => x.localeCompare(y));
    }

    asDictInto_(d) {
      d.groupingPath = this.groupingPath_;
    }

    static fromDict(d) {
      return new GroupingPath(d.groupingPath);
    }
  }

  tr.v.d.Diagnostic.register(GroupingPath);

  return {
    GroupingPath,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /**
   * This is a placeholder in case the referenced Event isn't available in
   * memory to point to directly.
   */
  class EventRef {
    /**
     * @param {!Object} event
     * @param {string} event.stableId
     * @param {string} event.title
     * @param {number} event.start
     * @param {number} event.duration
     */
    constructor(event) {
      this.stableId = event.stableId;
      this.title = event.title;
      this.start = event.start;
      this.duration = event.duration;
      this.end = this.start + this.duration;

      // tr.v.d.RelatedEventSet identifies events using stableId, but
      // tr.model.EventSet uses guid.
      this.guid = tr.b.GUID.allocateSimple();
    }
  }

  return {
    EventRef,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /**
   * @typedef {!(tr.v.d.EventRef|tr.model.Event)} EventLike
   */

  /**
   * A RelatedEventSet diagnostic contains references to Events
   */
  class RelatedEventSet extends tr.v.d.Diagnostic {
    /**
     * @param {!(tr.model.EventSet|Array.<EventLike>|EventLike)=} opt_events
     */
    constructor(opt_events) {
      super();
      this.eventsByStableId_ = new Map();
      // TODO(#2431) Plumb canonicalUrl from event.model.
      this.canonicalUrl_ = undefined;

      if (opt_events) {
        if (opt_events instanceof tr.model.EventSet ||
            opt_events instanceof Array) {
          for (const event of opt_events) {
            this.add(event);
          }
        } else {
          this.add(opt_events);
        }
      }
    }

    clone() {
      const clone = new tr.v.d.CollectedRelatedEventSet();
      clone.addDiagnostic(this);
      return clone;
    }

    /**
     * @param {!(tr.v.d.EventRef|tr.model.Event)} event
     */
    add(event) {
      this.eventsByStableId_.set(event.stableId, event);
    }

    /**
     * @param {!(tr.v.d.EventRef|tr.model.Event)} event
     * @return {boolean}
     */
    has(event) {
      return this.eventsByStableId_.has(event.stableId);
    }

    get length() {
      return this.eventsByStableId_.size;
    }

    * [Symbol.iterator]() {
      for (const event of this.eventsByStableId_.values()) {
        yield event;
      }
    }

    get canonicalUrl() {
      return this.canonicalUrl_;
    }

    /**
     * Resolve all EventRefs into Events by finding their stableIds in |model|.
     * If a stableId cannot be found and |opt_required| is true, then throw an
     * Error.
     * If a stableId cannot be found and |opt_required| is false, then the
     * EventRef will remain an EventRef.
     *
     * @param {!tr.model.Model} model
     * @param {boolean=} opt_required
     */
    resolve(model, opt_required) {
      for (const [stableId, value] of this.eventsByStableId_) {
        if (!(value instanceof tr.v.d.EventRef)) continue;

        const event = model.getEventByStableId(stableId);
        if (event instanceof tr.model.Event) {
          this.eventsByStableId_.set(stableId, event);
        } else if (opt_required) {
          throw new Error('Unable to find Event ' + stableId);
        }
      }
    }

    asDictInto_(d) {
      d.events = [];
      for (const event of this) {
        d.events.push({
          stableId: event.stableId,
          title: event.title,
          start: event.start,
          duration: event.duration
        });
      }
    }

    static fromDict(d) {
      return new RelatedEventSet(d.events.map(
          event => new tr.v.d.EventRef(event)));
    }
  }

  tr.v.d.Diagnostic.register(RelatedEventSet, {
    elementName: 'tr-v-ui-related-event-set-span'
  });

  return {
    RelatedEventSet,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /** @constructor */
  function HistogramRef(guid) {
    this.guid = guid;
  }

  return {
    HistogramRef
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class RelatedHistogramMap extends tr.v.d.Diagnostic {
    constructor() {
      super();
      this.histogramsByName_ = new Map();
    }

    canAddDiagnostic(otherDiagnostic) {
      return otherDiagnostic instanceof RelatedHistogramMap;
    }

    addDiagnostic(otherDiagnostic) {
      // Related Histograms might not exist yet.
    }

    mergeRelationships(otherDiagnostic, parentHist, otherParentHist) {
      /*
        Modify |this| to contain Histograms that should be related to
        |parentHist|.

        |otherParentHist| was merged to |parentHist|.
        |otherDiagnostic| contains Histograms that are related to
        |otherParentHist|.

        Since mergeRelationships() is called after all Histograms are merged,
        then the MERGED_TO diagnostics of the Histograms in |otherDiagnostic|
        contain Histograms that should be related to |parentHist| via |this|
        RelatedHistogramMap.

        otherParentHist -----------------------------> parentHist
        |               merged to RelatedHistogramMap   |
        |                                               |
        | otherDiagnostic                               | this
        | RelatedHistogramMap                           | RelatedHistogramMap
        v                                               v
        otherRelatedHist -----------------------------> relatedHist
                         merged to RelatedHistogramMap

        However, |otherRelatedHist| may have been merged to Histograms using
        different grouping keys, so if |relatedHist|'s merge path is different
        from |parentHist|'s merge path, then |relatedHist| should not be related
        to |parentHist|.
       */

      const parentGroupingPath = tr.v.d.GroupingPath.getFromHistogram(
          parentHist);

      for (const [name, otherRelatedHist] of otherDiagnostic) {
        const mergedTo = otherRelatedHist.diagnostics.get(
            tr.v.d.RESERVED_NAMES.MERGED_TO);
        if (mergedTo === undefined) continue;

        for (const relatedHist of mergedTo.histogramsByName_.values()) {
          const relatedGroupingPath = tr.v.d.GroupingPath.getFromHistogram(
              relatedHist);
          if (relatedGroupingPath === undefined) continue;
          if (!parentGroupingPath.equals(relatedGroupingPath)) continue;

          this.set(name, relatedHist);
        }
      }
    }

    /**
     * Lookup a Histogram by name. Returns undefined if |name| is not found.
     *
     * @param {string} name
     * @return {!tr.v.d.HistogramRef|!tr.v.Histogram|undefined}
     */
    get(name) {
      return this.histogramsByName_.get(name);
    }

    /**
     * Add a Histogram by an explicit name to this map.
     *
     * @param {string} name
     * @param {!(tr.v.d.HistogramRef|tr.v.Histogram)} hist
     */
    set(name, hist) {
      if (!(hist instanceof tr.v.Histogram) &&
          !(hist instanceof tr.v.d.HistogramRef)) {
        throw new Error('Must be instanceof Histogram or HistogramRef: ' +
            hist);
      }

      this.histogramsByName_.set(name, hist);
    }

    /**
     * Add a Histogram implicitly by its own name to this map.
     *
     * @param {!(tr.v.d.HistogramRef|tr.v.Histogram)} hist
     */
    add(hist) {
      this.set(hist.name, hist);
    }

    get length() {
      return this.histogramsByName_.size;
    }

    * [Symbol.iterator]() {
      for (const pair of this.histogramsByName_) {
        yield pair;
      }
    }

    /**
     * Resolve all HistogramRefs into Histograms by looking up their guids in
     * |histograms|.
     * If a Histogram cannot be found and |opt_required| is true, then throw an
     * Error.
     * If a Histogram cannot be found and |opt_required| is false, then the
     * HistogramRef will remain a HistogramRef.
     *
     * @param {!tr.v.HistogramSet} histograms
     * @param {boolean=} opt_required
     */
    resolve(histograms, opt_required) {
      for (const [name, value] of this) {
        if (!(value instanceof tr.v.d.HistogramRef)) continue;

        const guid = value.guid;
        const hist = histograms.lookupHistogram(guid);
        if (hist instanceof tr.v.Histogram) {
          this.histogramsByName_.set(name, hist);
        } else if (opt_required) {
          throw new Error('Unable to find Histogram ' + guid);
        }
      }
    }

    asDictInto_(d) {
      d.values = {};
      for (const [name, hist] of this) {
        d.values[name] = hist.guid;
      }
    }

    static fromDict(d) {
      const map = new RelatedHistogramMap();
      for (const [name, guid] of Object.entries(d.values)) {
        map.set(name, new tr.v.d.HistogramRef(guid));
      }
      return map;
    }
  }

  tr.v.d.Diagnostic.register(RelatedHistogramMap, {
    elementName: 'tr-v-ui-related-histogram-map-span'
  });

  return {
    RelatedHistogramMap,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  const COLOR_SCHEME_CHROME_USER_FRIENDLY_CATEGORY_DRIVER =
    'ChromeUserFriendlyCategory';

  /**
   * RelatedHistogramBreakdown encapsulates an additive relationship between
   * Histograms: the Histogram that contains this RelatedHistogramBreakdown
   * diagnostic is composed of the Histograms referenced by this
   * RelatedHistogramBreakdown diagnostic. RelatedHistogramBreakdown is a
   * "breakdown" of its containing Histogram into its contained Histograms. This
   * additive relationship can apply to groups of other things besides Events,
   * such as memory allocations. RelatedHistogramBreakdowns over groups of
   * Events is expected to be the most common way of building
   * RelatedHistogramBreakdowns, though it is not the only way. See
   * buildFromEvents() for an example of how to build a
   * RelatedHistogramBreakdown from an EventSet and a grouping function.
   */
  class RelatedHistogramBreakdown extends tr.v.d.RelatedHistogramMap {
    constructor() {
      super();
      this.colorScheme = undefined;
    }

    clone() {
      const clone = new RelatedHistogramBreakdown();
      clone.colorScheme = this.colorScheme;
      // RelatedHistogramMap.addDiagnostic() is no-op.
      return clone;
    }

    canAddDiagnostic(otherDiagnostic) {
      return otherDiagnostic instanceof RelatedHistogramBreakdown &&
        otherDiagnostic.colorScheme === this.colorScheme;
    }

    /**
     * Add a Histogram by an explicit name to this map.
     *
     * @param {string} name
     * @param {!(tr.v.d.HistogramRef|tr.v.Histogram)} hist
     */
    set(name, hist) {
      if (!(hist instanceof tr.v.d.HistogramRef)) {
        if (!(hist instanceof tr.v.Histogram)) {
          throw new Error(
              'RelatedHistogramBreakdown can only contain Histograms');
        }

        if ((this.length > 0) &&
            (hist.unit !==
             tr.b.getFirstElement(this)[1].unit)) {
          throw new Error('Units mismatch', tr.b.getFirstElement(this)[1].unit,
              hist.unit);
        }
      }

      tr.v.d.RelatedHistogramMap.prototype.set.call(this, name, hist);
    }

    asDictInto_(d) {
      tr.v.d.RelatedHistogramMap.prototype.asDictInto_.call(this, d);
      if (this.colorScheme) d.colorScheme = this.colorScheme;
    }

    static fromDict(d) {
      const diagnostic = new RelatedHistogramBreakdown();
      for (const [name, guid] of Object.entries(d.values)) {
        diagnostic.set(name, new tr.v.d.HistogramRef(guid));
      }
      if (d.colorScheme) diagnostic.colorScheme = d.colorScheme;
      return diagnostic;
    }

    /**
    * Build a RelatedHistogramBreakdown and its Histograms from |events|.  Group
    * events using |categoryForEvent|. Add the Histograms to |histograms|.
    * Histograms' names are prefixed with |namePrefix|. Histograms are built
    * with |opt_binBoundaries|. The numeric sample for each Event is derived
    * from |opt_sampleForEvent|, which defaults to event.cpuSelfTime. The caller
    * must add the result RelatedHistogramBreakdown to their Histogram's
    * diagnostics.
    *
    * @param {!tr.v.HistogramSet} histograms
    * @param {string} namePrefix
    * @param {!tr.model.EventSet} events
    * @param {!function(!tr.model.Event):string} categoryForEvent
    * @param {!tr.b.Unit} unit
    * @param {!function(!tr.model.Event):number=} opt_sampleForEvent
    * @param {!tr.v.HistogramBinBoundaries=} opt_binBoundaries
    * @param {*=} opt_this
    * @return {!RelatedHistogramBreakdown}
    */
    static buildFromEvents(histograms, namePrefix, events, categoryForEvent,
        unit, opt_sampleForEvent, opt_binBoundaries, opt_this) {
      const sampleForEvent = opt_sampleForEvent ||
        ((event) => event.cpuSelfTime);

      const diagnostic = new RelatedHistogramBreakdown();
      for (const event of events) {
        const sample = sampleForEvent.call(opt_this, event);
        if (sample === undefined) continue;

        const eventCategory = categoryForEvent.call(opt_this, event);
        let hist = diagnostic.get(eventCategory);
        if (hist === undefined) {
          hist = new tr.v.Histogram(
              namePrefix + eventCategory, unit, opt_binBoundaries);
          histograms.addHistogram(hist);
          diagnostic.set(eventCategory, hist);
        }

        hist.addSample(sample,
            {relatedEvents: new tr.v.d.RelatedEventSet([event])});
      }
      return diagnostic;
    }
  }

  tr.v.d.Diagnostic.register(RelatedHistogramBreakdown, {
    elementName: 'tr-v-ui-breakdown-span'
  });

  return {
    COLOR_SCHEME_CHROME_USER_FRIENDLY_CATEGORY_DRIVER,
    RelatedHistogramBreakdown,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class RelatedNameMap extends tr.v.d.Diagnostic {
    constructor(opt_info) {
      super();
      this.map_ = new Map();
    }

    clone() {
      const clone = new RelatedNameMap();
      clone.addDiagnostic(this);
      return clone;
    }

    equals(other) {
      if (!(other instanceof RelatedNameMap)) return false;

      const keys1 = new Set(this.map_.keys());
      const keys2 = new Set(other.map_.keys());
      if (!tr.b.setsEqual(keys1, keys2)) return false;

      for (const [key, name] of this) {
        if (name !== other.get(key)) return false;
      }

      return true;
    }

    canAddDiagnostic(otherDiagnostic) {
      return otherDiagnostic instanceof RelatedNameMap;
    }

    addDiagnostic(otherDiagnostic) {
      for (const [key, name] of otherDiagnostic) {
        const existing = this.get(key);
        if (existing === undefined) {
          this.set(key, name);
        } else if (existing !== name) {
          throw new Error('Histogram names differ: ' +
              `"${existing}" != "${name}"`);
        }
      }
    }

    asDictInto_(d) {
      d.names = {};
      for (const [key, name] of this) d.names[key] = name;
    }

    set(key, name) {
      this.map_.set(key, name);
    }

    get(key) {
      return this.map_.get(key);
    }

    * [Symbol.iterator]() {
      for (const pair of this.map_) yield pair;
    }

    * values() {
      for (const value of this.map_.values()) yield value;
    }

    static fromEntries(entries) {
      const names = new RelatedNameMap();
      for (const [key, name] of entries) {
        names.set(key, name);
      }
      return names;
    }

    static fromDict(d) {
      return RelatedNameMap.fromEntries(Object.entries(d.names || {}));
    }
  }

  tr.v.d.Diagnostic.register(RelatedNameMap, {
    elementName: 'tr-v-ui-related-name-map-span',
  });

  return {
    RelatedNameMap,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class Scalar extends tr.v.d.Diagnostic {
    /**
     * @param {!tr.b.Scalar} value
     */
    constructor(value) {
      super();
      if (!(value instanceof tr.b.Scalar)) {
        throw new Error('expected Scalar');
      }
      this.value = value;
    }

    clone() {
      return new Scalar(this.value);
    }

    asDictInto_(d) {
      d.value = this.value.asDict();
    }

    static fromDict(d) {
      return new Scalar(tr.b.Scalar.fromDict(d.value));
    }
  }

  tr.v.d.Diagnostic.register(Scalar, {
    elementName: 'tr-v-ui-scalar-diagnostic-span'
  });

  return {
    Scalar,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class TagMap extends tr.v.d.Diagnostic {
    constructor(opt_info) {
      super();
      this.tagsToStoryNames_ = new Map();

      if (opt_info) {
        for (const [tag, storyDisplayNames] of Object.entries(
            opt_info.tagsToStoryNames || {})) {
          this.tagsToStoryNames.set(tag, new Set(storyDisplayNames));
        }
      }
    }

    clone() {
      const clone = new TagMap();
      clone.addDiagnostic(this);
      return clone;
    }

    addToHistogram(hist) {
      hist.diagnostics.set(tr.v.d.RESERVED_NAMES.TAG_MAP, this);
    }

    equals(other) {
      if (!(other instanceof TagMap)) return false;

      const keys1 = new Set(this.tagsToStoryNames.keys());
      const keys2 = new Set(other.tagsToStoryNames.keys());
      if (!tr.b.setsEqual(keys1, keys2)) {
        return false;
      }

      for (const key of keys1) {
        if (!tr.b.setsEqual(
            this.tagsToStoryNames.get(key),
            other.tagsToStoryNames.get(key))) {
          return false;
        }
      }

      return true;
    }

    canAddDiagnostic(otherDiagnostic) {
      return otherDiagnostic instanceof TagMap;
    }

    addDiagnostic(otherDiagnostic) {
      for (const [name, storyDisplayNames] of
          otherDiagnostic.tagsToStoryNames) {
        if (!this.tagsToStoryNames.has(name)) {
          this.tagsToStoryNames.set(name, new Set());
        }
        for (const t of storyDisplayNames) {
          this.tagsToStoryNames.get(name).add(t);
        }
      }

      return this;
    }

    asDictInto_(d) {
      d.tagsToStoryNames = {};
      for (const [name, value] of this.tagsToStoryNames) {
        d.tagsToStoryNames[name] = Array.from(value);
      }
    }

    /**
     * @returns {Map.<string, Set.<string>>} A map of tag names to sets of story
     * display names.
     */
    get tagsToStoryNames() {
      return this.tagsToStoryNames_;
    }

    static fromDict(d) {
      const info = new TagMap();

      for (const [name, values] of
          Object.entries(d.tagsToStoryNames || {})) {
        info.tagsToStoryNames.set(name, new Set(values));
      }

      return info;
    }
  }

  tr.v.d.Diagnostic.register(TagMap, {
    elementName: 'tr-v-ui-tag-map-span'
  });

  return {
    TagMap,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class UnmergeableDiagnosticSet extends tr.v.d.Diagnostic {
    /**
     * @param {!Array.<!tr.v.d.Diagnostic>} diagnostics
     */
    constructor(diagnostics) {
      super();
      this._diagnostics = diagnostics;
    }

    clone() {
      const clone = new tr.v.d.UnmergeableDiagnosticSet();
      clone.addDiagnostic(this);
      return clone;
    }

    canAddDiagnostic(otherDiagnostic) {
      return true;
    }

    /**
     * If |otherDiagnostic| is an UnmergeableDiagnosticSet, then add clones of
     * its diagnostics to |this|. Otherwise, try to add |otherDiagnostic| to one
     * of the diagnostics already in this set. If that fails, add a clone of
     * |otherDiagnostic| to this set.
     *
     * @param {!tr.v.d.Diagnostic} otherDiagnostic
     * @return {!tr.v.d.UnmergeableDiagnostic} this
     */
    addDiagnostic(otherDiagnostic) {
      if (otherDiagnostic instanceof UnmergeableDiagnosticSet) {
        for (const subOtherDiagnostic of otherDiagnostic) {
          const clone = subOtherDiagnostic.clone();
          this.addDiagnostic(clone);
        }
        return;
      }

      for (let i = 0; i < this._diagnostics.length; ++i) {
        if (this._diagnostics[i].canAddDiagnostic(otherDiagnostic)) {
          this._diagnostics[i].addDiagnostic(otherDiagnostic);
          return;
        }
      }

      const clone = otherDiagnostic.clone();
      this._diagnostics.push(clone);
    }

    mergeRelationships(otherDiagnostic, parentHist, otherParentHist) {
      if (otherDiagnostic instanceof UnmergeableDiagnosticSet) {
        for (const subDiagnostic of otherDiagnostic) {
          this.mergeRelationships(subDiagnostic, parentHist, otherParentHist);
        }
        return;
      }
      for (const subDiagnostic of this) {
        if (!(subDiagnostic instanceof tr.v.d.RelatedHistogramMap) &&
            !(subDiagnostic instanceof tr.v.d.RelatedHistogramBreakdown)) {
          continue;
        }
        subDiagnostic.mergeRelationships(
            otherDiagnostic, parentHist, otherParentHist);
      }
    }

    get length() {
      return this._diagnostics.length;
    }

    * [Symbol.iterator]() {
      for (const diagnostic of this._diagnostics) yield diagnostic;
    }

    asDictInto_(d) {
      d.diagnostics = this._diagnostics.map(d => d.asDictOrReference());
    }

    static fromDict(d) {
      return new UnmergeableDiagnosticSet(d.diagnostics.map(
          d => ((typeof d === 'string') ?
            new tr.v.d.DiagnosticRef(d) : tr.v.d.Diagnostic.fromDict(d))));
    }
  }

  tr.v.d.Diagnostic.register(UnmergeableDiagnosticSet, {
    elementName: 'tr-v-ui-unmergeable-diagnostic-set-span'
  });

  return {
    UnmergeableDiagnosticSet,
  };
});


'use strict';
tr.exportTo('tr.v.d', function() {
  // Diagnostics that are produced outside of metrics (e.g. by telemetry) use
  // reserved names.
  const RESERVED_INFOS = {
    ANGLE_REVISIONS: {name: 'angleRevisions', type: tr.v.d.GenericSet},
    ARCHITECTURES: {name: 'architectures', type: tr.v.d.GenericSet},
    BENCHMARKS: {name: 'benchmarks', type: tr.v.d.GenericSet},
    BENCHMARK_START: {name: 'benchmarkStart', type: tr.v.d.DateRange},
    BOTS: {name: 'bots', type: tr.v.d.GenericSet},
    BUG_COMPONENTS: {name: 'bugComponents', type: tr.v.d.GenericSet},
    BUILDS: {name: 'builds', type: tr.v.d.GenericSet},
    CATAPULT_REVISIONS: {name: 'catapultRevisions', type: tr.v.d.GenericSet},
    CHROMIUM_COMMIT_POSITIONS: {
      name: 'chromiumCommitPositions', type: tr.v.d.GenericSet},
    CHROMIUM_REVISIONS: {name: 'chromiumRevisions', type: tr.v.d.GenericSet},
    DEVICE_IDS: {name: 'deviceIds', type: tr.v.d.GenericSet},
    GPUS: {name: 'gpus', type: tr.v.d.GenericSet},
    GROUPING_PATH: {name: 'groupingPath', type: tr.v.d.GroupingPath},
    IS_REFERENCE_BUILD: {name: 'isReferenceBuild', type: tr.v.d.GenericSet},
    LABELS: {name: 'labels', type: tr.v.d.GenericSet},
    LOG_URLS: {name: 'logUrls', type: tr.v.d.GenericSet},
    MASTERS: {name: 'masters', type: tr.v.d.GenericSet},
    MEMORY_AMOUNTS: {name: 'memoryAmounts', type: tr.v.d.GenericSet},
    MERGED_FROM: {name: 'mergedFrom', type: tr.v.d.RelatedHistogramMap},
    MERGED_TO: {name: 'mergedTo', type: tr.v.d.RelatedHistogramMap},
    OS_NAMES: {name: 'osNames', type: tr.v.d.GenericSet},
    OS_VERSIONS: {name: 'osVersions', type: tr.v.d.GenericSet},
    OWNERS: {name: 'owners', type: tr.v.d.GenericSet},
    PRODUCT_VERSIONS: {name: 'productVersions', type: tr.v.d.GenericSet},
    RELATED_NAMES: {name: 'relatedNames', type: tr.v.d.GenericSet},
    SKIA_REVISIONS: {name: 'skiaRevisions', type: tr.v.d.GenericSet},
    STORIES: {name: 'stories', type: tr.v.d.GenericSet},
    STORYSET_REPEATS: {name: 'storysetRepeats', type: tr.v.d.GenericSet},
    STORY_TAGS: {name: 'storyTags', type: tr.v.d.GenericSet},
    TAG_MAP: {name: 'tagmap', type: tr.v.d.TagMap},
    TRACE_START: {name: 'traceStart', type: tr.v.d.DateRange},
    TRACE_URLS: {name: 'traceUrls', type: tr.v.d.GenericSet},
    V8_COMMIT_POSITIONS: {name: 'v8CommitPositions', type: tr.v.d.DateRange},
    V8_REVISIONS: {name: 'v8Revisions', type: tr.v.d.GenericSet},
    WEBRTC_REVISIONS: {name: 'webrtcRevisions', type: tr.v.d.GenericSet},
  };

  const RESERVED_NAMES = {};

  const RESERVED_NAMES_TO_TYPES = new Map();

  for (const [codename, info] of Object.entries(RESERVED_INFOS)) {
    RESERVED_NAMES[codename] = info.name;
    if (RESERVED_NAMES_TO_TYPES.has(info.name)) {
      throw new Error(`Duplicate reserved name "${info.name}"`);
    }
    RESERVED_NAMES_TO_TYPES.set(info.name, info.type);
  }

  const RESERVED_NAMES_SET = new Set(Object.values(RESERVED_NAMES));

  return {
    RESERVED_INFOS,
    RESERVED_NAMES,
    RESERVED_NAMES_SET,
    RESERVED_NAMES_TO_TYPES,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  class DiagnosticMap extends Map {
    /**
     * @param {boolean=} opt_allowReservedNames defaults to true
     */
    constructor(opt_allowReservedNames) {
      super();
      if (opt_allowReservedNames === undefined) {
        opt_allowReservedNames = true;
      }
      this.allowReservedNames_ = opt_allowReservedNames;
    }

    /**
     * Add a new Diagnostic to this map.
     *
     * @param {string} name
     * @param {!tr.v.d.Diagnostic} diagnostic
     */
    set(name, diagnostic) {
      if (typeof(name) !== 'string') {
        throw new Error(`name must be string, not ${name}`);
      }

      if (!(diagnostic instanceof tr.v.d.Diagnostic) &&
          !(diagnostic instanceof tr.v.d.DiagnosticRef)) {
        throw new Error(`Must be instanceof Diagnostic: ${diagnostic}`);
      }

      // TODO(#3507): Reserved names should never be UnmergeableDiagnosticSet.
      if (!this.allowReservedNames_ &&
          tr.v.d.RESERVED_NAMES_SET.has(name) &&
          !(diagnostic instanceof tr.v.d.UnmergeableDiagnosticSet) &&
          !(diagnostic instanceof tr.v.d.DiagnosticRef)) {
        const type = tr.v.d.RESERVED_NAMES_TO_TYPES.get(name);
        if (type && !(diagnostic instanceof type)) {
          throw new Error(
              `Diagnostics named "${name}" must be ${type.name}, ` +
              `not ${diagnostic.constructor.name}`);
        }
      }

      Map.prototype.set.call(this, name, diagnostic);
    }

    delete(name) {
      if (name === undefined) throw new Error('missing name');
      Map.prototype.delete.call(this, name);
    }

    /**
     * Add Diagnostics from a dictionary of dictionaries.
     *
     * @param {Object} dict
     */
    addDicts(dict) {
      for (const [name, diagnosticDict] of Object.entries(dict)) {
        if (typeof diagnosticDict === 'string') {
          this.set(name, new tr.v.d.DiagnosticRef(diagnosticDict));
        } else {
          this.set(name, tr.v.d.Diagnostic.fromDict(diagnosticDict));
        }
      }
    }

    resolveSharedDiagnostics(histograms, opt_required) {
      for (const [name, value] of this) {
        if (!(value instanceof tr.v.d.DiagnosticRef)) {
          continue;
        }

        const guid = value.guid;
        const diagnostic = histograms.lookupDiagnostic(guid);
        if (diagnostic instanceof tr.v.d.Diagnostic) {
          this.set(name, diagnostic);
        } else if (opt_required) {
          throw new Error('Unable to find shared Diagnostic ' + guid);
        }
      }
    }

    asDict() {
      const dict = {};
      for (const [name, diagnostic] of this) {
        dict[name] = diagnostic.asDictOrReference();
      }
      return dict;
    }

    static fromDict(d) {
      const diagnostics = new DiagnosticMap();
      diagnostics.addDicts(d);
      return diagnostics;
    }

    /**
     * Convert dictionary or ES6 Map to DiagnosticMap.
     * @param {!Object|!Map.<string, !tr.v.d.Diagnostic>} obj
     * @return {tr.v.d.DiagnosticMap}
     */
    static fromObject(obj) {
      const diagnostics = new DiagnosticMap();
      if (!(obj instanceof Map)) obj = Object.entries(obj);
      for (const [name, diagnostic] of obj) {
        diagnostics.set(name, diagnostic);
      }
      return diagnostics;
    }

    addDiagnostics(other) {
      for (const [name, otherDiagnostic] of other) {
        if (name === tr.v.d.RESERVED_NAMES.MERGED_FROM ||
            name === tr.v.d.RESERVED_NAMES.MERGED_TO ||
            name === tr.v.d.RESERVED_NAMES.GROUPING_PATH) {
          continue;
        }

        const myDiagnostic = this.get(name);

        if (myDiagnostic !== undefined &&
            myDiagnostic.canAddDiagnostic(otherDiagnostic)) {
          myDiagnostic.addDiagnostic(otherDiagnostic);
          continue;
        }

        // We need to avoid storing references to |otherDiagnostic| in both
        // |this| and |other| because future merge()s may add yet other
        // Diagnostics to |this|, and they shouldn't accidentally modify
        // anything in |other|.
        // Now, either |this| doesn't already have a Diagnostic named |name|
        // (myDiagnostic is undefined), or
        // |this| already has a Diagnostic named |name| that can't be merged
        // with |otherDiagnostic|.
        // Either way, we need to clone |otherDiagnostic|.
        // However, clones produced via fromDict/toDict cannot necessarily be
        // merged with yet other Diagnostics, either because of semantics (as in
        // the case of TelemtryInfo and the like) or because guids must not be
        // shared by distinct Diagnostics. Therefore, Diagnostics support
        // another way of cloning that is specifically targeted at supporting
        // merging: clone().

        const clone = otherDiagnostic.clone();

        if (myDiagnostic === undefined) {
          this.set(name, clone);
          continue;
        }

        // Now, |myDiagnostic| exists and it is unmergeable with |clone|, which
        // is safe to store in |this|.
        this.set(name, new tr.v.d.UnmergeableDiagnosticSet(
              [myDiagnostic, clone]));
      }
    }

    /**
     * RelatedHistogram diagnostics cannot be merged when Histograms are merged
     * because the related Histograms might not exist yet.
     * This method assumes that all related Histograms exist and that duplicate
     * Diagnostics have been deduplicated.
     *
     * @param {!tr.v.Histogram} parentHist
     */
    mergeRelationships(parentHist) {
      for (const [name, diagnostic] of this) {
        if (!(diagnostic instanceof tr.v.d.RelatedHistogramMap) &&
            !(diagnostic instanceof tr.v.d.RelatedHistogramBreakdown) &&
            !(diagnostic instanceof tr.v.d.UnmergeableDiagnosticSet)) {
          continue;
        }

        for (const [unusedName, otherHist] of
            this.get(tr.v.d.RESERVED_NAMES.MERGED_FROM)) {
          const otherDiagnostic = otherHist.diagnostics.get(name);
          if (!(otherDiagnostic instanceof tr.v.d.RelatedHistogramMap) &&
              !(otherDiagnostic instanceof tr.v.d.RelatedHistogramBreakdown) &&
              !(otherDiagnostic instanceof tr.v.d.UnmergeableDiagnosticSet)) {
            continue;
          }
          diagnostic.mergeRelationships(otherDiagnostic, parentHist, otherHist);
        }
      }
    }
  }

  return {
    DiagnosticMap,
  };
});


'use strict';

tr.exportTo('tr.v', function() {
  const MAX_DIAGNOSTIC_MAPS = 16;

  const DEFAULT_SAMPLE_VALUES_PER_BIN = 10;

  const DEFAULT_REBINNED_COUNT = 40;

  const DEFAULT_BOUNDARIES_FOR_UNIT = new Map();

  const DELTA = String.fromCharCode(916);
  const Z_SCORE_NAME = 'z-score';
  const P_VALUE_NAME = 'p-value';
  const U_STATISTIC_NAME = 'U';

  /**
   * Converts the given percent to a string in the format specified above.
   * @param {number} percent The percent must be between 0.0 and 1.0.
   * @param {boolean=} opt_force3 Whether to force the result to be 3 chars long
   * @return {string}
   */
  function percentToString(percent, opt_force3) {
    if (percent < 0 || percent > 1) {
      throw new Error('percent must be in [0,1]');
    }
    if (percent === 0) return '000';
    if (percent === 1) return '100';
    let str = percent.toString();
    if (str[1] !== '.') {
      throw new Error('Unexpected percent');
    }
    // Pad short strings with zeros.
    str = str + '0'.repeat(Math.max(4 - str.length, 0));

    if (str.length > 4) {
      if (opt_force3) {
        str = str.slice(0, 4);
      } else {
        str = str.slice(0, 4) + '_' + str.slice(4);
      }
    }
    return '0' + str.slice(2);
  }

  /**
   * Converts the given string to a percent between 0 and 1.
   * @param {string}
   * @return {number}
   */
  function percentFromString(s) {
    return parseFloat(s[0] + '.' + s.substr(1).replace(/_/g, ''));
  }

  class HistogramBin {
    /**
     * @param {!tr.b.math.Range} range
     */
    constructor(range) {
      this.range = range;
      this.count = 0;
      this.diagnosticMaps = [];
    }

    /**
     * @param {*} value
     */
    addSample(value) {
      this.count += 1;
    }

    /**
     * @param {!tr.v.d.DiagnosticMap} diagnostics
     */
    addDiagnosticMap(diagnostics) {
      tr.b.math.Statistics.uniformlySampleStream(
          this.diagnosticMaps, this.count, diagnostics, MAX_DIAGNOSTIC_MAPS);
    }

    addBin(other) {
      if (!this.range.equals(other.range)) {
        throw new Error('Merging incompatible Histogram bins.');
      }
      tr.b.math.Statistics.mergeSampledStreams(this.diagnosticMaps, this.count,
          other.diagnosticMaps, other.count, MAX_DIAGNOSTIC_MAPS);
      this.count += other.count;
    }

    fromDict(dict) {
      this.count = dict[0];
      if (dict.length > 1) {
        for (const map of dict[1]) {
          this.diagnosticMaps.push(tr.v.d.DiagnosticMap.fromDict(map));
        }
      }
    }

    asDict() {
      if (!this.diagnosticMaps.length) {
        return [this.count];
      }
      // It's more efficient to serialize these 2 fields in an array. If you
      // add any other fields, you should re-evaluate whether it would be more
      // efficient to serialize as a dict.
      return [this.count, this.diagnosticMaps.map(d => d.asDict())];
    }
  }

  const DEFAULT_SUMMARY_OPTIONS = new Map([
    ['avg', true],
    ['count', true],
    ['geometricMean', false],
    ['max', true],
    ['min', true],
    ['nans', false],
    ['std', true],
    ['sum', true],
    // Don't include 'percentile' or 'iprs' here. Their default values are [],
    // which is mutable. Callers may push to it, so there must be a different
    // Array instance for each Histogram instance.
  ]);

  /**
   * This is basically a histogram, but so much more.
   * Histogram is serializable using asDict/fromDict.
   * Histogram computes several statistics of its contents.
   * Histograms can be merged.
   * getDifferenceSignificance() test whether one Histogram is statistically
   * significantly different from another Histogram.
   * Histogram stores a random sample of the exact number values added to it.
   * Histogram stores a random sample of optional per-sample DiagnosticMaps.
   * Histogram is visualized by <tr-v-ui-histogram-span>, which supports
   * selecting bins, and visualizing the DiagnosticMaps of selected bins.
   *
   * @param {!tr.b.Unit} unit
   * @param {!tr.v.HistogramBinBoundaries=} opt_binBoundaries
   */
  class Histogram {
    constructor(name, unit, opt_binBoundaries) {
      let binBoundaries = opt_binBoundaries;
      if (!binBoundaries) {
        const baseUnit = unit.baseUnit ? unit.baseUnit : unit;
        binBoundaries = DEFAULT_BOUNDARIES_FOR_UNIT.get(baseUnit.unitName);
      }

      // If this Histogram is being deserialized, then its guid will be set by
      // fromDict().
      // If this Histogram is being computed by a metric, then its guid will be
      // allocated the first time the guid is gotten by asDict().
      this.guid_ = undefined;

      // Serialize binBoundaries here instead of holding a reference to it in
      // case it is modified.
      this.binBoundariesDict_ = binBoundaries.asDict();

      // HistogramBinBoundaries create empty HistogramBins. Save memory by
      // sharing those empty HistogramBin instances with other Histograms. Wait
      // to copy HistogramBins until we need to modify it (copy-on-write).
      this.allBins = binBoundaries.bins.slice();
      this.description = '';
      const allowReservedNames = false;
      this.diagnostics_ = new tr.v.d.DiagnosticMap(allowReservedNames);
      this.maxNumSampleValues_ = this.defaultMaxNumSampleValues_;
      this.name_ = name;
      this.nanDiagnosticMaps = [];
      this.numNans = 0;
      this.running_ = undefined;
      this.sampleValues_ = [];
      this.shortName = undefined;
      this.summaryOptions = new Map(DEFAULT_SUMMARY_OPTIONS);
      this.summaryOptions.set('percentile', []);
      this.summaryOptions.set('iprs', []);
      this.unit = unit;
    }

    /**
     * Create a Histogram, configure it, and add samples to it.
     *
     * |samples| can be either
     *  0. a number, or
     *  1. a dictionary {value: number, diagnostics: dictionary}, or
     *  2. an array of
     *     2a. number, or
     *     2b. dictionaries {value, diagnostics}.
     *
     * @param {string} name
     * @param {!tr.b.Unit} unit
     * @param {number|!Object|!Array.<(number|!Object)>} samples
     * @param {!Object=} opt_options
     * @param {!tr.v.HistogramBinBoundaries} opt_options.binBoundaries
     * @param {!Object|!Map} opt_options.summaryOptions
     * @param {!Object|!Map} opt_options.diagnostics
     * @param {string} opt_options.description
     * @param {string} opt_options.shortName
     * @return {!tr.v.Histogram}
     */
    static create(name, unit, samples, opt_options) {
      const options = opt_options || {};
      const hist = new Histogram(name, unit, options.binBoundaries);

      if (options.description) hist.description = options.description;
      if (options.shortName) hist.shortName = options.shortName;

      if (options.summaryOptions) {
        let summaryOptions = options.summaryOptions;
        if (!(summaryOptions instanceof Map)) {
          summaryOptions = Object.entries(summaryOptions);
        }
        for (const [name, value] of summaryOptions) {
          hist.summaryOptions.set(name, value);
        }
      }

      if (options.diagnostics !== undefined) {
        let diagnostics = options.diagnostics;
        if (!(diagnostics instanceof Map)) {
          diagnostics = Object.entries(diagnostics);
        }
        for (const [name, diagnostic] of diagnostics) {
          hist.diagnostics.set(name, diagnostic);
        }
      }

      if (!(samples instanceof Array)) samples = [samples];

      for (const sample of samples) {
        if (typeof sample === 'object') {
          hist.addSample(sample.value, sample.diagnostics);
        } else {
          hist.addSample(sample);
        }
      }

      return hist;
    }

    get diagnostics() {
      return this.diagnostics_;
    }

    get running() {
      return this.running_;
    }

    get maxNumSampleValues() {
      return this.maxNumSampleValues_;
    }

    set maxNumSampleValues(n) {
      this.maxNumSampleValues_ = n;
      tr.b.math.Statistics.uniformlySampleArray(
          this.sampleValues_, this.maxNumSampleValues_);
    }

    get name() {
      return this.name_;
    }

    get guid() {
      if (this.guid_ === undefined) {
        this.guid_ = tr.b.GUID.allocateUUID4();
      }

      return this.guid_;
    }

    set guid(guid) {
      if (this.guid_ !== undefined) {
        throw new Error('Cannot reset guid');
      }

      this.guid_ = guid;
    }

    static fromDict(dict) {
      const hist = new Histogram(dict.name, tr.b.Unit.fromJSON(dict.unit),
          HistogramBinBoundaries.fromDict(dict.binBoundaries));
      hist.guid = dict.guid;
      if (dict.shortName) {
        hist.shortName = dict.shortName;
      }
      if (dict.description) {
        hist.description = dict.description;
      }
      if (dict.diagnostics) {
        hist.diagnostics.addDicts(dict.diagnostics);
      }
      if (dict.allBins) {
        if (dict.allBins.length !== undefined) {
          for (let i = 0; i < dict.allBins.length; ++i) {
            // Copy HistogramBin on write, share the rest with the other
            // Histograms that use the same HistogramBinBoundaries.
            hist.allBins[i] = new HistogramBin(hist.allBins[i].range);
            hist.allBins[i].fromDict(dict.allBins[i]);
          }
        } else {
          for (const [i, binDict] of Object.entries(dict.allBins)) {
            hist.allBins[i] = new HistogramBin(hist.allBins[i].range);
            hist.allBins[i].fromDict(binDict);
          }
        }
      }
      if (dict.running) {
        hist.running_ = tr.b.math.RunningStatistics.fromDict(dict.running);
      }
      if (dict.summaryOptions) {
        if (dict.summaryOptions.iprs) {
          // Range.fromDict() requires isEmpty, which is unnecessarily verbose
          // for this use case.
          dict.summaryOptions.iprs = dict.summaryOptions.iprs.map(
              r => tr.b.math.Range.fromExplicitRange(r[0], r[1]));
        }
        hist.customizeSummaryOptions(dict.summaryOptions);
      }
      if (dict.maxNumSampleValues !== undefined) {
        hist.maxNumSampleValues = dict.maxNumSampleValues;
      }
      if (dict.sampleValues) {
        hist.sampleValues_ = dict.sampleValues;
      }
      if (dict.numNans) {
        hist.numNans = dict.numNans;
      }
      if (dict.nanDiagnostics) {
        for (const map of dict.nanDiagnostics) {
          hist.nanDiagnosticMaps.push(tr.v.d.DiagnosticMap.fromDict(map));
        }
      }
      return hist;
    }

    get numValues() {
      return this.running_ ? this.running_.count : 0;
    }

    get average() {
      return this.running_ ? this.running_.mean : undefined;
    }

    get standardDeviation() {
      return this.running_ ? this.running_.stddev : undefined;
    }

    get geometricMean() {
      return this.running_ ? this.running_.geometricMean : 0;
    }

    get sum() {
      return this.running_ ? this.running_.sum : 0;
    }

    get min() {
      return this.running_ ? this.running_.min : Infinity;
    }

    get max() {
      return this.running_ ? this.running_.max : -Infinity;
    }

    /**
     * Requires that units agree.
     * Returns DONT_CARE if that is the units' improvementDirection.
     * Returns SIGNIFICANT if the Mann-Whitney U test returns a
     * p-value less than opt_alpha or DEFAULT_ALPHA. Returns INSIGNIFICANT if
     * the p-value is greater than alpha.
     *
     * @param {!tr.v.Histogram} other
     * @param {number=} opt_alpha
     * @return {!tr.b.math.Statistics.Significance}
     */
    getDifferenceSignificance(other, opt_alpha) {
      if (this.unit !== other.unit) {
        throw new Error('Cannot compare Histograms with different units');
      }

      if (this.unit.improvementDirection ===
          tr.b.ImprovementDirection.DONT_CARE) {
        return tr.b.math.Statistics.Significance.DONT_CARE;
      }

      if (!(other instanceof Histogram)) {
        throw new Error('Unable to compute a p-value');
      }

      const testResult = tr.b.math.Statistics.mwu(
          this.sampleValues, other.sampleValues, opt_alpha);
      return testResult.significance;
    }

    /*
     * Compute an approximation of percentile based on the counts in the bins.
     * If the real percentile lies within |this.range| then the result of
     * the function will deviate from the real percentile by at most
     * the maximum width of the bin(s) within which the point(s)
     * from which the real percentile would be calculated lie.
     * If the real percentile is outside |this.range| then the function
     * returns the closest range limit: |this.range.min| or |this.range.max|.
     *
     * @param {number} percent The percent must be between 0.0 and 1.0.
     */
    getApproximatePercentile(percent) {
      if (percent < 0 || percent > 1) {
        throw new Error('percent must be in [0,1]');
      }
      if (this.numValues === 0) return undefined;
      if (this.allBins.length === 1) {
        // Copy sampleValues, don't sort them in place, in order to preserve
        // insertion order.
        const sortedSampleValues = this.sampleValues.slice().sort(
            (x, y) => x - y);
        return sortedSampleValues[Math.floor((sortedSampleValues.length - 1) *
            percent)];
      }
      let valuesToSkip = Math.floor((this.numValues - 1) * percent);
      for (const bin of this.allBins) {
        valuesToSkip -= bin.count;
        if (valuesToSkip >= 0) continue;
        if (bin.range.min === -Number.MAX_VALUE) {
          return bin.range.max;
        }
        if (bin.range.max === Number.MAX_VALUE) {
          return bin.range.min;
        }
        return bin.range.center;
      }
      return this.allBins[this.allBins.length - 1].range.min;
    }

    getBinIndexForValue(value) {
      // Don't use subtraction to avoid arithmetic overflow.
      const i = tr.b.findFirstTrueIndexInSortedArray(
          this.allBins, b => value < b.range.max);
      if (0 <= i && i < this.allBins.length) return i;
      return this.allBins.length - 1;
    }

    getBinForValue(value) {
      return this.allBins[this.getBinIndexForValue(value)];
    }

    /**
     * @param {number|*} value
     * @param {(!Object|!tr.v.d.DiagnosticMap)=} opt_diagnostics
     */
    addSample(value, opt_diagnostics) {
      if (opt_diagnostics &&
          !(opt_diagnostics instanceof tr.v.d.DiagnosticMap)) {
        opt_diagnostics = tr.v.d.DiagnosticMap.fromObject(opt_diagnostics);
      }

      if (typeof(value) !== 'number' || isNaN(value)) {
        this.numNans++;
        if (opt_diagnostics) {
          tr.b.math.Statistics.uniformlySampleStream(this.nanDiagnosticMaps,
              this.numNans, opt_diagnostics, MAX_DIAGNOSTIC_MAPS);
        }
      } else {
        if (this.running_ === undefined) {
          this.running_ = new tr.b.math.RunningStatistics();
        }
        this.running_.add(value);

        const binIndex = this.getBinIndexForValue(value);
        let bin = this.allBins[binIndex];
        if (bin.count === 0) {
          // Copy HistogramBin on write, share the rest with the other
          // Histograms that use the same HistogramBinBoundaries.
          bin = new HistogramBin(bin.range);
          this.allBins[binIndex] = bin;
        }
        bin.addSample(value);
        if (opt_diagnostics) {
          bin.addDiagnosticMap(opt_diagnostics);
        }
      }

      tr.b.math.Statistics.uniformlySampleStream(this.sampleValues_,
          this.numValues + this.numNans, value, this.maxNumSampleValues);
    }

    sampleValuesInto(samples) {
      for (const sampleValue of this.sampleValues) {
        samples.push(sampleValue);
      }
    }

    /**
     * Return true if this Histogram can be added to |other|.
     *
     * @param {!tr.v.Histogram} other
     * @return {boolean}
     */
    canAddHistogram(other) {
      if (this.unit !== other.unit) {
        return false;
      }
      if (this.binBoundariesDict_ === other.binBoundariesDict_) {
        return true;
      }
      // |binBoundariesDict_| may be equal even if they are not the same object.
      if (this.binBoundariesDict_.length !== other.binBoundariesDict_.length) {
        return false;
      }
      for (let i = 0; i < this.binBoundariesDict_.length; ++i) {
        const slice = this.binBoundariesDict_[i];
        const otherSlice = other.binBoundariesDict_[i];
        if (slice instanceof Array) {
          if (!(otherSlice instanceof Array)) {
            return false;
          }
          if (slice[0] !== otherSlice[0] ||
              !tr.b.math.approximately(slice[1], otherSlice[1]) ||
              slice[2] !== otherSlice[2]) {
            return false;
          }
        } else {
          if (otherSlice instanceof Array) {
            return false;
          }
          if (!tr.b.math.approximately(slice, otherSlice)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * Add |other| to this Histogram in-place if they can be added.
     *
     * @param {!tr.v.Histogram} other
     */
    addHistogram(other) {
      if (!this.canAddHistogram(other)) {
        throw new Error('Merging incompatible Histograms');
      }

      tr.b.math.Statistics.mergeSampledStreams(this.nanDiagnosticMaps,
          this.numNans, other.nanDiagnosticMaps, other.numNans,
          MAX_DIAGNOSTIC_MAPS);
      tr.b.math.Statistics.mergeSampledStreams(
          this.sampleValues, this.numValues + this.numNans,
          other.sampleValues, other.numValues + other.numNans,
          (this.maxNumSampleValues + other.maxNumSampleValues) / 2);
      this.numNans += other.numNans;

      if (other.running_ !== undefined) {
        if (this.running_ === undefined) {
          this.running_ = new tr.b.math.RunningStatistics();
        }
        this.running_ = this.running_.merge(other.running_);
      }

      for (let i = 0; i < this.allBins.length; ++i) {
        let bin = this.allBins[i];
        if (bin.count === 0) {
          bin = new HistogramBin(bin.range);
          this.allBins[i] = bin;
        }
        bin.addBin(other.allBins[i]);
      }

      let mergedFrom = this.diagnostics.get(tr.v.d.RESERVED_NAMES.MERGED_FROM);
      if (!mergedFrom) {
        mergedFrom = new tr.v.d.RelatedHistogramMap();
        this.diagnostics.set(tr.v.d.RESERVED_NAMES.MERGED_FROM, mergedFrom);
      }
      mergedFrom.set(mergedFrom.length, other);

      let mergedTo = other.diagnostics.get(tr.v.d.RESERVED_NAMES.MERGED_TO);
      if (!mergedTo) {
        mergedTo = new tr.v.d.RelatedHistogramMap();
        other.diagnostics.set(tr.v.d.RESERVED_NAMES.MERGED_TO, mergedTo);
      }
      mergedTo.set(mergedTo.length, this);

      this.diagnostics.addDiagnostics(other.diagnostics);

      for (const [stat, option] of other.summaryOptions) {
        if (stat === 'percentile') {
          const percentiles = this.summaryOptions.get(stat);
          for (const percent of option) {
            if (!percentiles.includes(percent)) percentiles.push(percent);
          }
        } else if (stat === 'iprs') {
          const thisIprs = this.summaryOptions.get(stat);
          for (const ipr of option) {
            let found = false;
            for (const thisIpr of thisIprs) {
              found = ipr.equals(thisIpr);
              if (found) break;
            }
            if (!found) thisIprs.push(ipr);
          }
        } else if (option && !this.summaryOptions.get(stat)) {
          this.summaryOptions.set(stat, true);
        }
      }
    }

    /**
     * Controls which statistics are exported to dashboard for this Histogram.
     * The options not included in the |summaryOptions| will not change.
     *
     * @param {!Object} summaryOptions
     * @param {boolean=} summaryOptions.avg
     * @param {boolean=} summaryOptions.count
     * @param {boolean=} summaryOptions.geometricMean
     * @param {boolean=} summaryOptions.max
     * @param {boolean=} summaryOptions.min
     * @param {boolean=} summaryOptions.nans
     * @param {boolean=} summaryOptions.std
     * @param {boolean=} summaryOptions.sum
     * @param {!Array.<number>=} summaryOptions.percentile Numbers in (0,1)
     * @param {!Array.<!tr.b.Range>=} summaryOptions.iprs Ranges of numbers in
     *     (0,1).
     */
    customizeSummaryOptions(summaryOptions) {
      for (const [key, value] of Object.entries(summaryOptions)) {
        this.summaryOptions.set(key, value);
      }
    }

    /**
     * @param {string} statName
     * @param {!tr.v.Histogram=} opt_referenceHistogram
     * @param {!HypothesisTestResult=} opt_mwu
     * @return {!tr.b.Scalar}
     * @throws {Error} When statName is not recognized, such as delta statistics
     *     when !this.canCompare(opt_referenceHistograms).
     */
    getStatisticScalar(statName, opt_referenceHistogram, opt_mwu) {
      if (statName === 'avg') {
        if (typeof(this.average) !== 'number') return undefined;
        return new tr.b.Scalar(this.unit, this.average);
      }
      if (statName === 'std') {
        if (typeof(this.standardDeviation) !== 'number') return undefined;
        return new tr.b.Scalar(this.unit, this.standardDeviation);
      }
      if (statName === 'geometricMean') {
        if (typeof(this.geometricMean) !== 'number') return undefined;
        return new tr.b.Scalar(this.unit, this.geometricMean);
      }
      if (statName === 'min' || statName === 'max' || statName === 'sum') {
        if (this.running_ === undefined) {
          this.running_ = new tr.b.math.RunningStatistics();
        }
        if (typeof(this.running_[statName]) !== 'number') return undefined;
        return new tr.b.Scalar(this.unit, this.running_[statName]);
      }
      if (statName === 'nans') {
        return new tr.b.Scalar(
            tr.b.Unit.byName.count_smallerIsBetter, this.numNans);
      }
      if (statName === 'count') {
        return new tr.b.Scalar(
            tr.b.Unit.byName.count_smallerIsBetter, this.numValues);
      }
      if (statName.substr(0, 4) === 'pct_') {
        const percent = percentFromString(statName.substr(4));
        if (this.numValues === 0) return undefined;
        const percentile = this.getApproximatePercentile(percent);
        if (typeof(percentile) !== 'number') return undefined;
        return new tr.b.Scalar(this.unit, percentile);
      }
      if (statName.substr(0, 4) === 'ipr_') {
        let lower = percentFromString(statName.substr(4, 3));
        let upper = percentFromString(statName.substr(8));
        if (lower >= upper) {
          throw new Error('Invalid inter-percentile range: ' + statName);
        }
        lower = this.getApproximatePercentile(lower);
        upper = this.getApproximatePercentile(upper);
        const ipr = upper - lower;
        if (typeof(ipr) !== 'number') return undefined;
        return new tr.b.Scalar(this.unit, ipr);
      }

      if (!this.canCompare(opt_referenceHistogram)) {
        throw new Error(
            'Cannot compute ' + statName +
            ' when histograms are not comparable');
      }

      const suffix = tr.b.Unit.nameSuffixForImprovementDirection(
          this.unit.improvementDirection);

      const deltaIndex = statName.indexOf(DELTA);
      if (deltaIndex >= 0) {
        const baseStatName = statName.substr(deltaIndex + 1);
        const thisStat = this.getStatisticScalar(baseStatName);
        const otherStat = opt_referenceHistogram.getStatisticScalar(
            baseStatName);
        const deltaValue = thisStat.value - otherStat.value;

        if (statName[0] === '%') {
          return new tr.b.Scalar(
              tr.b.Unit.byName['normalizedPercentageDelta' + suffix],
              deltaValue / otherStat.value);
        }
        return new tr.b.Scalar(
            thisStat.unit.correspondingDeltaUnit, deltaValue);
      }

      if (statName === Z_SCORE_NAME) {
        return new tr.b.Scalar(
            tr.b.Unit.byName['sigmaDelta' + suffix],
            (this.average - opt_referenceHistogram.average) /
            opt_referenceHistogram.standardDeviation);
      }

      const mwu = opt_mwu || tr.b.math.Statistics.mwu(
          this.sampleValues, opt_referenceHistogram.sampleValues);
      if (statName === P_VALUE_NAME) {
        return new tr.b.Scalar(tr.b.Unit.byName.unitlessNumber, mwu.p);
      }
      if (statName === U_STATISTIC_NAME) {
        return new tr.b.Scalar(tr.b.Unit.byName.unitlessNumber, mwu.U);
      }

      throw new Error('Unrecognized statistic name: ' + statName);
    }

    /**
     * @return {!Array.<string>} names of enabled summary statistics
     */
    get statisticsNames() {
      const statisticsNames = new Set();
      for (const [statName, option] of this.summaryOptions) {
        if (statName === 'percentile') {
          for (const pctile of option) {
            statisticsNames.add('pct_' + tr.v.percentToString(pctile));
          }
        } else if (statName === 'iprs') {
          for (const range of option) {
            statisticsNames.add(
                'ipr_' + tr.v.percentToString(range.min, true) +
                '_' + tr.v.percentToString(range.max, true));
          }
        } else if (option) {
          statisticsNames.add(statName);
        }
      }
      return statisticsNames;
    }

    /**
     * Returns true if delta statistics can be computed between |this| and
     * |other|.
     *
     * @param {!tr.v.Histogram=} other
     * @return {boolean}
     */
    canCompare(other) {
      return other instanceof Histogram &&
          this.unit === other.unit &&
          this.numValues > 0 &&
          other.numValues > 0;
    }

    /**
     * Returns |statName| if it can be computed, or the related non-delta
     * statistic if |statName| is a delta statistic and
     * !this.canCompare(opt_referenceHist).
     *
     * @param {string} statName
     * @param {!tr.v.Histogram=} opt_referenceHist
     * @return {string}
     */
    getAvailableStatisticName(statName, opt_referenceHist) {
      if (this.canCompare(opt_referenceHist)) return statName;
      if (statName === Z_SCORE_NAME ||
          statName === P_VALUE_NAME ||
          statName === U_STATISTIC_NAME) {
        return 'avg';
      }
      const deltaIndex = statName.indexOf(DELTA);
      if (deltaIndex < 0) return statName;
      return statName.substr(deltaIndex + 1);
    }

    /**
     * Returns names of delta statistics versions of given non-delta statistics
     * names.
     *
     * @param {!Array.<string>} statNames
     * @return {!Array.<string>}
     */
    static getDeltaStatisticsNames(statNames) {
      const deltaNames = [];
      for (const statName of statNames) {
        deltaNames.push(`${DELTA}${statName}`);
        deltaNames.push(`%${DELTA}${statName}`);
      }
      return deltaNames.concat([Z_SCORE_NAME, P_VALUE_NAME, U_STATISTIC_NAME]);
    }

    /**
     * Returns a Map {statisticName: Scalar}.
     *
     * Each enabled summary option produces the corresponding value:
     * min, max, count, sum, avg, or std.
     * Each percentile 0.x produces pct_0x0.
     * Each percentile 0.xx produces pct_0xx.
     * Each percentile 0.xxy produces pct_0xx_y.
     * Percentile 1.0 produces pct_100.
     *
     * @return {!Map.<string, Scalar>}
     */
    get statisticsScalars() {
      const results = new Map();
      for (const statName of this.statisticsNames) {
        const scalar = this.getStatisticScalar(statName);
        if (scalar === undefined) continue;
        results.set(statName, scalar);
      }
      return results;
    }

    get sampleValues() {
      return this.sampleValues_;
    }

    /**
     * Create a new Histogram instance that is just like |this| except for its
     * guid. This is useful when merging Histograms.
     * @return {!tr.v.Histogram}
     */
    clone() {
      const binBoundaries = HistogramBinBoundaries.fromDict(
          this.binBoundariesDict_);
      const hist = new Histogram(this.name, this.unit, binBoundaries);
      for (const [stat, option] of this.summaryOptions) {
        // Copy arrays, but not ipr Ranges.
        if (stat === 'percentile' || stat === 'iprs') {
          hist.summaryOptions.set(stat, Array.from(option));
        } else {
          hist.summaryOptions.set(stat, option);
        }
      }
      hist.addHistogram(this);
      return hist;
    }

    /**
     * Produce a Histogram with |this| Histogram's name, unit, description,
     * statistics, summaryOptions, sampleValues, and diagnostics, but with
     * |newBoundaries|.
     * guid and sample diagnostics are not copied. In-bound Relationship
     * diagnostics are broken.
     *
     * @param {!tr.v.HistogramBinBoundaries} newBoundaries
     * @return {!tr.v.Histogram}
     */
    rebin(newBoundaries) {
      const rebinned = new tr.v.Histogram(this.name, this.unit, newBoundaries);
      rebinned.description = this.description;
      for (const sample of this.sampleValues) {
        rebinned.addSample(sample);
      }
      rebinned.running_ = this.running_;
      for (const [name, diagnostic] of this.diagnostics) {
        rebinned.diagnostics.set(name, diagnostic);
      }
      for (const [stat, option] of this.summaryOptions) {
        // Copy the array of percentiles.
        if (stat === 'percentile') {
          rebinned.summaryOptions.set(stat, Array.from(option));
        } else {
          rebinned.summaryOptions.set(stat, option);
        }
      }
      return rebinned;
    }

    asDict() {
      const dict = {};
      dict.name = this.name;
      dict.unit = this.unit.asJSON();
      dict.guid = this.guid;
      if (this.binBoundariesDict_ !== undefined) {
        dict.binBoundaries = this.binBoundariesDict_;
      }
      if (this.shortName) {
        dict.shortName = this.shortName;
      }
      if (this.description) {
        dict.description = this.description;
      }
      if (this.diagnostics.size) {
        dict.diagnostics = this.diagnostics.asDict();
      }
      if (this.maxNumSampleValues !== this.defaultMaxNumSampleValues_) {
        dict.maxNumSampleValues = this.maxNumSampleValues;
      }
      if (this.numNans) {
        dict.numNans = this.numNans;
      }
      if (this.nanDiagnosticMaps.length) {
        dict.nanDiagnostics = this.nanDiagnosticMaps.map(
            dm => dm.asDict());
      }

      if (this.numValues) {
        dict.sampleValues = this.sampleValues.slice();
        dict.running = this.running_.asDict();
        dict.allBins = this.allBinsAsDict_();
      }

      const summaryOptions = {};
      let anyOverriddenSummaryOptions = false;
      for (const [name, value] of this.summaryOptions) {
        let option;
        if (name === 'percentile') {
          if (value.length === 0) continue;
          option = Array.from(value);
        } else if (name === 'iprs') {
          // Use a more compact JSON format than Range supports.
          if (value.length === 0) continue;
          option = value.map(r => [r.min, r.max]);
        } else if (value === DEFAULT_SUMMARY_OPTIONS.get(name)) {
          continue;
        } else {
          option = value;
        }
        summaryOptions[name] = option;
        anyOverriddenSummaryOptions = true;
      }
      if (anyOverriddenSummaryOptions) {
        dict.summaryOptions = summaryOptions;
      }

      return dict;
    }

    allBinsAsDict_() {
      // dict.allBins may be either an array or a dict, whichever is more
      // efficient.
      // The overhead of the array form is significant when the histogram is
      // sparse, and the overhead of the dict form is significant when the
      // histogram is dense.
      // The dict form is more efficient when more than half of allBins are
      // empty. The array form is more efficient when fewer than half of
      // allBins are empty.

      const numBins = this.allBins.length;

      // If allBins are empty, then don't serialize anything for them.
      let emptyBins = 0;

      for (let i = 0; i < numBins; ++i) {
        if (this.allBins[i].count === 0) {
          ++emptyBins;
        }
      }

      if (emptyBins === numBins) {
        return undefined;
      }

      if (emptyBins > (numBins / 2)) {
        const allBinsDict = {};
        for (let i = 0; i < numBins; ++i) {
          const bin = this.allBins[i];
          if (bin.count > 0) {
            allBinsDict[i] = bin.asDict();
          }
        }
        return allBinsDict;
      }

      const allBinsArray = [];
      for (let i = 0; i < numBins; ++i) {
        allBinsArray.push(this.allBins[i].asDict());
      }
      return allBinsArray;
    }

    get defaultMaxNumSampleValues_() {
      // Single-bin histograms might be rebin()ned, so they should retain enough
      // samples that the rebinned histogram looks close enough.
      return DEFAULT_SAMPLE_VALUES_PER_BIN * Math.max(
          this.allBins.length, DEFAULT_REBINNED_COUNT);
    }
  }

  // Some metrics only want to report average. This dictionary is provided to
  // facilitate disabling all other statistics.
  Histogram.AVERAGE_ONLY_SUMMARY_OPTIONS = {
    count: false,
    max: false,
    min: false,
    std: false,
    sum: false,
  };

  const HISTOGRAM_BIN_BOUNDARIES_CACHE = new Map();

  /*
   * Reusable builder for tr.v.Histogram objects.
   *
   * The bins of the Histogram are specified by adding the desired boundaries
   * between bins. Initially, the builder has only a single boundary:
   *
   *           range.min=range.max
   *                    |
   *                    |
   *   -MAX_VALUE <-----|-----------> +MAX_VALUE
   *       :  resulting : resulting       :
   *       :  underflow :  overflow       :
   *       :     bin    :    bin          :
   *
   * If the single boundary is set to either -Number.MAX_VALUE or
   * +Number.MAX_VALUE, then the builder will construct only a single bin:
   *
   *             range.min=range.max
   *                      |
   *                      |
   *   -MAX_VALUE <-> +MAX_VALUE
   *       :   resulting  :
   *       :      bin     :
   *
   * More boundaries can be added (in increasing order) using addBinBoundary,
   * addLinearBins and addExponentialBins:
   *
   *                range.min                           range.max
   *                     |         |         |     |         |
   *                     |         |         |     |         |
   *   -MAX_VALUE <------|---------|---------|-----|---------|------> +MAX_VALUE
   *       :  resulting  : result. : result. :     : result. : resulting  :
   *       :  underflow  : central : central : ... : central :  overflow  :
   *       :     bin     :  bin 0  :  bin 1  :     : bin N-1 :    bin     :
   *
   * An important feature of the builder is that it's reusable, i.e. it can be
   * used to build multiple Histograms with the same bin structure.
   */
  class HistogramBinBoundaries {
    /**
     * Create a linearly scaled tr.v.HistogramBinBoundaries with |numBins| bins
     * ranging from |min| to |max|.
     *
     * @param {number} min
     * @param {number} max
     * @param {number} numBins
     * @return {tr.v.HistogramBinBoundaries}
     */
    static createLinear(min, max, numBins) {
      return new HistogramBinBoundaries(min).addLinearBins(max, numBins);
    }

    /**
     * Create an exponentially scaled tr.v.HistogramBinBoundaries with |numBins|
     * bins ranging from |min| to |max|.
     *
     * @param {number} min
     * @param {number} max
     * @param {number} numBins
     * @return {tr.v.HistogramBinBoundaries}
     */
    static createExponential(min, max, numBins) {
      return new HistogramBinBoundaries(min).addExponentialBins(max, numBins);
    }

    /**
     * @param {Array.<number>} binBoundaries
     */
    static createWithBoundaries(binBoundaries) {
      const builder = new HistogramBinBoundaries(binBoundaries[0]);
      for (const boundary of binBoundaries.slice(1)) {
        builder.addBinBoundary(boundary);
      }
      return builder;
    }

    /**
     * |minBinBoundary| will be the boundary between the underflow bin and the
     * first central bin if other bin boundaries are added.
     * If no other bin boundaries are added, then |minBinBoundary| will be the
     * boundary between the underflow bin and the overflow bin.
     * If no other bin boundaries are added and |minBinBoundary| is either
     * -Number.MAX_VALUE or +Number.MAX_VALUE, then only a single binRange will
     * be built.
     *
     * @param {number} minBinBoundary The minimum boundary between bins.
     */
    constructor(minBinBoundary) {
      this.builder_ = [minBinBoundary];
      this.range_ = new tr.b.math.Range();
      this.range_.addValue(minBinBoundary);
      this.binRanges_ = undefined;
      this.bins_ = undefined;
    }

    get range() {
      return this.range_;
    }

    asDict() {
      if (this.builder_.length === 1 && this.builder_[0] === Number.MAX_VALUE) {
        return undefined;
      }

      // Don't copy builder_ here so that Histogram.canAddHistogram() can test
      // for object identity.
      return this.builder_;
    }

    pushBuilderSlice_(slice) {
      this.builder_.push(slice);
      // Copy builder_ when it's modified so that Histogram.canAddHistogram()
      // can test for object identity.
      this.builder_ = this.builder_.slice();
    }

    static fromDict(dict) {
      if (dict === undefined) {
        return HistogramBinBoundaries.SINGULAR;
      }

      // When loading a results.html with many Histograms with the same bin
      // boundaries, caching the HistogramBinBoundaries not only speeds up
      // loading, but also prevents a bug where buildBinRanges_ is occasionally
      // non-deterministic, which causes similar Histograms to be unmergeable.
      const cacheKey = JSON.stringify(dict);
      if (HISTOGRAM_BIN_BOUNDARIES_CACHE.has(cacheKey)) {
        return HISTOGRAM_BIN_BOUNDARIES_CACHE.get(cacheKey);
      }

      const binBoundaries = new HistogramBinBoundaries(dict[0]);
      for (const slice of dict.slice(1)) {
        if (!(slice instanceof Array)) {
          binBoundaries.addBinBoundary(slice);
          continue;
        }
        switch (slice[0]) {
          case HistogramBinBoundaries.SLICE_TYPE.LINEAR:
            binBoundaries.addLinearBins(slice[1], slice[2]);
            break;

          case HistogramBinBoundaries.SLICE_TYPE.EXPONENTIAL:
            binBoundaries.addExponentialBins(slice[1], slice[2]);
            break;

          default:
            throw new Error('Unrecognized HistogramBinBoundaries slice type');
        }
      }
      HISTOGRAM_BIN_BOUNDARIES_CACHE.set(cacheKey, binBoundaries);
      return binBoundaries;
    }

    get bins() {
      if (this.bins_ === undefined) {
        this.buildBins_();
      }
      return this.bins_;
    }

    buildBins_() {
      this.bins_ = this.binRanges.map(r => new HistogramBin(r));
      // It would be nice to Object.freeze() the bins in order to catch bugs
      // when we forget to copy a bin before writing to it, but that would slow
      // down buildBins_ by 55%: https://jsperf.com/new-vs-new-freeze/1
    }

    /**
     * @return {!Array.<!tr.b.math.Range>}
     */
    get binRanges() {
      if (this.binRanges_ === undefined) {
        this.buildBinRanges_();
      }
      return this.binRanges_;
    }

    buildBinRanges_() {
      if (typeof this.builder_[0] !== 'number') {
        throw new Error('Invalid start of builder_');
      }
      this.binRanges_ = [];
      let prevBoundary = this.builder_[0];

      if (prevBoundary > -Number.MAX_VALUE) {
        // underflow bin
        this.binRanges_.push(tr.b.math.Range.fromExplicitRange(
            -Number.MAX_VALUE, prevBoundary));
      }

      for (const slice of this.builder_.slice(1)) {
        if (!(slice instanceof Array)) {
          this.binRanges_.push(
              tr.b.math.Range.fromExplicitRange(prevBoundary, slice));
          prevBoundary = slice;
          continue;
        }
        const nextMaxBinBoundary = slice[1];
        const binCount = slice[2];
        const sliceMinBinBoundary = prevBoundary;

        switch (slice[0]) {
          case HistogramBinBoundaries.SLICE_TYPE.LINEAR:
            {
              const binWidth = (nextMaxBinBoundary - prevBoundary) / binCount;
              for (let i = 1; i < binCount; i++) {
                const boundary = sliceMinBinBoundary + i * binWidth;
                this.binRanges_.push(tr.b.math.Range.fromExplicitRange(
                    prevBoundary, boundary));
                prevBoundary = boundary;
              }
              break;
            }

          case HistogramBinBoundaries.SLICE_TYPE.EXPONENTIAL:
            {
              const binExponentWidth =
                  Math.log(nextMaxBinBoundary / prevBoundary) / binCount;
              for (let i = 1; i < binCount; i++) {
                const boundary = sliceMinBinBoundary * Math.exp(
                    i * binExponentWidth);
                this.binRanges_.push(tr.b.math.Range.fromExplicitRange(
                    prevBoundary, boundary));
                prevBoundary = boundary;
              }
              break;
            }

          default:
            throw new Error('Unrecognized HistogramBinBoundaries slice type');
        }
        this.binRanges_.push(tr.b.math.Range.fromExplicitRange(
            prevBoundary, nextMaxBinBoundary));
        prevBoundary = nextMaxBinBoundary;
      }
      if (prevBoundary < Number.MAX_VALUE) {
        // overflow bin
        this.binRanges_.push(tr.b.math.Range.fromExplicitRange(
            prevBoundary, Number.MAX_VALUE));
      }
    }

    /**
     * Add a bin boundary |nextMaxBinBoundary| to the builder.
     *
     * This operation effectively corresponds to appending a new central bin
     * with the range [this.range.max, nextMaxBinBoundary].
     *
     * @param {number} nextMaxBinBoundary The added bin boundary (must be
     *     greater than |this.maxMinBoundary|).
     */
    addBinBoundary(nextMaxBinBoundary) {
      if (nextMaxBinBoundary <= this.range.max) {
        throw new Error('The added max bin boundary must be larger than ' +
            'the current max boundary');
      }

      // If binRanges_ had been built, then clear them.
      this.binRanges_ = undefined;
      this.bins_ = undefined;

      this.pushBuilderSlice_(nextMaxBinBoundary);
      this.range.addValue(nextMaxBinBoundary);
      return this;
    }

    /**
     * Add |binCount| linearly scaled bin boundaries up to |nextMaxBinBoundary|
     * to the builder.
     *
     * This operation corresponds to appending |binCount| central bins of
     * constant range width
     * W = ((|nextMaxBinBoundary| - |this.range.max|) / |binCount|)
     * with the following ranges:
     *
     *   [|this.maxMinBoundary|, |this.maxMinBoundary| + W]
     *   [|this.maxMinBoundary| + W, |this.maxMinBoundary| + 2W]
     *   [|this.maxMinBoundary| + 2W, |this.maxMinBoundary| + 3W]
     *   ...
     *   [|this.maxMinBoundary| + (|binCount| - 2) * W,
     *    |this.maxMinBoundary| + (|binCount| - 2) * W]
     *   [|this.maxMinBoundary| + (|binCount| - 1) * W,
     *    |nextMaxBinBoundary|]
     *
     * @param {number} nextBinBoundary The last added bin boundary (must be
     *     greater than |this.maxMinBoundary|).
     * @param {number} binCount Number of bins to be added (must be positive).
     */
    addLinearBins(nextMaxBinBoundary, binCount) {
      if (binCount <= 0) {
        throw new Error('Bin count must be positive');
      }

      if (nextMaxBinBoundary <= this.range.max) {
        throw new Error('The new max bin boundary must be greater than ' +
            'the previous max bin boundary');
      }

      // If binRanges_ had been built, then clear them.
      this.binRanges_ = undefined;
      this.bins_ = undefined;

      this.pushBuilderSlice_([
        HistogramBinBoundaries.SLICE_TYPE.LINEAR,
        nextMaxBinBoundary, binCount]);
      this.range.addValue(nextMaxBinBoundary);
      return this;
    }

    /**
     * Add |binCount| exponentially scaled bin boundaries up to
     * |nextMaxBinBoundary| to the builder.
     *
     * This operation corresponds to appending |binCount| central bins with
     * a constant difference between the logarithms of their range min and max
     * D = ((ln(|nextMaxBinBoundary|) - ln(|this.range.max|)) / |binCount|)
     * with the following ranges:
     *
     *   [|this.maxMinBoundary|, |this.maxMinBoundary| * exp(D)]
     *   [|this.maxMinBoundary| * exp(D), |this.maxMinBoundary| * exp(2D)]
     *   [|this.maxMinBoundary| * exp(2D), |this.maxMinBoundary| * exp(3D)]
     *   ...
     *   [|this.maxMinBoundary| * exp((|binCount| - 2) * D),
     *    |this.maxMinBoundary| * exp((|binCount| - 2) * D)]
     *   [|this.maxMinBoundary| * exp((|binCount| - 1) * D),
     *    |nextMaxBinBoundary|]
     *
     * This method requires that the current max bin boundary is positive.
     *
     * @param {number} nextBinBoundary The last added bin boundary (must be
     *     greater than |this.maxMinBoundary|).
     * @param {number} binCount Number of bins to be added (must be positive).
     */
    addExponentialBins(nextMaxBinBoundary, binCount) {
      if (binCount <= 0) {
        throw new Error('Bin count must be positive');
      }
      if (this.range.max <= 0) {
        throw new Error('Current max bin boundary must be positive');
      }
      if (this.range.max >= nextMaxBinBoundary) {
        throw new Error('The last added max boundary must be greater than ' +
            'the current max boundary boundary');
      }

      // If binRanges_ had been built, then clear them.
      this.binRanges_ = undefined;
      this.bins_ = undefined;

      this.pushBuilderSlice_([
        HistogramBinBoundaries.SLICE_TYPE.EXPONENTIAL,
        nextMaxBinBoundary, binCount]);
      this.range.addValue(nextMaxBinBoundary);
      return this;
    }
  }

  HistogramBinBoundaries.SLICE_TYPE = {
    LINEAR: 0,
    EXPONENTIAL: 1,
  };

  // This special HistogramBinBoundaries instance produces a singe binRange,
  // allowing Histograms to have a single bin.
  // This is the only way for Histograms to have fewer than 2 bins, since
  // HistogramBinBoundaries.buildBinRanges_() ensures that there is always a bin
  // whose min is -Number.MAX_VALUE, and a bin whose max is Number.MAX_VALUE.
  // SINGULAR is the only HistogramBinBoundaries in which those bins are one and
  // the same.
  HistogramBinBoundaries.SINGULAR = new HistogramBinBoundaries(
      Number.MAX_VALUE);

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.timeDurationInMs.unitName,
      HistogramBinBoundaries.createExponential(1e-3, 1e6, 1e2));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.timeStampInMs.unitName,
      HistogramBinBoundaries.createLinear(0, 1e10, 1e3));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.normalizedPercentage.unitName,
      HistogramBinBoundaries.createLinear(0, 1.0, 20));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.sizeInBytes.unitName,
      HistogramBinBoundaries.createExponential(1, 1e12, 1e2));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.energyInJoules.unitName,
      HistogramBinBoundaries.createExponential(1e-3, 1e3, 50));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.powerInWatts.unitName,
      HistogramBinBoundaries.createExponential(1e-3, 1, 50));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.unitlessNumber.unitName,
      HistogramBinBoundaries.createExponential(1e-3, 1e3, 50));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.count.unitName,
      HistogramBinBoundaries.createExponential(1, 1e3, 20));

  DEFAULT_BOUNDARIES_FOR_UNIT.set(
      tr.b.Unit.byName.sigma.unitName,
      HistogramBinBoundaries.createLinear(-5, 5, 50));

  return {
    DEFAULT_REBINNED_COUNT,
    DELTA,
    Histogram,
    HistogramBinBoundaries,
    P_VALUE_NAME,
    U_STATISTIC_NAME,
    Z_SCORE_NAME,
    percentFromString,
    percentToString,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  function accessibilityMetric(histograms, model) {
    const browserAccessibilityEventsHist = new tr.v.Histogram(
        'browser_accessibility_events',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter);
    browserAccessibilityEventsHist.description =
        'Browser accessibility events time';

    const renderAccessibilityEventsHist = new tr.v.Histogram(
        'render_accessibility_events',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter);
    renderAccessibilityEventsHist.description =
        'Render accessibility events time';

    const renderAccessibilityLocationsHist = new tr.v.Histogram(
        'render_accessibility_locations',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter);
    renderAccessibilityLocationsHist.description =
        'Render accessibility locations time';

    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    if (chromeHelper === undefined) return;

    for (const rendererHelper of Object.values(chromeHelper.rendererHelpers)) {
      const mainThread = rendererHelper.mainThread;
      if (mainThread === undefined) continue;

      for (const slice of mainThread.getDescendantEvents()) {
        if (!(slice instanceof tr.model.ThreadSlice)) continue;

        if (slice.title ===
            'RenderAccessibilityImpl::SendPendingAccessibilityEvents') {
          renderAccessibilityEventsHist.addSample(slice.duration,
              {event: new tr.v.d.RelatedEventSet(slice)});
        }
        if (slice.title ===
            'RenderAccessibilityImpl::SendLocationChanges') {
          renderAccessibilityLocationsHist.addSample(slice.duration,
              {event: new tr.v.d.RelatedEventSet(slice)});
        }
      }
    }

    for (const browserHelper of Object.values(chromeHelper.browserHelpers)) {
      const mainThread = browserHelper.mainThread;
      if (mainThread === undefined) continue;

      for (const slice of mainThread.getDescendantEvents()) {
        if (slice.title ===
            'BrowserAccessibilityManager::OnAccessibilityEvents') {
          browserAccessibilityEventsHist.addSample(slice.duration,
              {event: new tr.v.d.RelatedEventSet(slice)});
        }
      }
    }

    histograms.addHistogram(browserAccessibilityEventsHist);
    histograms.addHistogram(renderAccessibilityEventsHist);
    histograms.addHistogram(renderAccessibilityLocationsHist);
  }

  tr.metrics.MetricRegistry.register(accessibilityMetric);

  return {
    accessibilityMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  function androidStartupMetric(histograms, model) {
    const messageLoopStartHistogram = histograms.createHistogram(
        'messageloop_start_time',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, []);
    const chromeHelper =
        model.getOrCreateHelper(tr.model.helpers.ChromeModelHelper);
    if (!chromeHelper) return;
    for (const helper of chromeHelper.browserHelpers) {
      for (const ev of helper.mainThread.asyncSliceGroup.childEvents()) {
        if (ev.title ===
            'Startup.BrowserMessageLoopStartTimeFromMainEntry3') {
          messageLoopStartHistogram.addSample(ev.duration,
              { events: new tr.v.d.RelatedEventSet([ev]) });
        }
      }
    }
  }

  tr.metrics.MetricRegistry.register(androidStartupMetric);

  return {
    androidStartupMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  const MAX_INPUT_EVENT_TO_STARTUP_DELAY_IN_MS = 2000;
  // Post-startup activity draw delay.
  const MIN_DRAW_DELAY_IN_MS = 80;
  const MAX_DRAW_DELAY_IN_MS = 2000;

  function findProcess(processName, model) {
    for (const pid in model.processes) {
      const process = model.processes[pid];
      if (process.name === processName) {
        return process;
      }
    }
    return undefined;
  }

  function findThreads(process, threadPrefix) {
    if (process === undefined) return undefined;
    const threads = [];
    for (const tid in process.threads) {
      const thread = process.threads[tid];
      if (thread.name.startsWith(threadPrefix)) {
        threads.push(thread);
      }
    }
    return threads;
  }

  function findUIThread(process) {
    if (process === undefined) return undefined;
    const threads = findThreads(process, 'UI Thread');
    if (threads !== undefined && threads.length === 1) {
      return threads[0];
    }
    return process.threads[process.pid];
  }

  // Returns slices with actual app's process startup, excluding other delays.
  function findLaunchSlices(model) {
    const launches = [];
    const binders = findThreads(findProcess('system_server', model), 'Binder');
    for (const binderId in binders) {
      const binder = binders[binderId];
      for (const sliceId in binder.asyncSliceGroup.slices) {
        const slice = binder.asyncSliceGroup.slices[sliceId];
        if (slice.title.startsWith('launching:')) {
          launches.push(slice);
        }
      }
    }
    return launches;
  }

  // Try to find draw event when activity just shown.
  function findDrawSlice(appName, startNotBefore, model) {
    let drawSlice = undefined;
    const thread = findUIThread(findProcess(appName, model));
    if (thread === undefined) return undefined;

    for (const sliceId in thread.sliceGroup.slices) {
      const slice = thread.sliceGroup.slices[sliceId];
      if (slice.start < startNotBefore + MIN_DRAW_DELAY_IN_MS ||
          slice.start > startNotBefore + MAX_DRAW_DELAY_IN_MS) continue;
      if (slice.title !== 'draw') continue;
      // TODO(kraynov): Add reportFullyDrawn() support.
      if (drawSlice === undefined || slice.start < drawSlice.start) {
        drawSlice = slice;
      }
    }
    return drawSlice;
  }

  // Try to find input event before a process starts.
  function findInputEventSlice(endNotAfter, model) {
    const endNotBefore = endNotAfter - MAX_INPUT_EVENT_TO_STARTUP_DELAY_IN_MS;
    let inputSlice = undefined;
    const systemUi = findUIThread(findProcess('com.android.systemui', model));
    if (systemUi === undefined) return undefined;

    for (const sliceId in systemUi.asyncSliceGroup.slices) {
      const slice = systemUi.asyncSliceGroup.slices[sliceId];
      if (slice.end > endNotAfter || slice.end < endNotBefore) continue;
      if (slice.title !== 'deliverInputEvent') continue;
      if (inputSlice === undefined || slice.end > inputSlice.end) {
        inputSlice = slice;
      }
    }
    return inputSlice;
  }

  function computeStartupTimeInMs(appName, launchSlice, model) {
    let startupStart = launchSlice.start;
    let startupEnd = launchSlice.end;
    const drawSlice = findDrawSlice(appName, launchSlice.end, model);
    if (drawSlice !== undefined) {
      startupEnd = drawSlice.end;
    }
    const inputSlice = findInputEventSlice(launchSlice.start, model);
    if (inputSlice !== undefined) {
      startupStart = inputSlice.start;
    }
    return startupEnd - startupStart;
  }

  // App startup time metric.
  function measureStartup(histograms, model) {
    const launches = findLaunchSlices(model);
    for (const sliceId in launches) {
      const launchSlice = launches[sliceId];
      const appName = launchSlice.title.split(': ')[1];
      const startupMs = computeStartupTimeInMs(appName, launchSlice, model);
      histograms.createHistogram(`android:systrace:startup:${appName}`,
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, startupMs);
    }
  }

  // Metric which measures time spent by process threads in each thread state.
  // The value of metric is a time percentage relative to the length of selected
  // range of interest.
  function measureThreadStates(histograms, model, rangeOfInterest) {
    for (const pid in model.processes) {
      const process = model.processes[pid];
      if (process.name === undefined) continue;

      let hasSlices = false;
      let timeRunning = 0;
      let timeRunnable = 0;
      let timeSleeping = 0;
      let timeUninterruptible = 0;
      let timeBlockIO = 0;
      let timeUnknown = 0;

      for (const tid in process.threads) {
        const thread = process.threads[tid];
        if (thread.timeSlices === undefined) continue;

        for (const sliceId in thread.timeSlices) {
          const slice = thread.timeSlices[sliceId];
          const sliceRange =
              tr.b.math.Range.fromExplicitRange(slice.start, slice.end);
          const intersection = rangeOfInterest.findIntersection(sliceRange);
          const duration = intersection.duration;
          if (duration === 0) continue;
          hasSlices = true;

          if (slice.title === 'Running') {
            timeRunning += duration;
          } else if (slice.title === 'Runnable') {
            timeRunnable += duration;
          } else if (slice.title === 'Sleeping') {
            timeSleeping += duration;
          } else if (slice.title.startsWith('Uninterruptible')) {
            timeUninterruptible += duration;
            if (slice.title.includes('Block I/O')) timeBlockIO += duration;
          } else {
            timeUnknown += duration;
          }
        }
      }

      if (hasSlices) {
        // For sake of simplicity we don't count wall time for each
        // thread/process and just calculate relative values against selected
        // range of interest.
        const wall = rangeOfInterest.max - rangeOfInterest.min;
        histograms.createHistogram(
            `android:systrace:threadtime:${process.name}:running`,
            tr.b.Unit.byName.normalizedPercentage, timeRunning / wall);
        histograms.createHistogram(
            `android:systrace:threadtime:${process.name}:runnable`,
            tr.b.Unit.byName.normalizedPercentage, timeRunnable / wall);
        histograms.createHistogram(
            `android:systrace:threadtime:${process.name}:sleeping`,
            tr.b.Unit.byName.normalizedPercentage, timeSleeping / wall);
        histograms.createHistogram(
            `android:systrace:threadtime:${process.name}:blockio`,
            tr.b.Unit.byName.normalizedPercentage, timeBlockIO / wall);
        histograms.createHistogram(
            `android:systrace:threadtime:${process.name}:uninterruptible`,
            tr.b.Unit.byName.normalizedPercentage, timeUninterruptible / wall);

        // In case of changing names in systrace and importer.
        if (timeUnknown > 0) {
          histograms.createHistogram(
              `android:systrace:threadtime:${process.name}:unknown`,
              tr.b.Unit.byName.normalizedPercentage, timeUnknown / wall);
        }
      }
    }
  }

  function androidSystraceMetric(histograms, model, options) {
    let rangeOfInterest = model.bounds;
    if (options !== undefined && options.rangeOfInterest !== undefined) {
      rangeOfInterest = options.rangeOfInterest;
    }

    measureStartup(histograms, model);
    measureThreadStates(histograms, model, rangeOfInterest);
  }

  tr.metrics.MetricRegistry.register(androidSystraceMetric, {
    supportsRangeOfInterest: true
  });

  return {
    androidSystraceMetric,
  };
});


'use strict';

tr.exportTo('tr.b.math', function() {
  const PERCENTILE_PRECISION = 1e-7;
  /**
   * A function that consists of linear pieces.
   * See https://en.wikipedia.org/wiki/Piecewise_linear_function.
   * @constructor
   */
  function PiecewiseLinearFunction() {
    this.pieces = [];
  }

  PiecewiseLinearFunction.prototype = {
    /**
     * Push a linear piece defined by linear interpolation between.
     * (x1, y1) and (x2, y2).
     * Pieces must be pushed in the order of increasing x coordinate.
     */
    push(x1, y1, x2, y2) {
      if (x1 >= x2) {
        throw new Error('Invalid segment');
      }
      if (this.pieces.length > 0 &&
          this.pieces[this.pieces.length - 1].x2 > x1) {
        throw new Error('Potentially overlapping segments');
      }
      if (x1 < x2) {
        this.pieces.push(new Piece(x1, y1, x2, y2));
      }
    },

    /**
     *  Returns the size of the set A such that for all x in A: f(x) < y.
     */
    partBelow(y) {
      return this.pieces.reduce((acc, p) => (acc + p.partBelow(y)), 0);
    },

    get min() {
      return this.pieces.reduce((acc, p) => Math.min(acc, p.min), Infinity);
    },

    get max() {
      return this.pieces.reduce((acc, p) => Math.max(acc, p.max), -Infinity);
    },

    get average() {
      let weightedSum = 0;
      let totalWeight = 0;
      this.pieces.forEach(function(piece) {
        weightedSum += piece.width * piece.average;
        totalWeight += piece.width;
      });
      if (totalWeight === 0) return 0;
      return weightedSum / totalWeight;
    },

    /**
    * Returns the minimum possible value y such that the percentage of x points
    * that have f(x) <= y is approximately equal to the given |percent|.
    */
    percentile(percent) {
      if (!(percent >= 0 && percent <= 1)) {
        throw new Error('percent must be [0,1]');
      }
      let lower = this.min;
      let upper = this.max;
      const total = this.partBelow(upper);
      if (total === 0) return 0;
      while (upper - lower > PERCENTILE_PRECISION) {
        const middle = (lower + upper) / 2;
        const below = this.partBelow(middle);
        if (below / total < percent) {
          lower = middle;
        } else {
          upper = middle;
        }
      }
      return (lower + upper) / 2;
    }
  };

  /**
  * A linear segment from (x1, y1) to (x2, y2).
  * @constructor
  */
  function Piece(x1, y1, x2, y2) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
  }

  Piece.prototype = {
    /**
    * The total length of all x points such that f(x) < y.
    * More formally:
    * max(x2 - x1) such that for all x in [x1 .. x2]: f(x) < y.
    */
    partBelow(y) {
      const width = this.width;
      if (width === 0) return 0;
      const minY = this.min;
      const maxY = this.max;
      if (y >= maxY) return width;
      if (y < minY) return 0;
      return (y - minY) / (maxY - minY) * width;
    },

    get min() {
      return Math.min(this.y1, this.y2);
    },

    get max() {
      return Math.max(this.y1, this.y2);
    },

    get average() {
      return (this.y1 + this.y2) / 2;
    },

    get width() {
      return this.x2 - this.x1;
    }
  };

  return {
    PiecewiseLinearFunction,
  };
});


'use strict';

tr.exportTo('tr.e.v8', function() {
  const ThreadSlice = tr.model.ThreadSlice;

  function V8ThreadSlice() {
    ThreadSlice.apply(this, arguments);
    this.runtimeCallStats_ = undefined;
  }

  V8ThreadSlice.prototype = {
    __proto__: ThreadSlice.prototype,

    get runtimeCallStats() {
      if ('runtime-call-stats' in this.args) {
        this.runtimeCallStats_ = this.args['runtime-call-stats'];
        delete this.args['runtime-call-stats'];
      }
      return this.runtimeCallStats_;
    }
  };

  ThreadSlice.subTypes.register(
      V8ThreadSlice,
      {
        categoryParts: ['v8', 'disabled-by-default-v8.runtime_stats'],
        name: 'v8 slice',
        pluralName: 'v8 slices'
      }
  );

  return {
    V8ThreadSlice,
  };
});


'use strict';

tr.exportTo('tr.metrics.v8.utils', function() {
  // The title of the idle task event.
  const IDLE_TASK_EVENT = 'SingleThreadIdleTaskRunner::RunTask';

  // V8 execution event.
  const V8_EXECUTE = 'V8.Execute';

  // GC events start with this prefix.
  const GC_EVENT_PREFIX = 'V8.GC';

  // Special handling is required for full GCs inside low memory notification.
  const FULL_GC_EVENT = 'V8.GCCompactor';

  const LOW_MEMORY_EVENT = 'V8.GCLowMemoryNotification';

  const MAJOR_GC_EVENT = 'MajorGC';
  const MINOR_GC_EVENT = 'MinorGC';

  // Maps the top-level GC events in timeline to telemetry friendly names.
  const TOP_GC_EVENTS = {
    'V8.GCCompactor': 'v8-gc-full-mark-compactor',
    'V8.GCFinalizeMC': 'v8-gc-latency-mark-compactor',
    'V8.GCFinalizeMCReduceMemory': 'v8-gc-memory-mark-compactor',
    'V8.GCIncrementalMarking': 'v8-gc-incremental-step',
    'V8.GCIncrementalMarkingFinalize': 'v8-gc-incremental-finalize',
    'V8.GCIncrementalMarkingStart': 'v8-gc-incremental-start',
    'V8.GCPhantomHandleProcessingCallback': 'v8-gc-phantom-handle-callback',
    'V8.GCScavenger': 'v8-gc-scavenger'
  };

  const LOW_MEMORY_MARK_COMPACTOR = 'v8-gc-low-memory-mark-compactor';

  /**
   * Finds the first parent of the |event| for which the |predicate| holds.
   */
  function findParent(event, predicate) {
    let parent = event.parentSlice;
    while (parent) {
      if (predicate(parent)) {
        return parent;
      }
      parent = parent.parentSlice;
    }
    return null;
  }

  function isIdleTask(event) {
    return event.title === IDLE_TASK_EVENT;
  }

  function isLowMemoryEvent(event) {
    return event.title === LOW_MEMORY_EVENT;
  }

  function isV8Event(event) {
    return event.title.startsWith('V8.');
  }

  function isV8ExecuteEvent(event) {
    return event.title === V8_EXECUTE;
  }

  function isTopV8ExecuteEvent(event) {
    return isV8ExecuteEvent(event) && findParent(isV8ExecuteEvent) === null;
  }

  function isGarbageCollectionEvent(event) {
    // Low memory notification is handled specially because it contains
    // several full mark compact events.
    return event.title && event.title.startsWith(GC_EVENT_PREFIX) &&
           event.title !== LOW_MEMORY_EVENT;
  }

  function isTopGarbageCollectionEvent(event) {
    return event.title in TOP_GC_EVENTS;
  }

  function isForcedGarbageCollectionEvent(event) {
    return findParent(event, isLowMemoryEvent) !== null;
  }

  function isSubGarbageCollectionEvent(event) {
    // To reduce number of results, we return only the first level of GC
    // subevents. Some subevents are nested in MajorGC or MinorGC events, so
    // we have to check for it explicitly.
    return isGarbageCollectionEvent(event) &&
           event.parentSlice &&
           (isTopGarbageCollectionEvent(event.parentSlice) ||
            event.parentSlice.title === MAJOR_GC_EVENT ||
            event.parentSlice.title === MINOR_GC_EVENT);
  }

  function isFullMarkCompactorEvent(event) {
    return event.title === 'V8.GCCompactor';
  }

  function isIncrementalMarkingEvent(event) {
    return event.title.startsWith('V8.GCIncrementalMarking');
  }

  function isLatencyMarkCompactorEvent(event) {
    return event.title === 'V8.GCFinalizeMC';
  }

  function isMemoryMarkCompactorEvent(event) {
    return event.title === 'V8.GCFinalizeMCReduceMemory';
  }

  function isScavengerEvent(event) {
    return event.title === 'V8.GCScavenger';
  }

  function isCompileOptimizeRCSCategory(name) {
    return name === 'Optimize';
  }

  function isCompileUnoptimizeRCSCategory(name) {
    return name === 'Compile';
  }

  function isCompileParseRCSCategory(name) {
    return name === 'Parse';
  }

  function isCompileRCSCategory(name) {
    return name === 'Compile' || name === 'Optimize' || name === 'Parse';
  }

  function isV8RCSEvent(event) {
    return event instanceof tr.e.v8.V8ThreadSlice;
  }

  function topGarbageCollectionEventName(event) {
    if (event.title === FULL_GC_EVENT) {
      // Full mark compact events inside a low memory notification
      // are counted as low memory mark compacts.
      if (findParent(event, isLowMemoryEvent)) {
        return LOW_MEMORY_MARK_COMPACTOR;
      }
    }
    return TOP_GC_EVENTS[event.title];
  }

  function subGarbageCollectionEventName(event) {
    const topEvent = findParent(event, isTopGarbageCollectionEvent);
    const prefix = topEvent ? topGarbageCollectionEventName(topEvent) :
      'unknown';
    // Remove redundant prefixes and convert to lower case.
    const name = event.title.replace('V8.GC_MC_', '')
                          .replace('V8.GC_SCAVENGER_', '')
                          .replace('V8.GC_', '')
                          .replace(/_/g, '-').toLowerCase();
    return prefix + '-' + name;
  }

  /**
   * Filters events using the |filterCallback|, then groups events by the user
   * the name computed using the |nameCallback|, and then invokes
   * the |processCallback| with the grouped events.
   * @param {Function} filterCallback Takes an event and returns a boolean.
   * @param {Function} nameCallback Takes event and returns a string.
   * @param {Function} processCallback Takes a name, and an array of events.
   */
  function groupAndProcessEvents(model, filterCallback,
      nameCallback, processCallback) {
    // Map: name -> [events].
    const nameToEvents = {};
    for (const event of model.getDescendantEvents()) {
      if (!filterCallback(event)) continue;
      const name = nameCallback(event);
      nameToEvents[name] = nameToEvents[name] || [];
      nameToEvents[name].push(event);
    }
    for (const [name, events] of Object.entries(nameToEvents)) {
      processCallback(name, events);
    }
  }

  /**
   * Given a list of intervals, returns a new list with all overalapping
   * intervals merged into a single interval.
   */
  function unionOfIntervals(intervals) {
    if (intervals.length === 0) return [];
    return tr.b.math.mergeRanges(
        intervals.map(x => { return { min: x.start, max: x.end }; }), 1e-6,
        function(ranges) {
          return {
            start: ranges.reduce(
                (acc, x) => Math.min(acc, x.min), ranges[0].min),
            end: ranges.reduce((acc, x) => Math.max(acc, x.max), ranges[0].max)
          };
        }
    );
  }

  function hasV8Stats(globalMemoryDump) {
    let v8stats = undefined;
    globalMemoryDump.iterateContainerDumps(function(dump) {
      v8stats = v8stats || dump.getMemoryAllocatorDumpByFullName('v8');
    });
    return !!v8stats;
  }

  function rangeForMemoryDumps(model) {
    const startOfFirstDumpWithV8 =
        model.globalMemoryDumps.filter(hasV8Stats).reduce(
            (start, dump) => Math.min(start, dump.start), Infinity);
    // Empty range.
    if (startOfFirstDumpWithV8 === Infinity) return new tr.b.math.Range();
    return tr.b.math.Range.fromExplicitRange(startOfFirstDumpWithV8, Infinity);
  }

  return {
    findParent,
    groupAndProcessEvents,
    isForcedGarbageCollectionEvent,
    isFullMarkCompactorEvent,
    isGarbageCollectionEvent,
    isIdleTask,
    isIncrementalMarkingEvent,
    isLatencyMarkCompactorEvent,
    isLowMemoryEvent,
    isMemoryMarkCompactorEvent,
    isScavengerEvent,
    isSubGarbageCollectionEvent,
    isTopGarbageCollectionEvent,
    isTopV8ExecuteEvent,
    isV8Event,
    isV8ExecuteEvent,
    isV8RCSEvent,
    isCompileRCSCategory,
    isCompileOptimizeRCSCategory,
    isCompileUnoptimizeRCSCategory,
    isCompileParseRCSCategory,
    rangeForMemoryDumps,
    subGarbageCollectionEventName,
    topGarbageCollectionEventName,
    unionOfIntervals,
  };
});


'use strict';

tr.exportTo('tr.metrics.blink', function() {
  // Maps the Blink GC events in timeline to telemetry friendly names.
  const BLINK_GC_EVENTS = {
    'BlinkGCMarking': 'blink-gc-marking',
    'ThreadState::completeSweep': 'blink-gc-complete-sweep',
    'ThreadState::performIdleLazySweep': 'blink-gc-idle-lazy-sweep'
  };

  function isBlinkGarbageCollectionEvent(event) {
    return event.title in BLINK_GC_EVENTS;
  }

  function blinkGarbageCollectionEventName(event) {
    return BLINK_GC_EVENTS[event.title];
  }

  function blinkGcMetric(histograms, model) {
    addDurationOfTopEvents(histograms, model);
    addTotalDurationOfTopEvents(histograms, model);
    addIdleTimesOfTopEvents(histograms, model);
    addTotalIdleTimesOfTopEvents(histograms, model);
  }

  tr.metrics.MetricRegistry.register(blinkGcMetric);

  const timeDurationInMs_smallerIsBetter =
      tr.b.Unit.byName.timeDurationInMs_smallerIsBetter;
  const percentage_biggerIsBetter =
      tr.b.Unit.byName.normalizedPercentage_biggerIsBetter;

  // 0.1 steps from 0 to 20 since it is the most common range.
  // Exponentially increasing steps from 20 to 200.
  const CUSTOM_BOUNDARIES = tr.v.HistogramBinBoundaries.createLinear(0, 20, 200)
    .addExponentialBins(200, 100);

  function createNumericForTopEventTime(name) {
    const n = new tr.v.Histogram(name,
        timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    n.customizeSummaryOptions({
      avg: true,
      count: true,
      max: true,
      min: false,
      std: true,
      sum: true,
      percentile: [0.90]});
    return n;
  }

  function createNumericForIdleTime(name) {
    const n = new tr.v.Histogram(name,
        timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    n.customizeSummaryOptions({
      avg: true,
      count: false,
      max: true,
      min: false,
      std: false,
      sum: true,
      percentile: []
    });
    return n;
  }

  function createPercentage(name, numerator, denominator) {
    const histogram = new tr.v.Histogram(name, percentage_biggerIsBetter);
    if (denominator === 0) {
      histogram.addSample(0);
    } else {
      histogram.addSample(numerator / denominator);
    }
    return histogram;
  }

  /**
   * Example output:
   * - blink-gc-marking.
   */
  function addDurationOfTopEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isBlinkGarbageCollectionEvent,
        blinkGarbageCollectionEventName,
        function(name, events) {
          const cpuDuration = createNumericForTopEventTime(name);
          events.forEach(function(event) {
            cpuDuration.addSample(event.cpuDuration);
          });
          histograms.addHistogram(cpuDuration);
        }
    );
  }

  /**
   * Example output:
   * - blink-gc-total
   */
  function addTotalDurationOfTopEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isBlinkGarbageCollectionEvent,
        event => 'blink-gc-total',
        function(name, events) {
          const cpuDuration = createNumericForTopEventTime(name);
          events.forEach(function(event) {
            cpuDuration.addSample(event.cpuDuration);
          });
          histograms.addHistogram(cpuDuration);
        }
    );
  }

  /**
   * Example output:
   * - blink-gc-marking_idle_deadline_overrun,
   * - blink-gc-marking_outside_idle,
   * - blink-gc-marking_percentage_idle.
   */
  function addIdleTimesOfTopEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isBlinkGarbageCollectionEvent,
        blinkGarbageCollectionEventName,
        function(name, events) {
          addIdleTimes(histograms, model, name, events);
        }
    );
  }

  /**
   * Example output:
   * - blink-gc-total_idle_deadline_overrun,
   * - blink-gc-total_outside_idle,
   * - blink-gc-total_percentage_idle.
   */
  function addTotalIdleTimesOfTopEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isBlinkGarbageCollectionEvent,
        event => 'blink-gc-total',
        function(name, events) {
          addIdleTimes(histograms, model, name, events);
        }
    );
  }

  function addIdleTimes(histograms, model, name, events) {
    const cpuDuration = createNumericForIdleTime(name + '_cpu');
    const insideIdle = createNumericForIdleTime(name + '_inside_idle');
    const outsideIdle = createNumericForIdleTime(name + '_outside_idle');
    const idleDeadlineOverrun = createNumericForIdleTime(
        name + '_idle_deadline_overrun');
    events.forEach(function(event) {
      const idleTask = tr.metrics.v8.utils.findParent(
          event, tr.metrics.v8.utils.isIdleTask);
      let inside = 0;
      let overrun = 0;
      if (idleTask) {
        const allottedTime = idleTask.args.allotted_time_ms;
        if (event.duration > allottedTime) {
          overrun = event.duration - allottedTime;
          // Don't count time over the deadline as being inside idle time.
          // Since the deadline should be relative to wall clock we
          // compare allotted_time_ms with wall duration instead of thread
          // duration, and then assume the thread duration was inside idle
          // for the same percentage of time.
          inside = event.cpuDuration * allottedTime / event.duration;
        } else {
          inside = event.cpuDuration;
        }
      }
      cpuDuration.addSample(event.cpuDuration);
      insideIdle.addSample(inside);
      outsideIdle.addSample(event.cpuDuration - inside);
      idleDeadlineOverrun.addSample(overrun);
    });
    histograms.addHistogram(idleDeadlineOverrun);
    histograms.addHistogram(outsideIdle);
    const percentage = createPercentage(
        name + '_percentage_idle', insideIdle.sum, cpuDuration.sum);
    histograms.addHistogram(percentage);
  }

  return {
    blinkGcMetric,
  };
});


'use strict';
tr.exportTo('tr.b', function() {
  /**
   * Generate pretty colors!
   * http://basecase.org/env/on-rainbows
   * https://mycarta.wordpress.com/2012/10/06/the-rainbow-is-deadlong-live-the-rainbow-part-3/
   *
   * Set brightness = 0 to always generate black.
   * Set brightness = 2 to always generate white.
   * Set brightness = 1 to generate saturated colors.
   *
   * @constructor
   * @param {number=} opt_a alpha opacity in [0,1]
   * @param {number=} opt_brightness in [0,2]
   */
  function SinebowColorGenerator(opt_a, opt_brightness) {
    this.a_ = (opt_a === undefined) ? 1 : opt_a;
    this.brightness_ = (opt_brightness === undefined) ? 1 : opt_brightness;
    this.colorIndex_ = 0;
    this.keyToColor = {};
  }

  SinebowColorGenerator.prototype = {
    colorForKey(key) {
      if (!this.keyToColor[key]) {
        this.keyToColor[key] = this.nextColor();
      }
      return this.keyToColor[key];
    },

    nextColor() {
      const components = SinebowColorGenerator.nthColor(this.colorIndex_++);
      return tr.b.Color.fromString(SinebowColorGenerator.calculateColor(
          components[0], components[1], components[2],
          this.a_, this.brightness_));
    }
  };

  SinebowColorGenerator.PHI = (1 + Math.sqrt(5)) / 2;

  SinebowColorGenerator.sinebow_ = function(h) {
    h += 0.5;
    h = -h;
    let r = Math.sin(Math.PI * h);
    let g = Math.sin(Math.PI * (h + 1 / 3));
    let b = Math.sin(Math.PI * (h + 2 / 3));
    r *= r; g *= g; b *= b;
    // Roughly correct for human perception.
    // https://en.wikipedia.org/wiki/Luma_%28video%29
    // Multiply by 2 to normalize all values to 0.5.
    // (Halfway between black and white.)
    const y = 2 * (0.2989 * r + 0.5870 * g + 0.1140 * b);
    r /= y; g /= y; b /= y;
    return [256 * r, 256 * g, 256 * b];
  };

  SinebowColorGenerator.nthColor = function(n) {
    return SinebowColorGenerator.sinebow_(n * this.PHI);
  };

  SinebowColorGenerator.calculateColor = function(r, g, b, a, brightness) {
    if (brightness <= 1) {
      r *= brightness;
      g *= brightness;
      b *= brightness;
    } else {
      r = tr.b.math.lerp(tr.b.math.normalize(brightness, 1, 2), r, 255);
      g = tr.b.math.lerp(tr.b.math.normalize(brightness, 1, 2), g, 255);
      b = tr.b.math.lerp(tr.b.math.normalize(brightness, 1, 2), b, 255);
    }
    r = Math.round(r);
    g = Math.round(g);
    b = Math.round(b);
    return 'rgba(' + r + ',' + g + ',' + b + ', ' + a + ')';
  };

  return {
    SinebowColorGenerator,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  class FixedColorScheme {

    /**
     * @param {!Map} namesToColors
     * @constructor
     */
    constructor(namesToColors) {
      this.namesToColors_ = namesToColors;
    }

    /**
     * Create a color scheme where each name in names gets assigned a fixed
     * color. This color is arbitrary but unique within the color scheme.
     * @param {!Array<string>} names
     * @return {tr.b.FixedColorScheme}
     */
    static fromNames(names) {
      const namesToColors = new Map();
      const generator = new tr.b.SinebowColorGenerator();
      for (const name of names) {
        namesToColors.set(name, generator.colorForKey(name));
      }
      return new FixedColorScheme(namesToColors);
    }

    /**
     * Return color associated with |name|.
     * @param {!string} name
     * @return {tr.b.Color}
     */
    getColor(name) {
      const color = this.namesToColors_.get(name);
      if (color === undefined) throw new Error('Unknown color: ' + name);
      return color;
    }
  }

  const MemoryColumnColorScheme = new FixedColorScheme(new Map([
      ['used_memory_column', new tr.b.Color(0, 0, 255)],
      ['older_used_memory_column', new tr.b.Color(153, 204, 255)],
      ['tracing_memory_column', new tr.b.Color(153, 153, 153)]
  ]));

  function FixedColorSchemeRegistry() {}
  FixedColorSchemeRegistry.lookUp = function(name) {
    const info = this.findTypeInfoMatching(info => info.metadata.name === name);
    if (!info) return undefined;
    return info.constructor();
  };
  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  tr.b.decorateExtensionRegistry(FixedColorSchemeRegistry, options);

  return {
    MemoryColumnColorScheme,
    FixedColorScheme,
    FixedColorSchemeRegistry,
  };
});


'use strict';

tr.exportTo('tr.e.chrome.chrome_processes', function() {
  const CHROME_PROCESS_NAMES = {
    BROWSER: 'browser_process',
    RENDERER: 'renderer_processes', // Intentionally plural.
    ALL: 'all_processes',
    GPU: 'gpu_process',
    PPAPI: 'ppapi_process',
    UNKNOWN: 'unknown_processes',
  };

  const PROCESS_COLOR_SCHEME_NAME = 'ChromeProcessNames';
  const PROCESS_COLOR_SCHEME =
      tr.b.FixedColorScheme.fromNames(Object.values(CHROME_PROCESS_NAMES));

  tr.b.FixedColorSchemeRegistry.register(() => PROCESS_COLOR_SCHEME, {
    name: PROCESS_COLOR_SCHEME_NAME,
  });

  /**
   * Converts name to lower case and replaces spaces with underscores.
   */
  function canonicalizeName(name) {
    return name.toLowerCase().replace(' ', '_');
  }

  /**
   * Convert raw process name to canonical process names used in catapult.
   *
   * Examples:
   * browser  -> CHROME_PROCESS_NAME.BROWSER
   * renderer -> CHROME_PROCESS_NAME.RENDERER
   */
  function canonicalizeProcessName(rawProcessName) {
    if (!rawProcessName) return CHROME_PROCESS_NAMES.UNKNOWN;

    const baseCanonicalName = canonicalizeName(rawProcessName);
    switch (baseCanonicalName) {
      case 'renderer': return CHROME_PROCESS_NAMES.RENDERER;
      case 'browser': return CHROME_PROCESS_NAMES.BROWSER;
    }

    if (Object.values(CHROME_PROCESS_NAMES).includes(baseCanonicalName)) {
      return baseCanonicalName;
    }

    return CHROME_PROCESS_NAMES.UNKNOWN;
  }

  return {
    CHROME_PROCESS_NAMES,
    PROCESS_COLOR_SCHEME,
    PROCESS_COLOR_SCHEME_NAME,
    canonicalizeName,
    canonicalizeProcessName,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  // Returns a weight for this score.
  // score should be a number between 0 and 1 inclusive.
  // This function is expected to be passed to tr.b.math.Statistics.weightedMean
  // as its weightCallback.
  function perceptualBlend(ir, index, score) {
    // Lower scores are exponentially more important than higher scores
    // due to the Peak-end rule.
    // Other than that general rule, there is no specific reasoning behind this
    // specific formula -- it is fairly arbitrary.
    return Math.exp(1 - score);
  }

  function filterExpectationsByRange(irs, opt_range) {
    const filteredExpectations = [];
    irs.forEach(function(ir) {
      if (!(ir instanceof tr.model.um.UserExpectation)) return;

      if (!opt_range ||
          opt_range.intersectsExplicitRangeInclusive(ir.start, ir.end)) {
        filteredExpectations.push(ir);
      }
    });
    return filteredExpectations;
  }

  /**
   * Splits the global memory dumps in |model| by browser name.
   *
   * @param {!tr.Model} model The trace model from which the global dumps
   *     should be extracted.
   * @param {!tr.b.math.Range=} opt_rangeOfInterest If provided, global memory
   *     dumps that do not inclusively intersect the range will be skipped.
   * @return {!Map<string, !Array<!tr.model.GlobalMemoryDump>} A map from
   *     browser names to the associated global memory dumps.
   */
  function splitGlobalDumpsByBrowserName(model, opt_rangeOfInterest) {
    const chromeModelHelper =
        model.getOrCreateHelper(tr.model.helpers.ChromeModelHelper);
    const browserNameToGlobalDumps = new Map();
    const globalDumpToBrowserHelper = new WeakMap();

    // 1. For each browser process in the model, add its global memory dumps to
    // |browserNameToGlobalDumps|. |chromeModelHelper| can be undefined if
    // it fails to find any browser, renderer or GPU process (see
    // tr.model.helpers.ChromeModelHelper.supportsModel).

    if (chromeModelHelper) {
      chromeModelHelper.browserHelpers.forEach(function(helper) {
        // Retrieve the associated global memory dumps and check that they
        // haven't been classified as belonging to another browser process.
        const globalDumps = skipDumpsThatDoNotIntersectRange(
            helper.process.memoryDumps.map(d => d.globalMemoryDump),
            opt_rangeOfInterest);
        globalDumps.forEach(function(globalDump) {
          const existingHelper = globalDumpToBrowserHelper.get(globalDump);
          if (existingHelper !== undefined) {
            throw new Error('Memory dump ID clash across multiple browsers ' +
                'with PIDs: ' + existingHelper.pid + ' and ' + helper.pid);
          }
          globalDumpToBrowserHelper.set(globalDump, helper);
        });

        makeKeyUniqueAndSet(browserNameToGlobalDumps,
            tr.e.chrome.chrome_processes.canonicalizeName(helper.browserName),
            globalDumps);
      });
    }

    // 2. If any global memory dump does not have any associated browser
    // process for some reason, associate it with an 'unknown_browser' browser
    // so that we don't lose the data.

    const unclassifiedGlobalDumps = skipDumpsThatDoNotIntersectRange(
        model.globalMemoryDumps.filter(g => !globalDumpToBrowserHelper.has(g)),
        opt_rangeOfInterest);
    if (unclassifiedGlobalDumps.length > 0) {
      makeKeyUniqueAndSet(
          browserNameToGlobalDumps, 'unknown_browser', unclassifiedGlobalDumps);
    }

    return browserNameToGlobalDumps;
  }

  /**
   * Function for adding entries with duplicate keys to a map without
   * overriding existing entries.
   *
   * This is achieved by appending numeric indices (2, 3, 4, ...) to duplicate
   * keys. Example:
   *
   *   const map = new Map();
   *   // map = Map {}.
   *
   *   makeKeyUniqueAndSet(map, 'key', 'a');
   *   // map = Map {"key" => "a"}.
   *
   *   makeKeyUniqueAndSet(map, 'key', 'b');
   *   // map = Map {"key" => "a", "key2" => "b"}.
   *                                ^^^^
   *   makeKeyUniqueAndSet(map, 'key', 'c');
   *   // map = Map {"key" => "a", "key2" => "b", "key3" => "c"}.
   *                                ^^^^           ^^^^
   */
  function makeKeyUniqueAndSet(map, key, value) {
    let uniqueKey = key;
    let nextIndex = 2;
    while (map.has(uniqueKey)) {
      uniqueKey = key + nextIndex;
      nextIndex++;
    }
    map.set(uniqueKey, value);
  }

  function skipDumpsThatDoNotIntersectRange(dumps, opt_range) {
    if (!opt_range) return dumps;
    return dumps.filter(d => opt_range.intersectsExplicitRangeInclusive(
        d.start, d.end));
  }

  /**
   * Returns true if |category| is one of the categories of |event|, and |event|
   * has title |title|.
   *
   * TODO(dproy): Make this a method on a suitable parent class of the
   * event/slice classes that are used with this function.
   */
  function hasCategoryAndName(event, category, title) {
    return event.title === title && event.category &&
        tr.b.getCategoryParts(event.category).includes(category);
  }

  return {
    hasCategoryAndName,
    filterExpectationsByRange,
    perceptualBlend,
    splitGlobalDumpsByBrowserName
  };
});


'use strict';

tr.exportTo('tr.metrics.blink', function() {
  function leakDetectionMetric(histograms, model) {
    // Extract renderer pids.
    const modelHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    if (modelHelper === undefined) {
      throw new Error('Chrome is not present.');
    }
    const rendererHelpers = modelHelper.rendererHelpers;
    if (Object.keys(rendererHelpers).length === 0) {
      throw new Error('Renderer process is not present.');
    }
    const pids = Object.keys(rendererHelpers);

    // Get the dumps.
    const chromeDumps = tr.metrics.sh
      .splitGlobalDumpsByBrowserName(model, undefined).get('chrome');

    const sumCounter = new Map();
    // Add up counters for all the renderer processes.

    for (const pid of pids) {
      for (const [key, count] of countLeakedBlinkObjects(chromeDumps, pid)) {
        sumCounter.set(key, (sumCounter.get(key) || 0) + count);
      }
    }

    for (const [key, count] of sumCounter) {
      histograms.createHistogram('Leaked ' + key,
          tr.b.Unit.byName.count_smallerIsBetter, count);
    }

    for (const [key, count] of sumCounter) {
      if (count > 0) {
        throw new Error('Memory leak is found.');
      }
    }
  }

  tr.metrics.MetricRegistry.register(leakDetectionMetric);

  function countLeakedBlinkObjects(dumps, pid) {
    if (dumps === undefined || dumps.length < 2) {
      throw new Error('Expected at least two memory dumps.');
    }
    const firstCounter = countBlinkObjects(dumps[0], pid);
    const lastCounter = countBlinkObjects(dumps[dumps.length - 1], pid);
    const diffCounter = new Map();
    for (const [key, lastCount] of lastCounter) {
      diffCounter.set(key, lastCount - firstCounter.get(key));
    }
    return diffCounter;
  }

  function countBlinkObjects(dump, pid) {
    const counter = new Map();
    const processesMemoryDumps = dump.processMemoryDumps;
    if (processesMemoryDumps[pid] === undefined) return counter;
    const blinkObjectsDump = processesMemoryDumps[pid].memoryAllocatorDumps
      .find(dump => dump.fullName === 'blink_objects');
    for (const v of blinkObjectsDump.children) {
      counter.set(v.name, v.numerics.object_count.value);
    }
    return counter;
  }

  return {
    leakDetectionMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  function getCpuSnapshotsFromModel(model) {
    const snapshots = [];
    for (const pid in model.processes) {
      const snapshotInstances =
        model.processes[pid].objects.getAllInstancesNamed('CPUSnapshots');
      if (!snapshotInstances) continue;

      for (const object of snapshotInstances[0].snapshots) {
        snapshots.push(object.args.processes);
      }
    }
    return snapshots;
  }

  function getProcessSumsFromSnapshot(snapshot) {
    const processSums = new Map();
    for (const processData of snapshot) {
      const processName = processData.name;
      if (!(processSums.has(processName))) {
        processSums.set(processName, {sum: 0.0, paths: new Set()});
      }
      processSums.get(processName).sum += parseFloat(processData.pCpu);
      // The process path may be missing on Windows because of AccessDenied
      // error thrown by psutil package used by CPU tracing agent.
      if (processData.path) {
        processSums.get(processName).paths.add(processData.path);
      }
    }
    return processSums;
  }

  function buildNumericsFromSnapshots(snapshots) {
    const processNumerics = new Map();
    for (const snapshot of snapshots) {
      const processSums = getProcessSumsFromSnapshot(snapshot);
      for (const [processName, processData] of processSums.entries()) {
        if (!(processNumerics.has(processName))) {
          processNumerics.set(processName, {
            numeric: new tr.v.Histogram('cpu:percent:' + processName,
             tr.b.Unit.byName.normalizedPercentage_smallerIsBetter),
            paths: new Set()
          });
        }
        processNumerics.get(processName).numeric.addSample(
            processData.sum / 100.0);
        for (const path of processData.paths) {
          processNumerics.get(processName).paths.add(path);
        }
      }
    }
    return processNumerics;
  }

  function cpuProcessMetric(histograms, model) {
    const snapshots = getCpuSnapshotsFromModel(model);
    const processNumerics = buildNumericsFromSnapshots(snapshots);
    for (const [processName, processData] of processNumerics) {
      const numeric = processData.numeric;
      // Treat missing snapshots as zeros. A process is missing from a snapshots
      // when its CPU usage was below minimum threshold when the snapshot was
      // taken.
      const missingSnapshotCount = snapshots.length - numeric.numValues;
      for (let i = 0; i < missingSnapshotCount; i++) {
        numeric.addSample(0);
      }
      numeric.diagnostics.set('paths', new
          tr.v.d.GenericSet([...processData.paths]));
      histograms.addHistogram(numeric);
    }
  }

  tr.metrics.MetricRegistry.register(cpuProcessMetric);

  return {
    cpuProcessMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  function mediaMetric(histograms, model) {
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    if (chromeHelper === undefined) return;

    for (const rendererHelper of Object.values(chromeHelper.rendererHelpers)) {
      // Find the threads we're interested in, and if a needed thread
      // is missing, no need to look further in this process.
      const mainThread = rendererHelper.mainThread;
      if (mainThread === undefined) continue;

      const compositorThread = rendererHelper.compositorThread;
      const audioThreads =
        rendererHelper.process.findAllThreadsNamed('AudioOutputDevice');
      if (compositorThread === undefined && audioThreads.length === 0) continue;

      const processData = new PerProcessData();

      processData.recordPlayStarts(mainThread);
      if (!processData.hasPlaybacks) continue;

      if (compositorThread !== undefined) {
        processData.calculateTimeToVideoPlays(compositorThread);
        processData.calculateDroppedFrameCounts(compositorThread);
      }

      if (audioThreads.length !== 0) {
        processData.calculateTimeToAudioPlays(audioThreads);
      }

      processData.calculateSeekTimes(mainThread);
      processData.calculateBufferingTimes(mainThread);

      processData.addMetricToHistograms(histograms);
    }
  }

  // PerProcessData manages all metric values associated with a renderer
  // process. The process can have multiple media playbacks.
  class PerProcessData {
    constructor() {
      // All the perf data we collect for a process are stored in a Map.
      // Each key of the map is an ID of a media playback, and the value
      // associated with each key is a PerPlaybackData object containing
      // all the perf data for that playback.
      this.playbackIdToDataMap_ = new Map();
    }

    recordPlayStarts(mainThread) {
      for (const event of mainThread.sliceGroup.getDescendantEvents()) {
        if (event.title === 'WebMediaPlayerImpl::DoLoad') {
          const id = event.args.id;
          if (this.playbackIdToDataMap_.has(id)) {
            throw new Error(
                'Unexpected multiple initialization of a media playback');
          }
          this.playbackIdToDataMap_.set(id, new PerPlaybackData(event.start));
        }
      }
    }

    get hasPlaybacks() {
      return this.playbackIdToDataMap_.size > 0;
    }

    calculateTimeToVideoPlays(compositorThread) {
      for (const event of compositorThread.sliceGroup.getDescendantEvents()) {
        if (event.title === 'VideoRendererImpl::Render') {
          this.getPerPlaybackObject_(event.args.id)
              .processVideoRenderTime(event.start);
        }
      }
    }

    calculateTimeToAudioPlays(audioThreads) {
      for (const audioThread of audioThreads) {
        for (const event of audioThread.sliceGroup.getDescendantEvents()) {
          if (event.title === 'AudioRendererImpl::Render') {
            this.getPerPlaybackObject_(event.args.id)
                .processAudioRenderTime(event.start);
          }
        }
      }
    }

    calculateSeekTimes(mainThread) {
      for (const event of mainThread.sliceGroup.getDescendantEvents()) {
        if (event.title === 'WebMediaPlayerImpl::DoSeek') {
          this.getPerPlaybackObject_(event.args.id)
              .processDoSeek(event.args.target, event.start);
        } else if (event.title === 'WebMediaPlayerImpl::OnPipelineSeeked') {
          this.getPerPlaybackObject_(event.args.id)
              .processOnPipelineSeeked(event.args.target, event.start);
        } else if (event.title === 'WebMediaPlayerImpl::BufferingHaveEnough') {
          this.getPerPlaybackObject_(event.args.id)
              .processBufferingHaveEnough(event.start);
        }
      }
    }

    calculateBufferingTimes(mainThread) {
      for (const event of mainThread.sliceGroup.getDescendantEvents()) {
        if (event.title === 'WebMediaPlayerImpl::OnEnded') {
          this.getPerPlaybackObject_(event.args.id)
              .processOnEnded(event.start, event.args.duration);
        }
      }
    }

    calculateDroppedFrameCounts(compositorThread) {
      for (const event of compositorThread.sliceGroup.getDescendantEvents()) {
        if (event.title === 'VideoFramesDropped') {
          this.getPerPlaybackObject_(event.args.id)
              .processVideoFramesDropped(event.args.count);
        }
      }
    }

    addMetricToHistograms(histograms) {
      for (const [id, playbackData] of this.playbackIdToDataMap_) {
        playbackData.addMetricToHistograms(histograms);
      }
    }

    // @private
    getPerPlaybackObject_(playbackId) {
      let perPlaybackObject = this.playbackIdToDataMap_.get(playbackId);
      if (perPlaybackObject === undefined) {
        // The trace isn't complete, and didn't contain the DoLoad event for
        // this playback. Create a new PerPlaybackData object for this playback.
        perPlaybackObject = new PerPlaybackData(undefined);
        this.playbackIdToDataMap_.set(playbackId, perPlaybackObject);
      }
      return perPlaybackObject;
    }
  }

  // PerPlaybackData contains all metric values associated with a single
  // media playback.
  class PerPlaybackData {
    constructor(playStartTime) {
      this.playStart_ = playStartTime;
      this.timeToVideoPlay_ = undefined;
      this.timeToAudioPlay_ = undefined;
      this.bufferingTime_ = undefined;
      this.droppedFrameCount_ = 0;
      this.seekError_ = false;
      this.seekTimes_ = new Map();
      this.currentSeek_ = undefined;
    }

    // API methods for retrieving metric values. Each method returns undefined
    // if no value is available (e.g., timeToVideoPlay() returns undefined for
    // an audio-only playback).

    // Returns how long after a video is requested to start playing before
    // the video actually starts. If time_to_video_play regresses, then users
    // will click to play videos and then have to wait longer before the videos
    // start actually playing.
    get timeToVideoPlay() {
      return this.timeToVideoPlay_;
    }

    // Similar to timeToVideoPlay, but measures the time delay before audio
    // starts playing.
    get timeToAudioPlay() {
      return this.timeToAudioPlay_;
    }

    // Returns the difference between the actual play time of media vs its
    // expected play time. Ideally the two should be the same. If actual play
    // time is significantly longer than expected play time, it indicates that
    // there were stalls during the play for buffering or some other reasons.
    // Current limitation: Buffering time isn't calculated if seek occurred
    // during playback, and it gives incorrect value if the playback isn't
    // from beginning to end without pauses.
    get bufferingTime() {
      return this.bufferingTime_;
    }

    // Reports the number of video frames that were dropped. Ideally this
    // should be 0. If a large number of frames are dropped, the video playback
    // will not be smooth.
    get droppedFrameCount() {
      // We should report dropped frame count as long as video was played.
      return (this.timeToVideoPlay_ !== undefined) ?
        this.droppedFrameCount_ : undefined;
    }

    // Returns a Map containing seek times. The keys of the map are numerical
    // values indicating the target location of the seek, in unit of seconds.
    // The values of the map are objects with the following public properties:
    // * pipelineSeekTime: amount of time taken by media pipeline to process
    //   this seek operation, from when the seek request is received, to when
    //   the pipeline starts processing at the new location, in milliseconds.
    // * seekTime: how long after a user requests a seek operation before the
    //   seek completes and the media starts playing at the new location, as
    //   perceived by the user, in milliseconds.
    get seekTimes() {
      if (this.seekError_ || this.currentSeek_ !== undefined) return new Map();
      return this.seekTimes_;
    }

    // API methods for processing data from trace events.

    processVideoRenderTime(videoRenderTime) {
      // Each video playback can generate multiple Render events, one for
      // each frame. For calculating time to video play, we only use the
      // first Render event.
      if (this.playStart_ !== undefined &&
          this.timeToVideoPlay_ === undefined) {
        this.timeToVideoPlay_ = videoRenderTime - this.playStart_;
      }
    }

    processAudioRenderTime(audioRenderTime) {
      if (this.playStart_ !== undefined &&
          this.timeToAudioPlay_ === undefined) {
        this.timeToAudioPlay_ = audioRenderTime - this.playStart_;
      }
    }

    processVideoFramesDropped(count) {
      this.droppedFrameCount_ += count;
    }

    // We support multiple seeks per element, as long as they seek to different
    // target time. Thus the seek times are stored in a Map instead of a scalar
    // property. The key of the map is event.args.target, which is a numerical
    // value indicating the target location of the seek, in unit of seconds.
    // For example, with a seek to 5 seconds mark, event.args.target === 5.
    // The value of the map is an object with 4 properties (the first two are
    // added during object creation, the latter two are added as the data
    // become available):
    // * target: seek target time (same as the map key)
    // * startTime: timestamp of the event marking start of seek
    // * pipelineSeekTime: amount of time taken by media pipeline to process
    //   this seek (milliseconds)
    // * seekTime: amount of seek time perceived by the user (milliseconds)
    // If any unexpected conditions occur, we stop processing and set an error
    // flag this.seekError_.
    // TODO(https://github.com/catapult-project/catapult/issues/3976):
    // Emit detailed warnings.
    processDoSeek(target, startTime) {
      // currentSeek_ refers to the object associated with the
      // seek that is currently being processed for this media element.
      // It is used to match seek end events against seek start events.
      if (this.currentSeek_ !== undefined) {
        // TODO(https://github.com/catapult-project/catapult/issues/3976):
        // Warning 'Overlapping seek not supported'.
        this.seekError_ = true;
        return;
      }
      this.currentSeek_ = { target, startTime };
      this.seekTimes_.set(target, this.currentSeek_);
    }

    processOnPipelineSeeked(target, time) {
      if (this.seekError_) return;
      const currentSeek = this.currentSeek_;
      if (currentSeek === undefined) {
        // OK to have this event when there is no active seek, as this event
        // can be generated for other reasons, e.g., initial loading of media
        // generates this event with target of 0 seconds.
        return;
      }
      if (currentSeek.target !== target) {
        // TODO(https://github.com/catapult-project/catapult/issues/3976):
        // Warning 'WebMediaPlayerImpl::OnPipelineSeeked to unexpected target'.
        this.seekError_ = true;
        return;
      }
      if (currentSeek.pipelineSeekTime !== undefined) {
        // TODO(https://github.com/catapult-project/catapult/issues/3976):
        // Warning 'Multiple WebMediaPlayerImpl::OnPipelineSeeked events'.
        this.seekError_ = true;
        return;
      }
      currentSeek.pipelineSeekTime = time - currentSeek.startTime;
    }

    processBufferingHaveEnough(time) {
      if (this.seekError_) return;
      const currentSeek = this.currentSeek_;
      if (currentSeek === undefined) {
        // No current seek means this event is generated by non-seek related
        // events, e.g., initial loading of media.
        return;
      }
      if (currentSeek.pipelineSeekTime === undefined) {
        // Since we haven't seen WebMediaPlayerImpl::OnPipelineSeeked event
        // event yet, this event is triggered by something else, e.g., a
        // have_nothing->have_enough cycle due to underflow from decoders.
        return;
      }
      currentSeek.seekTime = time - currentSeek.startTime;
      // Finished processing current seek.
      this.currentSeek_ = undefined;
    }

    processOnEnded(playEndTime, duration) {
      if (this.playStart_ === undefined) return;
      // Can't calculate buffering time if there were any seeks.
      if (this.seekTimes_.size !== 0 || this.seekError_) return;
      // Play was resumed after it ended previously.
      if (this.bufferingTime_ !== undefined) return;
      // Convert duration from seconds to milliseconds.
      duration = tr.b.convertUnit(duration, tr.b.UnitPrefixScale.METRIC.NONE,
          tr.b.UnitPrefixScale.METRIC.MILLI);
      const playTime = playEndTime - this.playStart_;
      if (this.timeToVideoPlay_ !== undefined) {
        this.bufferingTime_ = playTime - duration - this.timeToVideoPlay_;
      } else if (this.timeToAudioPlay !== undefined) {
        this.bufferingTime_ = playTime - duration - this.timeToAudioPlay_;
      }
    }

    addMetricToHistograms(histograms) {
      this.addSample_(histograms, 'time_to_video_play',
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
          this.timeToVideoPlay);
      this.addSample_(histograms, 'time_to_audio_play',
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
          this.timeToAudioPlay);
      this.addSample_(histograms, 'dropped_frame_count',
          tr.b.Unit.byName.count_smallerIsBetter,
          this.droppedFrameCount);
      for (const [key, value] of this.seekTimes.entries()) {
        // key is a numerical value that can have '.' when converted to
        // string. However, '.' causes problems in histogram names, so
        // replace with '_'.
        const keyString = key.toString().replace('.', '_');
        this.addSample_(histograms, 'pipeline_seek_time_' + keyString,
            tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
            value.pipelineSeekTime);
        this.addSample_(histograms, 'seek_time_' + keyString,
            tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
            value.seekTime);
      }
      this.addSample_(histograms, 'buffering_time',
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
          this.bufferingTime);
    }

    // @private
    addSample_(histograms, name, unit, sample) {
      if (sample === undefined) return;
      const histogram = histograms.getHistogramNamed(name);
      if (histogram === undefined) {
        histograms.createHistogram(name, unit, sample);
      } else {
        histogram.addSample(sample);
      }
    }
  }

  tr.metrics.MetricRegistry.register(mediaMetric);

  return {
    mediaMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  function sampleExceptionMetric(histograms, model) {
    const hist = new tr.v.Histogram(
        'foo', tr.b.Unit.byName.sizeInBytes_smallerIsBetter);
    hist.addSample(9);
    hist.addSample(91, {bar: new tr.v.d.GenericSet([{hello: 42}])});

    for (const expectation of model.userModel.expectations) {
      if (expectation instanceof tr.model.um.ResponseExpectation) {
      } else if (expectation instanceof tr.model.um.AnimationExpectation) {
      } else if (expectation instanceof tr.model.um.IdleExpectation) {
      } else if (expectation instanceof tr.model.um.LoadExpectation) {
      }
    }

    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);

    for (const [pid, process] of Object.entries(model.processes)) {
    }

    histograms.addHistogram(hist);
    throw new Error('There was an error');
  }

  tr.metrics.MetricRegistry.register(sampleExceptionMetric);

  return {
    sampleExceptionMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  function sampleMetric(histograms, model) {
    const hist = new tr.v.Histogram(
        'foo', tr.b.Unit.byName.sizeInBytes_smallerIsBetter);
    hist.addSample(9);
    hist.addSample(91, {bar: new tr.v.d.GenericSet([{hello: 42}])});

    for (const expectation of model.userModel.expectations) {
      if (expectation instanceof tr.model.um.ResponseExpectation) {
      } else if (expectation instanceof tr.model.um.AnimationExpectation) {
      } else if (expectation instanceof tr.model.um.IdleExpectation) {
      } else if (expectation instanceof tr.model.um.LoadExpectation) {
      }
    }

    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);

    for (const [pid, process] of Object.entries(model.processes)) {
    }

    histograms.addHistogram(hist);
  }

  tr.metrics.MetricRegistry.register(sampleMetric);

  return {
    sampleMetric,
  };
});


'use strict';

/**
 * @fileoverview This file contains helper functions to identify
 * FrameLoader::updateForSameDocumentNavigation events on all renderer
 * processes and find their preceding navigation start events.
 *_______________________________________________________________
 * browser:     InputLatency/NavigationControllerImpl::GoToIndex |
 *----------------------------------------
 * renderer:       LatencyInfo.Flow
 *                  WebViewImpl::handleInputEvent
 *                          FrameLoader::updateForSameDocumentNavigation
 *----------------------------------------------------
 * FrameLoader::updateForSameDocumentNavigation is called when SPA
 * in-app navigation occurs.
 * For details about how SPA in-app navigation is defined and
 * how it is found based on FrameLoader::updateForSameDocumentNavigation,
 * read the doc: https://goo.gl/1I3tqd.
 */
tr.exportTo('tr.metrics', function() {
  const HANDLE_INPUT_EVENT_TITLE = 'WebViewImpl::handleInputEvent';

  /**
   * @returns {Map.<tr.model.Slice, tr.model.Slice>} A map of the
   * elements in eventsB which immediately precede events in eventsA.
   * For instance:
   * eventsA:     A1   A2   A3   A4
   * eventsB: B1 B2  B3   B4   B5
   *  output: {A1: B2, A2: B3, A3: B4, A4: B5}
   * or
   * eventsA:     A1   A2   A3   A4
   * eventsB: B1
   *  output: {A1: B1, A2: B1, A3: B1, A4: B1}
   */
  function findPrecedingEvents_(eventsA, eventsB) {
    const events = new Map();
    let eventsBIndex = 0;
    for (const eventA of eventsA) {
      for (; eventsBIndex < eventsB.length; eventsBIndex++) {
        if (eventsB[eventsBIndex].start > eventA.start) break;
      }
      // If statement prevents the situation when eventsB is empty.
      if (eventsBIndex > 0) {
        events.set(eventA, eventsB[eventsBIndex - 1]);
      }
    }
    return events;
  }

  /**
   * @returns {Map.<tr.model.Slice, tr.model.Slice>} A map of
   * the elements in eventsB which immediately follow events
   * in eventsA.
   * For instance:
   * eventsA:  A1   A2   A3   A4
   * eventsB: B1  B2   B3  B4   B5
   *  output: {A1:B2, A2:B3, A3:B4, A4:B5}
   * or
   * eventsA:  A1   A2   A3   A4
   * eventsB:                B1
   *  output: {A1:B1, A2:B1, A3:B1}
   */
  function findFollowingEvents_(eventsA, eventsB) {
    const events = new Map();
    let eventsBIndex = 0;
    for (const eventA of eventsA) {
      for (; eventsBIndex < eventsB.length; eventsBIndex++) {
        if (eventsB[eventsBIndex].start >= eventA.start) break;
      }
      // If statement prevents the situation when eventsB is empty
      // and when it reaches the end of loop.
      if (eventsBIndex >= 0 && eventsBIndex < eventsB.length) {
        events.set(eventA, eventsB[eventsBIndex]);
      }
    }
    return events;
  }

  /**
   * @return {Array.<tr.model.Slice>} An array of events that may
   * be qualified as a SPA navigation start candidate such as
   * WebViewImpl::handleInputEvent and NavigationControllerImpl::GoToIndex.
   */
  function getSpaNavigationStartCandidates_(rendererHelper, browserHelper) {
    const isNavStartEvent = e => {
      if (e.title === HANDLE_INPUT_EVENT_TITLE && e.args.type === 'MouseUp') {
        return true;
      }
      return e.title === 'NavigationControllerImpl::GoToIndex';
    };

    return [
      ...rendererHelper.mainThread.sliceGroup.getDescendantEvents(),
      ...browserHelper.mainThread.sliceGroup.getDescendantEvents()
    ].filter(isNavStartEvent);
  }

  /**
   * @return {Array.<tr.model.Slice>} An array of SPA navigation events.
   * A SPA navigation event indicates the happening of a SPA navigation.
   */
  function getSpaNavigationEvents_(rendererHelper) {
    const isNavEvent = e => e.category === 'blink' &&
        e.title === 'FrameLoader::updateForSameDocumentNavigation';

    return [...rendererHelper.mainThread.sliceGroup.getDescendantEvents()]
        .filter(isNavEvent);
  }

  /**
   * @return {Array.<tr.model.AsyncSlice>} An array of InputLatency events from
   * the browser main thread.
   */
  function getInputLatencyEvents_(browserHelper) {
    const isInputLatencyEvent = e => e.title === 'InputLatency::MouseUp';

    return browserHelper.getAllAsyncSlicesMatching(isInputLatencyEvent);
  }

  /**
   * @return {Map.<number, tr.model.Slice>} A mapping of trace_id value
   * in each InputLatency event to the respective InputLatency event itself.
   */
  function getInputLatencyEventByBindIdMap_(browserHelper) {
    const inputLatencyEventByBindIdMap = new Map();
    for (const event of getInputLatencyEvents_(browserHelper)) {
      inputLatencyEventByBindIdMap.set(event.args.data.trace_id, event);
    }
    return inputLatencyEventByBindIdMap;
  }

  /**
   * @returns {Map.<tr.model.Slice, tr.model.AsyncSlice>} A mapping
   * from a FrameLoader update navigation slice to its respective
   * navigation start event, which can be an InputLatency async
   * slice or a NavigationControllerImpl::GoToIndex slice.
   */
  function getSpaNavigationEventToNavigationStartMap_(
      rendererHelper, browserHelper) {
    const mainThread = rendererHelper.mainThread;
    const spaNavEvents = getSpaNavigationEvents_(rendererHelper);
    const navStartCandidates = getSpaNavigationStartCandidates_(
        rendererHelper, browserHelper).sort(tr.importer.compareEvents);
    const spaNavEventToNavStartCandidateMap =
        findPrecedingEvents_(spaNavEvents, navStartCandidates);

    const inputLatencyEventByBindIdMap =
        getInputLatencyEventByBindIdMap_(browserHelper);
    const spaNavEventToNavStartEventMap = new Map();
    for (const [spaNavEvent, navStartCandidate] of
        spaNavEventToNavStartCandidateMap) {
      if (navStartCandidate.title === HANDLE_INPUT_EVENT_TITLE) {
        const inputLatencySlice = inputLatencyEventByBindIdMap.get(
            Number(navStartCandidate.parentSlice.bindId));
        if (inputLatencySlice) {
          spaNavEventToNavStartEventMap.set(spaNavEvent, inputLatencySlice);
        }
      } else {
        spaNavEventToNavStartEventMap.set(spaNavEvent, navStartCandidate);
      }
    }
    return spaNavEventToNavStartEventMap;
  }

  /**
   * @return {Array.<tr.model.Slice>} An array of first paint events.
   */
  function getFirstPaintEvents_(rendererHelper) {
    const isFirstPaintEvent = e => e.category === 'blink' &&
        e.title === 'PaintLayerCompositor::updateIfNeededRecursive';

    return [...rendererHelper.mainThread.sliceGroup.getDescendantEvents()]
        .filter(isFirstPaintEvent);
  }

  /**
   * @returns {Map.<tr.model.Slice, tr.model.Slice>} A mapping
   * from a FrameLoader update navigation slice to its respective
   * first paint slice.
   */
  function getSpaNavigationEventToFirstPaintEventMap_(rendererHelper) {
    const spaNavEvents = getSpaNavigationEvents_(
        rendererHelper).sort(tr.importer.compareEvents);
    const firstPaintEvents = getFirstPaintEvents_(
        rendererHelper).sort(tr.importer.compareEvents);

    return findFollowingEvents_(spaNavEvents, firstPaintEvents);
  }

  /**
   * @typedef {NavStartCandidates}
   * @property {tr.model.AsyncSlice} inputLatencyAsyncSlice
   * @property {tr.model.Slice} goToIndexSlice
   */

  /**
   * @typedef {SpaNavObject}
   * @property {NavStartCandidates} navStartCandidates
   * @property {tr.model.Slice} firstPaintEvent
   * @property {string} url
   */

  /**
   * @returns {Array.<SpaNavObject>}
   */
  function findSpaNavigationsOnRenderer(rendererHelper, browserHelper) {
    const spaNavEventToNavStartMap =
        getSpaNavigationEventToNavigationStartMap_(
            rendererHelper, browserHelper);
    const spaNavEventToFirstPaintEventMap =
        getSpaNavigationEventToFirstPaintEventMap_(rendererHelper);
    const spaNavigations = [];
    for (const [spaNavEvent, navStartEvent] of
        spaNavEventToNavStartMap) {
      if (spaNavEventToFirstPaintEventMap.has(spaNavEvent)) {
        const firstPaintEvent =
            spaNavEventToFirstPaintEventMap.get(spaNavEvent);
        const isNavStartAsyncSlice =
          navStartEvent instanceof tr.model.AsyncSlice;
        spaNavigations.push({
          navStartCandidates: {
            inputLatencyAsyncSlice:
                isNavStartAsyncSlice ? navStartEvent : undefined,
            goToIndexSlice: isNavStartAsyncSlice ? undefined : navStartEvent
          },
          firstPaintEvent,
          url: spaNavEvent.args.url
        });
      }
    }
    return spaNavigations;
  }

  return {
    findSpaNavigationsOnRenderer,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  /**
  * @callback getEventAttributeCallback
  * @param {!tr.b.Event} event The event to read an attribute from.
  * @return {number} The value of the attribute.
  */

  /**
  * Generate a breakdown tree from all slices of |mainThread| in
  * |rangeOfInterest|. The callback functions |getEventStart|,
  * |getEventDuration| and |getEventSelfTime| specify how to get start,
  * duration and selftime from a given event.
  *
  * @param  {!tr.model.Thread} mainThread
  * @param  {!tr.b.math.Range} rangeOfInterest
  * @callback {getEventAttributeCallback} getEventStart
  * @callback {getEventAttributeCallback} getEventDuration
  * @callback {getEventAttributeCallback} getEventSelfTime
  * @return {Object.<string, Object>} A time breakdown object whose keys are
  * Chrome userfriendly title & values are an object that show the total spent
  * in |rangeOfInterest|, and the list of event labels of the
  * group and their total time in |rangeOfInterest|.
  *
  * Example:
  *   {
  *     layout: {
  *         total: 100,
  *         events: {'FrameView::performPreLayoutTasks': 20,..}},
  *     v8_runtime: {
  *         total: 500,
  *         events: {'String::NewExternalTwoByte': 0.5,..}},
  *     ...
  *   }
  */
  function generateTimeBreakdownTree(mainThread, rangeOfInterest, getEventStart,
      getEventDuration, getEventSelfTime) {
    if (mainThread === null) return;
    const breakdownTree = {};
    for (const title of
        tr.e.chrome.ChromeUserFriendlyCategoryDriver.ALL_TITLES) {
      breakdownTree[title] = {total: 0, events: {}};
    }
    for (const event of mainThread.getDescendantEvents()) {
      const eventStart = getEventStart(event);
      const eventDuration = getEventDuration(event);
      const eventSelfTime = getEventSelfTime(event);
      const eventEnd = eventStart + eventDuration;
      if (!rangeOfInterest.intersectsExplicitRangeExclusive(
          eventStart, eventEnd)) {
        continue;
      }
      if (eventSelfTime === undefined) continue;
      const title =
          tr.e.chrome.ChromeUserFriendlyCategoryDriver.fromEvent(event);
      let timeIntersectionRatio = 0;
      if (eventDuration > 0) {
        timeIntersectionRatio =
            rangeOfInterest.findExplicitIntersectionDuration(
                eventStart, eventEnd) / eventDuration;
      }

      const v8Runtime = event.args['runtime-call-stat'];
      if (v8Runtime !== undefined) {
        const v8RuntimeObject = JSON.parse(v8Runtime);
        for (const runtimeCall in v8RuntimeObject) {
          // When the V8 Runtime Object contains 2 values, the 2nd value
          // always represents the V8 Runtime duration.
          if (v8RuntimeObject[runtimeCall].length === 2) {
            if (breakdownTree.v8_runtime.events[runtimeCall] === undefined) {
              breakdownTree.v8_runtime.events[runtimeCall] = 0;
            }
            const runtimeTime = tr.b.Unit.timestampFromUs(
                v8RuntimeObject[runtimeCall][1] * timeIntersectionRatio);
            breakdownTree.v8_runtime.total += runtimeTime;
            breakdownTree.v8_runtime.events[runtimeCall] += runtimeTime;
          }
        }
      }
      //        [     Slice 1       ]   [      Slice  2   ]   [    Slice 3   ]
      //            [  Slice 4    ]                             [ Slice 5 ]
      //              [ Slice 6 ]                                  |
      //                 |                                         |
      //                 |                                         |
      //                 v                                         v
      //                start                                     end
      //
      // For the case where the |start| or |end| overlapped with some existing
      // slice (see above diagram), we approximate the overlapped self-time
      // by multiplying the ratio of overlapped wall time to the self-time.
      // There should be way to compute the exact number, but in practice,
      // this should rarely happen, and when it does, the overlapped range
      // is relative small so that using approximation here should be good
      // enough.
      const approximatedSelfTimeContribution =
          eventSelfTime * timeIntersectionRatio;
      breakdownTree[title].total += approximatedSelfTimeContribution;
      if (breakdownTree[title].events[event.title] === undefined) {
        breakdownTree[title].events[event.title] = 0;
      }
      breakdownTree[title].events[event.title] +=
          approximatedSelfTimeContribution;
    }
    return breakdownTree;
  }

  /**
   * Adds 'blocked_on_network' and 'idle' to the |breakdownTree| that has been
   * generated by |generateTimeBreakdownTree|. Taking into account the
   * |networkEvents|, this function is able to distinguish between these two
   * types of cpu idle time during the range |rangeOfInterest| not used by
   * events of the main thread |mainThreadEvents|.
   *
   * @param {!Object.<string, Object>} breakdownTree The breakdownTree that has
   * been generated by |generateTimeBreakdownTree|.
   * @param {!tr.b.Event} mainThreadEvents The top level events of the main
   * thread.
   * @param {!tr.b.Event} networkEvents The network events in the renderer.
   * @param {!tr.b.math.Range} rangeOfInterest The range for which
   * |breakdownTree| is calculated.
   */
  function addIdleAndBlockByNetworkBreakdown_(breakdownTree, mainThreadEvents,
      networkEvents, rangeOfInterest) {
    let idleRanges = [rangeOfInterest];
    const mainThreadEventRanges = tr.b.math.convertEventsToRanges(
        mainThreadEvents);
    const networkEventRanges = tr.b.math.convertEventsToRanges(
        networkEvents);
    const eventRanges = mainThreadEventRanges.concat(networkEventRanges);
    eventRanges.sort((a, b) => a.min - b.min);
    for (const eventRange of eventRanges) {
      if (!eventRange || eventRange.isEmpty ||
          eventRange.duration < 0) {
        throw new Error('Range is invalid');
      }
      // Every eventRange does not intersect with any idleRanges prior to the
      // last freeRange, because:
      //
      // freeRange[last-1].max <= eventRange[i-1].min <= eventRange[i].min
      //             (due to subtraction)      (due to sorting)
      //
      // where 'i' is the current index of eventRange.
      const newLastIdleRanges =
          tr.b.math.Range.findDifference(
              idleRanges[idleRanges.length - 1], eventRange);
      idleRanges.pop();
      idleRanges = idleRanges.concat(newLastIdleRanges);
      if (idleRanges.length === 0) break;
    }
    const totalFreeDuration = tr.b.math.Statistics.sum(idleRanges,
        range => range.duration);
    breakdownTree.idle = {total: totalFreeDuration, events: {}};

    let totalBlockedDuration = rangeOfInterest.duration;
    for (const component of Object.values(breakdownTree)) {
      totalBlockedDuration -= component.total;
    }
    breakdownTree.blocked_on_network = {
      total: totalBlockedDuration,
      events: {}
    };
  }


  /**
  * Generate a breakdown that attributes where wall clock time goes in
  * |rangeOfInterest| on the renderer thread.
  *
  * @param {!tr.model.Thread} mainThread
  * @param {!tr.b.math.Range} rangeOfInterest
  * @return {Object.<string, Object>} A time breakdown object whose keys are
  * Chrome userfriendly titles & values are an object that shows the total
  * wall clock time spent in |rangeOfInterest|, and the list of event
  * labels of the group and their total wall clock time in |rangeOfInterest|.
  *
  * Example:
  *   {
  *     layout: {
  *         total: 100,
  *         events: {'FrameView::performPreLayoutTasks': 20,..}},
  *     v8_runtime: {
  *         total: 500,
  *         events: {'String::NewExternalTwoByte': 0.5,..}},
  *     ...
  *   }
  */
  function generateWallClockTimeBreakdownTree(
      mainThread, networkEvents, rangeOfInterest) {
    function getEventStart(e) { return e.start; }
    function getEventDuration(e) { return e.duration; }
    function getEventSelfTime(e) { return e.selfTime; }
    const breakdownTree = generateTimeBreakdownTree(
        mainThread, rangeOfInterest, getEventStart, getEventDuration,
        getEventSelfTime);
    const mainThreadEventsInRange = tr.model.helpers.getSlicesIntersectingRange(
        rangeOfInterest, mainThread.sliceGroup.topLevelSlices);
    addIdleAndBlockByNetworkBreakdown_(
        breakdownTree, mainThreadEventsInRange, networkEvents, rangeOfInterest);
    return breakdownTree;
  }

  /**
  * Generate a breakdown that attributes where CPU time goes in
  * |rangeOfInterestCpuTime| on the renderer thread.
  *
  * @param {!tr.model.Thread} mainThread
  * @param {!tr.b.math.Range} rangeOfInterestCpuTime
  * @return {Object.<string, Object>} A time breakdown object whose keys are
  * Chrome userfriendly titles & values are an object that shows the total
  * CPU time spent in |rangeOfInterestCpuTime|, and the list of event labels
  * of the group and their total durations in |rangeOfInterestCpuTime|.
  *
  * Example:
  *   {
  *     layout: {
  *         total: 100,
  *         events: {'FrameView::performPreLayoutTasks': 20,..}},
  *     v8_runtime: {
  *         total: 500,
  *         events: {'String::NewExternalTwoByte': 0.5,..}},
  *     ...
  *   }
  */
  function generateCpuTimeBreakdownTree(mainThread, rangeOfInterestCpuTime) {
    function getEventStart(e) { return e.cpuStart; }
    function getEventDuration(e) { return e.cpuDuration; }
    function getEventSelfTime(e) { return e.cpuSelfTime; }
    return generateTimeBreakdownTree(mainThread, rangeOfInterestCpuTime,
        getEventStart, getEventDuration, getEventSelfTime);
  }

  return {
    generateTimeBreakdownTree,
    generateWallClockTimeBreakdownTree,
    generateCpuTimeBreakdownTree,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  /**
   * Utility class providing methods to efficiently find events.
   * TODO(4023) This should be merged with thread/process helper.
   */
  class EventFinderUtils {
    /**
     * Returns a map of frame id to main thread slices of |rendererHelper| with
     * title |eventTitle| and categry |eventCategory|, sorted by start
     * time. Returned slices do not include telemetry internal events.
     *
     * @param {tr.model.helpers.ChromeRendererHelper} rendererHelper
     * @param {string} eventTitle
     * @param {string} eventCategory
     * @returns {Map.<string, Array<!tr.model.ThreadSlice>>}
     */
    static getSortedMainThreadEventsByFrame(
        rendererHelper, eventTitle, eventCategory) {
      const eventsByFrame = new Map();

      // Events yielded by childEvents() are sorted by start time.
      for (const ev of rendererHelper.mainThread.sliceGroup.childEvents()) {
        if (rendererHelper.isTelemetryInternalEvent(ev)) continue;
        if (!tr.metrics.sh.hasCategoryAndName(ev, eventCategory, eventTitle)) {
          continue;
        }

        const frameIdRef = ev.args.frame;
        if (frameIdRef === undefined) continue;
        if (!eventsByFrame.has(frameIdRef)) {
          eventsByFrame.set(frameIdRef, []);
        }
        eventsByFrame.get(frameIdRef).push(ev);
      }

      return eventsByFrame;
    }

    /**
     * Returns latest event in |sortedEvents| that starts on or before
     * |timestamp|, or undefined if no such event exists.
     *
     * @param {!Array<!tr.model.TimedEvent>} sortedEvents - events sorted by
     *     start time.
     * @param {number} timestamp
     * @returns {tr.model.TimedEvent|undefined}
     */
    static findLastEventStartingOnOrBeforeTimestamp(sortedEvents, timestamp) {
      const firstIndexAfterTimestamp =
          tr.b.findFirstTrueIndexInSortedArray(
              sortedEvents, e => e.start > timestamp);
      // We found the first index after the timestamp, so the index immediately
      // before it is the index we're looking for. If the first index after
      // timestamp is 0, then there is no index on or before timestamp.
      if (firstIndexAfterTimestamp === 0) return undefined;
      return sortedEvents[firstIndexAfterTimestamp - 1];
    }

    /**
     * Returns earliest event in |sortedEvents| that starts on or after
     * |timestamp|, or undefined if no such event exists.
     *
     * @param {!Array<!tr.model.TimedEvent>} sortedEvents - events sorted by
     *     start time.
     * @param {number} timestamp
     * @returns {tr.model.Event|undefined}
     */
    static findNextEventStartingOnOrAfterTimestamp(sortedEvents, timestamp) {
      const firstIndexOnOrAfterTimestamp =
          tr.b.findFirstTrueIndexInSortedArray(
              sortedEvents, e => e.start >= timestamp);

      if (firstIndexOnOrAfterTimestamp === sortedEvents.length) {
        return undefined;
      }
      return sortedEvents[firstIndexOnOrAfterTimestamp];
    }

    /**
     * Returns earliest event in |sortedEvents| that starts after |timestamp|,
     * or undefined if no such event exists.
     *
     * @param {!Array<!tr.model.TimedEvent>} sortedEvents - events sorted by
     *     start time.
     * @param {number} timestamp
     * @returns {tr.model.Event|undefined}
     */
    static findNextEventStartingAfterTimestamp(sortedEvents, timestamp) {
      const firstIndexOnOrAfterTimestamp =
          tr.b.findFirstTrueIndexInSortedArray(
              sortedEvents, e => e.start > timestamp);

      if (firstIndexOnOrAfterTimestamp === sortedEvents.length) {
        return undefined;
      }
      return sortedEvents[firstIndexOnOrAfterTimestamp];
    }
  }

  return {
    EventFinderUtils,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  // Required quiet window size for Time to Interactive.
  const TIME_TO_INTERACTIVE_WINDOW_SIZE_MS = 5000;

  // Number of requests tolerated before network is considered busy.
  const ACTIVE_REQUEST_TOLERANCE = 2;

  // Minimum gap between task clusters for determining First CPU Idle.
  const FCI_MIN_CLUSTER_SEPARATION_MS = 1000;

  // Minimum duration of a task cluster to consider it heavy.
  const TASK_CLUSTER_HEAVINESS_THRESHOLD_MS = 250;

  /**
   * Enum for endpoint types.
   * @enum {string}
   */
  const ENDPOINT_TYPES = {
    LONG_TASK_START: 'LONG_TASK_START',
    LONG_TASK_END: 'LONG_TASK_END',
    REQUEST_START: 'REQUEST_START',
    REQUEST_END: 'REQUEST_END'
  };

  /**
   * @typedef {Object} Endpoint
   * @property {number} time - timestamp of endpoint.
   * @property {string} type - A type defined in |ENDPOINT_TYPES|.
   * originates from.
   */

  /**
   * Returns an array of endpoints. An endpoint is either the start or end
   * timestamp of a TimedEvent.
   *
   * @param {Array.<!tr.model.TimedEvent>} events - Events to extract endpoints
   * from.
   * @param {string} startType - Endpoint type for a start time endpoint.
   * @param {string} endType - Endpoint type for an end time endpoint.
   * @returns {Array.<!Endpoint>}
   */
  function getEndpoints_(events, startType, endType) {
    const endpoints = [];
    for (const event of events) {
      endpoints.push({
        time: event.start,
        type: startType
      });
      endpoints.push({
        time: event.end,
        type: endType
      });
    }

    return endpoints;
  }

  /**
   * Returns true if at time |timestamp| we have a long enough quiet window for
   * determining Time to Interactive.
   *
   * @param {number} timestamp - Timestamp of interest.
   * @param {number} networkQuietWindowStart - Most recent timestamp when the
   * renderer became network 2-quiet. Undefined if renderer is not network
   * 2-quiet at |timestamp|.
   * @param {number} mainThreadQuietWindowStart - End of most recent long task.
   * Undefined if a long task is in progress at |timestamp|.
   * @returns {boolean}
   */
  function reachedTTIQuiscence_(timestamp,
      networkQuietWindowStart, mainThreadQuietWindowStart, windowSize) {
    if (networkQuietWindowStart === undefined ||
        mainThreadQuietWindowStart === undefined) {
      return false;
    }

    const mainThreadQuietForLongEnough =
          timestamp - mainThreadQuietWindowStart >=
          windowSize;

    const networkQuietForLongEnough =
          timestamp - networkQuietWindowStart >=
          windowSize;

    return mainThreadQuietForLongEnough && networkQuietForLongEnough;
  }

  /**
   * Returns the timestamp for when the page first becomes Interactive.
   *
   * See https://goo.gl/IN68jL for detailed explanation of definition and
   * motivations. This metric was previously known as "Consistently
   * Interactive". To summarize, we look for a 5 second window starting from
   * between |searchBegin| and |searchEnd| such that there is no long task
   * overlapping with that window, and the entire window is network 2-quiet. A
   * long task is defined as a main thread task with wall duration longer than
   * 50ms, and network 2-quiet means the window never has more than 2 concurrent
   * in-flight network requests. Interactive 'candidate' is defined as end of
   * the last long task before this quiet window, or as |searchBegin| if there
   * is no long task before that window. We define Interactive as max of
   * Interactive candidate and domContentLoadedEnd.
   *
   * Returns undefined if no suitable quiet window is found.
   *
   * @param {number} searchBegin - The left boundary for our search for quiet
   * window. Ideally, this is First Meaningful Paint, but if FMP is not
   * available, First Contentful Paint or domContentLoadedEnd may be used as an
   * approximation.
   * @param {number} searchEnd - The right boundary for our search for quiet
   * window. This is either the start of next navigationStart request, or end of
   * traces.
   * @param {number} domContentLoadedEnd - Timestamp of domContentLoadedEnd
   * event for the main loading frame.
   * @param {Array.<!tr.model.TimedEvent>} longTasks - Main thread tasks longer
   * than 50ms overlapping with the search window.
   * @param {Array.<!tr.model.TimedEvent>} networkRequests - Resource
   * requests overlapping with the search window.
   * @returns {number|undefined}
   */
  function findInteractiveTime(searchBegin, searchEnd,
      domContentLoadedEnd, longTasksInWindow, networkRequests, url, windowSize,
      activeRequestTolerance) {
    // It is sufficient to only look at the end points of long tasks and network
    // requests. These are the points where any meaningful changes happen.
    const longTaskEndpoints = getEndpoints_(longTasksInWindow,
        ENDPOINT_TYPES.LONG_TASK_START, ENDPOINT_TYPES.LONG_TASK_END);
    const networkRequestEndpoints = getEndpoints_(networkRequests,
        ENDPOINT_TYPES.REQUEST_START, ENDPOINT_TYPES.REQUEST_END);
    const endpoints = longTaskEndpoints.concat(networkRequestEndpoints);
    endpoints.sort((a, b) => a.time - b.time);

    let networkQuietWindowStart = searchBegin;
    let mainThreadQuietWindowStart = searchBegin;
    let interactiveCandidate = undefined;
    let activeRequests = 0;
    let detectionTime = undefined;

    for (const endpoint of endpoints) {
      if (reachedTTIQuiscence_(endpoint.time,
          networkQuietWindowStart, mainThreadQuietWindowStart, windowSize)) {
        interactiveCandidate = mainThreadQuietWindowStart;
        detectionTime =
            Math.max(networkQuietWindowStart, mainThreadQuietWindowStart) +
            windowSize;
        break;
      }

      switch (endpoint.type) {
        case ENDPOINT_TYPES.LONG_TASK_START:
          mainThreadQuietWindowStart = undefined;
          break;
        case ENDPOINT_TYPES.LONG_TASK_END:
          mainThreadQuietWindowStart = endpoint.time;
          break;
        case ENDPOINT_TYPES.REQUEST_START:
          activeRequests++;
          if (activeRequests > activeRequestTolerance) {
            networkQuietWindowStart = undefined;
          }
          break;
        case ENDPOINT_TYPES.REQUEST_END:
          activeRequests--;
          if (activeRequests === activeRequestTolerance) {
            // Just became network 2-quiet.
            networkQuietWindowStart = endpoint.time;
          }
          break;
        default:
          // This should never happen.
          throw new Error('Internal Error: Unhandled endpoint type.');
      }
    }

    if (interactiveCandidate === undefined &&
        reachedTTIQuiscence_(searchEnd,
            networkQuietWindowStart, mainThreadQuietWindowStart, windowSize)) {
      interactiveCandidate = mainThreadQuietWindowStart;
      detectionTime =
          Math.max(networkQuietWindowStart, mainThreadQuietWindowStart) +
          windowSize;
    }

    if (interactiveCandidate === undefined) return undefined;

    if (interactiveCandidate > domContentLoadedEnd) {
      return {tti: interactiveCandidate, detectionTime};
    } else {
      return {tti: domContentLoadedEnd, detectionTime: domContentLoadedEnd};
    }
  }

  /**
   * Returns the required quiet window size for First CPU Idle at
   * |timeSinceSearchBeginMs| after searchBegin.
   *
   * Required quiet window size is modeled as an exponential decay. See
   * https://goo.gl/kQXGLW for development of the exact equation used here.
   *
   * @param {number} timeSinceSearchBeginMs - Time since the beginning of search
   *     window for First CPU Idle.
   */
  function requiredFCIWindowSizeMs(timeSinceSearchBeginMs) {
    const timeCoefficient = 1 / 15 * Math.log(2);

    const timeSinceSearchBeginSeconds = tr.b.convertUnit(timeSinceSearchBeginMs,
        tr.b.UnitPrefixScale.METRIC.MILLI, tr.b.UnitPrefixScale.METRIC.NONE);
    const windowSizeSeconds =
        4 * Math.exp(- timeCoefficient * timeSinceSearchBeginSeconds) + 1;
    return tr.b.convertUnit(windowSizeSeconds,
        tr.b.UnitPrefixScale.METRIC.NONE, tr.b.UnitPrefixScale.METRIC.MILLI);
  }

  /**
   * TaskCluster represents a group of long tasks such that they are at least 1s
   * away from any other long task that is not in the group.
   *
   * A TaskCluster instance is meant to be immutable once constructed.
   */
  class TaskCluster {
    /**
     * Create a TaskCluster.
     * @param {Array.<!tr.model.TimedEvent>} tasksInClusterSorted - Tasks in the
     *     cluster. Assumed sorted by start time.
     */
    constructor(tasksInClusterSorted) {
      if (tasksInClusterSorted.length === 0) {
        throw new Error('Internal Error: TaskCluster must have non zero tasks');
      }

      for (let i = 0; i < tasksInClusterSorted.length - 1; i++) {
        const durationBetweenTasks = tasksInClusterSorted[i + 1].start -
            tasksInClusterSorted[i].end;
        if (durationBetweenTasks >= FCI_MIN_CLUSTER_SEPARATION_MS) {
          throw new Error('Internal Error: Tasks in a TaskCluster cannot be ' +
                          'more than ' + FCI_MIN_CLUSTER_SEPARATION_MS +
                          ' miliseconds apart');
        }

        // Ideally the condition below should be durationBetweenTasks < 0, but
        // sometimes, for rounding errors, the end time of one task may very
        // slightly extend past the start time of the next.
        if (durationBetweenTasks < -1e7) {
          throw new Error('Internal Error: List of tasks used to construct ' +
                          'TaskCluster must be sorted.');
        }
      }

      this._clusterTasks = tasksInClusterSorted;
    }

    /**
     * @type{number}
     */
    get start() {
      return this._clusterTasks[0].start;
    }

    /**
     * @type{number}
     */
    get end() {
      return this._clusterTasks[this._clusterTasks.length - 1].end;
    }

    /**
     * @returns {boolean}
     */
    isHeavy() {
      return this.end - this.start > TASK_CLUSTER_HEAVINESS_THRESHOLD_MS;
    }
  }


  /**
   * Returns all the task clusters of |sortedLongTasks|.
   *
   * @param {Array.<!tr.model.TimedEvent>} sortedLongTasks - Main thread tasks
   *     longer than 50ms, sorted by task start time.
   * @returns {Array.<!TaskCluster>}
   */
  function findFCITaskClusters(sortedLongTasks) {
    const clusters = [];
    if (sortedLongTasks.length === 0) return clusters;

    const firstTask = sortedLongTasks[0];
    const restOfTasks = sortedLongTasks.slice(1);

    let currentClusterTasks = [firstTask];

    for (const currTask of restOfTasks) {
      const prevTask = currentClusterTasks[currentClusterTasks.length - 1];
      if (currTask.start - prevTask.end < FCI_MIN_CLUSTER_SEPARATION_MS) {
        // Add task to current task cluster.
        currentClusterTasks.push(currTask);
      } else {
        // Wrap up the current cluster and add task to a fresh cluster.
        clusters.push(new TaskCluster(currentClusterTasks));
        currentClusterTasks = [currTask];
      }
    }

    clusters.push(new TaskCluster(currentClusterTasks));

    return clusters;
  }

  /**
   * Returns true if at time |timestamp|, assuming |timestamp| is not in the
   * middle of a heavy task cluster, we have a long enough quiet window for
   * determining First CPU Idle.
   *
   * @param {number} timestamp - Timestamp of interest. We assume |timestamp| is
   *     not in the middle of a heavy task cluster.
   * @param {number} mainThreadQuietWindowStart - Most recent timestamp when we
   *     considered the main thread to be quiet. Usually end of most recent
   *     heavy task cluster or |searchBegin| where there are no heavy task
   *     cluster.
   * @param {number} searchBegin - Left boundary for quiet window search.
   * @returns {boolean}
   */
  function reachedFCIQuiescence_(timestamp, mainThreadQuietWindowStart,
      searchBegin) {
    const quietWindowSize = timestamp - mainThreadQuietWindowStart;
    const timeSinceSearchBegin = mainThreadQuietWindowStart - searchBegin;
    const requiredWindowSize = requiredFCIWindowSizeMs(timeSinceSearchBegin);
    return quietWindowSize > requiredWindowSize;
  }

  /**
   * Returns the timestamp for First CPU Idle for a page.
   *
   * See https://goo.gl/1a1XwZ for definition, and https://goo.gl/IN68jL for an
   * explanation of how the definition was developed. This metric was previously
   * known as "First Interactive". To summarize, in order to find First
   * Interactive we look for a long enough window between |searchBegin| and
   * |searchEnd| such that it doesn't contain a heavy task cluster. The required
   * length of the window decreases the further we move away from |searchBegin|.
   * A "task cluster" is defined as a group of long tasks such that they are at
   * least 1s away from any other long task that is not in the group. A task
   * cluster is considered "heavy" if the duration of the task cluster (the time
   * interval from the beginning of first task to the end of last task) is
   * longer than 250ms. We call the beginning of the quiet window FCI candidate,
   * and define First Cpu Idle as max of FCI candidate and
   * domContentLoadedEnd.
   *
   * Returns undefined if no suitable quiet window is found.
   *
   * @param {number} searchBegin - The left boundary for our search for quiet
   *     window. Ideally, this is First Meaningful Paint, but if FMP is not
   *     available, First Contentful Paint or domContentLoadedEnd may be used as
   *     an approximation.
   * @param {number} searchEnd - The right boundary for our search for quiet
   *     window. This is either the start of next navigationStart request, or
   *     end of traces.
   * @param {number} domContentLoadedEnd - Timestamp of domContentLoadedEnd
   *     event for the main loading frame.
   * @param {Array.<!tr.model.TimedEvent>} longTasks - Main thread tasks longer
   *     than 50ms overlapping with the search window.
   * @returns {number|undefined}
   */
  function findFirstCpuIdleTime(searchBegin, searchEnd,
      domContentLoadedEnd, longTasksInWindow) {
    const sortedLongTasks = longTasksInWindow.sort((a, b) => a.start - b.start);
    const taskClusters = findFCITaskClusters(sortedLongTasks);
    const heavyTaskClusters = taskClusters.filter(cluster => cluster.isHeavy());

    let quietWindowBegin = searchBegin;
    let fiCandidate = undefined;
    for (const cluster of heavyTaskClusters) {
      if (reachedFCIQuiescence_(cluster.start, quietWindowBegin, searchBegin)) {
        fiCandidate = quietWindowBegin;
        break;
      }
      quietWindowBegin = cluster.end;
    }

    if (fiCandidate === undefined) {
      // Check if quiescence was reached at the end of the search window.
      if (reachedFCIQuiescence_(searchEnd, quietWindowBegin, searchBegin)) {
        fiCandidate = quietWindowBegin;
      } else {
        // We never reached quiescence.
        return undefined;
      }
    }

    return Math.max(fiCandidate, domContentLoadedEnd);
  }

  return {
    findInteractiveTime,
    findFirstCpuIdleTime,
    requiredFCIWindowSizeMs,
    findFCITaskClusters,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  const LONG_TASK_THRESHOLD_MS = 50;
  const timeDurationInMs_smallerIsBetter =
      tr.b.Unit.byName.timeDurationInMs_smallerIsBetter;
  const RelatedEventSet = tr.v.d.RelatedEventSet;
  const hasCategoryAndName = tr.metrics.sh.hasCategoryAndName;
  const EventFinderUtils = tr.metrics.sh.EventFinderUtils;

  function allCombinations() {
    const combinations = [];
    for (let b of [true, false]) {
      for (let n = 0; n <= 2; n++) {
        for (let t = 5; t >= 0; t-=0.25) {
          combinations.push({ enableLongPollingFiltering: b, tolerance: n, ws: t });
        }
      }
    }
    return combinations;
  }

  /**
   * @param  {!tr.model.Process} process
   * @param  {!tr.b.math.Range} range
   * @return {Array.<tr.model.Event>} An array of network events of a process
   * and that are intersecting a range.
   */
  function getNetworkEventsInRange(process, range) {
    const networkEvents = [];
    for (const thread of Object.values(process.threads)) {
      const threadHelper = new tr.model.helpers.ChromeThreadHelper(thread);
      const events = threadHelper.getNetworkEvents();
      for (const event of events) {
        if (range.intersectsExplicitRangeInclusive(event.start, event.end)) {
          networkEvents.push(event);
        }
      }
    }
    return networkEvents;
  }

  /**
   * @param {!Object.<string, Object>} breakdownTree
   * @return {tr.v.d.Breakdown} A breakdown with categories and the total time
   * (ms) spent under each category.
   */
  function createBreakdownDiagnostic(breakdownTree) {
    const breakdownDiagnostic = new tr.v.d.Breakdown();
    breakdownDiagnostic.colorScheme =
        tr.v.d.COLOR_SCHEME_CHROME_USER_FRIENDLY_CATEGORY_DRIVER;

    for (const label in breakdownTree) {
      breakdownDiagnostic.set(label, breakdownTree[label].total);
    }
    return breakdownDiagnostic;
  }

  const LOADING_METRIC_BOUNDARIES = tr.v.HistogramBinBoundaries
    .createLinear(0, 1e3, 20)  // 50ms step to 1s
    .addLinearBins(3e3, 20) // 100ms step to 3s
    .addExponentialBins(20e3, 20);

  const TIME_TO_INTERACTIVE_BOUNDARIES = tr.v.HistogramBinBoundaries
    // 90-th percentiile of TTI is around 40 seconds, across warm and cold
    // loads. Data obtained through Cluster Telemetry analysis.
    .createExponential(1, 40e3, 35)
    .addExponentialBins(80e3, 15);

  const SUMMARY_OPTIONS = {
    avg: true,
    count: false,
    max: true,
    min: true,
    std: true,
    sum: false,
  };

  function findFrameLoaderSnapshotAt(rendererHelper, frameIdRef, ts) {
    const objects = rendererHelper.process.objects;
    const frameLoaderInstances = objects.instancesByTypeName_.FrameLoader;
    if (frameLoaderInstances === undefined) return undefined;

    let snapshot;
    for (const instance of frameLoaderInstances) {
      if (!instance.isAliveAt(ts)) continue;
      const maybeSnapshot = instance.getSnapshotAt(ts);
      if (frameIdRef !== maybeSnapshot.args.frame.id_ref) continue;
      snapshot = maybeSnapshot;
    }

    return snapshot;
  }

  function findAllEvents(rendererHelper, category, title) {
    const targetEvents = [];

    for (const ev of rendererHelper.process.getDescendantEvents()) {
      if (!hasCategoryAndName(ev, category, title)) continue;
      targetEvents.push(ev);
    }

    return targetEvents;
  }

  function findFirstMeaningfulPaintCandidates(rendererHelper) {
    const candidatesForFrameId = {};
    for (const ev of rendererHelper.process.getDescendantEvents()) {
      if (!hasCategoryAndName(ev, 'loading', 'firstMeaningfulPaintCandidate')) {
        continue;
      }
      if (rendererHelper.isTelemetryInternalEvent(ev)) continue;
      const frameIdRef = ev.args.frame;
      if (frameIdRef === undefined) continue;
      let list = candidatesForFrameId[frameIdRef];
      if (list === undefined) {
        candidatesForFrameId[frameIdRef] = list = [];
      }
      list.push(ev);
    }
    return candidatesForFrameId;
  }

  const URL_BLACKLIST = [
    'about:blank',
    // Chrome on Android creates main frames with the below URL for plugins.
    'data:text/html,pluginplaceholderdata',
    // Special URL used to start a navigation to an unreachable error page.
    'chrome-error://chromewebdata/'
  ];
  function shouldIgnoreURL(url) {
    return URL_BLACKLIST.includes(url);
  }

  function collectTimeToEvent(
      category, eventName, rendererHelper, frameToNavStartEvents) {
    const targetEvents = findAllEvents(rendererHelper, category, eventName);
    const samples = [];
    for (const ev of targetEvents) {
      if (rendererHelper.isTelemetryInternalEvent(ev)) continue;
      const frameIdRef = ev.args.frame;
      const snapshot =
        findFrameLoaderSnapshotAt(rendererHelper, frameIdRef, ev.start);
      if (snapshot === undefined || !snapshot.args.isLoadingMainFrame) continue;
      const url = snapshot.args.documentLoaderURL;
      if (shouldIgnoreURL(url)) continue;
      const navigationStartEvent =
          EventFinderUtils.findLastEventStartingOnOrBeforeTimestamp(
              frameToNavStartEvents.get(frameIdRef) || [], ev.start);
      // Ignore layout w/o preceding navigationStart, as they are not
      // attributed to any time-to-X metric.
      if (navigationStartEvent === undefined) continue;

      const navStartToEventRange = tr.b.math.Range.fromExplicitRange(
          navigationStartEvent.start, ev.start);
      const networkEvents = getNetworkEventsInRange(
          rendererHelper.process, navStartToEventRange);
      const breakdownTree = tr.metrics.sh.generateWallClockTimeBreakdownTree(
          rendererHelper.mainThread, networkEvents, navStartToEventRange);
      samples.push({
        value: navStartToEventRange.duration,
        breakdownTree,
        diagnostics: {
          breakdown: createBreakdownDiagnostic(breakdownTree),
          url: new tr.v.d.GenericSet([url]),
          Start: new RelatedEventSet(navigationStartEvent),
          End: new RelatedEventSet(ev)
        }
      });
    }
    return samples;
  }

  function addFirstMeaningfulPaintSample(samples, rendererHelper,
      frameIdRef, navigationStart, fmpMarkerEvent) {
    const snapshot = findFrameLoaderSnapshotAt(
        rendererHelper, frameIdRef, fmpMarkerEvent.start);
    if (!snapshot || !snapshot.args.isLoadingMainFrame) return;
    const url = snapshot.args.documentLoaderURL;
    if (shouldIgnoreURL(url)) return;

    const navStartToFMPRange = tr.b.math.Range.fromExplicitRange(
        navigationStart.start, fmpMarkerEvent.start);
    const networkEvents = getNetworkEventsInRange(
        rendererHelper.process, navStartToFMPRange);
    const timeToFirstMeaningfulPaint = navStartToFMPRange.duration;
    const breakdownTree = tr.metrics.sh.generateWallClockTimeBreakdownTree(
        rendererHelper.mainThread, networkEvents, navStartToFMPRange);
    samples.push({
      value: timeToFirstMeaningfulPaint,
      breakdownTree,
      diagnostics: {
        breakdown: createBreakdownDiagnostic(breakdownTree),
        start: new RelatedEventSet(navigationStart),
        end: new RelatedEventSet(fmpMarkerEvent),
        infos: new tr.v.d.GenericSet([{
          url,
          pid: rendererHelper.pid,
          start: navigationStart.start,
          fmp: fmpMarkerEvent.start,
        }]),
      }
    });
    return {firstMeaningfulPaint: fmpMarkerEvent.start, url};
  }

  function addFirstMeaningfulPaintCpuTimeSample(samples, rendererHelper,
      frameIdRef, navigationStart, fmpMarkerEvent) {
    const navStartToFMPCpuRange = tr.b.math.Range.fromExplicitRange(
        navigationStart.cpuStart, fmpMarkerEvent.cpuStart);
    const snapshot = findFrameLoaderSnapshotAt(
        rendererHelper, frameIdRef, fmpMarkerEvent.start);
    if (!snapshot || !snapshot.args.isLoadingMainFrame) return;
    const url = snapshot.args.documentLoaderURL;
    if (shouldIgnoreURL(url)) return;

    const mainThreadCpuTime = getMainThreadCpuTime(
        rendererHelper, navStartToFMPCpuRange);

    const breakdownTree = tr.metrics.sh.generateCpuTimeBreakdownTree(
        rendererHelper.mainThread, navStartToFMPCpuRange);
    samples.push({
      value: mainThreadCpuTime,
      breakdownTree,
      diagnostics: {
        breakdown: createBreakdownDiagnostic(breakdownTree),
        start: new RelatedEventSet(navigationStart),
        end: new RelatedEventSet(fmpMarkerEvent),
        infos: new tr.v.d.GenericSet([{
          url,
          pid: rendererHelper.pid,
          start: navigationStart.start,
          fmp: fmpMarkerEvent.start,
        }]),
      }
    });
  }

  function getMainThreadCpuTime(rendererHelper, rangeOfInterest) {
    let mainThreadCpuTime = 0;
    for (const slice of rendererHelper.mainThread.sliceGroup.topLevelSlices) {
      if (!slice.cpuDuration) continue;
      const sliceRange = tr.b.math.Range.fromExplicitRange(slice.cpuStart,
          slice.cpuStart + slice.cpuDuration);
      const intersection = rangeOfInterest.findIntersection(sliceRange);
      mainThreadCpuTime += intersection.duration;
    }

    return mainThreadCpuTime;
  }

  /**
   * Object containing one value and associated diagnostics info for that value
   * for a metric.
   * @typedef {{value: number, diagnostics: !tr.v.d.DiagnosticMap}} MetricSample
   */

  /**
   * Returns a MetricSample for interactivity metrics - First CPU Idle and Time
   * to Interactive.
   *
   * @param {tr.model.helpers.ChromeRendererHelper} rendererHelper
   * @param {?number} eventTimestamp - Timestamp of the event for which the
   *     sample is being generated.
   * @param {tr.model.ThreadSlice} navigationStartEvent
   * @param {number} firstMeaningfulPaintTime
   * @param {number} domContentLoadedEndTime
   * @param {string} url - URL of the current main frame document.
   * @returns {MetricSample|undefined}
   */
  function decorateInteractivitySampleWithDiagnostics_(rendererHelper,
      eventTimestamp, navigationStartEvent, firstMeaningfulPaintTime,
      domContentLoadedEndTime, url, detectionTime, traceEndTime) {
    if (eventTimestamp === undefined) return undefined;
    const navigationStartTime = navigationStartEvent.start;
    const navStartToEventTimeRange =
        tr.b.math.Range.fromExplicitRange(
            navigationStartTime, eventTimestamp);
    const networkEvents = getNetworkEventsInRange(
        rendererHelper.process, navStartToEventTimeRange);
    const breakdownTree = tr.metrics.sh.generateWallClockTimeBreakdownTree(
        rendererHelper.mainThread, networkEvents,
        navStartToEventTimeRange);
    const breakdownDiagnostic = createBreakdownDiagnostic(breakdownTree);
    return {
      value: navStartToEventTimeRange.duration,
      diagnostics: tr.v.d.DiagnosticMap.fromObject({
        'Start': new RelatedEventSet(navigationStartEvent),
        'Navigation infos': new tr.v.d.GenericSet([{
          url,
          pid: rendererHelper.pid,
          navigationStartTime,
          firstMeaningfulPaintTime,
          domContentLoadedEndTime,
          // eventTimestamp can be derived from value and navigationStartEvent,
          // but it's useful to directly see the value in the UI.
          eventTimestamp,
          detectionTime,
          traceEndTime,
        }]),
        'Breakdown of [navStart, eventTimestamp]': breakdownDiagnostic,
      }),
    };
  }

  function filterLongPolling(networkRequests) {
    return networkRequests.filter((request)=>{
      if (!request.args || !request.args.resourceInfo || !request.args.resourceInfo['ResponseStart'])
        return true;
      const type = request.args.resourceInfo['ResponseStart'];
      return type < 8;
    });
  }

  /**
   * Returns MetricSample for Time to Interactive and First CPU Idle for the
   * given parameters. See the time_to_interactive.html module for detailed
   * description and implementation of these metrics. The two metrics are
   * computed together in the same function because almost all the computed
   * parameters, for example list of relevant long tasks, are same for these two
   * metrics, and this helps avoid duplicate computation.
   *
   * @param {tr.model.helpers.ChromeRendererHelper} rendererHelper - Renderer
   *     helper for the renderer of interest.
   * @param {tr.model.ThreadSlice} navigationStart - The navigation start
   *     event for which interactivity metrics is being computed.
   * @param {Map.<string, Array<!tr.model.ThreadSlice>>} frameToNavStartEvents -
   *     Map from frame ids to sorted array of navigation start events.
   * @param {Map.<string, Array<!tr.model.ThreadSlice>>}
   *     frameToDomContentLoadedEndEvents - Map from frame ids to sorted array
   *     of DOMContentLoadedEnd events.
   * @param {number} firstMeaningfulPaintTime - Time of First Meaningful Paint
   *     for this navigation.
   * @param {string} url - URL of the current main frame document.
   * @returns {{interactiveSample: MetricSample|undefined,
   *     firstCpuIdleSample: MetricSample|undefined}}
   */
  function computeInteractivityMetricSample_(rendererHelper,
      frameToNavStartEvents, frameToDomContentLoadedEndEvents, navigationStart,
      firstMeaningfulPaintTime, url) {
    if (shouldIgnoreURL(url)) return;
    const traceEndTime = rendererHelper.mainThread.bounds.max;
    const frameIdRef = navigationStart.args.frame;
    const nextNavigationStart =
        EventFinderUtils.findNextEventStartingAfterTimestamp(
            frameToNavStartEvents.get(frameIdRef) || [],
            firstMeaningfulPaintTime);

    const searchWindowEnd = nextNavigationStart !== undefined ?
        nextNavigationStart.start :
        // If no next navigationStart, search for quiet windows until
        // the end of trace.
        rendererHelper.modelHelper.chromeBounds.max;

    const dclTimesForFrame =
        frameToDomContentLoadedEndEvents.get(frameIdRef) || [];

    const navigationStartTime = navigationStart.start;
    const dclSearchRange = tr.b.math.Range.fromExplicitRange(
        navigationStartTime, searchWindowEnd);
    const dclTimesInWindow =
        dclSearchRange.filterArray(dclTimesForFrame, event => event.start);

    // Cannot determine TTI if DomContentLoadedEnd was never reached.
    if (dclTimesInWindow.length === 0) {
      return {
        interactiveSample: undefined,
        firstCpuIdleSample: undefined,
      };
    }

    // TODO(catapult:#3796): Ideally a frame should reach DomContentLoadedEnd at
    // most once within two navigationStarts, but sometimes there is a strange
    // DclEnd event immediately following the navigationStart, and then the
    // 'real' dclEnd happens later. It is not clear how to best determine the
    // correct dclEnd value. For now, if there are multiple DclEnd events in the
    // search window, we just pick the last one.
    const domContentLoadedEndEvent =
        dclTimesInWindow[dclTimesInWindow.length - 1];
    const domContentLoadedEndTime = domContentLoadedEndEvent.start;

    const mainThreadTasks =
        [...rendererHelper.mainThread.findTopmostSlicesNamed(
            'TaskQueueManager::ProcessTaskFromWorkQueue')];
    const longTasks = mainThreadTasks.filter(
        task => task.duration >= LONG_TASK_THRESHOLD_MS);
    const longTasksInWindow = longTasks.filter(
        task => task.range.intersectsExplicitRangeInclusive(
            firstMeaningfulPaintTime, searchWindowEnd));

    const resourceLoadEvents = getNetworkEventsInRange(rendererHelper.process,
        tr.b.math.Range.fromExplicitRange(navigationStartTime,
            searchWindowEnd));

    const firstCpuIdleTime =
        tr.metrics.sh.findFirstCpuIdleTime(
            firstMeaningfulPaintTime, searchWindowEnd, domContentLoadedEndTime,
            longTasksInWindow);

    let interactiveSampleList = [];
    allCombinations().forEach((combination, index)=>{
      let networkEvents;
      if (combination.enableLongPollingFiltering === true) {
        networkEvents = filterLongPolling(resourceLoadEvents);
      } else {
        networkEvents = resourceLoadEvents;
      }

      const obj = tr.metrics.sh.findInteractiveTime(
            firstMeaningfulPaintTime, searchWindowEnd, domContentLoadedEndTime,
            longTasksInWindow, networkEvents, url, combination.ws * 1000,
            combination.tolerance);
      let interactiveTime = undefined;
      let detectionTime = undefined;
      if (obj) {
        interactiveTime = obj.tti;
        detectionTime = obj.detectionTime;
      }
      interactiveSampleList[index] = decorateInteractivitySampleWithDiagnostics_(
          rendererHelper, interactiveTime, navigationStart,
          firstMeaningfulPaintTime, domContentLoadedEndTime, url,
          detectionTime, traceEndTime)
    });

    return {
      firstCpuIdleSample: decorateInteractivitySampleWithDiagnostics_(
          rendererHelper, firstCpuIdleTime, navigationStart,
          firstMeaningfulPaintTime, domContentLoadedEndTime, url),
      interactiveSampleList,
    };
  }

  /**
   * Computes Time to First Meaningful Paint (TTFMP), Time to Interactive (TTI),
   * and Time to First CPU Idle (TTFCI) for a renderer represented by
   * |rendererHelper| and returns them as histogram samples.
   *
   * First meaningful paint is the paint following the layout with the highest
   * "Layout Significance". The Layout Significance is computed inside Blink,
   * by FirstMeaningfulPaintDetector class. It logs
   * "firstMeaningfulPaintCandidate" event every time the Layout Significance
   * marks a record. TTFMP is the time between NavigationStart and the last
   * firstMeaningfulPaintCandidate event.
   *
   * Design doc: https://goo.gl/vpaxv6
   *
   * Time to Interactive and Time to First CPU Idle is based on heuristics
   * involving main thread and network activity, as well as First Meaningful
   * Paint and DOMContentLoadedEnd event. See time_to_interactive.html module
   * for detailed description and implementation of these two metrics.
   */
  function collectFirstMeaningfulPaintAndInteractivityMetricsForRenderer(
      rendererHelper, frameToNavStartEvents, frameToDomContentLoadedEndEvents) {
    const firstMeaningfulPaintSamples = [];
    const firstMeaningfulPaintCpuTimeSamples = [];
    const firstCpuIdleSamples = [];
    const interactiveSamples = [];
    allCombinations().forEach((combination, index)=>{
      interactiveSamples[index] = [];
    });

    function addSamples(frameIdRef, navigationStart, fmpMarkerEvent) {
      const data = addFirstMeaningfulPaintSample(
          firstMeaningfulPaintSamples, rendererHelper,
          frameIdRef, navigationStart, fmpMarkerEvent);
      addFirstMeaningfulPaintCpuTimeSample(
          firstMeaningfulPaintCpuTimeSamples, rendererHelper,
          frameIdRef, navigationStart, fmpMarkerEvent);
      if (data !== undefined) {
        const {interactiveSampleList, firstCpuIdleSample} =
            computeInteractivityMetricSample_(
                rendererHelper, frameToNavStartEvents,
                frameToDomContentLoadedEndEvents, navigationStart,
                data.firstMeaningfulPaint, data.url);
        allCombinations().forEach((combination, index)=>{
          if (interactiveSampleList[index]) interactiveSamples[index].push(interactiveSampleList[index]);
        });
        if (firstCpuIdleSample) firstCpuIdleSamples.push(firstCpuIdleSample);
      }
    }

    const candidatesForFrameId =
        findFirstMeaningfulPaintCandidates(rendererHelper);

    for (const frameIdRef in candidatesForFrameId) {
      let navigationStart = undefined;
      let lastCandidate = undefined;

      // Iterate over the FMP candidates, remembering the last one.
      for (const ev of candidatesForFrameId[frameIdRef]) {
        const navigationStartForThisCandidate =
          EventFinderUtils.findLastEventStartingOnOrBeforeTimestamp(
              frameToNavStartEvents.get(frameIdRef) || [], ev.start);
        // Ignore candidate w/o preceding navigationStart, as they are not
        // attributed to any TTFMP.
        if (navigationStartForThisCandidate === undefined) continue;

        if (navigationStart !== navigationStartForThisCandidate) {
          // New navigation is found. Compute TTFMP for current navigation,
          // and reset the state variables.
          if (navigationStart !== undefined && lastCandidate !== undefined) {
            addSamples(frameIdRef, navigationStart, lastCandidate);
          }
          navigationStart = navigationStartForThisCandidate;
        }
        lastCandidate = ev;
      }

      // Compute TTFMP for the last navigation.
      if (lastCandidate !== undefined) {
        addSamples(frameIdRef, navigationStart, lastCandidate);
      }
    }
    return {
      firstMeaningfulPaintSamples,
      firstMeaningfulPaintCpuTimeSamples,
      firstCpuIdleSamples,
      interactiveSamples,
    };
  }

  function collectLoadingMetricsForRenderer(rendererHelper) {
    const frameToNavStartEvents =
        EventFinderUtils.getSortedMainThreadEventsByFrame(
            rendererHelper, 'navigationStart', 'blink.user_timing');
    const frameToDomContentLoadedEndEvents =
          EventFinderUtils.getSortedMainThreadEventsByFrame(
              rendererHelper, 'domContentLoadedEventEnd', 'blink.user_timing');
    const firstPaintSamples = collectTimeToEvent(
        'loading', 'firstPaint',
        rendererHelper, frameToNavStartEvents);
    const firstContentfulPaintSamples = collectTimeToEvent(
        'loading', 'firstContentfulPaint',
        rendererHelper, frameToNavStartEvents);
    const onLoadSamples = collectTimeToEvent(
        'blink.user_timing', 'loadEventStart',
        rendererHelper, frameToNavStartEvents);
    const {firstMeaningfulPaintSamples, firstMeaningfulPaintCpuTimeSamples,
        firstCpuIdleSamples, interactiveSamples} =
        collectFirstMeaningfulPaintAndInteractivityMetricsForRenderer(
            rendererHelper, frameToNavStartEvents,
            frameToDomContentLoadedEndEvents);
    return {
      firstPaintSamples,
      firstContentfulPaintSamples,
      onLoadSamples,
      firstMeaningfulPaintSamples,
      firstMeaningfulPaintCpuTimeSamples,
      firstCpuIdleSamples,
      interactiveSamples,
    };
  }

  function addSamplesToHistogram(samples, histogram, histograms) {
    for (const sample of samples) {
      histogram.addSample(sample.value, sample.diagnostics);

      // Only add breakdown histograms for FCP.
      // http://crbug.com/771610
      if (histogram.name !== 'timeToFirstContentfulPaint') continue;

      if (!sample.breakdownTree) continue;
      for (const [category, breakdown] of Object.entries(
          sample.breakdownTree)) {
        const relatedName = `${histogram.name}:${category}`;
        let relatedHist = histograms.getHistogramsNamed(relatedName)[0];
        if (!relatedHist) {
          relatedHist = histograms.createHistogram(
              relatedName, histogram.unit, [], {
                binBoundaries: LOADING_METRIC_BOUNDARIES,
                summaryOptions: {
                  count: false,
                  max: false,
                  min: false,
                  sum: false,
                },
              });

          let relatedNames = histogram.diagnostics.get('breakdown');
          if (!relatedNames) {
            relatedNames = new tr.v.d.RelatedHistogramBreakdown();
            histogram.diagnostics.set('breakdown', relatedNames);
          }
          relatedNames.set(category, relatedHist);
        }
        relatedHist.addSample(breakdown.total, {
          breakdown: tr.v.d.Breakdown.fromEntries(
              Object.entries(breakdown.events)),
        });
      }
    }
  }

  function loadingMetric(histograms, model) {
    const firstPaintHistogram = histograms.createHistogram(
        'timeToFirstPaint', timeDurationInMs_smallerIsBetter, [], {
          binBoundaries: LOADING_METRIC_BOUNDARIES,
          description: 'time to first paint',
          summaryOptions: SUMMARY_OPTIONS,
        });
    const firstContentfulPaintHistogram = histograms.createHistogram(
        'timeToFirstContentfulPaint', timeDurationInMs_smallerIsBetter, [], {
          binBoundaries: LOADING_METRIC_BOUNDARIES,
          description: 'time to first contentful paint',
          summaryOptions: SUMMARY_OPTIONS,
        });
    const onLoadHistogram = histograms.createHistogram(
        'timeToOnload', timeDurationInMs_smallerIsBetter, [], {
          binBoundaries: LOADING_METRIC_BOUNDARIES,
          description: 'time to onload. ' +
            'This is temporary metric used for PCv1/v2 sanity checking',
          summaryOptions: SUMMARY_OPTIONS,
        });
    const firstMeaningfulPaintHistogram = histograms.createHistogram(
        'timeToFirstMeaningfulPaint', timeDurationInMs_smallerIsBetter, [], {
          binBoundaries: LOADING_METRIC_BOUNDARIES,
          description: 'time to first meaningful paint',
          summaryOptions: SUMMARY_OPTIONS,
        });
    const firstMeaningfulPaintCpuTimeHistogram = histograms.createHistogram(
        'cpuTimeToFirstMeaningfulPaint', timeDurationInMs_smallerIsBetter, [], {
          binBoundaries: LOADING_METRIC_BOUNDARIES,
          description: 'CPU time to first meaningful paint',
          summaryOptions: SUMMARY_OPTIONS,
        });
    const timeToInteractiveHistograms = [];
    allCombinations().forEach((combination, index)=>{
      const longPollSt = combination.enableLongPollingFiltering? "lpfE" : "lpfDE";
      timeToInteractiveHistograms[index] = histograms.createHistogram(
        'timeToInteractive_' + longPollSt + '_' + combination.ws + '_' + combination.tolerance, timeDurationInMs_smallerIsBetter, [], {
          binBoundaries: TIME_TO_INTERACTIVE_BOUNDARIES,
          description: 'Time to Interactive: ' + longPollSt + ',' + combination.ws + ',' + combination.tolerance,
          summaryOptions: SUMMARY_OPTIONS,
        });
    });
    const timeToFirstCpuIdleHistogram = histograms.createHistogram(
        'timeToFirstCpuIdle', timeDurationInMs_smallerIsBetter, [], {
          binBoundaries: TIME_TO_INTERACTIVE_BOUNDARIES,
          description: 'Time to First CPU Idle',
          summaryOptions: SUMMARY_OPTIONS,
        });

    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    for (const pid in chromeHelper.rendererHelpers) {
      const rendererHelper = chromeHelper.rendererHelpers[pid];
      if (rendererHelper.isChromeTracingUI) continue;

      const samplesSet =
          collectLoadingMetricsForRenderer(rendererHelper);

      addSamplesToHistogram(
          samplesSet.firstPaintSamples, firstPaintHistogram, histograms);
      addSamplesToHistogram(
          samplesSet.firstContentfulPaintSamples,
          firstContentfulPaintHistogram,
          histograms);
      addSamplesToHistogram(
          samplesSet.onLoadSamples, onLoadHistogram, histograms);
      addSamplesToHistogram(
          samplesSet.firstMeaningfulPaintSamples,
          firstMeaningfulPaintHistogram,
          histograms);
      addSamplesToHistogram(
          samplesSet.firstMeaningfulPaintCpuTimeSamples,
          firstMeaningfulPaintCpuTimeHistogram,
          histograms);
      allCombinations().forEach((combination, index)=>{
        addSamplesToHistogram(
          samplesSet.interactiveSamples[index],
          timeToInteractiveHistograms[index],
          histograms);
      });
      addSamplesToHistogram(
          samplesSet.firstCpuIdleSamples,
          timeToFirstCpuIdleHistogram,
          histograms);
    }
  }

  tr.metrics.MetricRegistry.register(loadingMetric);

  return {
    loadingMetric,
    getNetworkEventsInRange,
    collectLoadingMetricsForRenderer,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  const SPA_NAVIGATION_START_TO_FIRST_PAINT_DURATION_BIN_BOUNDARY =
      tr.v.HistogramBinBoundaries.createExponential(1, 1000, 50);

  /**
   * This metric measures the duration between the input event
   * causing a SPA navigation and the first paint event after it.
   */
  function spaNavigationMetric(histograms, model) {
    const histogram = new tr.v.Histogram(
        'spaNavigationStartToFpDuration',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        SPA_NAVIGATION_START_TO_FIRST_PAINT_DURATION_BIN_BOUNDARY);
    histogram.description = 'Latency between the input event causing' +
        ' a SPA navigation and the first paint event after it';
    histogram.customizeSummaryOptions({
      count: false,
      sum: false,
    });

    const modelHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    if (!modelHelper) {
      // Chrome isn't present.
      return;
    }
    const rendererHelpers = modelHelper.rendererHelpers;
    if (!rendererHelpers) {
      // We couldn't find any renderer processes.
      return;
    }
    const browserHelper = modelHelper.browserHelper;
    for (const rendererHelper of Object.values(rendererHelpers)) {
      const spaNavigations = tr.metrics.findSpaNavigationsOnRenderer(
          rendererHelper, browserHelper);
      for (const spaNav of spaNavigations) {
        let beginTs = 0;
        if (spaNav.navStartCandidates.inputLatencyAsyncSlice) {
          const beginData =
              spaNav.navStartCandidates.inputLatencyAsyncSlice.args.data;
          // TODO(sunjian): rename convertTimestampToModelTime to something like
          // convertTraceEventTsToModelTs and get rid of the first parameter.
          beginTs = model.convertTimestampToModelTime(
              'traceEventClock',
              beginData.INPUT_EVENT_LATENCY_BEGIN_RWH_COMPONENT.time);
        } else {
          beginTs = spaNav.navStartCandidates.goToIndexSlice.start;
        }
        const rangeOfInterest = tr.b.math.Range.fromExplicitRange(
            beginTs, spaNav.firstPaintEvent.start);
        const networkEvents = tr.metrics.sh.getNetworkEventsInRange(
            rendererHelper.process, rangeOfInterest);
        const breakdownDict = tr.metrics.sh.generateWallClockTimeBreakdownTree(
            rendererHelper.mainThread, networkEvents, rangeOfInterest);
        const breakdownDiagnostic = new tr.v.d.Breakdown();
        breakdownDiagnostic.colorScheme =
            tr.v.d.COLOR_SCHEME_CHROME_USER_FRIENDLY_CATEGORY_DRIVER;
        for (const label in breakdownDict) {
          breakdownDiagnostic.set(label,
              parseInt(breakdownDict[label].total * 1e3) / 1e3);
        }
        histogram.addSample(
            rangeOfInterest.duration,
            {
              'Breakdown of [navStart, firstPaint]': breakdownDiagnostic,
              'Start': new tr.v.d.RelatedEventSet(spaNav.navigationStart),
              'End': new tr.v.d.RelatedEventSet(spaNav.firstPaintEvent),
              'Navigation infos': new tr.v.d.GenericSet([{
                url: spaNav.url,
                pid: rendererHelper.pid,
                navStart: beginTs,
                firstPaint: spaNav.firstPaintEvent.start
              }]),
            });
      }
    }
    histograms.addHistogram(histogram);
  }

  tr.metrics.MetricRegistry.register(spaNavigationMetric);

  return {
    spaNavigationMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  // Bin boundaries for clock sync latency. 0-20 ms with 0.2 ms bins.
  // 20 ms is a good upper limit because the highest latencies we've seen are
  // around 10-15 ms, and we expect average latency to go down as we improve
  // the clock sync mechanism.
  const LATENCY_BOUNDS = tr.v.HistogramBinBoundaries.createLinear(0, 20, 100);

  function clockSyncLatencyMetric(values, model) {
    const domains = Array.from(model.clockSyncManager.domainsSeen).sort();
    for (let i = 0; i < domains.length; i++) {
      for (let j = i + 1; j < domains.length; j++) {
        const latency = model.clockSyncManager.getTimeTransformerError(
            domains[i], domains[j]);
        const hist = new tr.v.Histogram('clock_sync_latency_' +
            domains[i].toLowerCase() + '_to_' + domains[j].toLowerCase(),
            tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, LATENCY_BOUNDS);
        hist.customizeSummaryOptions({
          avg: true,
          count: false,
          max: false,
          min: false,
          std: false,
          sum: false,
        });
        hist.description = 'Clock sync latency for domain ' + domains[i] +
            ' to domain ' + domains[j];
        hist.addSample(latency);
        values.addHistogram(hist);
      }
    }
  }

  tr.metrics.MetricRegistry.register(clockSyncLatencyMetric);

  return {
    clockSyncLatencyMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  // Use a lower bound of 0.01 for the metric boundaries (when no CPU time
  // is consumed) and an upper bound of 50 (fifty cores are all active
  // for the entire time). We can't use zero exactly for the lower bound with an
  // exponential histogram.
  const CPU_TIME_PERCENTAGE_BOUNDARIES =
      tr.v.HistogramBinBoundaries.createExponential(0.01, 50, 200);

  /**
   * This metric measures total CPU time for Chrome processes, per second of
   *   clock time.
   * This metric requires only the 'toplevel' tracing category.
   *
   * @param {!tr.v.HistogramSet} histograms
   * @param {!tr.model.Model} model
   * @param {!Object=} opt_options
   */
  function cpuTimeMetric(histograms, model, opt_options) {
    let rangeOfInterest = model.bounds;

    if (opt_options && opt_options.rangeOfInterest) {
      rangeOfInterest = opt_options.rangeOfInterest;
    } else {
      // If no range of interest is provided, limit the relevant range to
      // Chrome processes. This prevents us from normalizing against non-Chrome
      // related slices in the trace.
      const chromeHelper = model.getOrCreateHelper(
          tr.model.helpers.ChromeModelHelper);
      if (chromeHelper) {
        const chromeBounds = chromeHelper.chromeBounds;
        if (chromeBounds) {
          rangeOfInterest = chromeBounds;
        }
      }
    }

    let allProcessCpuTime = 0;

    for (const pid in model.processes) {
      const process = model.processes[pid];
      if (tr.model.helpers.ChromeRendererHelper.isTracingProcess(process)) {
        continue;
      }

      let processCpuTime = 0;
      for (const tid in process.threads) {
        const thread = process.threads[tid];
        let threadCpuTime = 0;
        thread.sliceGroup.topLevelSlices.forEach(function(slice) {
          if (slice.duration === 0) return;
          if (!slice.cpuDuration) return;
          const sliceRange = tr.b.math.Range.fromExplicitRange(
              slice.start, slice.end);
          const intersection = rangeOfInterest.findIntersection(sliceRange);
          const fractionOfSliceInsideRangeOfInterest =
              intersection.duration / slice.duration;

          // We assume that if a slice doesn't lie entirely inside the range of
          // interest, then the CPU time is evenly distributed inside of the
          // slice.
          threadCpuTime +=
              slice.cpuDuration * fractionOfSliceInsideRangeOfInterest;
        });
        processCpuTime += threadCpuTime;
      }
      allProcessCpuTime += processCpuTime;
    }

    // Normalize cpu time by clock time.
    let normalizedAllProcessCpuTime = 0;
    if (rangeOfInterest.duration > 0) {
      normalizedAllProcessCpuTime =
          allProcessCpuTime / rangeOfInterest.duration;
    }

    const unit = tr.b.Unit.byName.normalizedPercentage_smallerIsBetter;
    const cpuTimeHist = new tr.v.Histogram(
        'cpu_time_percentage', unit, CPU_TIME_PERCENTAGE_BOUNDARIES);
    cpuTimeHist.description =
        'Percent CPU utilization, normalized against a single core. Can be ' +
        'greater than 100% if machine has multiple cores.';
    cpuTimeHist.customizeSummaryOptions({
      avg: true,
      count: false,
      max: false,
      min: false,
      std: false,
      sum: false
    });
    cpuTimeHist.addSample(normalizedAllProcessCpuTime);
    histograms.addHistogram(cpuTimeHist);
  }

  tr.metrics.MetricRegistry.register(cpuTimeMetric, {
    supportsRangeOfInterest: true
  });

  return {
    cpuTimeMetric,
  };
});


'use strict';

tr.exportTo('tr.v.d', function() {
  /**
   * Add related names GenericSet diagnostic.
   *
   * @param {!tr.v.HistogramSet} histograms
   */
  function addRelatedNames(histograms) {
    for (const hist of histograms) {
      const relatedNames = new Set();
      for (const [name, diagnostic] of hist.diagnostics) {
        if (diagnostic instanceof tr.v.d.RelatedHistogramMap) {
          for (const [relationshipName, relatedHist] of diagnostic) {
            relatedNames.add(relatedHist.name);
          }
        }
      }
      if (relatedNames.size) {
        hist.diagnostics.set(
            tr.v.d.RESERVED_NAMES.RELATED_NAMES,
            new tr.v.d.GenericSet(relatedNames));
      }
    }
  }

  return {
    addRelatedNames,
  };
});


'use strict';

tr.exportTo('tr.v', function() {
  /*
   * HistogramGrouping objects are registered named functions that map from
   * Histogram objects to strings.
   *
   * They are used to group Histograms by
   * tr.v.HistogramSet.groupHistogramsRecursively()
   *
   * The tr-ui-b-grouping-table-groupby-picker module within the
   * tr-v-ui-histogram-set-controls module allows users to select and reorder
   * groupings.
   */
  class HistogramGrouping {
    /**
     * @param {string} key
     * @param {!function(!tr.v.Histogram):string} callback
     */
    constructor(key, callback) {
      this.key_ = key;
      this.callback_ = callback;

      HistogramGrouping.BY_KEY.set(key, this);
    }

    get key() {
      return this.key_;
    }

    get callback() {
      return this.callback_;
    }

    get label() {
      return this.key;
    }

    /**
     * @param {!Set.<string>} tags
     * @param {string} diagnosticName
     * @return {!Array.<!HistogramGrouping>}
     */
    static buildFromTags(tags, diagnosticName) {
      const booleanTags = new Set();
      const keyValueTags = new Set();
      for (const tag of tags) {
        if (tag.includes(':')) {
          const key = tag.split(':')[0];
          if (booleanTags.has(key)) {
            throw new Error(
                `Tag "${key}" cannot be both boolean and key-value`);
          }
          keyValueTags.add(key);
        } else {
          if (keyValueTags.has(tag)) {
            throw new Error(
                `Tag "${tag}" cannot be both boolean and key-value`);
          }
          booleanTags.add(tag);
        }
      }

      const groupings = [];
      for (const tag of booleanTags) {
        groupings.push(HistogramGrouping.buildBooleanTagGrouping_(
            tag, diagnosticName));
      }
      for (const tag of keyValueTags) {
        groupings.push(HistogramGrouping.buildKeyValueTagGrouping_(
            tag, diagnosticName));
      }
      return groupings;
    }

    static buildBooleanTagGrouping_(tag, diagnosticName) {
      return new HistogramGrouping(`${tag}Tag`, h => {
        const tags = h.diagnostics.get(diagnosticName);
        if (tags === undefined || !tags.has(tag)) return `~${tag}`;
        return tag;
      });
    }

    static buildKeyValueTagGrouping_(tag, diagnosticName) {
      return new HistogramGrouping(`${tag}Tag`, h => {
        const tags = h.diagnostics.get(diagnosticName);
        if (tags === undefined) return `~${tag}`;
        const values = new Set();
        for (const value of tags) {
          const kvp = value.split(':');
          if (kvp.length < 2 || kvp[0] !== tag) continue;
          values.add(kvp[1]);
        }
        if (values.size === 0) return `~${tag}`;
        const sortedValues = Array.from(values);
        sortedValues.sort();
        return sortedValues.join(',');
      }, `${tag} tag`);
    }
  }

  HistogramGrouping.BY_KEY = new Map();

  HistogramGrouping.HISTOGRAM_NAME = new HistogramGrouping('name', h => h.name);

  HistogramGrouping.DISPLAY_LABEL = new HistogramGrouping(
      'displayLabel', hist => {
        const labels = hist.diagnostics.get(tr.v.d.RESERVED_NAMES.LABELS);
        if (labels !== undefined && labels.size > 0) {
          return Array.from(labels).join(',');
        }

        const benchmarks = hist.diagnostics.get(
            tr.v.d.RESERVED_NAMES.BENCHMARKS);
        const start = hist.diagnostics.get(
            tr.v.d.RESERVED_NAMES.BENCHMARK_START);
        if (benchmarks === undefined) {
          if (start === undefined) return 'Value';

          return start.toString();
        }
        const benchmarksStr = Array.from(benchmarks).join('\n');

        if (start === undefined) return benchmarksStr;

        return benchmarksStr + '\n' + start.toString();
      });

  class GenericSetGrouping extends HistogramGrouping {
    constructor(name) {
      super(name, undefined);
      this.callback_ = this.compute_.bind(this);
    }

    compute_(hist) {
      const diag = hist.diagnostics.get(this.key);
      if (diag === undefined) return '';
      const parts = Array.from(diag);
      parts.sort();
      return parts.join(',');
    }
  }

  GenericSetGrouping.NAMES = [
    tr.v.d.RESERVED_NAMES.ARCHITECTURES,
    tr.v.d.RESERVED_NAMES.BENCHMARKS,
    tr.v.d.RESERVED_NAMES.BOTS,
    tr.v.d.RESERVED_NAMES.BUILDS,
    tr.v.d.RESERVED_NAMES.DEVICE_IDS,
    tr.v.d.RESERVED_NAMES.MASTERS,
    tr.v.d.RESERVED_NAMES.MEMORY_AMOUNTS,
    tr.v.d.RESERVED_NAMES.OS_NAMES,
    tr.v.d.RESERVED_NAMES.OS_VERSIONS,
    tr.v.d.RESERVED_NAMES.PRODUCT_VERSIONS,
    tr.v.d.RESERVED_NAMES.STORIES,
    tr.v.d.RESERVED_NAMES.STORYSET_REPEATS,
    tr.v.d.RESERVED_NAMES.STORY_TAGS,
  ];

  for (const name of GenericSetGrouping.NAMES) {
    // Instantiating a HistogramGrouping adds it to BY_KEY.
    new GenericSetGrouping(name);
  }

  class DateRangeGrouping extends HistogramGrouping {
    constructor(name) {
      super(name, undefined);
      this.callback_ = this.compute_.bind(this);
    }

    compute_(hist) {
      const diag = hist.diagnostics.get(this.key);
      if (diag === undefined) return '';
      return diag.toString();
    }
  }

  DateRangeGrouping.NAMES = [
    tr.v.d.RESERVED_NAMES.BENCHMARK_START,
    tr.v.d.RESERVED_NAMES.TRACE_START,
  ];

  for (const name of DateRangeGrouping.NAMES) {
    new DateRangeGrouping(name);
  }

  return {
    HistogramGrouping,
    GenericSetGrouping,
    DateRangeGrouping,
  };
});


'use strict';

tr.exportTo('tr.v', function() {
  class HistogramSet {
    constructor(opt_histograms) {
      this.histogramsByGuid_ = new Map();
      this.sharedDiagnosticsByGuid_ = new Map();

      if (opt_histograms !== undefined) {
        for (const hist of opt_histograms) {
          this.addHistogram(hist);
        }
      }
    }

    /**
     * Create a Histogram, configure it, add samples to it, and add it to this
     * HistogramSet.
     *
     * |samples| can be either
     *  0. a number, or
     *  1. a dictionary {value: number, diagnostics: dictionary}, or
     *  2. an array of
     *     2a. number, or
     *     2b. dictionaries {value, diagnostics}.
     *
     * @param {string} name
     * @param {!tr.b.Unit} unit
     * @param {number|!Object|!Array.<(number|!Object)>} samples
     * @param {!Object=} opt_options
     * @param {!tr.v.HistogramBinBoundaries} opt_options.binBoundaries
     * @param {!Object|!Map} opt_options.summaryOptions
     * @param {!Object|!Map} opt_options.diagnostics
     * @param {string} opt_options.description
     * @param {string} opt_options.shortName
     * @return {!tr.v.Histogram}
     */
    createHistogram(name, unit, samples, opt_options) {
      const hist = tr.v.Histogram.create(name, unit, samples, opt_options);
      this.addHistogram(hist);
      return hist;
    }

    /**
     * @param {!tr.v.Histogram} hist
     * @param {(!Object|!tr.v.d.DiagnosticMap)=} opt_diagnostics
     */
    addHistogram(hist, opt_diagnostics) {
      if (this.histogramsByGuid_.has(hist.guid)) {
        throw new Error('Cannot add same Histogram twice');
      }

      if (opt_diagnostics !== undefined) {
        if (!(opt_diagnostics instanceof Map)) {
          opt_diagnostics = Object.entries(opt_diagnostics);
        }
        for (const [name, diagnostic] of opt_diagnostics) {
          hist.diagnostics.set(name, diagnostic);
        }
      }

      this.histogramsByGuid_.set(hist.guid, hist);
    }

    /**
     * Add a Diagnostic to all Histograms so that it will only be serialized
     * once per HistogramSet rather than once per Histogram that contains it.
     *
     * @param {string} name
     * @param {!tr.v.d.Diagnostic} diagnostic
     */
    addSharedDiagnosticToAllHistograms(name, diagnostic) {
      this.addSharedDiagnostic(diagnostic);
      for (const hist of this) {
        hist.diagnostics.set(name, diagnostic);
      }
    }

    /**
     * Add a Diagnostic to this HistogramSet so that it will only be serialized
     * once per HistogramSet rather than once per Histogram that contains it.
     *
     * @param {!tr.v.d.Diagnostic} diagnostic
     */
    addSharedDiagnostic(diagnostic) {
      this.sharedDiagnosticsByGuid_.set(diagnostic.guid, diagnostic);
    }

    get length() {
      return this.histogramsByGuid_.size;
    }

    * [Symbol.iterator]() {
      for (const hist of this.histogramsByGuid_.values()) {
        yield hist;
      }
    }

    /**
     * Filters Histograms by matching their name exactly.
     *
     * @param {string} name Histogram name.
     * @return {!Array.<!tr.v.Histogram>}
     */
    getHistogramsNamed(name) {
      return [...this].filter(h => h.name === name);
    }

    /**
     * Filters to find the Histogram that matches the specified name exactly.
     * If no Histogram with that name exists, undefined is returned. If multiple
     * Histograms with the name exist, an error is thrown.
     *
     * @param {string} name Histogram name.
     * @return {tr.v.Histogram}
     */
    getHistogramNamed(name) {
      const histograms = this.getHistogramsNamed(name);
      if (histograms.length === 0) return undefined;
      if (histograms.length > 1) {
        throw new Error(
            `Unexpectedly found multiple histograms named "${name}"`);
      }

      return histograms[0];
    }

    /**
     * Lookup a Histogram by its guid.
     *
     * @param {string} guid
     * @return {!tr.v.Histogram|undefined}
     */
    lookupHistogram(guid) {
      return this.histogramsByGuid_.get(guid);
    }

    /**
     * Lookup a Diagnostic by its guid.
     *
     * @param {string} guid
     * @return {!tr.v.d.Diagnostic|undefined}
     */
    lookupDiagnostic(guid) {
      return this.sharedDiagnosticsByGuid_.get(guid);
    }

    resolveRelatedHistograms() {
      const handleDiagnosticMap = dm => {
        for (const [name, diagnostic] of dm) {
          if (diagnostic instanceof tr.v.d.RelatedHistogramMap) {
            diagnostic.resolve(this);
          }
        }
      };

      for (const hist of this) {
        handleDiagnosticMap(hist.diagnostics);

        for (const dm of hist.nanDiagnosticMaps) {
          handleDiagnosticMap(dm);
        }

        for (const bin of hist.allBins) {
          for (const dm of bin.diagnosticMaps) {
            handleDiagnosticMap(dm);
          }
        }
      }
    }

    /**
     * Convert dicts to either Histograms or shared Diagnostics.
     * Does not resolve RelatedHistogramMap diagnostics. See
     * resolveRelatedHistograms().
     *
     * @param {!Object} dicts
     */
    importDicts(dicts) {
      for (const dict of dicts) {
        if (dict.type && tr.v.d.Diagnostic.findTypeInfoWithName(dict.type)) {
          this.sharedDiagnosticsByGuid_.set(dict.guid,
              tr.v.d.Diagnostic.fromDict(dict));
        } else {
          const hist = tr.v.Histogram.fromDict(dict);
          this.addHistogram(hist);
          hist.diagnostics.resolveSharedDiagnostics(this, true);
        }
      }
    }

    /**
     * Serialize all of the Histograms and shared Diagnostics to an Array of
     * dictionaries.
     *
     * @return {!Array.<!Object>}
     */
    asDicts() {
      const dicts = [];
      for (const diagnostic of this.sharedDiagnosticsByGuid_.values()) {
        dicts.push(diagnostic.asDict());
      }
      for (const hist of this) {
        dicts.push(hist.asDict());
      }
      return dicts;
    }

    /**
     * Find the Histograms that are not contained in any other Histograms'
     * RelatedHistogramMap diagnostics.
     *
     * @return {!Array.<!tr.v.Histogram>}
     */
    get sourceHistograms() {
      const diagnosticNames = new Set();
      for (const hist of this) {
        for (const diagnostic of hist.diagnostics.values()) {
          if (!(diagnostic instanceof tr.v.d.RelatedNameMap)) continue;
          for (const name of diagnostic.values()) {
            diagnosticNames.add(name);
          }
        }
      }

      const sourceHistograms = new Map();
      for (const hist of this) {
        if (!diagnosticNames.has(hist.name)) {
          sourceHistograms.set(hist.guid, hist);
        }
      }

      // TODO(#3761) Remove the rest of this function with RelatedHistogramMap.

      // If a Histogram is in a RelatedHistogramMap,
      // which can be owned either by Histograms or by numeric samples, then it
      // is not a source Histogram.
      function deleteSourceHistograms(diagnosticMap) {
        for (const [name, diagnostic] of diagnosticMap) {
          if (diagnostic instanceof tr.v.d.RelatedHistogramMap) {
            for (const [name, relatedHist] of diagnostic) {
              sourceHistograms.delete(relatedHist.guid);
            }
          }
        }
      }

      for (const hist of this) {
        deleteSourceHistograms(hist.diagnostics);
        for (const dm of hist.nanDiagnosticMaps) {
          deleteSourceHistograms(dm);
        }
        for (const b of hist.allBins) {
          for (const dm of b.diagnosticMaps) {
            deleteSourceHistograms(dm);
          }
        }
      }
      return new HistogramSet([...sourceHistograms.values()]);
    }

    /**
     * Return a nested Map, whose keys are strings and leaf values are Arrays of
     * Histograms.
     * See GROUPINGS for example |groupings|.
     * Groupings are skipped when |opt_skipGroupingCallback| is specified and
     * returns true.
     *
     * @typedef {!Array.<tr.v.Histogram>} HistogramArray
     * @typedef {!Map.<string,!(HistogramArray|HistogramArrayMap)>}
     *   HistogramArrayMap
     * @typedef {!Map.<string,!HistogramArray>} LeafHistogramArrayMap
     *
     * @param {!Array.<!tr.v.HistogramGrouping>} groupings
     * @param {!function(!Grouping, !LeafHistogramArrayMap):boolean=}
     *   opt_skipGroupingCallback
     *
     * @return {!(HistogramArray|HistogramArrayMap)}
     */
    groupHistogramsRecursively(groupings, opt_skipGroupingCallback) {
      function recurse(histograms, level) {
        if (level === groupings.length) {
          return histograms;  // recursion base case
        }

        const grouping = groupings[level];
        const groupedHistograms = tr.b.groupIntoMap(
            histograms, grouping.callback);

        if (opt_skipGroupingCallback && opt_skipGroupingCallback(
            grouping, groupedHistograms)) {
          return recurse(histograms, level + 1);
        }

        for (const [key, group] of groupedHistograms) {
          groupedHistograms.set(key, recurse(group, level + 1));
        }

        return groupedHistograms;
      }

      return recurse([...this], 0);
    }

    /*
     * Histograms and Diagnostics are merged two at a time, without considering
     * any others, so it is possible for two merged Diagnostics to be equivalent
     * but not identical, which is inefficient. This method replaces equivalent
     * Diagnostics with shared Diagnostics so that the HistogramSet can be
     * serialized more efficiently and so that these Diagnostics can be compared
     * quickly when merging relationship Diagnostics.
     */
    deduplicateDiagnostics() {
      const namesToCandidates = new Map();  // string: Set<Diagnostic>
      const diagnosticsToHistograms = new Map();  // Diagnostic: [Histogram]

      for (const hist of this) {
        for (const [name, candidate] of hist.diagnostics) {
          // TODO(#3695): Remove this check once equality is smoke-tested.
          if (candidate.equals === undefined) {
            this.sharedDiagnosticsByGuid_.set(candidate.guid, candidate);
            continue;
          }

          if (diagnosticsToHistograms.get(candidate) === undefined) {
            diagnosticsToHistograms.set(candidate, [hist]);
          } else {
            diagnosticsToHistograms.get(candidate).push(hist);
          }

          if (!namesToCandidates.has(name)) {
            namesToCandidates.set(name, new Set());
          }
          namesToCandidates.get(name).add(candidate);
        }
      }

      for (const [name, candidates] of namesToCandidates) {
        const deduplicatedDiagnostics = new Set();

        for (const candidate of candidates) {
          let found = false;
          for (const test of deduplicatedDiagnostics) {
            if (candidate.equals(test)) {
              const hists = diagnosticsToHistograms.get(candidate);
              for (const hist of hists) {
                hist.diagnostics.set(name, test);
              }
              found = true;
              break;
            }
          }
          if (!found) {
            deduplicatedDiagnostics.add(candidate);
          }

          for (const diagnostic of deduplicatedDiagnostics) {
            this.sharedDiagnosticsByGuid_.set(diagnostic.guid, diagnostic);
          }
        }
      }
    }

    /**
     * @param {!Iterable.<string>} names of GenericSet diagnostics
     * @return {!Array.<!tr.v.HistogramGrouping>}
     */
    buildGroupingsFromTags(names) {
      const tags = new Map();  // name: Set<string>
      for (const hist of this) {
        for (const name of names) {
          if (!hist.diagnostics.has(name)) continue;
          if (!tags.has(name)) tags.set(name, new Set());
          for (const tag of hist.diagnostics.get(name)) {
            tags.get(name).add(tag);
          }
        }
      }

      const groupings = [];
      for (const [name, values] of tags) {
        const built = tr.v.HistogramGrouping.buildFromTags(values, name);
        for (const grouping of built) {
          groupings.push(grouping);
        }
      }
      return groupings;
    }

    /*
     * RelatedHistogram diagnostics cannot be merged when Histograms are merged
     * because the related Histograms might not exist yet. Callers must
     * call HistogramSet.deduplicateDiagnostics() and then
     * HistogramSet.mergeRelationships() after merging Histograms in order to
     * merge RelatedHistogram diagnostics.
     */
    mergeRelationships() {
      for (const hist of this) {
        hist.diagnostics.mergeRelationships(hist);
      }
    }
  }

  return {
    HistogramSet,
  };
});


'use strict';
tr.exportTo('tr.e.chrome', function() {
  // TODO(dproy): Because title and category are properties of TimedEvent
  // subclasses and not TimedEvent itself, we have to write our own "has title
  // and category" function rather than having it provided by TimedEvent.
  // This should be fixed.
  // https://github.com/catapult-project/catapult/issues/2784
  function hasTitleAndCategory(event, title, category) {
    return event.title === title && event.category &&
      tr.b.getCategoryParts(event.category).includes(category);
  }

  function getNavStartTimestamps(rendererHelper) {
    const navStartTimestamps = [];
    for (const e of rendererHelper.mainThread.sliceGroup.childEvents()) {
      if (hasTitleAndCategory(e, 'navigationStart', 'blink.user_timing')) {
        navStartTimestamps.push(e.start);
      }
    }
    return navStartTimestamps;
  }

  /**
   * Returns a map of renderer PIDs to array of timestamps at which the
   * renderer became interactive.
   */
  function getInteractiveTimestamps(model) {
    const interactiveTimestampsMap = new Map();
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    for (const rendererHelper of Object.values(chromeHelper.rendererHelpers)) {
      const timestamps = [];
      interactiveTimestampsMap.set(rendererHelper.pid, timestamps);
      const samples = tr.metrics.sh.collectLoadingMetricsForRenderer(
          rendererHelper).interactiveSamples;
      for (const sample of samples) {
        timestamps.push(tr.b.getOnlyElement(
            sample.diagnostics.get('Navigation infos')).eventTimestamp);
      }
    }
    return interactiveTimestampsMap;
  }

  /**
   * Returns an Array of task windows that start with the supplied interactive
   * timestamps.
   *
   * A task window is defined as the range of time from the time when the page
   * became interactive until either
   *
   *   1. The beginning of the next navigationStart event or
   *   2. The end of the trace
   *
   * This function only works when timestamps are from the same renderer. If
   * windows for multiple renderers need to be computed, the timestamps should
   * be separated for each renderer and this function should be called
   * separately for each.
   *
   * @param {!Array.<number>} interactiveTimestamps
   * @param {!Array.<number>} navStartTimestamps
   * @param {!number} traceEndTimestamp
   * @returns {!Array.<tr.b.math.Range>}
   */
  function getPostInteractiveTaskWindows(
      interactiveTimestamps, navStartTimestamps, traceEndTimestamp) {
    let navStartTsIndex = 0;
    let lastTaskWindowEndTs = undefined;
    const taskWindows = [];
    for (const currTTI of interactiveTimestamps) {
      // Find the first navigation start event after the interactive
      // timestamp.
      while (navStartTsIndex < navStartTimestamps.length &&
          navStartTimestamps[navStartTsIndex] < currTTI) {
        navStartTsIndex++;
      }

      const taskWindowEndTs = navStartTsIndex < navStartTimestamps.length ?
          navStartTimestamps[navStartTsIndex] : traceEndTimestamp;

      if (taskWindowEndTs === lastTaskWindowEndTs) {
        // This is the case where we have two different interactive timestamps
        // with no navigationStart event between them. This is only possible
        // when two different pages are sharing the same renderer process (and
        // therefore the same renderer scheduler). We cannot define a proper
        // task window in this case to calculate Estimated Input Latency.
        throw Error('Encountered two consecutive interactive timestamps ' +
            'with no navigationStart between them. ' +
            'PostInteractiveTaskWindow is not well defined in this case.');
      }

      taskWindows.push(tr.b.math.Range.fromExplicitRange(
          currTTI, taskWindowEndTs));
      lastTaskWindowEndTs = taskWindowEndTs;
    }
    return taskWindows;
  }

  /**
   * Returns the contribution of the given task to expected queueing time
   * in the given time window.
   *
   * The result is probabilityOf(task) * expectedQueueTimeDueTo(task),
   * where
   * - probabilityOf(task) = probability of input arriving while the given
   *   task is running.
   * - expectedQueueingTimeDueTo(task) = expected time until the end of the
   *   given task for input arriving while the task is running.
   *
   * We assume that input arrival time is uniformly distributed in the given
   * time window.
   *
   * @param {!tr.b.math.Range} A time window.
   * @param {!Array.<!{start: number, end: number, weight: number}>} A list of
   *        weighted tasks. The weight of a task must be between 0.0 and 1.0.
   * @returns {number}
   */
  function contributionToEQT(window, task) {
    const startInWindow = Math.max(window.min, task.start);
    const endInWindow = Math.min(window.max, task.end);
    const durationInWindow = endInWindow - startInWindow;
    if (durationInWindow <= 0) return 0;
    const probabilityOfTask = durationInWindow / (window.max - window.min);
    const minQueueingTime = task.end - endInWindow;
    const maxQueueingTime = task.end - startInWindow;
    const expectedQueueingTimeDueToTask =
        (maxQueueingTime + minQueueingTime) / 2;
    return probabilityOfTask * expectedQueueingTimeDueToTask;
  }

  /**
   * Returns weighted expected queueing time (EQT) for the given time window and
   * the given set of weighted tasks. The tasks must not overlap.
   *
   * The weighted EQT is computed as
   *   sum(contributionToEQT(window, task) * task.weight)
   * for all tasks in weightedTasks, where
   * - contributionToEQT is the function defined above.
   * - task.weight is an arbitrary number between 0.0 and 1.0. This is useful
   *   for computing contribution of chrome subcomponents (e.g. GC) to
   *   the expected queueing time for EQT diagnostics.
   *
   * We assume that input arrival time is uniformly distributed in the given
   * time window.
   *
   * @param {!tr.b.math.Range} A time window.
   * @param {!Array.<!{start: number, end: number, weight: number}>} A list of
   *        weighted tasks. The weight of a task must be between 0.0 and 1.0.
   * @returns {number}
   */
  function weightedExpectedQueueingTime(window, weightedTasks) {
    let result = 0;
    for (const task of weightedTasks) {
      result += contributionToEQT(window, task) * task.weight;
    }
    return result;
  }

  /**
   * Returns expected queueing time for the given time window and
   * the given set of tasks. The tasks must not overlap.
   *
   * @param {!tr.b.math.Range} A time window.
   * @param {!Array.<!{start: number, end: number}>} A list of tasks.
   * @returns {number}
   */
  function expectedQueueingTime(window, tasks) {
    return weightedExpectedQueueingTime(window, tasks.map(function(task) {
      return { start: task.start, end: task.end, weight: 1 };
    }));
  }

  /**
   * Object of this calss represents the sliding window and maintains its
   * main invariant: windowEQT = firstTaskEQT + innerEQT + lastTaskEQT.
   * It is intended to be used only in maxExpectedQueueingTimeInSlidingWindow().
   */
  class SlidingWindow {
    /**
     * @param {number} The starting time of the sliding window.
     * @param {number} The window size.
     * @param {!Array.<!{start: number, end: number}>} A list of tasks sorted by
     *     task start time.
     */
    constructor(startTime, windowSize, sortedTasks) {
      /**
       * @private @const {number} The window size.
       */
      this.windowSize_ = windowSize;
      /**
       * @private @const {!Array.<!{start: number, end: number}>} The tasks.
       */
      this.sortedTasks_ = sortedTasks;
      /**
       * @private {!tr.b.math.Range} The endpoints of the sliding window.
       */
      this.range_ = tr.b.math.Range.fromExplicitRange(
          startTime, startTime + windowSize);
      /**
       * @private {number} The index of the first task in the sortedTasks that
       *     ends after this window starts:
       *     this.range_.min < this.sortedTasks_[this.firstTaskIndex_].end.
       */
      this.firstTaskIndex_ =
          sortedTasks.findIndex(task => startTime < task.end);
      if (this.firstTaskIndex_ === -1) {
        this.firstTaskIndex_ = sortedTasks.length;
      }
      /**
       * @private {number} The index of the last task in the sortedTasks that
       *     starts before this window ends:
       *     this.range.max > this.sortedTasks_[lastTaskIndex_].start.
       */
      this.lastTaskIndex_ = -1;
      while (this.lastTaskIndex_ + 1 < sortedTasks.length &&
          sortedTasks[this.lastTaskIndex_ + 1].start < startTime + windowSize) {
        this.lastTaskIndex_++;
      }
      /**
       * @private {number} The sum of EQT contributions for all tasks between
       *     the first task and the last task (excluding the first and the last
       *     tasks). All such tasks are completely inside the window.
       */
      this.innerEQT_ = 0;
      for (let i = this.firstTaskIndex_ + 1; i < this.lastTaskIndex_; i++) {
        this.innerEQT_ += contributionToEQT(this.range_, sortedTasks[i]);
      }
    }

    /**
     * @returns the EQT for this window.
     */
    get getEQT() {
      let firstTaskEQT = 0;
      if (this.firstTaskIndex_ < this.sortedTasks_.length) {
        firstTaskEQT = contributionToEQT(this.range_,
            this.sortedTasks_[this.firstTaskIndex_]);
      }
      let lastTaskEQT = 0;
      if (this.firstTaskIndex_ < this.lastTaskIndex_) {
        lastTaskEQT = contributionToEQT(this.range_,
            this.sortedTasks_[this.lastTaskIndex_]);
      }
      return firstTaskEQT + this.innerEQT_ + lastTaskEQT;
    }

    /**
     * Moves the window to the given time t.
     * @param {number} The time.
     */
    slide(t) {
      this.range_ = tr.b.math.Range.fromExplicitRange(t, t + this.windowSize_);
      if (this.firstTaskIndex_ < this.sortedTasks_.length &&
          this.sortedTasks_[this.firstTaskIndex_].end <= t) {
        // The first task moved out of the window.
        this.firstTaskIndex_++;
        if (this.firstTaskIndex_ < this.lastTaskIndex_) {
          // The new first window was accounted in innerEQT. Undo that.
          this.innerEQT_ -= contributionToEQT(this.range_,
              this.sortedTasks_[this.firstTaskIndex_]);
        }
      }
      if (this.lastTaskIndex_ + 1 < this.sortedTasks_.length &&
          this.sortedTasks_[this.lastTaskIndex_ + 1].start <
              t + this.windowSize_) {
        // A new task moved in the window.
        if (this.firstTaskIndex_ < this.lastTaskIndex_) {
          // The old last task is completely inside the window.
          // Account it in innerEQT.
          this.innerEQT_ += contributionToEQT(this.range_,
              this.sortedTasks_[this.lastTaskIndex_]);
        }
        this.lastTaskIndex_++;
      }
    }
  }

  /**
   * Returns maximum expected queueing time for time window of the given size
   * that slides from the startTime to the endTime:
   *   max { expectedQueueingTime(window(t, t + windowSize), tasks),
   *         for all startTime <= t && t + w <= endTime }.
   * See https://goo.gl/jmWpMl for the description of the algorithm.
   *
   * @param {number} start time for the sliding window.
   * @param {number} end time for the sliding window.
   * @param {number} the size of the sliding window.
   * @param {!Array.<!{start: number, end: number}>} A list of tasks.
   *        The tasks must not overlap.
   * @returns {number}
   */
  function maxExpectedQueueingTimeInSlidingWindow(startTime, endTime,
      windowSize, tasks) {
    if (windowSize <= 0) {
      throw Error('The window size must be positive number');
    }
    if (startTime + windowSize > endTime) {
      throw Error('The sliding window must fit in the specified time range');
    }

    const sortedTasks = tasks.slice().sort((a, b) => a.start - b.start);

    for (let i = 1; i < sortedTasks.length; i++) {
      // Due to floating-point precision errors it might happen that the end
      // of the previous task is larger than the start of the current task.
      // Here is an example from a real trace:
      // Task 1: start=25851.0181016922 end=25851.0481016922
      // Task 2: start=25851.0251016616 end=34496.0291013717.
      // To account for precision errors we consider tasks as overlapping
      // if the overlap is sufficiently large.
      const PRECISION_MS = 0.1;
      if (sortedTasks[i - 1].end > sortedTasks[i].start + PRECISION_MS) {
        throw Error('Tasks must not overlap');
      }
      // Ensure that the previous task finishes not later than the current task.
      if (sortedTasks[i - 1].end > sortedTasks[i].start) {
        const midpoint = (sortedTasks[i - 1].end + sortedTasks[i].start) / 2;
        sortedTasks[i - 1].end = midpoint;
        sortedTasks[i].start = midpoint;
      }
    }

    // Collect all time points that the sliding window needs to stop at.
    // See https://goo.gl/jmWpMl for justification.
    let endpoints = [];
    endpoints.push(startTime);
    endpoints.push(endTime - windowSize);
    for (const task of tasks) {
      endpoints.push(task.start - windowSize);
      endpoints.push(task.start);
      endpoints.push(task.end - windowSize);
      endpoints.push(task.end);
    }
    endpoints = endpoints.filter(
        x => (startTime <= x && x + windowSize <= endTime));
    endpoints.sort((a, b) => a - b);

    // Slide the window and compute maxEQT.
    const slidingWindow = new SlidingWindow(
        endpoints[0], windowSize, sortedTasks);
    let maxEQT = 0;
    for (const t of endpoints) {
      slidingWindow.slide(t);
      maxEQT = Math.max(maxEQT, slidingWindow.getEQT);
    }
    return maxEQT;
  }

  return {
    getPostInteractiveTaskWindows,
    getNavStartTimestamps,
    getInteractiveTimestamps,
    expectedQueueingTime,
    maxExpectedQueueingTimeInSlidingWindow,
    weightedExpectedQueueingTime
  };
});


'use strict';

tr.exportTo('tr.e.v8', function() {
  class RuntimeStatsEntry {
    /**
     * @param time is in microseconds.
     */
    constructor(name, count, time) {
      this.name_ = name;
      this.count_ = count;
      this.time_ = time;
    }

    get name() {
      return this.name_;
    }

    get count() {
      return this.count_;
    }

    get time() {
      return this.time_;
    }

    addSample(count, time) {
      this.count_ += count;
      this.time_ += time;
    }
  }

  class RuntimeStatsGroup extends RuntimeStatsEntry {
    constructor(name, matchRegex) {
      super(name, 0, 0);
      this.regex_ = matchRegex;
      this.entries_ = new Map();
    }

    match(name) {
      return this.regex_ && name.match(this.regex_);
    }

    add(entry) {
      const value = this.entries_.get(entry.name);
      if (value !== undefined) {
        value.addSample(entry.count, entry.time);
      } else {
        this.entries_.set(entry.name, entry);
      }
      this.count_ += entry.count;
      this.time_ += entry.time;
    }

    get values() {
      return Array.from(this.entries_.values());
    }
  }

  class RuntimeStatsGroupCollection {
    constructor() {
      this.blink_cpp_group_ =
        new RuntimeStatsGroup('Blink C++', /.*Callback.*/);
      this.api_group_ = new RuntimeStatsGroup('API', /.*API.*/);

      this.groups_ = [
        new RuntimeStatsGroup('Total'),
        new RuntimeStatsGroup('IC', /.*IC_.*/),
        new RuntimeStatsGroup('Optimize',
          /StackGuard|.*Optimize.*|.*Deoptimize.*|Recompile.*/),
        new RuntimeStatsGroup('Compile-Background',
          /(.*CompileBackground.*)/),
        new RuntimeStatsGroup('Compile', /(^Compile.*)|(.*_Compile.*)/),
        new RuntimeStatsGroup('Parse-Background', /.*ParseBackground.*/),
        new RuntimeStatsGroup('Parse', /.*Parse.*/),
        this.blink_cpp_group_,
        this.api_group_,
        new RuntimeStatsGroup('GC-Background-Marking',
            /.*GC.MC.BACKGROUND.*MARKING.*/),
        new RuntimeStatsGroup('GC-Background-Sweeping',
            /.*GC.MC.BACKGROUND.*SWEEPING.*/),
        new RuntimeStatsGroup('GC-Background-Scavenger',
            /.*GC.SCAVENGER.BACKGROUND.*/),
        new RuntimeStatsGroup('GC-Background-MinorMC',
            /.*GC.MINOR_MC.BACKGROUND.*/),
        new RuntimeStatsGroup('GC-Background-MajorMC',
            /.*GC.MC.BACKGROUND.*/),
        new RuntimeStatsGroup('GC-Background-Other', /.*GC.*BACKGROUND.*/),
        new RuntimeStatsGroup('GC', /GC|AllocateInTargetSpace/),
        new RuntimeStatsGroup('JavaScript', /JS_Execution/),
        new RuntimeStatsGroup('V8 C++', /.*/)
      ];

      this.blink_group_collection_ = null;
    }

    addSlices(slices) {
      const blinkEntries = [];
      for (const slice of slices) {
        if (!(slice instanceof tr.e.v8.V8ThreadSlice)) return;
        let runtimeCallStats;
        try {
          runtimeCallStats = JSON.parse(slice.runtimeCallStats);
        } catch (e) {
          runtimeCallStats = slice.runtimeCallStats;
        }
        if (runtimeCallStats === undefined) continue;
        for (const [name, stat] of Object.entries(runtimeCallStats)) {
          // Blink RCS stats go to a separate table
          if (name.match(/Blink_.*/)) {
            // This counter is used to avoid counting time spent in V8 as time
            // spent doing Blink C++, and interferes with total and percentage
            // calculations, so we skip this counter.
            if (name === 'Blink_V8') continue;
            const entry = new RuntimeStatsEntry(name, stat[0], stat[1]);
            blinkEntries.push(entry);
            continue;
          }

          // Skip the 'Total' group
          for (let i = 1; i < this.groups_.length; ++i) {
            if (this.groups_[i].match(name)) {
              if (stat.length !== 2) break;
              const entry = new RuntimeStatsEntry(name, stat[0], stat[1]);
              this.groups_[0].addSample(stat[0], stat[1]);
              this.groups_[i].add(entry);
              break;
            }
          }
        }
      }

      this.blink_group_collection_ =
        new BlinkRuntimeStatsGroupCollection(blinkEntries);
    }

    get totalTime() {
      return this.groups_[0].time;
    }

    get totalCount() {
      return this.groups_[0].count;
    }

    get runtimeGroups() {
      return this.groups_;
    }

    get blinkRCSGroupCollection() {
      return this.blink_group_collection_;
    }

    get blinkCppTotalTime() {
      // Include API time because Blink RCS times also include V8 API times
      return this.blink_cpp_group_.time + this.api_group_.time;
    }
  }

  class BlinkRuntimeStatsGroupCollection {
    constructor(entries) {
      this.groups_ = [
        new RuntimeStatsGroup('Blink_Bindings', /^Blink_Bindings_(.*)/),
        new RuntimeStatsGroup('Blink_GC', /^Blink_GC_(.*)/),
        new RuntimeStatsGroup('Blink_Layout', /^Blink_Layout_(.*)/),
        new RuntimeStatsGroup('Blink_Parsing', /^Blink_Parsing_(.*)/),
        new RuntimeStatsGroup('Blink_Style', /^Blink_Style_(.*)/),
        new RuntimeStatsGroup('Blink_Callbacks', /^Blink_(.*)/)
      ];
      this.total_group_ = new RuntimeStatsGroup('Blink_Total', /.*/);

      for (const entry of entries) {
        for (const group of this.groups_) {
          if (group.match(entry.name)) {
            // Strip out category prefix
            const newEntry = new RuntimeStatsEntry(
              'Blink_' + group.match(entry.name)[1], entry.count, entry.time);
            group.add(newEntry);
            this.total_group_.addSample(entry.count, entry.time);
            break;
          }
        }
      }
    }

    get runtimeGroups() {
      return this.groups_.concat(this.total_group_);
    }

    get values() {
      return this.groups_.reduce(
          (values, group) => values.concat(group.values), []);
    }

    get totalTime() {
      return this.total_group_.time;
    }

    get totalCount() {
      return this.total_group_.count;
    }
  }

  return {
    BlinkRuntimeStatsGroupCollection,
    RuntimeStatsEntry,
    RuntimeStatsGroup,
    RuntimeStatsGroupCollection,
  };
});


'use strict';

/**
 * @fileoverview
 * This file defines the input latency metric estimated as the maximum
 * expected queueing time (EQT) in sliding window of size 500ms.
 *
 * The EQT is defined as the average queueing time of a hypothetical input
 * event arriving at a random time in the given time window.
 * For more information see:
 * - https://goo.gl/OQ2bX6
 * - https://goo.gl/jmWpMl
 * - https://goo.gl/lga4iO
 */
tr.exportTo('tr.metrics.sh', function() {
  // The size of the sliding window is chosen arbitrarily (see
  // https://goo.gl/lga4iO).
  const WINDOW_SIZE_MS = 500;
  const EQT_BOUNDARIES = tr.v.HistogramBinBoundaries
      .createExponential(0.01, WINDOW_SIZE_MS, 50);

  /**
   * Returns true if the slice contains a forced GC event. Some stories force
   * garbage collection before sampling memory usage. Since a forced GC takes
   * long time we need to ignore it to avoid biasing the input latency results.
   */
  function containsForcedGC_(slice) {
    return slice.findTopmostSlicesRelativeToThisSlice(
        tr.metrics.v8.utils.isForcedGarbageCollectionEvent).length > 0;
  }

  /**
   * @param {!string} name Name of the histogram.
   * @param {!string} description Description of the histogram.
   * @returns {!tr.v.Histogram}
   */
  function createHistogramForEQT_(name, description) {
    const histogram = new tr.v.Histogram(name,
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, EQT_BOUNDARIES);
    histogram.customizeSummaryOptions({
      avg: false,
      count: false,
      max: true,
      min: false,
      std: false,
      sum: false,
    });
    histogram.description = description;
    return histogram;
  }

  /**
   * Computes the maximum expected queueing time in the sliding time window
   * of size 500ms (WINDOW_SIZE_MS). The function produces four Histograms:
   * - total:500ms_window:renderer_eqt,
   * - total:500ms_window:renderer_eqt_cpu,
   * - interactive:500ms_window:renderer_eqt.
   * - interactive:500ms_window:renderer_eqt_cpu.
   * The 'total' histograms are computed for the whole trace. The 'interactive'
   * histograms are computed for the time while the page is interactive.
   * The 'cpu' histograms use the CPU time of the events instead of the wall-
   * clock times. Each renderer process adds one sample to the histograms.
   */
  function expectedQueueingTimeMetric(histograms, model) {
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    const rendererHelpers = Object.values(chromeHelper.rendererHelpers);
    const rendererToInteractiveTimestamps =
        tr.e.chrome.getInteractiveTimestamps(model);
    addExpectedQueueingTimeMetric_(
        'renderer_eqt',
        event => {return {start: event.start, duration: event.duration};},
        false, rendererHelpers, rendererToInteractiveTimestamps, histograms,
        model);
    addExpectedQueueingTimeMetric_(
        'renderer_eqt_cpu',
        event => {return {start: event.cpuStart, duration: event.cpuDuration};},
        true, rendererHelpers, rendererToInteractiveTimestamps, histograms,
        model);
  }

  /**
  * @callback EventTimesCallback
  * @param {!tr.b.Event} event
  * @return {{start: !number, duration: !number}} event start time and duration.
  */

  /**
   * The actual implementation of the EQT metric.
   * @param {!string} eqtName the metric name part of the histogram name.
   * @param {!EventTimesCallback} getEventTimes.
   * @param {!Array.<tr.model.helpers.ChromeRendererHelper>} rendererHelpers.
   * @param {!Map.<number, Array.<number>>} rendererToInteractiveTimestamps
   *     a map from renderer pid to an array of interactive timestamps.
   */
  function addExpectedQueueingTimeMetric_(eqtName, getEventTimes, isCpuTime,
      rendererHelpers, rendererToInteractiveTimestamps, histograms, model) {
    /**
     * Extracts tasks for EQT computation from the given renderer.
     * A task is a pair of {start, end} times.
     */
    function getTasks(rendererHelper) {
      const tasks = [];
      for (const slice of rendererHelper.mainThread.sliceGroup.topLevelSlices) {
        const times = getEventTimes(slice);
        if (times.duration > 0 && !containsForcedGC_(slice)) {
          tasks.push({start: times.start, end: times.start + times.duration});
        }
      }
      return tasks;
    }
    const totalHistogram = createHistogramForEQT_(
        `total:${WINDOW_SIZE_MS}ms_window:${eqtName}`,
        `The maximum EQT in a ${WINDOW_SIZE_MS}ms sliding window` +
        ' for a given renderer');
    const interactiveHistogram = createHistogramForEQT_(
        `interactive:${WINDOW_SIZE_MS}ms_window:${eqtName}`,
        `The maximum EQT in a ${WINDOW_SIZE_MS}ms sliding window` +
        ' for a given renderer while the page is interactive');
    for (const rendererHelper of rendererHelpers) {
      if (rendererHelper.isChromeTracingUI) continue;
      // Renderers with lifetime smaller than WINDOW_SIZE_MS do not have
      // meaningful EQT.
      if (rendererHelper.mainThread.bounds.duration < WINDOW_SIZE_MS) continue;

      const tasks = getTasks(rendererHelper);
      totalHistogram.addSample(
          tr.e.chrome.maxExpectedQueueingTimeInSlidingWindow(
              rendererHelper.mainThread.bounds.min,
              rendererHelper.mainThread.bounds.max,
              WINDOW_SIZE_MS, tasks));
      const interactiveTimestamps =
        rendererToInteractiveTimestamps.get(rendererHelper.pid);
      if (interactiveTimestamps.length === 0) continue;
      if (interactiveTimestamps.length > 1) {
        // TODO(ulan): Support multiple interactive time windows when
        // https://crbug.com/692112 is fixed.
        continue;
      }
      const interactiveWindow =
          tr.b.math.Range.fromExplicitRange(interactiveTimestamps[0], Infinity)
          .findIntersection(rendererHelper.mainThread.bounds);
      interactiveHistogram.addSample(
          tr.e.chrome.maxExpectedQueueingTimeInSlidingWindow(
              interactiveWindow.min, interactiveWindow.max,
              WINDOW_SIZE_MS, tasks));
    }
    addV8ContributionToExpectedQueueingTime_(
        eqtName, getEventTimes, isCpuTime, totalHistogram, interactiveHistogram,
        rendererToInteractiveTimestamps, histograms, model);
    histograms.addHistogram(totalHistogram);
    histograms.addHistogram(interactiveHistogram);
  }

  /**
   * Adds v8 related diagnostic histograms for the total and interactive EQT
   * of the renderer.
   * Sample histograms:
   * - total:500ms_window:renderer_eqt:v8,
   * - total:500ms_window:renderer_eqt:v8:gc,
   * - interactive:500ms_window:renderer_eqt:v8:gc:scavenger,
   * - interactive:500ms_window:renderer_eqt:v8:compile.
   * @param {!string} eqtName the metric name part of the histogram name.
   * @param {!EventTimesCallback} getEventTimes.
   * @param {!tr.v.Histogram} totalEqtHistogram.
   * @param {!tr.v.Histogram} interactiveEqtHistogram.
   * @param {!Map.<number, Array.<number>>} rendererToInteractiveTimestamps
   *     a map from renderer pid to an array of interactive timestamps.
   */
  function addV8ContributionToExpectedQueueingTime_(
      eqtName, getEventTimes, isCpuTime, totalEqtHistogram,
      interactiveEqtHistogram, rendererToInteractiveTimestamps,
      histograms, model) {
    if (!model.categories.includes('v8')) return;
    const breakdownForTotal = new tr.v.d.RelatedHistogramMap();
    const breakdownForInteractive = new tr.v.d.RelatedHistogramMap();
    // Include task extractors that use tracing.
    const eventNamesWithTaskExtractors =
        getV8EventNamesWithTaskExtractors_(getEventTimes);
    if (!isCpuTime) {
      // Include task extractors that use RCS. RCS does not provide cpu time
      // so include these only for wall clock time.
      const taskExtractorsUsingRCS =
          getV8EventNamesWithTaskExtractorsUsingRCS_(getEventTimes);
      for (const [eventName, getTasks] of taskExtractorsUsingRCS) {
        eventNamesWithTaskExtractors.set(eventName, getTasks);
      }
    }
    for (const [eventName, getTasks] of eventNamesWithTaskExtractors) {
      const contribution = contributionToExpectedQueueingTime_(
          eqtName, eventName, getTasks, rendererToInteractiveTimestamps,
          histograms, model);
      breakdownForTotal.set(eventName, contribution.total);
      breakdownForInteractive.set(eventName, contribution.interactive);
    }
    totalEqtHistogram.diagnostics.set('v8', breakdownForTotal);
    interactiveEqtHistogram.diagnostics.set('v8', breakdownForInteractive);
  }

  /**
  * @callback TaskExtractor
  * @param {!tr.model.helpers.ChromeRendererHelper} rendererHelper
  * @return {Array.<{start: !number, end: !number}>}
  */

  /**
   * @param {!EventTimesCallback} getEventTimes.
   * @returns {!Map.<string, TaskExtractor>} a map from V8 event names to
   *     the corresponding task extractor functions.
   */
  function getV8EventNamesWithTaskExtractors_(getEventTimes, cpuMetrics) {
    /**
     * @param {!tr.b.Event} slice.
     * @param {!function(tr.b.Event): boolean} predicate that selects V8 events.
     * @param {function(tr.b.Event): boolean} excludePredicate that excludes
     *     V8 events.
     * @returns {!number} the total duration of topmost subslices of the given
     *     slice that satisfy the given |predicate| after filtering out any
     *     events that satisfy the |excludePredicate| in the subslices.
     */
    function durationOfTopmostSubSlices(slice, predicate, excludePredicate) {
      let duration = 0;
      for (const sub of slice.findTopmostSlicesRelativeToThisSlice(predicate)) {
        duration += getEventTimes(sub).duration;
        if (excludePredicate !== null && excludePredicate !== undefined) {
          duration -= durationOfTopmostSubSlices(sub, excludePredicate);
        }
      }
      return duration;
    }

    /**
     * @param {!function(tr.b.Event): boolean} predicate that selects V8 events.
     * @param {function(tr.b.Event): boolean} excludePredicate that excludes
     *     V8 events.
     * @returns {!TaskExtractor} a function that extracts tasks from the given
     *     renderer. Each task is a pair of {start, end} times and its duration
     *     represents the contribution of the events selected by the
     *     given |predicate| and |excludePredicate|.
     */
    function taskExtractor(predicate, excludePredicate) {
      return function(rendererHelper) {
        const slices = rendererHelper.mainThread.sliceGroup.topLevelSlices;
        const result = [];
        for (const slice of slices) {
          const times = getEventTimes(slice);
          if (times.duration > 0 && !containsForcedGC_(slice)) {
            const duration = durationOfTopmostSubSlices(
                slice, predicate, excludePredicate);
            result.push({start: times.start, end: times.start + duration});
          }
        }
        return result;
      };
    }

    return new Map([
      [
        'v8',
        taskExtractor(tr.metrics.v8.utils.isV8Event)
      ],
      [
        'v8:execute',
        taskExtractor(tr.metrics.v8.utils.isV8ExecuteEvent)
      ],
      [
        'v8:gc',
        taskExtractor(tr.metrics.v8.utils.isGarbageCollectionEvent)
      ],
      [
        'v8:gc:full-mark-compactor',
        taskExtractor(tr.metrics.v8.utils.isFullMarkCompactorEvent)
      ],
      [
        'v8:gc:incremental-marking',
        taskExtractor(tr.metrics.v8.utils.isIncrementalMarkingEvent)
      ],
      [
        'v8:gc:latency-mark-compactor',
        taskExtractor(tr.metrics.v8.utils.isLatencyMarkCompactorEvent)
      ],
      [
        'v8:gc:memory-mark-compactor',
        taskExtractor(tr.metrics.v8.utils.isMemoryMarkCompactorEvent)
      ],
      [
        'v8:gc:scavenger',
        taskExtractor(tr.metrics.v8.utils.isScavengerEvent)
      ]
    ]);
  }

  /**
    * @param {!EventTimesCallback} getEventTimes.
    * @param {!function(!string): boolean} predicate that selects RCS category.
    * @param {!tr.model.helpers.ChromeRendererHelper} rendererHelper
    * @returns {Array.<{start: !number, end: !number}>} a list of tasks. Each
    *     task is a pair of {start, end} times and its duration represents the
    *     the contribution of the events selected by the given |predicate|.
    */
  function extractTaskRCS(getEventTimes, predicate, rendererHelper) {
    const result = [];
    for (const topSlice of
        rendererHelper.mainThread.sliceGroup.topLevelSlices) {
      const times = getEventTimes(topSlice);
      if (times.duration <= 0 || containsForcedGC_(topSlice)) {
        continue;
      }
      // Find all V8ThreadSlices in the top level slice.
      const v8ThreadSlices = [];
      for (const slice of topSlice.descendentSlices) {
        if (tr.metrics.v8.utils.isV8RCSEvent(slice)) {
          v8ThreadSlices.push(slice);
        }
      }

      // Find the event specified by predicate.
      const runtimeGroupCollection =
        new tr.e.v8.RuntimeStatsGroupCollection();
      runtimeGroupCollection.addSlices(v8ThreadSlices);
      let duration = 0;
      for (const runtimeGroup of runtimeGroupCollection.runtimeGroups) {
        if (predicate(runtimeGroup.name)) {
          duration += runtimeGroup.time;
        }
      }

      duration = tr.b.convertUnit(
          duration,
          tr.b.UnitPrefixScale.METRIC.MICRO,
          tr.b.UnitPrefixScale.METRIC.MILLI);
      result.push({start: times.start, end: times.start + duration});
    }
    return result;
  }

  /**
   * @param {!EventTimesCallback} getEventTimes.
   * @returns {!Map.<string, TaskExtractor>} a map from V8 event names to
   *     the corresponding task extractor functions.
   */
  function getV8EventNamesWithTaskExtractorsUsingRCS_(getEventTimes) {
    const extractors = new Map();
    extractors.set('v8:compile_rcs',
        rendererHelper => extractTaskRCS(
            getEventTimes,
            tr.metrics.v8.utils.isCompileRCSCategory,
            rendererHelper));
    extractors.set('v8:compile:optimize_rcs',
        rendererHelper => extractTaskRCS(
            getEventTimes,
            tr.metrics.v8.utils.isCompileOptimizeRCSCategory,
            rendererHelper));
    extractors.set('v8:compile:parse_rcs',
        rendererHelper => extractTaskRCS(
            getEventTimes,
            tr.metrics.v8.utils.isCompileParseRCSCategory,
            rendererHelper));
    extractors.set('v8:compile:compile-unoptimize_rcs',
        rendererHelper => extractTaskRCS(
            getEventTimes,
            tr.metrics.v8.utils.isCompileUnoptimizeRCSCategory,
            rendererHelper));
    return extractors;
  }

  /**
   * Computes the contribution of the selected events to the expected queueing
   * time. We define the contribution as the maximum expected queueing time in
   * the sliding time window of size 500ms (WINDOW_SIZE_MS) for the trace that
   * is modified as follows:
   * - from each top-level task remove all subevents except the selected events.
   * - removing subevents shrinks a task by shifting its end time closer to
   *   the start time. The start time does not change.
   *
   * Similar to the expectedQueueingTime this function computes two histograms:
   * total and interactive. For example:
   * - total:500ms_window:renderer_eqt:v8,
   * - interactive:500ms_window:renderer_eqt:v8.
   * Each renderer process adds one sample to the histograms.
   * Both histograms are added to the given histogram set.
   *
   * @param {!string} eqtName the metric name part of the histogram name.
   * @param {!string} eventName the name describing the selected events. This
   *     name will be added to metric names.
   * @param {!TaskExtractor} getTasks a function that given a renderer returns
   *     tasks for computing the EQT taking into account the contribution of
   *     the selected events.
   * @param {!Map.<number, Array.<number>>} rendererToInteractiveTimestamps
   *     a map from renderer pid to an array of interactive timestamps.
   * @returns {{total: !tr.v.Histogram, interactive: !tr.v.Histogram}}
   */
  function contributionToExpectedQueueingTime_(
      eqtName, eventName, getTasks,
      rendererToInteractiveTimestamps, histograms, model) {
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    const totalHistogram = createHistogramForEQT_(
        `total:${WINDOW_SIZE_MS}ms_window:${eqtName}:${eventName}`,
        `Contribution to the expected queueing time by ${eventName}` +
        ' for a given renderer. It is computed as the maximum EQT in' +
        ` a ${WINDOW_SIZE_MS}ms sliding window after shrinking top-level` +
        ` tasks to contain only ${eventName} subevents`);
    const interactiveHistogram = createHistogramForEQT_(
        `interactive:${WINDOW_SIZE_MS}ms_window:${eqtName}:${eventName}`,
        `Contribution to the expected queueing time by ${eventName}` +
        ' for a given renderer while the page is interactive. It is computed' +
        ` as the maximum EQT in a ${WINDOW_SIZE_MS}ms sliding window after` +
        ` shrinking top-level tasks to contain only ${eventName} subevents`);
    const rendererHelpers = Object.values(chromeHelper.rendererHelpers);
    for (const rendererHelper of rendererHelpers) {
      if (rendererHelper.isChromeTracingUI) continue;
      const tasks = getTasks(rendererHelper);
      totalHistogram.addSample(
          tr.e.chrome.maxExpectedQueueingTimeInSlidingWindow(
              rendererHelper.mainThread.bounds.min,
              rendererHelper.mainThread.bounds.max,
              WINDOW_SIZE_MS, tasks));
      const interactiveTimestamps =
          rendererToInteractiveTimestamps.get(rendererHelper.pid);
      if (interactiveTimestamps.length === 0) continue;
      if (interactiveTimestamps.length > 1) {
        // TODO(ulan): Support multiple interactive time windows when
        // https://crbug.com/692112 is fixed.
        continue;
      }
      const interactiveWindow =
          tr.b.math.Range.fromExplicitRange(interactiveTimestamps[0], Infinity)
          .findIntersection(rendererHelper.mainThread.bounds);
      interactiveHistogram.addSample(
          tr.e.chrome.maxExpectedQueueingTimeInSlidingWindow(
              interactiveWindow.min, interactiveWindow.max,
              WINDOW_SIZE_MS, tasks));
    }
    histograms.addHistogram(totalHistogram);
    histograms.addHistogram(interactiveHistogram);
    return {
      total: totalHistogram,
      interactive: interactiveHistogram
    };
  }

  tr.metrics.MetricRegistry.register(expectedQueueingTimeMetric);

  return {
    expectedQueueingTimeMetric,
  };
});


'use strict';

/**
 * @fileoverview Multi-dimensional view data structure.
 *
 * A multi-dimensional view provides a hierarchical representation of a
 * collection of multi-dimensional paths with associated scalar values. Unlike
 * separate single-dimensional views (e.g. one tree for each dimension),
 * multi-dimensional views facilitate aggregation over combinations of
 * substrings of the path dimensions (rather than just substrings of a single
 * path dimension).
 *
 * Every view consists of multi-dimensional nodes (see MultiDimensionalViewNode
 * for more details). This file also provides a builder class for constructing
 * top-down and bottom-up representations of arbitrary collections of
 * multi-dimensional paths (see MultiDimensionalViewBuilder for more details).
 *
 * Example: Given the following collection of two dimensional paths:
 *
 *   <===================== Path =====================>   <== Total values ===>
 *    <------- dimension 0 ------->  <- dimension 1 ->    <- v 0 ->  <- v 1 ->
 *   [['Run()', 'Exec()', 'Call()'], ['Obj', 'View']  ]: [1        , 3
 *   [['Run()', 'Exec()', 'Call()'], ['Obj', 'Widget']]: [2        , 5
 *   [['Run()', 'Exec()', 'Load()'], ['Obj']          ]: [4        , 11
 *   [['Run()', 'Exec()']          , ['int']          ]: [8        , 7
 *   [['Run()']                    , ['Obj', 'Window']]: [16       , 0
 *   [['Stop()']                   , ['Obj']          ]: [32       , 13
 *
 * a multi-dimensional view provides a recursive breakdown of the aggregated
 * values, e.g. (total values shown in square brackets):
 *
 *   (root): [63, 39]
 *     |
 *     | break down by 0th dimension
 *     v
 *   Run():  [31, 26]
 *     |
 *     | break down by 0th dimension
 *     v
 *   Exec(): [15, 26]
 *     |
 *     | break down by 1st dimension
 *     v
 *   Obj:    [7, 19]
 *     |
 *     | break down by 0th dimension again
 *     v
 *   Call(): [3, 8]
 *     |
 *     | break down by 1st dimension again
 *     v
 *   View:   [1, 3]
 *
 * Observe that the recursive breakdown above is over both dimensions.
 * Furthermore, the underlying single-dimension paths (Run() -> Exec() -> Call()
 * and Obj -> View) can be arbitrarily interleaved in the breakdown.
 */
tr.exportTo('tr.b', function() {
  /**
   * Node of a multi-dimensional view.
   *
   * The structure of a view is encoded in the nodes using links to their
   * children wrt each dimension. The diagram below shows how the nodes
   * corresponding to the following four two-dimensional view paths:
   *
   *   1. [['A', 'B'], ['1', '2']]
   *   2. [['A', 'C'], ['1', '2']]
   *   3. [['A', 'B'], ['1', '3']]
   *   4. [['A', 'C'], ['1', '3']]
   *
   * can be reached from the root of a two-dimensional view using these links
   * ('*' stands for undefined):
   *
   *                       +---------------------+
   *                       | title: [*,*] (root) |
   *                       +---------------------+
   *                     children wrt    children wrt
   *                    0th dimension    1st dimension
   *                              |        :
   *              _______A________|        :........1.........
   *             |                                           :
   *             v                                           v
   *         +--------------+                     +--------------+
   *         | title: [A,*] |                     | title: [*,1] |
   *         +--------------+                     +--------------+
   *    children wrt   children wrt         children wrt   children wrt
   *   0th dimension   1st dimension       0th dimension   1st dimension
   *           | |       :.....1......    _____A_____|       : :
   *        _B_| |__C__              :   |             ...2..: :.3..
   *       |           |             :   |             :           :
   *       v           v             v   v             v           v
   *   +-------+   +-------+       +-------+       +-------+   +-------+
   *   | [B,*] |   | [C,*] |       | [A,1] |       | [*,2] |   | [*,3] |
   *   +-------+   +-------+       +-------+       +-------+   +-------+
   *       :        ___:_____B______| | : :......3.....|....       |
   *       :.1..   |   :.1..    __C___| :...2...    _A_|   :    _A_|
   *           :   |       :   |               :   |       :   |
   *           v   v       v   v               v   v       v   v
   *         +-------+   +-------+           +-------+   +-------+
   *         | [B,1] |   | [C,1] |           | [A,2] |   | [A,3] |
   *         +-------+   +-------+           +-------+   +-------+
   *           :   :       :   :.......3.......||..........   ||
   *           :   :..3....:................   BC         :   BC
   *           :     ______:_______________:___||         :   ||
   *           2    |      2        _______:____|   ______:___||
   *           :    |      :       |       :       |      :    |
   *           v    v      v       v       v       v      v    v
   *       +----------+   +----------+   +----------+   +----------+
   *       |  [B,2]   |   |  [C,2]   |   |  [B,3]   |   |  [C,3]   |
   *       | (node 1) |   | (node 2) |   | (node 3) |   | (node 4) |
   *       +----------+   +----------+   +----------+   +----------+
   *
   * The self/total values of a node represents the aggregated values of all
   * paths (in the collection from which the view was built) matching the node
   * excluding/including the node's descendants.
   *
   * Terminology examples:
   *
   *   - Children of [A,*] wrt 0th dimension: [B,*], [C,*]
   *   - Children of [A,*] (wrt all dimensions): [B,*], [C,*], [A,1]
   *   - Descendants of [A,*] wrt 1st dimension: [A,1], [A,2], [A,3]
   *   - Single-dimensional descendants of [A,*]: [A,1], [A,2], [A,3], [B,*],
   *     [C,*]
   *   - Descendants of [A,*] (wrt all dimensions): [A,1], [A,2], [A,3], [B,*],
   *     [C,*], [B,1], [C,1], [B,2], [C,2], [B,3], [C,3]
   *
   * @{constructor}
   */
  function MultiDimensionalViewNode(title, valueCount) {
    // List of titles of this node wrt each dimension.
    this.title = title;

    // Map from child name to child node for each dimension.
    const dimensions = title.length;
    this.children = new Array(dimensions);
    for (let i = 0; i < dimensions; i++) {
      this.children[i] = new Map();
    }

    // For each value index (from 0 to |valueCount| - 1), we store the self and
    // total values together with a Boolean flag whether the value is only a
    // lower bound (i.e. aggregated from children rather than provided
    // directly).
    this.values = new Array(valueCount);
    for (let v = 0; v < valueCount; v++) {
      this.values[v] = { self: 0, total: 0, totalState: NOT_PROVIDED };
    }
  }

  /**
   * States of total values stored in multi-dimensional view nodes.
   *
   * @enum
   */
  MultiDimensionalViewNode.TotalState = {
    // Neither total nor self value was provided for either the node or any of
    // its descendants.
    NOT_PROVIDED: 0,

    // The total value was NOT provided for the node, but the self value was
    // provided for the node or the total or self value was provided for at
    // least one of its descendants.
    LOWER_BOUND: 1,

    // The total value was provided for the node.
    EXACT: 2
  };
  // Cache the total value states to avoid repeated object field lookups.
  const NOT_PROVIDED = MultiDimensionalViewNode.TotalState.NOT_PROVIDED;
  const LOWER_BOUND = MultiDimensionalViewNode.TotalState.LOWER_BOUND;
  const EXACT = MultiDimensionalViewNode.TotalState.EXACT;

  MultiDimensionalViewNode.prototype = {
    /** Duck type <tr-ui-b-table> rows. */
    get subRows() {
      return Array.from(this.children[0].values());
    }
  };

  /**
   * Builder for multi-dimensional views.
   *
   * Given a collection of multi-dimensional paths, a builder can be used to
   * construct the following three representations of the paths:
   *
   *   1. Top-down tree view
   *      A multi-dimensional path in the view corresponds to all paths in the
   *      collection that have it as their prefix.
   *
   *   2. Top-down heavy view
   *      A multi-dimensional path in the view corresponds to all paths in the
   *      collection that have it as their substring
   *
   *   3. Bottom-up heavy view
   *      A multi-dimensional path in the view corresponds to all paths in the
   *      collection that have it as their substring reversed.
   *
   * For example, the following collection of 2-dimensional paths (with single
   * values):
   *
   *                  2-dimensional path                | self
   *    Time (0th dimension) | Activity (1st dimension) | value
   *   ========================+========================+=======
   *    Saturday             | Cooking                  |   1 h
   *    Saturday             | Sports -> Football       |   2 h
   *    Sunday               | Sports -> Basketball     |   3 h
   *
   * gives rise to the following top-down tree view, which aggregates the
   * scalar values over prefixes of the given paths:
   *
   *                              +---------+
   *                              |    *    |
   *                              |    *    |
   *                              | self=0  |
   *                              | total=6 |
   *                              +---------+
   *                                | : | :
   *         _________Cooking_______| : | :............Sunday............
   *        |                         : |                               :
   *        |            ...Saturday..: |_Sports_                       :
   *        |            :                       |                      :
   *        v            v                       v                      v
   *   +---------+  +---------+            +---------+             +---------+
   *   |    *    |  |   Sat   |            |    *    |             |   Sun   |
   *   | Cooking |  |    *    |            | Sports  |             |    *    |
   *   | self=0  |  | self=0  |            | self=0  |             | self=0  |
   *   | total=1 |  | total=3 |            | total=5 |             | total=3 |
   *   +---------+  +---------+            +---------+             +---------+
   *      :          |   |                   : | | :                     |
   *    Saturday     | Sports                : | | :                  Sports
   *      :          |   |  .....Saturday....: | | :.....Sunday.......   |
   *      :    _Cook_|   |  :            _Foot_| |_Bask_             :   |
   *      :   |          |  :           |               |            :   |
   *      v   v          v  v           v               v            v   v
   *   +---------+  +---------+  +------------+  +--------------+  +---------+
   *   |   Sat   |  |   Sat   |  |     *      |  |      *       |  |   Sun   |
   *   | Cooking |  | Sports  |  | S/Football |  | S/Basketball |  | Sports  |
   *   | self=1  |  | self=0  |  | self=0     |  | self=0       |  | self=0  |
   *   | total=1 |  | total=2 |  | total=2    |  | total=3      |  | total=3 |
   *   +---------+  +---------+  +------------+  +--------------+  +---------+
   *                    |              :                 :               |
   *                    |_Foot_  ..Sat.:                 :.Sun..   _Bask_|
   *                           | :                             :  |
   *                           v v                             v  v
   *                     +------------+                   +--------------+
   *                     |    Sat     |                   |     Sun      |
   *                     | S/Football |                   | S/Basketball |
   *                     | self=2     |                   | self=3       |
   *                     | total=2    |                   | total=3      |
   *                     +------------+                   +--------------+
   *
   * To build a multi-dimensional view of a collection of multi-dimensional
   * paths, you create a builder, add the paths to it and then use it to
   * construct the view. For example, the following code generates the
   * 2-dimensional top-down tree view shown above:
   *
   *   const builder = new MultiDimensionalViewBuilder(2);
   *   builder.addPath([['Saturday'], ['Cooking']], [1], SELF);
   *   builder.addPath([['Saturday'], ['Sports', 'Football']], [2], SELF);
   *   builder.addPath([['Sunday'], ['Sports', 'Basketball']], [3], SELF);
   *   const treeViewRoot = builder.buildTopDownTreeView();
   *
   * The heavy views can be constructed analogously (by calling
   * buildTopDownHeavyView() or buildBottomUpHeavyView() at the end instead).
   *
   * Note that the same builder can be used to construct both the tree and
   * heavy views (for the same collection of paths). However, no more paths can
   * be added once either view has been built.
   *
   * @{constructor}
   */
  function MultiDimensionalViewBuilder(dimensions, valueCount) {
    if (typeof(dimensions) !== 'number' || dimensions < 0) {
      throw new Error('Dimensions must be a non-negative number');
    }
    this.dimensions_ = dimensions;

    if (typeof(valueCount) !== 'number' || valueCount < 0) {
      throw new Error('Number of values must be a non-negative number');
    }
    this.valueCount_ = valueCount;

    this.buildRoot_ = this.createRootNode_();
    this.topDownTreeViewRoot_ = undefined;
    this.topDownHeavyViewRoot_ = undefined;
    this.bottomUpHeavyViewNode_ = undefined;
    this.complete_ = false;

    this.maxDimensionDepths_ = new Array(dimensions);
    for (let d = 0; d < dimensions; d++) {
      this.maxDimensionDepths_[d] = 0;
    }
  }

  /** @{enum} */
  MultiDimensionalViewBuilder.ValueKind = {
    SELF: 0,
    TOTAL: 1
  };

  /**
   * Types of multi-dimensional views provided by MultiDimensionalViewBuilder.
   *
   * @enum
   */
  MultiDimensionalViewBuilder.ViewType = {
    TOP_DOWN_TREE_VIEW: 0,
    TOP_DOWN_HEAVY_VIEW: 1,
    BOTTOM_UP_HEAVY_VIEW: 2
  };

  MultiDimensionalViewBuilder.prototype = {
    /**
     * Add values associated with a multi-dimensional path to the tree.
     *
     * The path must have the same number of dimensions as the builder. Its
     * elements must be single-dimension paths (lists of strings) of arbitrary
     * length (empty for the root of the given dimension). Starting from the
     * root of the tree, each single-dimension path is traversed from left to
     * right to reach the node corresponding to the whole path.
     *
     * The length of the provided list of values must be equal to the builder's
     * value count. The builder supports adding both kinds of values
     * (self/total) wrt all value indices for an arbitrary multi-dimensional
     * path. The rationale for adding total values (in addition to/instead of
     * self values) is to cater for missing sub-paths. Example: Consider the
     * following collection of single-dimensional paths (with single values):
     *
     *   [['Loop::Run()', 'Execute()', 'FunctionBig']]:       self=99000
     *   [['Loop::Run()', 'Execute()', 'FunctionSmall1']]:    self=1
     *   [['Loop::Run()', 'Execute()', 'FunctionSmall2']]:    self=1
     *   ...
     *   [['Loop::Run()', 'Execute()', 'FunctionSmall1000']]: self=1
     *
     * If we required that only self values could be added to the builder, then
     * all of the 1001 paths would need to be provided (most likely in a trace)
     * to obtain the correct total of [['Loop::Run()', 'Execute()']]. However,
     * since we allow adding total values as well, only the following 2 paths
     * need to be provided to get the correct numbers explaining 99% of the
     * aggregated total value:
     *
     *   [['Loop::Run()', 'Execute()']]:                total=100000
     *   [['Loop::Run()', 'Execute()', 'FunctionBig']]: self=99000
     *
     * In other words, the long tail containing 1000 small paths need not be
     * dumped (greatly reducing the size of a trace where applicable).
     *
     * Important: No paths can be added to a builder once either view has been
     * built!
     */
    addPath(path, values, valueKind) {
      if (this.buildRoot_ === undefined) {
        throw new Error(
            'Paths cannot be added after either view has been built');
      }
      if (path.length !== this.dimensions_) {
        throw new Error('Path must be ' + this.dimensions_ + '-dimensional');
      }
      if (values.length !== this.valueCount_) {
        throw new Error('Must provide ' + this.valueCount_ + ' values');
      }

      let isTotal;
      switch (valueKind) {
        case MultiDimensionalViewBuilder.ValueKind.SELF:
          isTotal = false;
          break;
        case MultiDimensionalViewBuilder.ValueKind.TOTAL:
          isTotal = true;
          break;
        default:
          throw new Error('Invalid value kind: ' + valueKind);
      }

      let node = this.buildRoot_;
      for (let d = 0; d < path.length; d++) {
        const singleDimensionPath = path[d];
        const singleDimensionPathLength = singleDimensionPath.length;
        this.maxDimensionDepths_[d] =
            Math.max(this.maxDimensionDepths_[d], singleDimensionPathLength);
        for (let i = 0; i < singleDimensionPathLength; i++) {
          node = this.getOrCreateChildNode_(node, d, singleDimensionPath[i]);
        }
      }

      for (let v = 0; v < this.valueCount_; v++) {
        const addedValue = values[v];
        if (addedValue === undefined) continue;
        const nodeValue = node.values[v];
        if (isTotal) {
          nodeValue.total += addedValue;
          nodeValue.totalState = EXACT;
        } else {
          nodeValue.self += addedValue;
          nodeValue.totalState = Math.max(nodeValue.totalState, LOWER_BOUND);
        }
      }
    },


    get complete() {
      return this.complete_;
    },

    /**
     * Force all MultiDimensionalViewNode's to have totalState EXACT.
     * Set to true only if all SELF paths for the tree have been provided.
     * Setting unnecessary if providing TOTAL values.
     *
     * MultiDimensionalViewBuilder allows both 'self' and 'total' values to be
     * entered for paths then later when the veiws are constructed it
     * determines the total and whether that total is exact or a lower bound
     * for each node. When total values are provided we know that that total
     * is exact however when self values are provided the computed totals
     * *could* be complete ...if the user has provided the all the self
     * values for the whole tree. We can't know this within the
     * MultiDimensionalViewBuilder so this flag allows the user to specify
     * that this is the case.
     *
     * Important: Can't be set once any view has been built.
     */
    set complete(isComplete) {
      if (this.buildRoot_ === undefined) {
        throw new Error('Can\'t set complete after any view has been built.');
      }
      this.complete_ = isComplete;
    },

    buildView(viewType) {
      switch (viewType) {
        case MultiDimensionalViewBuilder.ViewType.TOP_DOWN_TREE_VIEW:
          return this.buildTopDownTreeView();
        case MultiDimensionalViewBuilder.ViewType.TOP_DOWN_HEAVY_VIEW:
          return this.buildTopDownHeavyView();
        case MultiDimensionalViewBuilder.ViewType.BOTTOM_UP_HEAVY_VIEW:
          return this.buildBottomUpHeavyView();
        default:
          throw new Error('Unknown multi-dimensional view type: ' + viewType);
      }
    },

    /**
     * Build the top-down tree view of the multi-dimensional view.
     *
     * Note that no more paths can be added to the builder once either view has
     * been built.
     */
    buildTopDownTreeView() {
      if (this.topDownTreeViewRoot_ === undefined) {
        const treeViewRoot = this.buildRoot_;
        this.buildRoot_ = undefined;

        this.setUpMissingChildRelationships_(treeViewRoot,
            0 /* firstDimensionToSetUp */);
        this.finalizeTotalValues_(treeViewRoot,
            0 /* firstDimensionToFinalize */,
            new WeakMap() /* dimensionalSelfSumsMap */);

        this.topDownTreeViewRoot_ = treeViewRoot;
      }

      return this.topDownTreeViewRoot_;
    },

    /**
     * Build the top-down heavy view of the multi-dimensional view.
     *
     * Note that no more paths can be added to the builder once either view has
     * been built.
     */
    buildTopDownHeavyView() {
      if (this.topDownHeavyViewRoot_ === undefined) {
        this.topDownHeavyViewRoot_ = this.buildGenericHeavyView_(
            this.addDimensionToTopDownHeavyViewNode_.bind(this));
      }
      return this.topDownHeavyViewRoot_;
    },

    /**
     * Build the bottom-up heavy view of the multi-dimensional view.
     *
     * Note that no more paths can be added to the builder once either view has
     * been built.
     */
    buildBottomUpHeavyView() {
      if (this.bottomUpHeavyViewNode_ === undefined) {
        this.bottomUpHeavyViewNode_ = this.buildGenericHeavyView_(
            this.addDimensionToBottomUpHeavyViewNode_.bind(this));
      }
      return this.bottomUpHeavyViewNode_;
    },

    createRootNode_() {
      return new MultiDimensionalViewNode(
          new Array(this.dimensions_) /* title */, this.valueCount_);
    },

    getOrCreateChildNode_(
        parentNode, dimension, childDimensionTitle) {
      if (dimension < 0 || dimension >= this.dimensions_) {
        throw new Error('Invalid dimension');
      }

      const dimensionChildren = parentNode.children[dimension];

      let childNode = dimensionChildren.get(childDimensionTitle);
      if (childNode !== undefined) {
        return childNode;
      }

      const childTitle = parentNode.title.slice();
      childTitle[dimension] = childDimensionTitle;
      childNode = new MultiDimensionalViewNode(childTitle, this.valueCount_);
      dimensionChildren.set(childDimensionTitle, childNode);

      return childNode;
    },

    /**
     * Set up missing child relationships.
     *
     * When an arbitrary multi-dimensional path [path1, path2, ..., pathN] is
     * added to the build tree (see addPath), only the nodes on the path1 ->
     * path2 -> ... -> pathN chain are created (i.e. no interleavings of the
     * single-dimensional paths are added to the tree). This method recursively
     * adds all the missing paths.
     *
     * Two-dimensional example:
     *
     *    Initial build tree   .       After path      .  After missing child
     *        (root only)      .    [[A, B], [1, 2]]   .   relationships were
     *                         .       was added       .        set up
     *                         .                       .
     *           +---+         .         +---+         .         +---+
     *           |*,*|         .         |*,*|         .         |*,*|
     *           +---+         .         +---+         .         +---+
     *                         .         A             .         A   1
     *                         .         |             .         |   :
     *                         .         v             .         v   V
     *                         .     +---+             .     +---+   +---+
     *                         .     |A,*|             .     |A,*|   |*,1|
     *                         .     +---+             .     +---+   +---+
     *                         .     B                 .     B   1   A   2
     *                         .     |                 .     |   :   |   :
     *                         .     v                 .     v   v   v   v
     *                         . +---+                 . +---+   +---+   +---+
     *                         . |B,*|                 . |B,*|   |A,1|   |*,2|
     *                         . +---+                 . +---+   +---+   +---+
     *                         .     1                 .     1   B   2   A
     *                         .     :                 .     :   |   :   |
     *                         .     v                 .     v   v   v   v
     *                         .     +---+             .     +---+   +---+
     *                         .     |B,1|             .     |B,1|   |A,2|
     *                         .     +---+             .     +---+   +---+
     *                         .         2             .         2   B
     *                         .         :             .         :   |
     *                         .         v             .         v   V
     *                         .         +---+         .         +---+
     *                         .         |B,2|         .         |B,2|
     *                         .         +---+         .         +---+
     */
    setUpMissingChildRelationships_(node, firstDimensionToSetUp) {
      // Missing child relationships of this node wrt dimensions 0, ...,
      // (firstDimensionToSetUp - 1) and all descendants of the associated
      // children have already been set up. Now we do the same for dimensions
      // firstDimensionToSetUp, ..., (this.dimensions_ - 1).
      for (let d = firstDimensionToSetUp; d < this.dimensions_; d++) {
        // Step 1. Gather the names of all children wrt the current dimension.
        const currentDimensionChildTitles = new Set(node.children[d].keys());
        for (let i = 0; i < d; i++) {
          for (const previousDimensionChildNode of node.children[i].values()) {
            for (const previousDimensionGrandChildTitle of
                 previousDimensionChildNode.children[d].keys()) {
              currentDimensionChildTitles.add(previousDimensionGrandChildTitle);
            }
          }
        }

        // Step 2. Add missing children wrt the current dimension and
        // recursively set up its missing child relationships.
        for (const currentDimensionChildTitle of currentDimensionChildTitles) {
          // Add a missing child (if it doesn't exist).
          const currentDimensionChildNode =
              this.getOrCreateChildNode_(node, d, currentDimensionChildTitle);

          // Set-up child relationships (of the child node) wrt dimensions 0,
          // ..., d - 1.
          for (let i = 0; i < d; i++) {
            for (const previousDimensionChildNode of
                node.children[i].values()) {
              const previousDimensionGrandChildNode =
                  previousDimensionChildNode.children[d].get(
                      currentDimensionChildTitle);
              if (previousDimensionGrandChildNode !== undefined) {
                currentDimensionChildNode.children[i].set(
                    previousDimensionChildNode.title[i],
                    previousDimensionGrandChildNode);
              }
            }
          }

          // Set-up child relationships (of the child node) wrt dimensions d,
          // ..., (this.dimensions_ - 1).
          this.setUpMissingChildRelationships_(currentDimensionChildNode, d);
        }
      }
    },

    /**
     * Finalize the total values of a multi-dimensional tree.
     *
     * The intermediate builder tree, a node of which we want to finalize
     * recursively, already has the right shape. The only thing that needs to
     * be done is to propagate self and total values from subsumed child nodes
     * in each dimension and update total value states appropriately.
     *
     * To derive the expression for the lower bound on the total value wrt
     * value index V (from 1 to |this.valueCount_| - 1), we rely on the
     * following assumptions:
     *
     *   1. Self/total values associated with different value indices are
     *      independent. From this point onwards, "self/total value" refers to
     *      self/total value wrt the fixed value index V.
     *
     *   2. Each node's self value does NOT overlap with the self or total value
     *      of any other node.
     *
     *   3. The total values of a node's children wrt a single dimension (e.g.
     *      [path1/A, path2] and [path1/B, path2]) do NOT overlap.
     *
     *   4. The total values of a node's children wrt different dimensions
     *      (e.g. [path1/A, path2] and [path1, path2/1]) MIGHT overlap.
     *
     * As a consequence of assumptions 1 and 3, the total value of a node can
     * be split into the part that cannot overlap (so-called "self-sum") and
     * the part that can overlap (so-called "residual"):
     *
     *   total(N, V) = selfSum(N, V) + residual(N, V)                   (A)
     *
     * where the self-sum is calculated as the sum of the node's self value
     * plus the sum of its descendants' self values (summed over all
     * dimensions):
     *
     *   selfSum(N, V) = self(N, V) + sum over all descendants C of N {
     *       self(C, V)                                                 (B)
     *   }
     *
     * Observe that the residual of a node does not include any self value (of
     * any node in the view). Furthermore, by assumption 2, we derive that the
     * residuals of a node's children wrt a single dimension don't overlap. On
     * the other hand, the residuals of a node's children wrt different
     * dimensions might overlap. This gives us the following lower bound on the
     * residual of a node:
     *
     *   residual(N, V) >= minResidual(N, V) = max over dimensions D {
     *       sum over children C of N at dimension D {
     *           residual(C, V)                                         (C)
     *       }
     *   })
     *
     * By combining equation (A) and inequality (C), we get a lower bound on
     * the total value of a node:
     *
     *   total(N, V) >= selfSum(N, V) + minResidual(N, V)
     *
     * For example, given a two-dimensional node [path1, path2] with self value
     * 10 and four children (2 wrt each dimension):
     *
     *    Child            | Self value | Total value
     *   ==================+============+=============
     *    [path1/A, path2] |         21 |          30
     *    [path1/B, path2] |         25 |          32
     *    [path1, path2/1] |         3  |          15
     *    [path1, path2/2] |         40 |          41
     *
     * and assuming that the children have no further descendants (i.e. their
     * residual values are equal to the differences between their total and
     * self values), the lower bound on the total value of [path1, path2] is:
     *
     *   total([path1, path2], 0)
     *       >= selfSum([path1, path2], 0) +
     *          minResidual([path1, path2], 0)
     *        = self([path1, path2], 0) +
     *          sum over all descendants C of [path1, path2] {
     *              self (C, 0)
     *          } +
     *          max over dimensions D {
     *              sum over children C of [path1, path2] at dimension D {
     *                  residual(C, 0)
     *              }
     *          }
     *        = self([path1, path2], 0) +
     *          ((self([path1/A, path2], 0) + self([path1/B, path2], 0)) +
     *           (self([path1, path2/1], 0) + self([path1, path2/2], 0))) +
     *          max(residual([path1/A, path2], 0) +
     *              residual([path1/B, path2], 0),
     *              residual([path1, path2/1], 0) +
     *              residual([path1, path2/2], 0))
     *        = 10 +
     *          ((21 + 25) + (3 + 40)) +
     *          max((30 - 21) + (32 - 25), (15 - 3) + (41 - 40))
     *        = 115
     *
     * To reduce the complexity of the calculation, we keep a temporary list of
     * dimensional self-sums for each node that we have already visited. For a
     * given node, the Kth element in the list is equal to the self size of the
     * node plus the sum of self sizes of all its descendants wrt dimensions 0
     * to K (inclusive). The list has two important properties:
     *
     *   1. The last element in the list is equal to the self-sum of the
     *      associated node (equation (B)).
     *
     *   2. The calculation of the list can be performed recursively using the
     *      lists of the associated node's children (avoids square complexity
     *      in the size of the graph):
     *
     *        dimensionalSelfSum(N, V)[D] =
     *            self(N, V) +
     *            sum I = 0 to D {
     *                sum over children C of N at dimension I {
     *                    dimensionalSelfSum(C, V)[I]
     *                }
     *            }
     *
     * This method also (recursively) ensures that, for each value index V, if
     * at least one of the descendants C of node N has at least a LOWER_BOUND
     * on total(C, V), then the N will also be marked as having a LOWER_BOUND
     * on total(N, V) (unless N contains the EXACT value of total(N, V), in
     * which case its relevant totalState won't be modified).
     */
    finalizeTotalValues_(
        node, firstDimensionToFinalize, dimensionalSelfSumsMap) {
      // Dimension D -> Value index V -> dimensionalSelfSum(|node|, V)[D].
      const dimensionalSelfSums = new Array(this.dimensions_);

      // Value index V -> minResidual(|node|, V).
      const minResidual = new Array(this.valueCount_);
      for (let v = 0; v < this.valueCount_; v++) minResidual[v] = 0;

      // Value index V -> |node| value V.
      const nodeValues = node.values;

      // Value index V -> dimensionalSelfSum(|node|, V)[|d|].
      const nodeSelfSums = new Array(this.valueCount_);
      for (let v = 0; v < this.valueCount_; v++) {
        nodeSelfSums[v] = nodeValues[v].self;
      }

      for (let d = 0; d < this.dimensions_; d++) {
        // Value index V -> sum over children C of |node| at dimension |d| {
        // residual(C, V) }.
        const childResidualSums = new Array(this.valueCount_);
        for (let v = 0; v < this.valueCount_; v++) {
          childResidualSums[v] = 0;
        }

        for (const childNode of node.children[d].values()) {
          if (d >= firstDimensionToFinalize) {
            this.finalizeTotalValues_(childNode, d, dimensionalSelfSumsMap);
          }
          // Dimension D -> Value index V ->
          // dimensionalSelfSum(|childNode|, V)[D].
          const childNodeSelfSums = dimensionalSelfSumsMap.get(childNode);
          const childNodeValues = childNode.values;
          for (let v = 0; v < this.valueCount_; v++) {
            nodeSelfSums[v] += childNodeSelfSums[d][v];
            const residual = childNodeValues[v].total -
                childNodeSelfSums[this.dimensions_ - 1][v];
            childResidualSums[v] += residual;
            if (this.complete) {
              nodeValues[v].totalState = EXACT;
            } else if (childNodeValues[v].totalState > NOT_PROVIDED) {
              nodeValues[v].totalState = Math.max(
                  nodeValues[v].totalState, LOWER_BOUND);
            }
          }
        }

        dimensionalSelfSums[d] = nodeSelfSums.slice();
        for (let v = 0; v < this.valueCount_; v++) {
          minResidual[v] = Math.max(minResidual[v], childResidualSums[v]);
        }
      }

      for (let v = 0; v < this.valueCount_; v++) {
        nodeValues[v].total = Math.max(
            nodeValues[v].total, nodeSelfSums[v] + minResidual[v]);
      }

      if (dimensionalSelfSumsMap.has(node)) {
        throw new Error('Internal error: Node finalized more than once');
      }
      dimensionalSelfSumsMap.set(node, dimensionalSelfSums);
    },

    /**
     * Build a generic heavy view of the multi-dimensional view.
     */
    buildGenericHeavyView_(treeViewNodeHandler) {
      // 1. Clone the root node of the top-down tree view node (except
      // children).
      const treeViewRoot = this.buildTopDownTreeView();
      const heavyViewRoot = this.createRootNode_();
      heavyViewRoot.values = treeViewRoot.values;

      // 2. Create recursion depth trackers (to avoid total value
      // double-counting).
      const recursionDepthTrackers = new Array(this.dimensions_);
      for (let d = 0; d < this.dimensions_; d++) {
        recursionDepthTrackers[d] =
            new RecursionDepthTracker(this.maxDimensionDepths_[d], d);
      }

      // 3. Add all paths associated with the single-dimensional descendants of
      // the top-down tree view root node to the heavy view root node
      // (depending on the type of the target heavy view).
      this.addDimensionsToGenericHeavyViewNode_(treeViewRoot, heavyViewRoot,
          0 /* startDimension */, recursionDepthTrackers,
          false /* previousDimensionsRecursive */, treeViewNodeHandler);

      // 4. Set up missing child relationships.
      this.setUpMissingChildRelationships_(heavyViewRoot,
          0 /* firstDimensionToSetUp */);

      return heavyViewRoot;
    },

    /**
     * Add all paths associated with the single-dimensional descendants of a
     * top-down tree-view node wrt multiple dimensions to a generic heavy-view
     * node (depending on the type of the target heavy view).
     */
    addDimensionsToGenericHeavyViewNode_(treeViewParentNode,
        heavyViewParentNode, startDimension, recursionDepthTrackers,
        previousDimensionsRecursive, treeViewNodeHandler) {
      for (let d = startDimension; d < this.dimensions_; d++) {
        this.addDimensionDescendantsToGenericHeavyViewNode_(treeViewParentNode,
            heavyViewParentNode, d, recursionDepthTrackers,
            previousDimensionsRecursive, treeViewNodeHandler);
      }
    },

    /**
     * Add all paths associated with the descendants of a top-down tree-view
     * node wrt a single dimension to a generic heavy-view node (depending on
     * the type of the target heavy view).
     */
    addDimensionDescendantsToGenericHeavyViewNode_(treeViewParentNode,
        heavyViewParentNode, currentDimension, recursionDepthTrackers,
        previousDimensionsRecursive, treeViewNodeHandler) {
      const treeViewChildren = treeViewParentNode.children[currentDimension];
      const recursionDepthTracker = recursionDepthTrackers[currentDimension];
      for (const treeViewChildNode of treeViewChildren.values()) {
        recursionDepthTracker.push(treeViewChildNode);

        // Add all paths associated with the child node to the heavy view-node
        // parent node.
        treeViewNodeHandler(
            treeViewChildNode, heavyViewParentNode, currentDimension,
            recursionDepthTrackers, previousDimensionsRecursive);

        // Recursively add all paths associated with the descendants of the
        // tree view child node wrt the current dimension to the heavy-view
        // parent node.
        this.addDimensionDescendantsToGenericHeavyViewNode_(treeViewChildNode,
            heavyViewParentNode, currentDimension, recursionDepthTrackers,
            previousDimensionsRecursive, treeViewNodeHandler);

        recursionDepthTracker.pop();
      }
    },

    /**
     * Add a top-down tree-view child node together with its single-dimensional
     * subtree to a top-down heavy-view parent node (tree-view node handler for
     * top-down heavy view).
     *
     * Sample resulting top-down heavy view:
     *
     *       +----------------+                    +-----------------+
     *       |     source     |                    |   destination   |
     *       | tree-view root |  ===============>  | heavy-view root |
     *       |     self=0     |                    |     self=0      |
     *       |    total=48    |                    |    total=48     |
     *       +----------------+                    +-----------------+
     *         |            |                  ______|      |      |______
     *         v            v                 v             v             v
     *    +----------+ +----------+      +----------+ +----------+ +----------+
     *    |    A*    | |    B     |      |    A***  | |    B     | |    C     |
     *    | self=10  | | self=12  |      | self=13  | | self=13  | | self=2   |
     *    | total=30 | | total=18 |      | total=30 | | total=34 | | total=7  |
     *    +----------+ +----------+      +----------+ +----------+ +----------+
     *         |                              :            :   :.........
     *         v                              v            v            v
     *    +----------+                   ............ ............ ............
     *    |    B     |                   :    B     : :    A     : :    C     :
     *    | self=1   |                   : self=1   : : self=3   : : self=2   :
     *    | total=16 |                   : total=16 : : total=8  : : total=7  :
     *    +----------+                   ............ ............ ............
     *         |   |________                  :   :.........
     *         v            v                 v            v
     *    +----------+ +----------+      ............ ............
     *    |    A**   | |    C     |      :    A     : :    C     :
     *    | self=3   | | self=2   |      : self=3   : : self=2   :
     *    | total=8  | | total=7  |      : total=8  : : total=7  :
     *    +----------+ +----------+      ............ ............
     *
     * Observe that care needs to be taken when dealing with recursion to avoid
     * double-counting, e.g. the total value of A** (8) was not added to the
     * total value of A*** (30) because it is already included in the total
     * value of A* (30) (which was also added to A***). That is why we need to
     * keep track of the path we traversed along the current dimension (to
     * determine whether total value should be added or not).
     */
    addDimensionToTopDownHeavyViewNode_(
        treeViewChildNode, heavyViewParentNode, currentDimension,
        recursionDepthTrackers, previousDimensionsRecursive) {
      this.addDimensionToTopDownHeavyViewNodeRecursively_(treeViewChildNode,
          heavyViewParentNode, currentDimension, recursionDepthTrackers,
          previousDimensionsRecursive, 1 /* subTreeDepth */);
    },

    addDimensionToTopDownHeavyViewNodeRecursively_(
        treeViewChildNode, heavyViewParentNode, currentDimension,
        recursionDepthTrackers, previousDimensionsRecursive, subTreeDepth) {
      const recursionDepthTracker = recursionDepthTrackers[currentDimension];
      const currentDimensionRecursive =
          subTreeDepth <= recursionDepthTracker.recursionDepth;
      const currentOrPreviousDimensionsRecursive =
          currentDimensionRecursive || previousDimensionsRecursive;

      const dimensionTitle = treeViewChildNode.title[currentDimension];
      const heavyViewChildNode = this.getOrCreateChildNode_(
          heavyViewParentNode, currentDimension, dimensionTitle);

      this.addNodeValues_(treeViewChildNode, heavyViewChildNode,
          !currentOrPreviousDimensionsRecursive /* addTotal */);

      // Add the descendants of the tree-view child node wrt the next
      // dimensions as children of the heavy-view child node.
      this.addDimensionsToGenericHeavyViewNode_(treeViewChildNode,
          heavyViewChildNode, currentDimension + 1, recursionDepthTrackers,
          currentOrPreviousDimensionsRecursive,
          this.addDimensionToTopDownHeavyViewNode_.bind(this));

      for (const treeViewGrandChildNode of
           treeViewChildNode.children[currentDimension].values()) {
        recursionDepthTracker.push(treeViewGrandChildNode);

        // Recursively add the tree-view grandchild node to the heavy-view
        // child node.
        this.addDimensionToTopDownHeavyViewNodeRecursively_(
            treeViewGrandChildNode, heavyViewChildNode, currentDimension,
            recursionDepthTrackers, previousDimensionsRecursive,
            subTreeDepth + 1);

        recursionDepthTracker.pop();
      }
    },

    /**
     * Add a top-down tree-view child node together with all its ancestors wrt
     * the given dimension as descendants of a bottom-up heavy-view parent node
     * in the reverse order (tree-view node handler for bottom-up heavy view).
     *
     * Sample resulting bottom-up heavy view:
     *
     *       +----------------+                    +-----------------+
     *       |     source     |                    |   destination   |
     *       | tree-view root |  ===============>  | heavy-view root |
     *       |     self=0     |                    |     self=0      |
     *       |    total=48    |                    |    total=48     |
     *       +----------------+                    +-----------------+
     *         |            |                  ______|      |      |______
     *         v            v                 v             v             v
     *    +----------+ +----------+      +----------+ +----------+ +----------+
     *    |    A*    | |    B     |      |    A***  | |    B     | |    C     |
     *    | self=10  | | self=12  |      | self=13  | | self=13  | | self=2   |
     *    | total=30 | | total=18 |      | total=30 | | total=34 | | total=7  |
     *    +----------+ +----------+      +----------+ +----------+ +----------+
     *         |                              :            :            :
     *         v                              v            v            v
     *    +----------+                   ............ ............ ............
     *    |    B#    |                   :    B     : :    A     : :    B##   :
     *    | self=1   |                   : self=3   : : self=1   : : self=2   :
     *    | total=16 |                   : total=8  : : total=16 : : total=7  :
     *    +----------+                   ............ ............ ............
     *         |   |________                  :                         :
     *         v            v                 v                         v
     *    +----------+ +----------+      ............              ............
     *    |    A**   | |    C     |      :    A     :              :    A     :
     *    | self=3   | | self=2   |      : self=3   :              : self=2   :
     *    | total=8  | | total=7  |      : total=8  :              : total=7  :
     *    +----------+ +----------+      ............              ............
     *
     * Similarly to the construction of the top-down heavy view, care needs to
     * be taken when dealing with recursion to avoid double-counting, e.g. the
     * total value of A** (8) was not added to the total value of A*** (30)
     * because it is already included in the total value of A* (30) (which was
     * also added to A***). That is why we need to keep track of the path we
     * traversed along the current dimension (to determine whether total value
     * should be added or not).
     *
     * Note that when we add an ancestor (B#) of a top-down tree-view node (C)
     * to the bottom-up heavy view, the values of the original tree-view node
     * (C) (rather than the ancestor's values) are added to the corresponding
     * heavy-view node (B##).
     */
    addDimensionToBottomUpHeavyViewNode_(
        treeViewChildNode, heavyViewParentNode, currentDimension,
        recursionDepthTrackers, previousDimensionsRecursive) {
      const recursionDepthTracker = recursionDepthTrackers[currentDimension];
      const bottomIndex = recursionDepthTracker.bottomIndex;
      const topIndex = recursionDepthTracker.topIndex;
      const firstNonRecursiveIndex =
          bottomIndex + recursionDepthTracker.recursionDepth;
      const viewNodePath = recursionDepthTracker.viewNodePath;

      const trackerAncestorNode = recursionDepthTracker.trackerAncestorNode;
      let heavyViewDescendantNode = heavyViewParentNode;
      for (let i = bottomIndex; i < topIndex; i++) {
        const treeViewAncestorNode = viewNodePath[i];
        const dimensionTitle = treeViewAncestorNode.title[currentDimension];
        heavyViewDescendantNode = this.getOrCreateChildNode_(
            heavyViewDescendantNode, currentDimension, dimensionTitle);

        const currentDimensionRecursive = i < firstNonRecursiveIndex;
        const currentOrPreviousDimensionsRecursive =
            currentDimensionRecursive || previousDimensionsRecursive;

        // The self and total values are taken from the original top-down tree
        // view child node (rather than the ancestor node).
        this.addNodeValues_(treeViewChildNode, heavyViewDescendantNode,
            !currentOrPreviousDimensionsRecursive);

        // Add the descendants of the tree-view child node wrt the next
        // dimensions as children of the heavy-view child node.
        this.addDimensionsToGenericHeavyViewNode_(treeViewChildNode,
            heavyViewDescendantNode, currentDimension + 1,
            recursionDepthTrackers, currentOrPreviousDimensionsRecursive,
            this.addDimensionToBottomUpHeavyViewNode_.bind(this));
      }
    },

    addNodeValues_(sourceNode, targetNode, addTotal) {
      const targetNodeValues = targetNode.values;
      const sourceNodeValues = sourceNode.values;
      for (let v = 0; v < this.valueCount_; v++) {
        const targetNodeValue = targetNodeValues[v];
        const sourceNodeValue = sourceNodeValues[v];
        targetNodeValue.self += sourceNodeValue.self;
        if (addTotal) {
          targetNodeValue.total += sourceNodeValue.total;
          if (this.complete) {
            targetNodeValue.totalState = EXACT;
          } else if (sourceNodeValue.totalState > NOT_PROVIDED) {
            targetNodeValue.totalState = Math.max(
                targetNodeValue.totalState, LOWER_BOUND);
          }
        }
      }
    }
  };

  /**
   * Recursion depth tracker.
   *
   * This class tracks the recursion depth of the current stack (updated via
   * the push and pop methods). The recursion depth of a stack is the lengh of
   * its longest leaf suffix that is repeated within the stack itself.
   *
   * For example, the recursion depth of the stack A -> B -> C -> A -> B -> B
   * -> C (where C is the leaf node) is 2 because the suffix B -> C is repeated
   * within it.
   *
   * @{constructor}
   */
  function RecursionDepthTracker(maxDepth, dimension) {
    this.titlePath = new Array(maxDepth);
    this.viewNodePath = new Array(maxDepth);
    this.bottomIndex = this.topIndex = maxDepth;

    this.dimension_ = dimension;
    this.currentTrackerNode_ =
        this.createNode_(0 /* recursionDepth */, undefined /* parent */);
  }

  RecursionDepthTracker.prototype = {
    push(viewNode) {
      if (this.bottomIndex === 0) {
        throw new Error('Cannot push to a full tracker');
      }
      const title = viewNode.title[this.dimension_];
      this.bottomIndex--;
      this.titlePath[this.bottomIndex] = title;
      this.viewNodePath[this.bottomIndex] = viewNode;

      let childTrackerNode = this.currentTrackerNode_.children.get(title);
      if (childTrackerNode !== undefined) {
        // Child node already exists, so we don't need to calculate anything.
        this.currentTrackerNode_ = childTrackerNode;
        return;
      }

      // Child node doesn't exist yet, so we need to calculate its recursion
      // depth.
      const maxLengths = zFunction(this.titlePath, this.bottomIndex);
      let recursionDepth = 0;
      for (let i = 0; i < maxLengths.length; i++) {
        recursionDepth = Math.max(recursionDepth, maxLengths[i]);
      }

      childTrackerNode =
          this.createNode_(recursionDepth, this.currentTrackerNode_);
      this.currentTrackerNode_.children.set(title, childTrackerNode);
      this.currentTrackerNode_ = childTrackerNode;
    },

    pop() {
      if (this.bottomIndex === this.topIndex) {
        throw new Error('Cannot pop from an empty tracker');
      }

      this.titlePath[this.bottomIndex] = undefined;
      this.viewNodePath[this.bottomIndex] = undefined;
      this.bottomIndex++;

      this.currentTrackerNode_ = this.currentTrackerNode_.parent;
    },

    get recursionDepth() {
      return this.currentTrackerNode_.recursionDepth;
    },

    createNode_(recursionDepth, parent) {
      return {
        recursionDepth,
        parent,
        children: new Map()
      };
    }
  };

  /**
   * Calculate the Z-function of (a suffix of) a list.
   *
   * Z-function: Given a list (or a string) of length n, for each index i from
   * 1 to n - 1, find the length z[i] of the longest substring starting at
   * position i which is also a prefix of the list. This function returns the
   * list of maximum lengths z.
   *
   * Mathematically, for each i from 1 to n - 1, z[i] is the maximum value such
   * that [list[0], ..., list[i - 1]] = [list[i], ..., list[i + z[i] - 1]].
   * z[0] is defined to be zero for convenience.
   *
   * Example:
   *
   *   Input (list): ['A', 'B', 'A', 'C', 'A', 'B', 'A']
   *   Output (z):   [ 0 ,  0 ,  1 ,  0 ,  3 ,  0 ,  1 ]
   *
   * Unlike the brute-force approach (which is O(n^2) in the worst case), the
   * complexity of this implementation is linear in the size of the list, i.e.
   * O(n).
   *
   * Source: http://e-maxx-eng.github.io/string/z-function.html
   */
  function zFunction(list, startIndex) {
    const n = list.length - startIndex;
    if (n === 0) return [];

    const z = new Array(n);
    z[0] = 0;

    for (let i = 1, left = 0, right = 0; i < n; ++i) {
      let maxLength;
      if (i <= right) {
        maxLength = Math.min(right - i + 1, z[i - left]);
      } else {
        maxLength = 0;
      }

      while (i + maxLength < n && list[startIndex + maxLength] ===
             list[startIndex + i + maxLength]) {
        ++maxLength;
      }

      if (i + maxLength - 1 > right) {
        left = i;
        right = i + maxLength - 1;
      }

      z[i] = maxLength;
    }

    return z;
  }

  return {
    MultiDimensionalViewBuilder,
    MultiDimensionalViewNode,

    // Exports below are for testing only.
    RecursionDepthTracker,
    zFunction,
  };
});


'use strict';

tr.exportTo('tr.e.chrome', function() {
  class CpuTime {
    /**
     * Returns the total cpu time consumed within |range| by |thread|.
     */
    static getCpuTimeForThread(thread, range) {
      let totalCpuTime = 0;
      tr.b.iterateOverIntersectingIntervals(
          thread.sliceGroup.topLevelSlices,
          slice => slice.start, slice => slice.end,
          range.min, range.max,
          slice => {
            if (slice.duration === 0) return;
            if (!slice.cpuDuration) return;

            const intersection = range.findIntersection(slice.range);
            const fractionOfSliceInsideRangeOfInterest =
                intersection.duration / slice.duration;

            // We assume that if a slice doesn't lie entirely inside the range
            // of interest, then the CPU time is evenly distributed inside of
            // the slice.
            totalCpuTime +=
                slice.cpuDuration * fractionOfSliceInsideRangeOfInterest;
          });

      return totalCpuTime;
    }

    /**
     * Returns two level map of rail stage to initiator type to set of bounds of
     * associated segments, intersected with |rangeOfInterest|.
     *
     * For each rail stage, we additionally have a key 'all_initiators' that
     * returns all the segment bounds associated with that rail stage across all
     * initiator types. For completeness, there is an additional rail stage
     * 'all_stages' that has all the segment bounds across all rail stages.
     *
     * If a segment is not contained within |rangeOfInterest| it is not
     * included.
     *
     * There is a unique segment bound for each segment in the map. For example,
     * assume
     * - |segmentA| is associated with both Click Response and Scroll Animation
     * - |bound1| is the interesting bound of |segmentA| in Response -> Click
     *   set.
     * - |bound2| is the interesting bound of |segmentA| in Animation -> Scroll
     *   set.
     * Then bound1 === bound2. These segment bounds can therefore be used as
     * keys in a map to represent the segment.
     *
     * Example return value (all bounds are intersected with |rangeOfInterest|):
     *
     * {
     *   'Animation': {
     *     'CSS': {Segment bounds for CSS Animation},
     *     'Video': {Segment bounds for Video Animation},
     *     ...
     *     'all_initiators': {All Animation segment bounds}
     *   },
     *   'Response': {
     *     'Click': {Segment bounds for Click Response},
     *     'Scroll': {Segment bounds for Scroll Response},
     *     ...
     *     'all_initiators': {All Response segment bounds}
     *   },
     *   ...
     *   'all_stages': {
     *     'all_initiators': {All segment bounds}
     *   }
     * }
     *
     * @param {!Array.<!tr.model.um.Segment>} segments
     * @param {!Array.<!tr.b.math.Range>} rangeOfInterest
     * @returns {!Map.<string, Map.<string, Set.<!tr.b.math.Range>>}
     */
    static getStageToInitiatorToSegmentBounds(segments, rangeOfInterest) {
      const stageToInitiatorToRanges = new Map();
      stageToInitiatorToRanges.set('all_stages',
          new Map([['all_initiators', new Set()]]));
      const allRanges =
          stageToInitiatorToRanges.get('all_stages').get('all_initiators');

      for (const segment of segments) {
        if (!rangeOfInterest.intersectsRangeInclusive(segment.range)) continue;
        const intersectingRange =
            rangeOfInterest.findIntersection(segment.range);
        allRanges.add(intersectingRange);

        for (const expectation of segment.expectations) {
          const stageTitle = expectation.stageTitle;
          if (!stageToInitiatorToRanges.has(stageTitle)) {
            stageToInitiatorToRanges.set(stageTitle,
                new Map([['all_initiators', new Set()]]));
          }

          const initiatorToRanges = stageToInitiatorToRanges.get(stageTitle);
          initiatorToRanges.get('all_initiators').add(intersectingRange);

          const initiatorType = expectation.initiatorType;
          if (initiatorType) {
            if (!initiatorToRanges.has(initiatorType)) {
              initiatorToRanges.set(initiatorType, new Set());
            }
            initiatorToRanges.get(initiatorType).add(intersectingRange);
          }
        }
      }
      return stageToInitiatorToRanges;
    }

    /**
     * Returns a map of range in |ranges| to total cpu time used by |thread|
     * during that range.
     *
     * Ranges are not interned like Strings, so if you call get() on this Map,
     * you must use the Range objects from |ranges| as the key. You cannot
     * construct a new range object with the same bounds as a range in |ranges|
     * and retrieve the cpu time.
     *
     * @param {!Iterable.<!tr.b.math.Range>} ranges
     * @param {!Iterable.<!tr.model.Thread>} thread
     * @returns {!Map.<!tr.b.math.Range, !tr.model.Thread>}
     */
    static computeCpuTimesForRanges_(ranges, thread) {
      const rangeToCpuTime = new Map();
      for (const range of ranges) {
        rangeToCpuTime.set(range, CpuTime.getCpuTimeForThread(thread, range));
      }
      return rangeToCpuTime;
    }

    /**
     * Returns the root node of a MultiDimensionalView in TopDownTreeView for
     * cpu time.
     *
     * The returned tree view is three dimensional (processType, threadType, and
     * railStage + initiator). Rail stage and initiator are not separate
     * dimensions because they are not independent - there is no such thing as
     * CSS Response or Scroll Load.
     *
     * Each node in the tree view contains two values - cpuUsage and cpuTotal.
     *
     * See cpu_time_multidimensinoal_view.md for more details about the returned
     * multidimensional view.
     *
     * @param {!tr.Model} model
     * @param {!tr.b.math.Range} rangeOfInterest
     * @returns {!tr.b.MultiDimensionalViewNode}
     */
    static constructMultiDimensionalView(model, rangeOfInterest) {
      const mdvBuilder = new tr.b.MultiDimensionalViewBuilder(
        3 /* dimensions (process, thread and rail stage / initiator) */,
        2 /* valueCount (cpuUsage and cpuTotal) */);

      const stageToInitiatorToRanges =
          CpuTime.getStageToInitiatorToSegmentBounds(
              model.userModel.segments, rangeOfInterest);

      const allSegmentBoundsInRange =
          stageToInitiatorToRanges.get('all_stages').get('all_initiators');

      for (const [pid, process] of Object.entries(model.processes)) {
        const processType =
            tr.e.chrome.chrome_processes.canonicalizeProcessName(process.name);
        for (const [tid, thread] of Object.entries(process.threads)) {
          // Cache cpuTime for each segment bound.
          const rangeToCpuTime = CpuTime.computeCpuTimesForRanges_(
              allSegmentBoundsInRange, thread);

          for (const [stage, initiatorToRanges] of stageToInitiatorToRanges) {
            for (const [initiator, ranges] of initiatorToRanges) {
              const cpuTime = tr.b.math.Statistics.sum(ranges,
                  range => rangeToCpuTime.get(range));
              const duration = tr.b.math.Statistics.sum(ranges,
                  range => range.duration);
              const cpuTimePerSecond = cpuTime / duration;
              mdvBuilder.addPath(
                  [[processType], [thread.type], [stage, initiator]],
                  [cpuTimePerSecond, cpuTime],
                  tr.b.MultiDimensionalViewBuilder.ValueKind.TOTAL);
            }
          }
        }
      }

      return mdvBuilder.buildTopDownTreeView();
    }
  }

  return {
    CpuTime,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  const CPU_PERCENTAGE_UNIT =
      tr.b.Unit.byName.normalizedPercentage_smallerIsBetter;
  const CPU_TIME_UNIT = tr.b.Unit.byName.timeDurationInMs_smallerIsBetter;

  /**
   * Returns a deep clone of CPU time multidimensional view path object.
   *
   * @param {!Array.<!Array.<string>>} previousPath
   * @returns {!Array.<!Array.<string>>}
   */
  function clonePath_(previousPath) {
    return previousPath.map(subPath => subPath.map(x => x));
  }


  /**
   * Returns an object containing the processType, threadType, railStage, and
   * initiatorType encoded in the provided CPU time multidimensional view path
   * object. Decoding the path into this object can make code easier to
   * understand than indexing directly into the path array.
   *
   * @param {!Array.<!Array.<string>>} path - A path in a CPU time
   * multidimensional tree view.
   * @returns {Object.<string, string>}
   */
  function decodePath_(path) {
    return {
      processType: path[0][0],
      threadType: path[1][0],
      railStage: path[2][0],
      initiatorType: path[2][1]
    };
  }

  /**
   * Returns a unique string representation of |path|.
   *
   * Paths are of the following form in CPU time multidimensional trees:
   *   [[processType], [threadType], [railStage, initiatorType]]
   *
   * The returned string is of the form
   *   "$processtype:$threadType:$railStage:$initiatorType".
   *
   * @param {Array.<!Array.<string>>} path
   * @returns {string}
   */
  function stringifyPathName_(path) {
    const decodedPath = decodePath_(path);
    return [
      decodedPath.processType,
      decodedPath.threadType,
      decodedPath.railStage,
      decodedPath.initiatorType
    ].join(':');
  }

  /**
   * This class is used to traverse a multidimensional tree view and report CPU
   * percentage and CPU time from the tree as histograms.
   */
  class CpuTimeTreeDataReporter {
    constructor() {
      this.visitedSet_ = new Set();
    }

    /**
     * Extracts CPU percentage and CPU time values from |node| located at |path|
     * and adds values as histograms to |this.histogramSet_|. Each value is
     * added as a single sample histogram.
     *
     * @param {!tr.b.MultiDimensionalViewNode} node
     * @param {!Array.<!Array.<string>>} path
     */
    reportValuesFromNode_(node, path) {
      const decodedPath = decodePath_(path);
      const processType = decodedPath.processType || 'all_processes';
      const threadType = decodedPath.threadType || 'all_threads';

      // We need some RAIL stage and some initiator type to process a node.
      // All RAIL stages and all initiator types are handled by the special
      // 'all_stages' and 'all_initiators' nodes respectively.
      if (!decodedPath.railStage || !decodedPath.initiatorType) return;
      const {railStage, initiatorType} = decodedPath;

      const serializedPathName =
          [processType, threadType, railStage, initiatorType].join(':');

      // node.values is a two element array. The first element holds
      // cpuPercentage data and the second holds cpuTime data. The final
      // '.total' (as opposed to '.self') signifies we're including all the data
      // from children nodes. This is an artifact of how the multidimensional
      // view data structure works and is not very relevant - we exclusively use
      // '.total' for CPU time.
      const cpuPercentageValue = node.values[0].total;
      const cpuTimeValue = node.values[1].total;

      this.histogramSet_.createHistogram(`cpuPercentage:${serializedPathName}`,
          CPU_PERCENTAGE_UNIT, cpuPercentageValue);
      this.histogramSet_.createHistogram(`cpuTime:${serializedPathName}`,
          CPU_TIME_UNIT, cpuTimeValue);
    }


    /**
     * Traverses all the paths of a multidimensional view subtree and reports
     * node data to |this.histogramSet_|.
     *
     * @param {!tr.b.MultiDimensionalViewNode} root - Root of the subtree.
     * @param {!Array.<!Array.<string>>} rootPath - Path of the subtree root
     * node with respect to |this.rootNode_|.
     */
    reportDataFromTree_(root, rootPath) {
      const rootPathString = stringifyPathName_(rootPath);
      if (this.visitedSet_.has(rootPathString)) return;
      this.visitedSet_.add(rootPathString);

      this.reportValuesFromNode_(root, rootPath);

      for (let dimension = 0; dimension < root.children.length; dimension++) {
        const children = root.children[dimension];
        for (const [name, node] of children) {
          const childPath = clonePath_(rootPath);
          childPath[dimension].push(name);
          this.reportDataFromTree_(node, childPath);
        }
      }
    }

    /**
     * Adds values from the multidimensional tree view rooted at |rootNode| as
     * single value histograms in |histogramSet|.
     *
     * @param {!tr.b.MultiDimensionalViewNode} rootNode
     * @param {!tr.v.HistogramSet} histogramSet
     */
    addTreeValuesToHistogramSet(rootNode, histogramSet) {
      const rootPath = [[], [], []];
      this.rootNode_ = rootNode;
      this.histogramSet_ = histogramSet;
      this.reportDataFromTree_(this.rootNode_, rootPath);
    }

    /**
     * Reports values from the multidimensional tree view rooted at |rootNode|
     * as single value histograms in |histogramSet|.
     *
     * The histograms are dynamically generated from the tree. The histogram
     * names are of the form
     *   "${cpuTime|cpuPercentage}:${processType}:${threadType}:" +
     *   "${railStage}:${railStageInitiator}"
     *
     * cpuTime histograms contain total consumed cpu time, while cpuPercentage
     * histograms contain cpu time as a percentage of wall time. In multicore
     * situations, this percentage can be larger than 100.
     *
     * @param {!tr.b.MultiDimensionalViewNode} rootNode
     * @param {!tr.v.HistogramSet} histogramSet
     */
    static reportToHistogramSet(rootNode, histogramSet) {
      const reporter = new CpuTimeTreeDataReporter();
      reporter.addTreeValuesToHistogramSet(rootNode, histogramSet);
    }
  }

  return {
    CpuTimeTreeDataReporter,
  };
});


'use strict';

/**
 * @fileoverview Implements the new CPU time metric. This will eventually
 * replace the current cpu_time_metric.html, but we're running this alongside
 * the existing metric while we monitor its quality.
 *
 */
tr.exportTo('tr.metrics.sh', function() {
  /**
   * This metric measures total CPU time and CPU time per unit of wall clock
   * time for all combinations of process type, thread type, RAIL
   * stage, and RAIL stage initiator present in the model.
   *
   * The metric generates histograms of the form
   *   ${cpuTime|cpuPercentage}:${process_type}:${thread_type}:
   *   ${rail_stage}:${rail_stage_initiator}
   *
   * 'cpuTime' histograms represent total consumed CPU time, while
   * 'cpuPercentage' histograms represent CPU time as a percentage of wall clock
   * time.
   *
   * Example histograms generated by this metric:
   * - cpuTime:browser_process:CrBrowserMain:Animation:CSS
   * - cpuPercentage:gpu_process:CrGpuMain:Response:Scroll

   * For a given model, a single sample is generated for each histogram. For
   * example, if the model contains three renderer processes, and 10 different
   * Scroll Response ranges, the histogram
   * cpuPercentage:renderer_process:CrRendererMain:Response:Scroll will still
   * contain a single sample: the total CPU time consumed by all three renderer
   * main threads over all 10 Scroll Response phases, divided by the total
   * duration of those ranges. Since the three different main threads can
   * potentially be running on three different CPU cores, the sample value of a
   * cpuPercentage histogram can be more than 100%.
   *
   * The histograms are created as needed from the model - if a certain
   * combination of process, thread, RAIL stage and initiator does not occur in
   * the model, the histogram for that combination is not added.
   *
   * This metric requires only the 'toplevel' tracing category.
   *
   * @param {!tr.v.HistogramSet} histograms
   * @param {!tr.model.Model} model
   * @param {!Object=} opt_options
   */
  function newCpuTimeMetric(histograms, model, opt_options) {
    const rangeOfInterest = opt_options && opt_options.rangeOfInterest ?
       opt_options.rangeOfInterest : model.bounds;

    const rootNode = tr.e.chrome.CpuTime.constructMultiDimensionalView(
        model, rangeOfInterest);

    tr.metrics.sh.CpuTimeTreeDataReporter.reportToHistogramSet(
        rootNode, histograms);
  }

  tr.metrics.MetricRegistry.register(newCpuTimeMetric, {
    supportsRangeOfInterest: true
  });

  return {
    newCpuTimeMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  const includeHistogramNames = [
    'cpuTime:all_processes:all_threads:all_stages:all_initiators',
    'cpuPercentage:all_processes:all_threads:all_stages:all_initiators',
    'cpuTime:browser_process:all_threads:all_stages:all_initiators',
    'cpuPercentage:browser_process:all_threads:all_stages:all_initiators',
    'cpuTime:renderer_processes:all_threads:all_stages:all_initiators',
    'cpuPercentage:renderer_processes:all_threads:all_stages:all_initiators',
    'cpuTime:gpu_process:all_threads:all_stages:all_initiators',
    'cpuPercentage:gpu_process:all_threads:all_stages:all_initiators',
    'cpuTime:renderer_processes:CrRendererMain:all_stages:all_initiators',
    'cpuPercentage:renderer_processes:CrRendererMain:all_stages:all_initiators',
    'cpuTime:browser_process:CrBrowserMain:all_stages:all_initiators',
    'cpuPercentage:browser_process:CrBrowserMain:all_stages:all_initiators',
    'cpuTime:all_processes:all_threads:Load:Successful',
    'cpuPercentage:all_processes:all_threads:Load:Successful',
  ];

  /**
   * This metric is a limited version of new CPU Time metric. The new cpu time
   * metric produces 300-500 histograms for a trace, which is overwhelming for
   * some systems. This file exposes a subset of those histograms.
   *
   * TODO(#4044): Remove this metric once histogram pipeline is ready.
   *
   * @param {!tr.v.HistogramSet} histograms
   * @param {!tr.model.Model} model
   * @param {!Object=} opt_options
   */
  function limitedCpuTimeMetric(histograms, model, opt_options) {
    const allCpuHistograms = new tr.v.HistogramSet();
    tr.metrics.sh.newCpuTimeMetric(allCpuHistograms, model, opt_options);

    for (const histogramName of includeHistogramNames) {
      const histogram = allCpuHistograms.getHistogramNamed(histogramName);
      if (histogram) histograms.addHistogram(histogram);
    }
  }

  tr.metrics.MetricRegistry.register(limitedCpuTimeMetric, {
    supportsRangeOfInterest: true
  });

  return {
    limitedCpuTimeMetric,
  };
});


'use strict';

tr.exportTo('tr.e.chrome', function() {
  const SAME_AS_PARENT = 'same-as-parent';

  const TITLES_FOR_USER_FRIENDLY_CATEGORY = {
    composite: [
      'CompositingInputsUpdater::update',
      'ThreadProxy::SetNeedsUpdateLayers',
      'LayerTreeHost::UpdateLayers::CalcDrawProps',
      'UpdateLayerTree',
    ],

    gc: [
      'minorGC',
      'majorGC',
      'MajorGC',
      'MinorGC',
      'V8.GCScavenger',
      'V8.GCIncrementalMarking',
      'V8.GCIdleNotification',
      'V8.GCContext',
      'V8.GCCompactor',
      'V8GCController::traceDOMWrappers',
    ],

    iframe_creation: [
      'WebLocalFrameImpl::createChildframe',
    ],

    imageDecode: [
      'Decode Image',
      'ImageFrameGenerator::decode',
      'ImageFrameGenerator::decodeAndScale',
      'ImageResourceContent::updateImage',
    ],

    input: [
      'HitTest',
      'ScrollableArea::scrollPositionChanged',
      'EventHandler::handleMouseMoveEvent',
    ],

    layout: [
      'DisplayItemList::Finalize',
      'IntersectionObserverController::computeTrackedIntersectionObservations',
      'LocalFrameView::invalidateTree',
      'LocalFrameView::layout',
      'LocalFrameView::performLayout',
      'LocalFrameView::performPostLayoutTasks',
      'LocalFrameView::performPreLayoutTasks',
      'FrameView::invalidateTree',
      'FrameView::layout',
      'FrameView::performLayout',
      'FrameView::performPostLayoutTasks',
      'FrameView::performPreLayoutTasks',
      'Layer::updateLayerPositionsAfterLayout',
      'LayerTreeHostInProcess::UpdateLayers::BuildPropertyTrees',
      'Layout',
      'LayoutView::hitTest',
      'PaintLayer::updateLayerPositionsAfterLayout',
      'ResourceLoadPriorityOptimizer::updateAllImageResourcePriorities',
      'WebViewImpl::layout',
    ],

    parseHTML: [
      'BackgroundHTMLParser::pumpTokenizer',
      'BackgroundHTMLParser::sendTokensToMainThread',
      'HTMLDocumentParser::didReceiveParsedChunkFromBackgroundParser',
      'HTMLDocumentParser::documentElementAvailable',
      'HTMLDocumentParser::notifyPendingTokenizedChunks',
      'HTMLDocumentParser::processParsedChunkFromBackgroundParser',
      'HTMLDocumentParser::processTokenizedChunkFromBackgroundParser',
      'ParseHTML',
    ],

    raster: [
      'DisplayListRasterSource::PerformSolidColorAnalysis',
      'Picture::Raster',
      'RasterBufferImpl::Playback',
      'RasterTask',
      'RasterizerTaskImpl::RunOnWorkerThread',
      'SkCanvas::drawImageRect()',
      'SkCanvas::drawPicture()',
      'SkCanvas::drawTextBlob()',
      'TileTaskWorkerPool::PlaybackToMemory',
    ],

    record: [
      'Canvas2DLayerBridge::flushRecordingOnly',
      'CompositingRequirementsUpdater::updateRecursive',
      'ContentLayerDelegate::paintContents',
      'DeprecatedPaintLayerCompositor::updateIfNeededRecursive',
      'DeprecatedPaintLayerCompositor::updateLayerPositionsAfterLayout',
      'LocalFrameView::paintTree',
      'LocalFrameView::prePaint',
      'Paint',
      'PaintController::commitNewDisplayItems',
      'PaintLayerCompositor::updateIfNeededRecursive',
      'Picture::Record',
      'PictureLayer::Update',
      'RenderLayer::updateLayerPositionsAfterLayout',
    ],

    style: [
      'CSSParserImpl::parseStyleSheet.parse',
      'CSSParserImpl::parseStyleSheet.tokenize',
      'Document::rebuildLayoutTree',
      'Document::recalcStyle',
      'Document::updateActiveStyle',
      'Document::updateStyle',
      'Document::updateStyleInvalidationIfNeeded',
      'LocalFrameView::updateStyleAndLayoutIfNeededRecursive',
      'ParseAuthorStyleSheet',
      'RuleSet::addRulesFromSheet',
      'StyleElement::processStyleSheet',
      'StyleEngine::createResolver',
      'StyleEngine::updateActiveStyleSheets',
      'StyleSheetContents::parseAuthorStyleSheet',
      'UpdateLayoutTree',
    ],

    script_parse_and_compile: [
      'V8.CompileFullCode',
      'V8.NewContext',
      'V8.Parse',
      'V8.ParseLazy',
      'V8.RecompileSynchronous',
      'V8.ScriptCompiler',
      'v8.compile',
      'v8.parseOnBackground',
    ],

    script_execute: [
      'EvaluateScript',
      'FunctionCall',
      'HTMLParserScriptRunner ExecuteScript',
      'V8.Execute',
      'V8.RunMicrotasks',
      'V8.Task',
      'WindowProxy::initialize',
      'v8.callFunction',
      'v8.run',
    ],

    resource_loading: [
      'RenderFrameImpl::didFinishDocumentLoad',
      'RenderFrameImpl::didFinishLoad',
      'Resource::appendData',
      'ResourceDispatcher::OnReceivedData',
      'ResourceDispatcher::OnReceivedResponse',
      'ResourceDispatcher::OnRequestComplete',
      'ResourceFetcher::requestResource',
      'WebURLLoaderImpl::Context::Cancel',
      'WebURLLoaderImpl::Context::OnCompletedRequest',
      'WebURLLoaderImpl::Context::OnReceivedData',
      'WebURLLoaderImpl::Context::OnReceivedRedirect',
      'WebURLLoaderImpl::Context::OnReceivedResponse',
      'WebURLLoaderImpl::Context::Start',
      'WebURLLoaderImpl::loadAsynchronously',
      'WebURLLoaderImpl::loadSynchronously',
      'content::mojom::URLLoaderClient',
    ],

    // Where do these go?
    renderer_misc: [
      'DecodeFont',
      'ThreadState::completeSweep',  // blink_gc
    ],

    // TODO(fmeawad): https://github.com/catapult-project/catapult/issues/2572
    v8_runtime: [
      // Dynamically populated.
    ],

    [SAME_AS_PARENT]: [
      'SyncChannel::Send',
    ]
  };

  const COLOR_FOR_USER_FRIENDLY_CATEGORY = new tr.b.SinebowColorGenerator();
  const USER_FRIENDLY_CATEGORY_FOR_TITLE = new Map();

  for (const category in TITLES_FOR_USER_FRIENDLY_CATEGORY) {
    TITLES_FOR_USER_FRIENDLY_CATEGORY[category].forEach(function(title) {
      USER_FRIENDLY_CATEGORY_FOR_TITLE.set(title, category);
    });
  }

  // keys: event.category part
  // values: user friendly category
  const USER_FRIENDLY_CATEGORY_FOR_EVENT_CATEGORY = {
    netlog: 'net',
    overhead: 'overhead',
    startup: 'startup',
    gpu: 'gpu',
  };

  function ChromeUserFriendlyCategoryDriver() {
  }

  ChromeUserFriendlyCategoryDriver.fromEvent = function(event) {
    let userFriendlyCategory =
        USER_FRIENDLY_CATEGORY_FOR_TITLE.get(event.title);
    if (userFriendlyCategory) {
      if (userFriendlyCategory === SAME_AS_PARENT) {
        if (event.parentSlice) {
          return ChromeUserFriendlyCategoryDriver.fromEvent(event.parentSlice);
        }
      } else {
        return userFriendlyCategory;
      }
    }

    const eventCategoryParts = tr.b.getCategoryParts(event.category);
    for (let i = 0; i < eventCategoryParts.length; ++i) {
      const eventCategory = eventCategoryParts[i];
      userFriendlyCategory = USER_FRIENDLY_CATEGORY_FOR_EVENT_CATEGORY[
          eventCategory];
      if (userFriendlyCategory) {
        return userFriendlyCategory;
      }
    }

    return 'other';
  };

  ChromeUserFriendlyCategoryDriver.getColor = function(ufc) {
    return COLOR_FOR_USER_FRIENDLY_CATEGORY.colorForKey(ufc);
  };

  ChromeUserFriendlyCategoryDriver.ALL_TITLES = ['other'];
  for (const category in TITLES_FOR_USER_FRIENDLY_CATEGORY) {
    if (category === SAME_AS_PARENT) continue;
    ChromeUserFriendlyCategoryDriver.ALL_TITLES.push(category);
  }
  for (const category of Object.values(
      USER_FRIENDLY_CATEGORY_FOR_EVENT_CATEGORY)) {
    ChromeUserFriendlyCategoryDriver.ALL_TITLES.push(category);
  }
  ChromeUserFriendlyCategoryDriver.ALL_TITLES.sort();

  // Prime the color generator by iterating through all UFCs in alphabetical
  // order.
  for (const category of ChromeUserFriendlyCategoryDriver.ALL_TITLES) {
    ChromeUserFriendlyCategoryDriver.getColor(category);
  }

  return {
    ChromeUserFriendlyCategoryDriver,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  const LONG_TASK_MS = 50;

  // Anything longer than this should be so rare that its length beyond this is
  // uninteresting.
  const LONGEST_TASK_MS = 1000;

  /**
   * This helper function calls |cb| for each of the top-level tasks on the
   * given thread in the given range whose duration is longer than LONG_TASK_MS.
   *
   * @param {tr.model.Thread} thread
   * @param {tr.b.math.Range=} opt_range
   * @param {function()} cb
   * @param {Object=} opt_this
   */
  function iterateLongTopLevelTasksOnThreadInRange(
      thread, opt_range, cb, opt_this) {
    thread.sliceGroup.topLevelSlices.forEach(function(slice) {
      if (opt_range &&
          !opt_range.intersectsExplicitRangeInclusive(slice.start, slice.end)) {
        return;
      }

      if (slice.duration < LONG_TASK_MS) return;

      cb.call(opt_this, slice);
    });
  }

  /**
   * This helper function calls |cb| for each of the main renderer threads in
   * the model.
   *
   * @param {tr.model.Model} model The model.
   * @param {function()} cb Callback.
   * @param {Object=} opt_this Context object.
   */
  function iterateRendererMainThreads(model, cb, opt_this) {
    const modelHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    if (modelHelper !== undefined) {
      Object.values(modelHelper.rendererHelpers).forEach(
          function(rendererHelper) {
            if (!rendererHelper.mainThread) return;

            cb.call(opt_this, rendererHelper.mainThread);
          });
    }
  }

  /**
   * This metric directly measures long tasks on renderer main threads.
   * This metric requires only the 'toplevel' tracing category.
   *
   * @param {!tr.v.HistogramSet} histograms
   * @param {!tr.model.Model} model
   * @param {!Object=} opt_options
   */
  function longTasksMetric(histograms, model, opt_options) {
    const rangeOfInterest = opt_options ? opt_options.rangeOfInterest :
      undefined;
    const longTaskHist = new tr.v.Histogram('long tasks',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        tr.v.HistogramBinBoundaries.createLinear(
            LONG_TASK_MS, LONGEST_TASK_MS, 40));
    longTaskHist.description = 'durations of long tasks';
    const slices = new tr.model.EventSet();
    iterateRendererMainThreads(model, function(thread) {
      iterateLongTopLevelTasksOnThreadInRange(
          thread, rangeOfInterest, function(task) {
            longTaskHist.addSample(task.duration,
                {relatedEvents: new tr.v.d.RelatedEventSet([task])});
            slices.push(task);
            slices.addEventSet(task.descendentSlices);
          });
    });
    histograms.addHistogram(longTaskHist);

    const sampleForEvent = undefined;
    const breakdown = tr.v.d.RelatedHistogramBreakdown.buildFromEvents(
        histograms, 'long tasks ', slices,
        e => (model.getUserFriendlyCategoryFromEvent(e) || 'unknown'),
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, sampleForEvent,
        tr.v.HistogramBinBoundaries.createExponential(1, LONGEST_TASK_MS, 40));
    breakdown.colorScheme =
      tr.v.d.COLOR_SCHEME_CHROME_USER_FRIENDLY_CATEGORY_DRIVER;
    longTaskHist.diagnostics.set('category', breakdown);
  }

  tr.metrics.MetricRegistry.register(longTasksMetric, {
    supportsRangeOfInterest: true,
    requiredCategories: ['toplevel'],
  });

  return {
    longTasksMetric,
    iterateLongTopLevelTasksOnThreadInRange,
    iterateRendererMainThreads,
    LONG_TASK_MS,
    LONGEST_TASK_MS,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  const BACKGROUND = tr.model.ContainerMemoryDump.LevelOfDetail.BACKGROUND;
  const LIGHT = tr.model.ContainerMemoryDump.LevelOfDetail.LIGHT;
  const DETAILED = tr.model.ContainerMemoryDump.LevelOfDetail.DETAILED;
  const sizeInBytes_smallerIsBetter =
      tr.b.Unit.byName.sizeInBytes_smallerIsBetter;
  const count_smallerIsBetter = tr.b.Unit.byName.count_smallerIsBetter;
  const DISPLAYED_SIZE_NUMERIC_NAME =
      tr.model.MemoryAllocatorDump.DISPLAYED_SIZE_NUMERIC_NAME;

  const LEVEL_OF_DETAIL_NAMES = new Map();
  LEVEL_OF_DETAIL_NAMES.set(BACKGROUND, 'background');
  LEVEL_OF_DETAIL_NAMES.set(LIGHT, 'light');
  LEVEL_OF_DETAIL_NAMES.set(DETAILED, 'detailed');

  // Some detailed dumps contain heap profiler information.
  const HEAP_PROFILER_DETAIL_NAME = 'heap_profiler';

  const BOUNDARIES_FOR_UNIT_MAP = new WeakMap();
  // For unitless numerics (process counts), we use 20 linearly scaled bins
  // from 0 to 20.
  BOUNDARIES_FOR_UNIT_MAP.set(count_smallerIsBetter,
      tr.v.HistogramBinBoundaries.createLinear(0, 20, 20));
  // For size numerics (subsystem and vm stats), we use 1 bin from 0 B to
  // 1 KiB and 4*24 exponentially scaled bins from 1 KiB to 16 GiB (=2^24 KiB).
  BOUNDARIES_FOR_UNIT_MAP.set(sizeInBytes_smallerIsBetter,
      new tr.v.HistogramBinBoundaries(0)
          .addBinBoundary(1024 /* 1 KiB */)
          .addExponentialBins(16 * 1024 * 1024 * 1024 /* 16 GiB */, 4 * 24));

  const CHROME_PROCESS_NAMES =
      tr.e.chrome.chrome_processes.CHROME_PROCESS_NAMES;

  function memoryMetric(values, model, opt_options) {
    const rangeOfInterest =
      opt_options ? opt_options.rangeOfInterest : undefined;
    const browserNameToGlobalDumps =
        tr.metrics.sh.splitGlobalDumpsByBrowserName(model, rangeOfInterest);
    addGeneralMemoryDumpValues(browserNameToGlobalDumps, values);
    addDetailedMemoryDumpValues(browserNameToGlobalDumps, values);
    addMemoryDumpCountValues(browserNameToGlobalDumps, values);
  }

  const USER_FRIENDLY_BROWSER_NAMES = {
    'chrome': 'Chrome',
    'webview': 'WebView',
    'unknown_browser': 'an unknown browser'
  };

  /**
   * Convert a canonical browser name used in value names to a user-friendly
   * name used in value descriptions.
   *
   * Examples:
   *
   *   CANONICAL BROWSER NAME -> USER-FRIENDLY NAME
   *   chrome                 -> Chrome
   *   unknown_browser        -> an unknown browser
   *   webview2               -> WebView(2)
   *   unexpected             -> 'unexpected' browser
   */
  function convertBrowserNameToUserFriendlyName(browserName) {
    for (const baseName in USER_FRIENDLY_BROWSER_NAMES) {
      if (!browserName.startsWith(baseName)) continue;

      const userFriendlyBaseName = USER_FRIENDLY_BROWSER_NAMES[baseName];
      const suffix = browserName.substring(baseName.length);
      if (suffix.length === 0) {
        return userFriendlyBaseName;
      } else if (/^\d+$/.test(suffix)) {
        return userFriendlyBaseName + '(' + suffix + ')';
      }
    }
    return '\'' + browserName + '\' browser';
  }


  /**
   * Convert a canonical process name used in value names to a user-friendly
   * name used in value descriptions.
   */
  function convertProcessNameToUserFriendlyName(processName,
      opt_requirePlural) {
    switch (processName) {
      case CHROME_PROCESS_NAMES.BROWSER:
        return opt_requirePlural ? 'browser processes' : 'the browser process';
      case CHROME_PROCESS_NAMES.RENDERER:
        return 'renderer processes';
      case CHROME_PROCESS_NAMES.GPU:
        return opt_requirePlural ? 'GPU processes' : 'the GPU process';
      case CHROME_PROCESS_NAMES.PPAPI:
        return opt_requirePlural ? 'PPAPI processes' : 'the PPAPI process';
      case CHROME_PROCESS_NAMES.ALL:
        return 'all processes';
      case CHROME_PROCESS_NAMES.UNKNOWN:
        return 'unknown processes';
      default:
        return '\'' + processName + '\' processes';
    }
  }

  /**
   * Add general memory dump values calculated from all global memory dumps to
   * |values|. In particular, this function adds the following values:
   *
   *   * PROCESS COUNTS
   *     memory:{chrome, webview}:
   *         {browser_process, renderer_processes, ..., all_processes}:
   *         process_count
   *     type: tr.v.Histogram (over all matching global memory dumps)
   *     unit: count_smallerIsBetter
   *
   *   * MEMORY USAGE REPORTED BY CHROME
   *     memory:{chrome, webview}:
   *         {browser_process, renderer_processes, ..., all_processes}:
   *         reported_by_chrome[:{v8, malloc, ...}]:
   *         {effective_size, allocated_objects_size, locked_size}
   *     type: tr.v.Histogram (over all matching global memory dumps)
   *     unit: sizeInBytes_smallerIsBetter
   */
  function addGeneralMemoryDumpValues(browserNameToGlobalDumps, values) {
    addMemoryDumpValues(browserNameToGlobalDumps,
        gmd => true /* process all global memory dumps */,
        function(processDump, addProcessScalar) {
          // Increment memory:<browser-name>:<process-name>:process_count value.
          addProcessScalar({
            source: 'process_count',
            property: PROCESS_COUNT,
            value: 1
          });

          if (processDump.totals !== undefined) {
            addProcessScalar({
              source: 'reported_by_os',
              property: RESIDENT_SIZE,
              component: ['system_memory'],
              value: processDump.totals.residentBytes
            });
            addProcessScalar({
              source: 'reported_by_os',
              property: PEAK_RESIDENT_SIZE,
              component: ['system_memory'],
              value: processDump.totals.peakResidentBytes
            });
            addProcessScalar({
              source: 'reported_by_os',
              property: PRIVATE_FOOTPRINT_SIZE,
              component: ['system_memory'],
              value: processDump.totals.privateFootprintBytes,
            });
          }

          // Add memory:<browser-name>:<process-name>:reported_by_chrome:...
          // values.
          if (processDump.memoryAllocatorDumps === undefined) return;

          processDump.memoryAllocatorDumps.forEach(function(rootAllocatorDump) {
            CHROME_VALUE_PROPERTIES.forEach(function(property) {
              addProcessScalar({
                source: 'reported_by_chrome',
                component: [rootAllocatorDump.name],
                property,
                value: rootAllocatorDump.numerics[property.name]
              });
            });
            // Some dump providers add allocated objects size as
            // "allocated_objects" child dump.
            if (rootAllocatorDump.numerics.allocated_objects_size ===
                    undefined) {
              const allocatedObjectsDump =
                  rootAllocatorDump.getDescendantDumpByFullName(
                      'allocated_objects');
              if (allocatedObjectsDump !== undefined) {
                addProcessScalar({
                  source: 'reported_by_chrome',
                  component: [rootAllocatorDump.name],
                  property: ALLOCATED_OBJECTS_SIZE,
                  value: allocatedObjectsDump.numerics.size
                });
              }
            }
          });

          // Add memory:<browser-name>:<process-name>:reported_by_chrome:
          //    {malloc, blinkgc, partitionalloc}:<largestCategory>:...
          addTopHeapDumpCategoryValue(processDump, addProcessScalar);

          // Add memory:<browser-name>:<process-name>:reported_by_chrome:v8:
          //     {heap, allocated_by_malloc}:...
          addV8MemoryDumpValues(processDump, addProcessScalar);
        },
        function(componentTree) {
          // Subtract memory:<browser-name>:<process-name>:reported_by_chrome:
          // tracing:<size-property> from memory:<browser-name>:<process-name>:
          // reported_by_chrome:<size-property> if applicable.
          const tracingNode = componentTree.children[1].get('tracing');
          if (tracingNode === undefined) return;

          for (let i = 0; i < componentTree.values.length; i++) {
            componentTree.values[i].total -= tracingNode.values[i].total;
          }
        }, values);
  }

  /**
   * Add memory dump values for the top category in each allocator heap dump in
   * the process dump.
   *
   * @param {!tr.model.ProcessMemoryDump} processDump The process memory dump.
   * @param {!function} addProcessScalar The callback for adding a scalar value.
   */
  function addTopHeapDumpCategoryValue(processDump, addProcessScalar) {
    if (!processDump.heapDumps) {
      return;
    }
    for (const allocatorName in processDump.heapDumps) {
      const heapDump = processDump.heapDumps[allocatorName];
      if (heapDump.entries === undefined || heapDump.entries.length === 0) {
        return;
      }
      // Create a map of category to total size.
      const typeToSize = {};
      for (let i = 0; i < heapDump.entries.length; i += 1) {
        const entry = heapDump.entries[i];
        // Count only the entries with empty backtrace which contains totals for
        // the object type.
        if (!entry.objectTypeName || entry.leafStackFrame) {
          continue;
        }
        if (!typeToSize[entry.objectTypeName]) {
          typeToSize[entry.objectTypeName] = 0;
        }
        typeToSize[entry.objectTypeName] += entry.size;
      }

      // Find the largest type in the heap dump.
      let largestValue = 0;
      let largestType = '';
      for (const key in typeToSize) {
        if (largestValue < typeToSize[key]) {
          largestValue = typeToSize[key];
          largestType = key;
        }
      }
      addProcessScalar({
        source: 'reported_by_chrome',
        component: [allocatorName, largestType],
        property: HEAP_CATEGORY_SIZE,
        value: largestValue
      });
    }
  }

  /**
   * Add memory dump values calculated from V8 components excluding
   * 'heap_spaces/other_spaces'.
   *
   * @param {!tr.model.ProcessMemoryDump} processDump The process memory dump.
   * @param {!function} addProcessScalar The callback for adding a scalar value.
   */
  function addV8MemoryDumpValues(processDump, addProcessScalar) {
    const v8Dump = processDump.getMemoryAllocatorDumpByFullName('v8');
    if (v8Dump === undefined) return;

    v8Dump.children.forEach(function(isolateDump) {
      // v8:allocated_by_malloc:...
      const mallocDump = isolateDump.getDescendantDumpByFullName('malloc');
      if (mallocDump !== undefined) {
        addV8ComponentValues(mallocDump, ['v8', 'allocated_by_malloc'],
            addProcessScalar);
      }
      // v8:heap:...
      const heapDump = isolateDump.getDescendantDumpByFullName('heap_spaces');
      if (heapDump !== undefined) {
        addV8ComponentValues(heapDump, ['v8', 'heap'], addProcessScalar);
        heapDump.children.forEach(function(spaceDump) {
          if (spaceDump.name === 'other_spaces') return;

          addV8ComponentValues(spaceDump, ['v8', 'heap', spaceDump.name],
              addProcessScalar);
        });
      }
    });

    // V8 generates bytecode when interpreting and code objects when
    // compiling the javascript. Total code size includes the size
    // of code and bytecode objects.
    addProcessScalar({
      source: 'reported_by_chrome',
      component: ['v8'],
      property: CODE_AND_METADATA_SIZE,
      value: v8Dump.numerics.code_and_metadata_size
    });
    addProcessScalar({
      source: 'reported_by_chrome',
      component: ['v8'],
      property: CODE_AND_METADATA_SIZE,
      value: v8Dump.numerics.bytecode_and_metadata_size
    });
  }

  /**
   * Add memory dump values calculated from the specified V8 component.
   *
   * @param {!tr.model.MemoryAllocatorDump} v8Dump The V8 memory dump.
   * @param {!Array<string>} componentPath The component path for reporting.
   * @param {!function} addProcessScalar The callback for adding a scalar value.
   */
  function addV8ComponentValues(componentDump, componentPath,
      addProcessScalar) {
    CHROME_VALUE_PROPERTIES.forEach(function(property) {
      addProcessScalar({
        source: 'reported_by_chrome',
        component: componentPath,
        property,
        value: componentDump.numerics[property.name]
      });
    });
  }

  const PROCESS_COUNT = {
    unit: count_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      if (componentPath.length > 0) {
        throw new Error('Unexpected process count non-empty component path: ' +
            componentPath.join(':'));
      }
      return 'total number of ' + convertProcessNameToUserFriendlyName(
          processName, true /* opt_requirePlural */);
    }
  };

  const EFFECTIVE_SIZE = {
    name: 'effective_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildChromeValueDescriptionPrefix(componentPath, processName, {
        userFriendlyPropertyName: 'effective size',
        componentPreposition: 'of'
      });
    }
  };

  const ALLOCATED_OBJECTS_SIZE = {
    name: 'allocated_objects_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildChromeValueDescriptionPrefix(componentPath, processName, {
        userFriendlyPropertyName: 'size of all objects allocated',
        totalUserFriendlyPropertyName: 'size of all allocated objects',
        componentPreposition: 'by'
      });
    }
  };

  const SHIM_ALLOCATED_OBJECTS_SIZE = {
    name: 'shim_allocated_objects_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildChromeValueDescriptionPrefix(componentPath, processName, {
        userFriendlyPropertyName: 'size of all objects allocated through shim',
        totalUserFriendlyPropertyName:
            'size of all allocated objects through shim',
        componentPreposition: 'by'
      });
    }
  };

  const LOCKED_SIZE = {
    name: 'locked_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildChromeValueDescriptionPrefix(componentPath, processName, {
        userFriendlyPropertyName: 'locked (pinned) size',
        componentPreposition: 'of'
      });
    }
  };

  const PEAK_SIZE = {
    name: 'peak_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildChromeValueDescriptionPrefix(componentPath, processName, {
        userFriendlyPropertyName: 'peak size',
        componentPreposition: 'of'
      });
    }
  };

  const HEAP_CATEGORY_SIZE = {
    name: 'heap_category_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildChromeValueDescriptionPrefix(componentPath, processName, {
        userFriendlyPropertyName: 'heap profiler category size',
        componentPreposition: 'for'
      });
    }
  };

  const CODE_AND_METADATA_SIZE = {
    name: 'code_and_metadata_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildChromeValueDescriptionPrefix(componentPath, processName, {
        userFriendlyPropertyNamePrefix: 'size of',
        userFriendlyPropertyName: 'code and metadata'
      });
    }
  };

  const CHROME_VALUE_PROPERTIES = [
    EFFECTIVE_SIZE,
    ALLOCATED_OBJECTS_SIZE,
    SHIM_ALLOCATED_OBJECTS_SIZE,
    LOCKED_SIZE,
    PEAK_SIZE
  ];

  /**
   * Build a description prefix for a memory:<browser-name>:<process-name>:
   * reported_by_chrome:... value.
   *
   * @param {!Array<string>} componentPath The underlying component path (e.g.
   *     ['malloc']).
   * @param {string} processName The canonical name of the process.
   * @param {{
   *     userFriendlyPropertyName: string,
   *     userFriendlyPropertyNamePrefix: (string|undefined),
   *     totalUserFriendlyPropertyName: (string|undefined),
   *     componentPreposition: (string|undefined) }}
   *     formatSpec Specification of how the property should be formatted.
   * @return {string} Prefix for the value's description (e.g.
   *     'effective size of malloc in the browser process').
   */
  function buildChromeValueDescriptionPrefix(
      componentPath, processName, formatSpec) {
    const nameParts = [];
    if (componentPath.length === 0) {
      nameParts.push('total');
      if (formatSpec.totalUserFriendlyPropertyName) {
        nameParts.push(formatSpec.totalUserFriendlyPropertyName);
      } else {
        if (formatSpec.userFriendlyPropertyNamePrefix) {
          nameParts.push(formatSpec.userFriendlyPropertyNamePrefix);
        }
        nameParts.push(formatSpec.userFriendlyPropertyName);
      }
      nameParts.push('reported by Chrome for');
    } else {
      if (formatSpec.componentPreposition === undefined) {
        // Use component name as an adjective
        // (e.g. 'size of V8 code and metadata').
        if (formatSpec.userFriendlyPropertyNamePrefix) {
          nameParts.push(formatSpec.userFriendlyPropertyNamePrefix);
        }
        nameParts.push(componentPath.join(':'));
        nameParts.push(formatSpec.userFriendlyPropertyName);
      } else {
        // Use component name as a noun with a preposition
        // (e.g. 'size of all objects allocated BY MALLOC').
        if (formatSpec.userFriendlyPropertyNamePrefix) {
          nameParts.push(formatSpec.userFriendlyPropertyNamePrefix);
        }
        nameParts.push(formatSpec.userFriendlyPropertyName);
        nameParts.push(formatSpec.componentPreposition);
        if (componentPath[componentPath.length - 1] === 'allocated_by_malloc') {
          nameParts.push('objects allocated by malloc for');
          nameParts.push(
              componentPath.slice(0, componentPath.length - 1).join(':'));
        } else {
          nameParts.push(componentPath.join(':'));
        }
      }
      nameParts.push('in');
    }
    nameParts.push(convertProcessNameToUserFriendlyName(processName));
    return nameParts.join(' ');
  }

  const RESIDENT_SIZE = {
    name: 'resident_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildOsValueDescriptionPrefix(componentPath, processName,
          'resident set size (RSS)');
    }
  };

  const PEAK_RESIDENT_SIZE = {
    name: 'peak_resident_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildOsValueDescriptionPrefix(componentPath, processName,
          'peak resident set size');
    }
  };

  const PROPORTIONAL_RESIDENT_SIZE = {
    name: 'proportional_resident_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildOsValueDescriptionPrefix(componentPath, processName,
          'proportional resident size (PSS)');
    }
  };

  const PRIVATE_DIRTY_SIZE = {
    name: 'private_dirty_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildOsValueDescriptionPrefix(componentPath, processName,
          'private dirty size');
    }
  };

  const PRIVATE_FOOTPRINT_SIZE = {
    name: 'private_footprint_size',
    unit: sizeInBytes_smallerIsBetter,
    buildDescriptionPrefix(componentPath, processName) {
      return buildOsValueDescriptionPrefix(componentPath, processName,
          'private footprint size');
    }
  };

  /**
   * Build a description prefix for a memory:<browser-name>:<process-name>:
   * reported_by_os:... value.
   *
   * @param {!Array<string>} componentPath The underlying component path (e.g.
   *     ['system', 'java_heap']).
   * @param {string} processName The canonical name of the process.
   * @param {string} userFriendlyPropertyName User-friendly name of the
   *     underlying property (e.g. 'private dirty size').
   * @return {string} Prefix for the value's description (e.g.
   *     'total private dirty size of the Java heal in the GPU process').
   */
  function buildOsValueDescriptionPrefix(
      componentPath, processName, userFriendlyPropertyName) {
    if (componentPath.length > 2) {
      throw new Error('OS value component path for \'' +
          userFriendlyPropertyName + '\' too long: ' + componentPath.join(':'));
    }

    const nameParts = [];
    if (componentPath.length < 2) {
      nameParts.push('total');
    }

    nameParts.push(userFriendlyPropertyName);

    if (componentPath.length > 0) {
      switch (componentPath[0]) {
        case 'system_memory':
          if (componentPath.length > 1) {
            const userFriendlyComponentName =
                SYSTEM_VALUE_COMPONENTS[componentPath[1]].userFriendlyName;
            if (userFriendlyComponentName === undefined) {
              throw new Error('System value sub-component for \'' +
                  userFriendlyPropertyName + '\' unknown: ' +
                  componentPath.join(':'));
            }
            nameParts.push('of', userFriendlyComponentName, 'in');
          } else {
            nameParts.push('of system memory (RAM) used by');
          }
          break;

        case 'gpu_memory':
          if (componentPath.length > 1) {
            nameParts.push('of the', componentPath[1]);
            nameParts.push('Android memtrack component in');
          } else {
            nameParts.push('of GPU memory (Android memtrack) used by');
          }
          break;

        default:
          throw new Error('OS value component for \'' +
              userFriendlyPropertyName + '\' unknown: ' +
              componentPath.join(':'));
      }
    } else {
      nameParts.push('reported by the OS for');
    }

    nameParts.push(convertProcessNameToUserFriendlyName(processName));
    return nameParts.join(' ');
  }

  /**
   * Add heavy memory dump values calculated from heavy global memory dumps to
   * |values|. In particular, this function adds the following values:
   *
   *   * MEMORY USAGE REPORTED BY THE OS
   *     memory:{chrome, webview}:
   *         {browser_process, renderer_processes, ..., all_processes}:
   *         reported_by_os:system_memory:[{ashmem, native_heap, java_heap}:]
   *         {proportional_resident_size, private_dirty_size}
   *     memory:{chrome, webview}:
   *         {browser_process, renderer_processes, ..., all_processes}:
   *         reported_by_os:gpu_memory:[{gl, graphics, ...}:]
   *         proportional_resident_size
   *     type: tr.v.Histogram (over matching heavy global memory dumps)
   *     unit: sizeInBytes_smallerIsBetter
   *
   *   * MEMORY USAGE REPORTED BY CHROME
   *     memory:{chrome, webview}:
   *         {browser_process, renderer_processes, ..., all_processes}:
   *         reported_by_chrome:v8:code_and_metadata_size
   *     type: tr.v.Histogram (over matching heavy global memory dumps)
   *     unit: sizeInBytes_smallerIsBetter
   */
  function addDetailedMemoryDumpValues(browserNameToGlobalDumps, values) {
    addMemoryDumpValues(browserNameToGlobalDumps,
        g => g.levelOfDetail === DETAILED,
        function(processDump, addProcessScalar) {
          // Add memory:<browser-name>:<process-name>:reported_by_os:
          // system_memory:... values.
          for (const [componentName, componentSpec] of
              Object.entries(SYSTEM_VALUE_COMPONENTS)) {
            const node = getDescendantVmRegionClassificationNode(
                processDump.vmRegions, componentSpec.classificationPath);
            const componentPath = ['system_memory'];
            if (componentName) componentPath.push(componentName);
            addProcessScalar({
              source: 'reported_by_os',
              component: componentPath,
              property: PROPORTIONAL_RESIDENT_SIZE,
              value: node === undefined ?
                  0 : (node.byteStats.proportionalResident || 0)
            });
            addProcessScalar({
              source: 'reported_by_os',
              component: componentPath,
              property: PRIVATE_DIRTY_SIZE,
              value: node === undefined ?
                  0 : (node.byteStats.privateDirtyResident || 0)
            });
          }

          // Add memory:<browser-name>:<process-name>:reported_by_os:
          // gpu_memory:... values.
          const memtrackDump = processDump.getMemoryAllocatorDumpByFullName(
              'gpu/android_memtrack');
          if (memtrackDump !== undefined) {
            memtrackDump.children.forEach(function(memtrackChildDump) {
              addProcessScalar({
                source: 'reported_by_os',
                component: ['gpu_memory', memtrackChildDump.name],
                property: PROPORTIONAL_RESIDENT_SIZE,
                value: memtrackChildDump.numerics.memtrack_pss
              });
            });
          }
        }, function(componentTree) {}, values);
  }

  // Specifications of components reported by the system.
  const SYSTEM_VALUE_COMPONENTS = {
    '': {
      classificationPath: [],
    },
    'java_heap': {
      classificationPath: ['Android', 'Java runtime', 'Spaces'],
      userFriendlyName: 'the Java heap'
    },
    'ashmem': {
      classificationPath: ['Android', 'Ashmem'],
      userFriendlyName: 'ashmem'
    },
    'native_heap': {
      classificationPath: ['Native heap'],
      userFriendlyName: 'the native heap'
    },
    'stack': {
      classificationPath: ['Stack'],
      userFriendlyName: 'the thread stacks'
    }
  };

  /**
   * Get the descendant of a VM region classification |node| specified by the
   * given |path| of child node titles. If |node| is undefined or such a
   * descendant does not exist, this function returns undefined.
   */
  function getDescendantVmRegionClassificationNode(node, path) {
    for (let i = 0; i < path.length; i++) {
      if (node === undefined) break;

      node = node.children.find(c => c.title === path[i]);
    }
    return node;
  }

  /**
   * Add global memory dump counts to |values|. In particular, this function
   * adds the following values:
   *
   *   * DUMP COUNTS
   *     memory:{chrome, webview}:all_processes:dump_count
   *         [:{light, detailed, heap_profiler}]
   *     type: tr.v.Histogram
   *     unit: count_smallerIsBetter
   *
   * Note that unlike all other values generated by the memory metric, the
   * global memory dump counts are NOT instances of tr.v.Histogram
   * because it doesn't make sense to aggregate them (they are already counts
   * over all global dumps associated with the relevant browser).
   */
  function addMemoryDumpCountValues(browserNameToGlobalDumps, values) {
    browserNameToGlobalDumps.forEach(function(globalDumps, browserName) {
      let totalDumpCount = 0;
      const levelOfDetailNameToDumpCount = {};
      LEVEL_OF_DETAIL_NAMES.forEach(function(levelOfDetailName) {
        levelOfDetailNameToDumpCount[levelOfDetailName] = 0;
      });
      levelOfDetailNameToDumpCount[HEAP_PROFILER_DETAIL_NAME] = 0;

      globalDumps.forEach(function(globalDump) {
        totalDumpCount++;

        // Increment the level-of-detail-specific dump count (if possible).
        const levelOfDetailName =
            LEVEL_OF_DETAIL_NAMES.get(globalDump.levelOfDetail);
        if (levelOfDetailName === undefined) {
          return;  // Unknown level of detail.
        }
        levelOfDetailNameToDumpCount[levelOfDetailName]++;
        if (globalDump.levelOfDetail === DETAILED) {
          if (detectHeapProfilerInMemoryDump(globalDump)) {
            levelOfDetailNameToDumpCount[HEAP_PROFILER_DETAIL_NAME]++;
          }
        }
      });

      // Add memory:<browser-name>:all_processes:dump_count[:<level>] values.
      reportMemoryDumpCountAsValue(browserName, undefined /* total */,
          totalDumpCount, values);
      for (const [levelOfDetailName, levelOfDetailDumpCount] of
          Object.entries(levelOfDetailNameToDumpCount)) {
        reportMemoryDumpCountAsValue(browserName, levelOfDetailName,
            levelOfDetailDumpCount, values);
      }
    });
  }

  /**
   * Check whether detailed global dump has heap profiler information or not.
   */
  function detectHeapProfilerInMemoryDump(globalDump) {
    for (const processDump of Object.values(globalDump.processMemoryDumps)) {
      if (processDump.heapDumps && processDump.heapDumps.malloc) {
        const mallocDump = processDump.heapDumps.malloc;
        if (mallocDump.entries && mallocDump.entries.length > 0) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * Add a tr.v.Histogram value to |values| reporting that the number of
   * |levelOfDetailName| memory dumps added by |browserName| was
   * |levelOfDetailCount|.
   */
  function reportMemoryDumpCountAsValue(
      browserName, levelOfDetailName, levelOfDetailDumpCount, values) {
    // Construct the name of the memory value.
    const nameParts = ['memory', browserName, 'all_processes', 'dump_count'];
    if (levelOfDetailName !== undefined) {
      nameParts.push(levelOfDetailName);
    }
    const name = nameParts.join(':');

    // Build the underlying histogram for the memory value.
    const histogram = new tr.v.Histogram(name, count_smallerIsBetter,
        BOUNDARIES_FOR_UNIT_MAP.get(count_smallerIsBetter));
    histogram.addSample(levelOfDetailDumpCount);

    // If |levelOfDetail| argument is undefined it means a total value.
    const userFriendlyLevelOfDetail =
        (levelOfDetailName || 'all').replace('_', ' ');

    // Build the options for the memory value.
    histogram.description = [
      'total number of',
      userFriendlyLevelOfDetail,
      'memory dumps added by',
      convertBrowserNameToUserFriendlyName(browserName),
      'to the trace'
    ].join(' ');

    // Report the memory value.
    values.addHistogram(histogram);
  }

  /**
   * Add generic values extracted from process memory dumps and aggregated by
   * process name and component path into |values|.
   *
   * For each browser and set of global dumps in |browserNameToGlobalDumps|,
   * |customProcessDumpValueExtractor| is applied to every process memory dump
   * associated with the global memory dump. The second argument provided to the
   * callback is a function for adding extracted values:
   *
   *   function sampleProcessDumpCallback(processDump, addProcessValue) {
   *     ...
   *     addProcessScalar({
   *       source: 'reported_by_chrome',
   *       component: ['system', 'native_heap'],
   *       property: 'proportional_resident_size',
   *       value: pssExtractedFromProcessDump2,
   *       descriptionPrefixBuilder(componentPath) {
   *         return 'PSS of ' + componentPath.join('/') + ' in';
   *       }
   *     });
   *     ...
   *   }
   *
   * For each global memory dump, the extracted values are summed by process
   * name (browser_process, renderer_processes, ..., all_processes) and
   * component path (e.g. gpu is a sum of gpu:gl, gpu:graphics, ...). The sums
   * are then aggregated over all global memory dumps associated with the given
   * browser. For example, assuming that |customProcessDumpValueExtractor|
   * extracts 'proportional_resident_size' values for component paths
   * ['X', 'A'], ['X', 'B'] and ['Y'] under the same 'source' from each process
   * memory dump, the following values will be reported (for Chrome):
   *
   *    memory:chrome:browser_process:source:X:A:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:A in all 'browser' process dumps in global dump 1,
   *          ...
   *          sum of X:A in all 'browser' process dumps in global dump N
   *        ]
   *
   *    memory:chrome:browser_process:source:X:B:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:B in all 'browser' process dumps in global dump 1,
   *          ...
   *          sum of X:B in all 'browser' process dumps in global dump N
   *        ]
   *
   *    memory:chrome:browser_process:source:X:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:A+X:B in all 'browser' process dumps in global dump 1,
   *          ...
   *          sum of X:A+X:B in all 'browser' process dumps in global dump N
   *        ]
   *
   *    memory:chrome:browser_process:source:Y:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of Y in all 'browser' process dumps in global dump 1,
   *          ...
   *          sum of Y in all 'browser' process dumps in global dump N
   *        ]
   *
   *    memory:chrome:browser_process:source:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:A+X:B+Y in all 'browser' process dumps in global dump 1,
   *          ...
   *          sum of X:A+X:B+Y in all 'browser' process dumps in global dump N
   *        ]
   *
   *    ...
   *
   *    memory:chrome:all_processes:source:X:A:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:A in all process dumps in global dump 1,
   *          ...
   *          sum of X:A in all process dumps in global dump N,
   *    ]
   *
   *    memory:chrome:all_processes:source:X:B:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:B in all process dumps in global dump 1,
   *          ...
   *          sum of X:B in all process dumps in global dump N,
   *    ]
   *
   *    memory:chrome:all_processes:source:X:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:A+X:B in all process dumps in global dump 1,
   *          ...
   *          sum of X:A+X:B in all process dumps in global dump N,
   *    ]
   *
   *    memory:chrome:all_processes:source:Y:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of Y in all process dumps in global dump 1,
   *          ...
   *          sum of Y in all process dumps in global dump N
   *    ]
   *
   *    memory:chrome:all_processes:source:proportional_resident_size :
   *        Histogram aggregated over [
   *          sum of X:A+X:B+Y in all process dumps in global dump 1,
   *          ...
   *          sum of X:A+X:B+Y in all process dumps in global dump N
   *        ]
   *
   * where global dumps 1 to N are the global dumps associated with the given
   * browser.
   *
   * @param {!Map<string, !Array<!tr.model.GlobalMemoryDump>}
   *     browserNameToGlobalDumps Map from browser names to arrays of global
   *     memory dumps. The generic values will be extracted from the associated
   *     process memory dumps.
   * @param {!function(!tr.model.GlobalMemoryDump): boolean}
   *     customGlobalDumpFilter Predicate for filtering global memory dumps.
   * @param {!function(
   *     !tr.model.ProcessMemoryDump,
   *     !function(!{
   *         source: string,
   *         componentPath: (!Array<string>|undefined),
   *         property: !{name: string, unit: !tr.b.Unit, buildDescriptionPrefix:
   *                     !function(!Array<string>, string): string},
   *         value: (!tr.v.Histogram|number|undefined)
   *     }))}
   *     customProcessDumpValueExtractor Callback for extracting values from a
   *     process memory dump.
   * @param {!function(!tr.b.MultiDimensionalViewNode)}
   *     customComponentTreeModifier Callback applied to every component tree
   *     wrt each process name.
   * @param {!tr.v.HistogramSet} values List of values to which the
   *     resulting aggregated values are added.
   */
  function addMemoryDumpValues(browserNameToGlobalDumps, customGlobalDumpFilter,
      customProcessDumpValueExtractor, customComponentTreeModifier,
      values) {
    browserNameToGlobalDumps.forEach(function(globalDumps, browserName) {
      const filteredGlobalDumps = globalDumps.filter(customGlobalDumpFilter);
      const sourceToPropertyToBuilder = extractDataFromGlobalDumps(
          filteredGlobalDumps, customProcessDumpValueExtractor);
      reportDataAsValues(sourceToPropertyToBuilder, browserName,
          customComponentTreeModifier, values);
    });
  }

  /**
   * For each global memory dump in |globalDumps|, calculate per-process-name
   * sums of values extracted by |customProcessDumpValueExtractor| from the
   * associated process memory dumps.
   *
   * This function returns the following nested map structure:
   *
   *  Source name (Map key, e.g. 'reported_by_os')
   *    -> Property (Map key, e.g. PROPORTIONAL_RESIDENT_SIZE)
   *      -> processAndComponentTreeBuilder
   *
   *  where |processAndComponentTreeBuilder| is a
   *  tr.b.MultiDimensionalViewBuilder:
   *
   *  Process name (0th dimension key, e.g. 'browser_process') x
   *  Component path (1st dimension keys, e.g. ['system', 'native_heap'])
   *    -> Sum of value over the processes (number).
   *
   * See addMemoryDumpValues for more details.
   */
  function extractDataFromGlobalDumps(
      globalDumps, customProcessDumpValueExtractor) {
    const sourceToPropertyToBuilder = new Map();
    const dumpCount = globalDumps.length;
    globalDumps.forEach(function(globalDump, dumpIndex) {
      for (const processDump of Object.values(globalDump.processMemoryDumps)) {
        extractDataFromProcessDump(
            processDump, sourceToPropertyToBuilder, dumpIndex, dumpCount,
            customProcessDumpValueExtractor);
      }
    });
    return sourceToPropertyToBuilder;
  }

  function extractDataFromProcessDump(processDump, sourceToPropertyToBuilder,
      dumpIndex, dumpCount, customProcessDumpValueExtractor) {
    // Process name is typically 'browser', 'renderer', etc.
    const rawProcessName = processDump.process.name;
    const processNamePath =
        [tr.e.chrome.chrome_processes.canonicalizeProcessName(rawProcessName)];

    customProcessDumpValueExtractor(
        processDump,
        function addProcessScalar(spec) {
          if (spec.value === undefined) return;

          const component = spec.component || [];
          function createDetailsForErrorMessage() {
            return ['source=', spec.source, ', property=',
              spec.property.name || '(undefined)', ', component=',
              component.length === 0 ? '(empty)' : component.join(':'),
              ' in ', processDump.process.userFriendlyName].join('');
          }

          let value;
          if (spec.value instanceof tr.b.Scalar) {
            value = spec.value.value;
            if (spec.value.unit !== spec.property.unit) {
              throw new Error('Scalar unit for ' +
                  createDetailsForErrorMessage() + ' (' +
                  spec.value.unit.unitName +
                  ') doesn\'t match the unit of the property (' +
                  spec.property.unit.unitName + ')');
            }
          } else {
            value = spec.value;
          }

          let propertyToBuilder = sourceToPropertyToBuilder.get(spec.source);
          if (propertyToBuilder === undefined) {
            propertyToBuilder = new Map();
            sourceToPropertyToBuilder.set(spec.source, propertyToBuilder);
          }

          let builder = propertyToBuilder.get(spec.property);
          if (builder === undefined) {
            builder = new tr.b.MultiDimensionalViewBuilder(
                2 /* dimensions (process name and component path) */,
                dumpCount /* valueCount */),
            propertyToBuilder.set(spec.property, builder);
          }

          const values = new Array(dumpCount);
          values[dumpIndex] = value;

          builder.addPath(
              [processNamePath, component] /* path */, values,
              tr.b.MultiDimensionalViewBuilder.ValueKind.TOTAL /* valueKind */);
        });
  }

  function reportDataAsValues(sourceToPropertyToBuilder, browserName,
      customComponentTreeModifier, values) {
    // For each source name (e.g. 'reported_by_os')...
    sourceToPropertyToBuilder.forEach(function(propertyToBuilder, sourceName) {
      // For each property (e.g. EFFECTIVE_SIZE)...
      propertyToBuilder.forEach(function(builders, property) {
        const tree = builders.buildTopDownTreeView();
        reportComponentDataAsValues(browserName, sourceName, property,
            [] /* processPath */, [] /* componentPath */, tree, values,
            customComponentTreeModifier);
      });
    });
  }

  /**
   * For the given |browserName| (e.g. 'chrome'), |property|
   * (e.g. EFFECTIVE_SIZE), |processPath| (e.g. ['browser_process']),
   * |componentPath| (e.g. ['v8']), add
   * a tr.v.Histogram with |unit| aggregating the total
   * values of the associated |componentNode| across all timestamps
   * (corresponding to global memory dumps associated with the given browser)
   * |values| for each process (e.g. 'gpu_process', 'browser_process', etc).
   * We also report a special 'all_processes' histogram which agregates all
   * others, this has a RelatedNameMap diagnostic explaining
   * how it is built from the other histograms.
   *
   * See addMemoryDumpValues for more details.
   */
  function reportComponentDataAsValues(browserName, sourceName, property,
      processPath, componentPath, tree, values, customComponentTreeModifier,
      opt_cachedHistograms) {
    const cachedHistograms = opt_cachedHistograms || new Map();
    function recurse(processPath, componentPath, node) {
      return reportComponentDataAsValues(browserName, sourceName, property,
          processPath, componentPath, node, values,
          customComponentTreeModifier, cachedHistograms);
    }

    function buildHistogram(processPath, componentPath, node) {
      return buildNamedMemoryNumericFromNode(
          browserName,
          sourceName,
          property,
          processPath.length === 0 ? 'all_processes' : processPath[0],
          componentPath,
          node);
    }

    customComponentTreeModifier(tree);
    const histogram = buildHistogram(processPath, componentPath, tree);
    if (cachedHistograms.has(histogram.name)) {
      return cachedHistograms.get(histogram.name);
    }
    cachedHistograms.set(histogram.name, histogram);

    const processNames = new tr.v.d.RelatedNameMap();
    for (const [childProcessName, childProcessNode] of tree.children[0]) {
      processPath.push(childProcessName);
      const childProcessHistogram =
        recurse(processPath, componentPath, childProcessNode);
      processNames.set(childProcessName, childProcessHistogram.name);
      processPath.pop();
    }

    const componentNames = new tr.v.d.RelatedNameMap();
    for (const [childComponentName, childComponentNode] of tree.children[1]) {
      componentPath.push(childComponentName);
      const childComponentHistogram =
        recurse(processPath, componentPath, childComponentNode);
      componentNames.set(childComponentName, childComponentHistogram.name);
      componentPath.pop();
    }

    values.addHistogram(histogram);
    if (tree.children[0].size > 0) {
      histogram.diagnostics.set('processes', processNames);
    }
    if (tree.children[1].size > 0) {
      histogram.diagnostics.set('components', componentNames);
    }

    return histogram;
  }

  /**
   * Gets the name for a histogram.
   * The histograms have the following naming scheme:
   * memory:chrome:browser_process:reported_by_chrome:v8:heap:effective_size_avg
   *        ^browser ^process      ^source            ^component  ^property
   */
  function getNumericName(
      browserName, sourceName, propertyName, processName, componentPath) {
    // Construct the name of the memory value.
    const nameParts = ['memory', browserName, processName, sourceName].concat(
        componentPath);
    if (propertyName !== undefined) nameParts.push(propertyName);
    return nameParts.join(':');
  }

  /**
   * Gets the description of a histogram.
   */
  function getNumericDescription(
      property, browserName, processName, componentPath) {
    return [
      property.buildDescriptionPrefix(componentPath, processName),
      'in',
      convertBrowserNameToUserFriendlyName(browserName)
    ].join(' ');
  }

  /**
   * Create a memory tr.v.Histogram with |unit| and add all total values in
   * |node| to it. Names and describes the histogram according to the
   * |browserName|, |sourceName|, |property|, |processName| and
   * |componentPath|.
   */
  function buildNamedMemoryNumericFromNode(
      browserName, sourceName, property, processName, componentPath, node) {
    const name = getNumericName(
        browserName, sourceName, property.name, processName, componentPath);
    const description = getNumericDescription(
        property, browserName, processName, componentPath);

    // Build the underlying numeric for the memory value.
    const numeric = buildMemoryNumericFromNode(name, node, property.unit);
    numeric.description = description;
    return numeric;
  }

  function buildSampleDiagnostics(value, node) {
    if (node.children.length < 2) return undefined;
    const diagnostics = new Map();
    const i = node.values.indexOf(value);

    const processBreakdown = new tr.v.d.Breakdown();
    processBreakdown.colorScheme =
      tr.e.chrome.chrome_processes.PROCESS_COLOR_SCHEME_NAME;
    for (const [name, subNode] of node.children[0]) {
      processBreakdown.set(name, subNode.values[i].total);
    }
    if (processBreakdown.size > 0) {
      diagnostics.set('processes', processBreakdown);
    }

    const componentBreakdown = new tr.v.d.Breakdown();
    for (const [name, subNode] of node.children[1]) {
      componentBreakdown.set(name, subNode.values[i].total);
    }
    if (componentBreakdown.size > 0) {
      diagnostics.set('components', componentBreakdown);
    }

    if (diagnostics.size === 0) return undefined;
    return diagnostics;
  }

  /**
   * Create a memory tr.v.Histogram with |unit| and add all total values in
   * |node| to it.
   */
  function buildMemoryNumericFromNode(name, node, unit) {
    const histogram = new tr.v.Histogram(
        name, unit, BOUNDARIES_FOR_UNIT_MAP.get(unit));

    node.values.forEach(v => histogram.addSample(
        v.total, buildSampleDiagnostics(v, node)));

    return histogram;
  }

  tr.metrics.MetricRegistry.register(memoryMetric, {
    supportsRangeOfInterest: true
  });

  return {
    memoryMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  // If the power series doesn't cover the entire Chrome trace, then
  // the results from Chrome tracing metrics will likely be inaccurate,
  // so we don't report them. However, we allow the power series bounds
  // to be up to 1 ms inside the Chrome trace and still count as
  // covering the Chrome trace. This is to allow for small deviations
  // due to clock sync latency and the finite sampling rate of the
  // BattOr.
  const CHROME_POWER_GRACE_PERIOD_MS = 1;

  /**
   * Creates an empty histogram to hold data for a given time interval.
   *
   * @returns {Object} An object of the form:
   *
   *   {
   *     perSecond {boolean}: Whether the data for this time interval is given
   *       as per second, If not, it's given as an integral over the
   *       whole interval.
   *     energy {tr.v.Histogram}: Histogram giving energy use (i.e. energy in J
   *       if perSecond = False, power in W if perSecond = True)
   *   }
   */
  function createEmptyHistogram_(interval, histograms) {
    if (interval.perSecond) {
      return {
        perSecond: true,
        energy: histograms.createHistogram(`${interval.name}:power`,
            tr.b.Unit.byName.powerInWatts_smallerIsBetter, [], {
              description:
                `Energy consumption rate for ${interval.description}`,
              summaryOptions: {
                avg: true,
                count: false,
                max: true,
                min: true,
                std: false,
                sum: false,
              },
            }),
      };
    }
    return {
      perSecond: false,
      energy: histograms.createHistogram(`${interval.name}:energy`,
          tr.b.Unit.byName.energyInJoules_smallerIsBetter, [], {
            description: `Energy consumed in ${interval.description}`,
            summaryOptions: {
              avg: false,
              count: false,
              max: true,
              min: true,
              std: false,
              sum: true,
            },
          }),
    };
  }

  function createHistograms_(data, interval, histograms) {
    if (data.histograms[interval.name] === undefined) {
      data.histograms[interval.name] = createEmptyHistogram_(interval,
          histograms);
    }
    if (data.histograms[interval.name].perSecond) {
      for (const sample of data.model.device.powerSeries.getSamplesWithinRange(
          interval.bounds.min, interval.bounds.max)) {
        data.histograms[interval.name].energy.addSample(sample.powerInW);
      }
    } else {
      const energyInJ = data.model.device.powerSeries.getEnergyConsumedInJ(
          interval.bounds.min, interval.bounds.max);
      data.histograms[interval.name].energy.addSample(energyInJ);
    }
  }

  /**
   * Returns the intervals of time between navigation event and time to
   * interactive.
   */
  function getNavigationTTIIntervals_(model) {
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    const intervals = [];
    for (const rendererHelper of Object.values(chromeHelper.rendererHelpers)) {
      const samples = tr.metrics.sh.collectLoadingMetricsForRenderer(
          rendererHelper).interactiveSamples;
      for (const sample of samples) {
        const info = tr.b.getOnlyElement(
            sample.diagnostics.get('Navigation infos'));
        intervals.push(tr.b.math.Range.fromExplicitRange(
            info.navigationStartTime, info.eventTimestamp));
      }
    }
    return intervals.sort((x, y) => x.min - y.min);
  }

  /**
   * Generates the set of time intervals that metrics should be run over.
   * Time intervals include each UE (for UE-based metrics), the whole
   * story (for the full-story metric), etc. Each time interval is given
   * in the following form:
   *
   *   {
   *     bounds {tr.b.math.Range}: Boundaries of the time interval.
   *     name {string}: Name of this interval. Used to generate the
   *       metric names.
   *     description {string}: Human readable description of the interval.
   *       Used to generate the metric descriptions.
   *     perSecond {boolean}: Whether metrics over this interval should be
   *       reported as per-second values (e.g. power). If not, integrated values
   *       over the whole interval (e.g. energy) are reported.
   *   }
   *
   */
  function* computeTimeIntervals_(model) {
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    const powerSeries = model.device.powerSeries;
    if (powerSeries === undefined ||
        powerSeries.samples.length === 0) {
      return;
    }
    // Output the full story power metrics, which exists regardless of
    // the presence of a Chrome trace.
    yield {
      bounds: model.bounds,
      name: 'story',
      description: 'user story',
      perSecond: true
    };

    const chromeBounds = computeChromeBounds_(model);
    if (chromeBounds.isEmpty) return;

    const powerSeriesBoundsWithGracePeriod = tr.b.math.Range.fromExplicitRange(
        powerSeries.bounds.min - CHROME_POWER_GRACE_PERIOD_MS,
        powerSeries.bounds.max + CHROME_POWER_GRACE_PERIOD_MS);
    if (!powerSeriesBoundsWithGracePeriod.containsRangeExclusive(
        chromeBounds)) {
      return;
    }

    // If Chrome bounds are good and the power trace covers the Chrome bounds,
    // then output the Chrome specific metrics (loading and RAIL stages). Note
    // that only the part of the time interval that overlaps the Chrome bounds
    // should be included.
    for (const interval of getRailStageIntervals_(model)) {
      yield {
        bounds: interval.bounds.findIntersection(chromeBounds),
        name: interval.name,
        description: interval.description,
        perSecond: interval.perSecond
      };
    }

    for (const interval of getLoadingIntervals_(model, chromeBounds)) {
      yield {
        bounds: interval.bounds.findIntersection(chromeBounds),
        name: interval.name,
        description: interval.description,
        perSecond: interval.perSecond
      };
    }
  }

  /**
   * Gets a list of time intervals for the RAIL stages. Each RAIL stage
   * generates a time interval with the name equal to the name of the RAIL
   * stage except made into lower case and with spaces replaced bu underscores
   * e.g. "Scroll Animation" --> "scroll_animation". Each time interval is given
   * in the following form:
   *
   *   {
   *     bounds {tr.b.math.Range}: Boundaries of the time interval.
   *     name {string}: Name of this interval. Used to generate the
   *       metric names.
   *     description {string}: Human readable description of the interval.
   *       Used to generate the metric descriptions.
   *     perSecond {boolean}: Whether metrics over this interval should be
   *       reported as per-second values (e.g. power). If not, integrated values
   *       over the whole interval (e.g. energy) are reported.
   *   }
   *
   */
  function* getRailStageIntervals_(model) {
    for (const exp of model.userModel.expectations) {
      const histogramName = exp.title.toLowerCase().replace(' ', '_');
      const energyHist = undefined;
      if (histogramName.includes('response')) {
        yield {
          bounds: tr.b.math.Range.fromExplicitRange(exp.start, exp.end),
          name: histogramName,
          description: 'RAIL stage ' + histogramName,
          perSecond: false
        };
      } else if (histogramName.includes('animation') ||
          histogramName.includes('idle')) {
        yield {
          bounds: tr.b.math.Range.fromExplicitRange(exp.start, exp.end),
          name: histogramName,
          description: 'RAIL stage ' + histogramName,
          perSecond: true
        };
      }
    }
  }

  /**
   * Gets a list of time intervals for the RAIL stages. Each RAIL stage
   * generates a time interval with the name equal to the name of the RAIL
   * stage except made into lower case and with spaces replaced bu underscores
   * e.g. "Scroll Animation" --> "scroll_animation". Each time interval is given
   * in the following form:
   *
   *   {
   *     bounds {tr.b.math.Range}: Boundaries of the time interval.
   *     name {string}: Name of this interval. Used to generate the
   *       metric names.
   *     description {string}: Human readable description of the interval.
   *       Used to generate the metric descriptions.
   *     perSecond {boolean}: Whether metrics over this interval should be
   *       reported as per-second values (e.g. power). If not, integrated values
   *       over the whole interval (e.g. energy) are reported.
   *   }
   *
   */
  function* getLoadingIntervals_(model, chromeBounds) {
    const ttiIntervals = getNavigationTTIIntervals_(model);
    for (const ttiInterval of ttiIntervals) {
      yield {
        bounds: ttiInterval,
        name: 'load',
        description: 'page loads',
        perSecond: false
      };
    }
  }

  /**
   * @returns {tr.b.math.Range} The boundaries of the Chrome portion of the
   * trace.
   */
  function computeChromeBounds_(model) {
    const chromeBounds = new tr.b.math.Range();
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    if (chromeHelper === undefined) return chromeBounds;
    for (const helper of chromeHelper.browserHelpers) {
      if (helper.mainThread) {
        chromeBounds.addRange(helper.mainThread.bounds);
      }
    }
    for (const pid in chromeHelper.rendererHelpers) {
      if (chromeHelper.rendererHelpers[pid].mainThread) {
        chromeBounds.addRange(
            chromeHelper.rendererHelpers[pid].mainThread.bounds);
      }
    }
    return chromeBounds;
  }

  /**
   * Adds the power histograms to the histogram set.
   *
   * Each power histogram is based on a specific time interval, and is named as
   * follows:
   *
   * - [time_interval_name]:power, which contains a sample for each power
   *    sample data point during any time interval with the given type. Each
   *    sample represents the power draw during the period covered by that
   *    power sample.
   *
   * - [time_interval_name]:energy, which contains a sample for each time
   *    interval with the given type present in the trace. Each sample
   *    represents the total energy used over that time interval.
   *
   * The time intervals are as follows:
   *
   * - "story": The time interval covering the entire user story. There is
   *    always exactly one "story" interval.
   *
   * - "load" : The time interval covered by a page load, from navigationStart
   *    to timeToInteractive. There is one "load" interval for each page load
   *    in the trace.
   *
   * - "[user_expectation_type]" : Each Response, Animation, or Idle
   *    UE in the trace generates a time interval whose name is that of the UE,
   *    converted to lower case and with underscores in place of spaces.
   *    For instance, if there are three "Scroll Response" UEs in the trace,
   *    then there will be three "scroll_response" time intervals, so the
   *    histogram scroll_response:energy will contain three samples.
   *
   * Note that each time interval type only generates ONE of the "power" or
   * "energy" histograms. Power histograms are generated for time intervals
   * that represent events that occur over a period of time. This includes
   * the following intervals
   *
   * - "story"
   * - Any Animation or Idle UE
   *
   * For instance, "the energy it takes to play a video"
   * does not have meaning because it depends on how long the video
   * is; thus a more meaningful metric is power. In contrast, energy histograms
   * are generated for time intervals that represent particular tasks
   * which must be completed. This includes the following intervals:
   *
   * - "load"
   * - Any Response UE
   *
   * For instance, if a change causes a response to take longer to process, then
   * we want to count that as taking the energy over a longer period of time.
   */
  function powerMetric(histograms, model) {
    const data = {
      model,
      histograms: {}
    };
    for (const interval of computeTimeIntervals_(model)) {
      createHistograms_(data, interval, histograms);
    }
  }

  tr.metrics.MetricRegistry.register(powerMetric);

  return {
    powerMetric
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  // In the case of Response, Load, and DiscreteAnimation UEs, Responsiveness is
  // derived from the time between when the user thinks they begin an interation
  // (expectedStart) and the time when the screen first changes to reflect the
  // interaction (actualEnd).  There may be a delay between expectedStart and
  // when chrome first starts processing the interaction (actualStart) if the
  // main thread is busy.  The user doesn't know when actualStart is, they only
  // know when expectedStart is. User responsiveness, by definition, considers
  // only what the user experiences, so "duration" is defined as actualEnd -
  // expectedStart.

  function computeAnimationThroughput(animationExpectation) {
    if (animationExpectation.frameEvents === undefined ||
        animationExpectation.frameEvents.length === 0) {
      throw new Error('Animation missing frameEvents ' +
                      animationExpectation.stableId);
    }

    const durationInS = tr.b.convertUnit(animationExpectation.duration,
        tr.b.UnitPrefixScale.METRIC.MILLI,
        tr.b.UnitPrefixScale.METRIC.NONE);
    return animationExpectation.frameEvents.length / durationInS;
  }

  function computeAnimationframeTimeDiscrepancy(animationExpectation) {
    if (animationExpectation.frameEvents === undefined ||
        animationExpectation.frameEvents.length === 0) {
      throw new Error('Animation missing frameEvents ' +
                      animationExpectation.stableId);
    }

    let frameTimestamps = animationExpectation.frameEvents;
    frameTimestamps = frameTimestamps.toArray().map(function(event) {
      return event.start;
    });

    const absolute = true;
    return tr.b.math.Statistics.timestampsDiscrepancy(
        frameTimestamps, absolute);
  }

  /**
   * @param {!tr.v.HistogramSet} histograms
   * @param {!tr.model.Model} model
   * @param {!Object=} opt_options
   */
  function responsivenessMetric(histograms, model, opt_options) {
    const responseNumeric = new tr.v.Histogram('response latency',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        tr.v.HistogramBinBoundaries.createLinear(100, 1e3, 50));
    const throughputNumeric = new tr.v.Histogram('animation throughput',
        tr.b.Unit.byName.unitlessNumber_biggerIsBetter,
        tr.v.HistogramBinBoundaries.createLinear(10, 60, 10));
    const frameTimeDiscrepancyNumeric = new tr.v.Histogram(
        'animation frameTimeDiscrepancy',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        tr.v.HistogramBinBoundaries.createLinear(0, 1e3, 50).
          addExponentialBins(1e4, 10));
    const latencyNumeric = new tr.v.Histogram('animation latency',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        tr.v.HistogramBinBoundaries.createLinear(0, 300, 60));

    model.userModel.expectations.forEach(function(ue) {
      if (opt_options && opt_options.rangeOfInterest &&
          !opt_options.rangeOfInterest.intersectsExplicitRangeInclusive(
              ue.start, ue.end)) {
        return;
      }

      const sampleDiagnosticMap = tr.v.d.DiagnosticMap.fromObject(
          {relatedEvents: new tr.v.d.RelatedEventSet([ue])});

      // Responsiveness is not defined for Idle or Startup expectations.
      if (ue instanceof tr.model.um.IdleExpectation) {
        return;
      } else if (ue instanceof tr.model.um.StartupExpectation) {
        return;
      } else if (ue instanceof tr.model.um.LoadExpectation) {
        // This is already covered by loadingMetric.
      } else if (ue instanceof tr.model.um.ResponseExpectation) {
        responseNumeric.addSample(ue.duration, sampleDiagnosticMap);
      } else if (ue instanceof tr.model.um.AnimationExpectation) {
        if (ue.frameEvents === undefined || ue.frameEvents.length === 0) {
          // Ignore animation stages that do not have associated frames:
          // https://github.com/catapult-project/catapult/issues/2446
          return;
        }
        const throughput = computeAnimationThroughput(ue);
        if (throughput === undefined) {
          throw new Error('Missing throughput for ' +
                          ue.stableId);
        }

        throughputNumeric.addSample(throughput, sampleDiagnosticMap);

        const frameTimeDiscrepancy = computeAnimationframeTimeDiscrepancy(ue);
        if (frameTimeDiscrepancy === undefined) {
          throw new Error('Missing frameTimeDiscrepancy for ' +
                          ue.stableId);
        }

        frameTimeDiscrepancyNumeric.addSample(
            frameTimeDiscrepancy, sampleDiagnosticMap);

        ue.associatedEvents.forEach(function(event) {
          if (!(event instanceof tr.e.cc.InputLatencyAsyncSlice)) {
            return;
          }

          latencyNumeric.addSample(event.duration, sampleDiagnosticMap);
        });
      } else {
        throw new Error('Unrecognized stage for ' + ue.stableId);
      }
    });

    [
      responseNumeric, throughputNumeric, frameTimeDiscrepancyNumeric,
      latencyNumeric
    ].forEach(function(numeric) {
      numeric.customizeSummaryOptions({
        avg: true,
        max: true,
        min: true,
        std: true
      });
    });

    histograms.addHistogram(responseNumeric);
    histograms.addHistogram(throughputNumeric);
    histograms.addHistogram(frameTimeDiscrepancyNumeric);
    histograms.addHistogram(latencyNumeric);
  }

  tr.metrics.MetricRegistry.register(responsivenessMetric, {
    supportsRangeOfInterest: true,
    requiredCategories: ['rail'],
  });

  return {
    responsivenessMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.sh', function() {
  function webviewStartupMetric(histograms, model) {
    const startupWallHist = new tr.v.Histogram('webview_startup_wall_time',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter);
    startupWallHist.description = 'WebView startup wall time';
    const startupCPUHist = new tr.v.Histogram('webview_startup_cpu_time',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter);
    startupCPUHist.description = 'WebView startup CPU time';
    const loadWallHist = new tr.v.Histogram('webview_url_load_wall_time',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter);
    loadWallHist.description = 'WebView blank URL load wall time';
    const loadCPUHist = new tr.v.Histogram('webview_url_load_cpu_time',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter);
    loadCPUHist.description = 'WebView blank URL load CPU time';

    // TODO(alexandermont): Only iterate over the processes and threads that
    // could contain these events.
    for (const slice of model.getDescendantEvents()) {
      if (!(slice instanceof tr.model.ThreadSlice)) continue;

      // WebViewStartupInterval is the title of the section of code that is
      // entered (via android.os.Trace.beginSection) when WebView is started
      // up. This value is defined in TelemetryActivity.java.
      if (slice.title === 'WebViewStartupInterval') {
        startupWallHist.addSample(slice.duration);
        startupCPUHist.addSample(slice.cpuDuration);
      }

      // WebViewBlankUrlLoadInterval is the title of the section of code
      // that is entered (via android.os.Trace.beginSection) when WebView
      // is started up. This value is defined in TelemetryActivity.java.
      if (slice.title === 'WebViewBlankUrlLoadInterval') {
        loadWallHist.addSample(slice.duration);
        loadCPUHist.addSample(slice.cpuDuration);
      }
    }

    histograms.addHistogram(startupWallHist);
    histograms.addHistogram(startupCPUHist);
    histograms.addHistogram(loadWallHist);
    histograms.addHistogram(loadCPUHist);
  }

  tr.metrics.MetricRegistry.register(webviewStartupMetric);

  return {
    webviewStartupMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.tabs', function() {
  function tabsMetric(histograms, model, opt_options) {
    const thread = model.getOrCreateHelper(tr.model.helpers.ChromeModelHelper).
        browserHelper.mainThread;
    const tabSwitchLatencies = [];
    if (thread) {
      for (const slice of thread.asyncSliceGroup.slices) {
        if (slice.title === 'TabSwitching::Latency') {
          tabSwitchLatencies.push(slice.duration);
        }
      }
    }
    histograms.createHistogram('tab_switching_latency',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        tabSwitchLatencies, { description: 'Tab switching time in ms',
          summaryOptions: {sum: false}});
  }

  tr.metrics.MetricRegistry.register(tabsMetric, {
    supportsRangeOfInterest: false,
  });

  return {
    tabsMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  const MEMORY_INFRA_TRACING_CATEGORY = 'disabled-by-default-memory-infra';

  const TIME_BOUNDARIES = tr.v.HistogramBinBoundaries.createExponential(
      1e-3, 1e5, 30);

  const BYTE_BOUNDARIES = tr.v.HistogramBinBoundaries.createExponential(
      1, 1e9, 30);

  const COUNT_BOUNDARIES = tr.v.HistogramBinBoundaries.createExponential(
      1, 1e5, 30);

  // By default, we store a single value, so we only need one of the
  // statistics to keep track. We choose the average for that.
  const SUMMARY_OPTIONS = tr.v.Histogram.AVERAGE_ONLY_SUMMARY_OPTIONS;

  // Adds histograms specific to memory-infra dumps.
  function addMemoryInfraHistograms(
      histograms, model, categoryNamesToTotalEventSizes) {
    const memoryDumpCount = model.globalMemoryDumps.length;
    if (memoryDumpCount === 0) return;

    let totalOverhead = 0;
    let nonMemoryInfraThreadOverhead = 0;
    const overheadByProvider = {};
    for (const process of Object.values(model.processes)) {
      for (const thread of Object.values(process.threads)) {
        for (const slice of Object.values(thread.sliceGroup.slices)) {
          if (slice.category !== MEMORY_INFRA_TRACING_CATEGORY) continue;

          totalOverhead += slice.duration;
          if (thread.name !== 'MemoryInfra') {
            nonMemoryInfraThreadOverhead += slice.duration;
          }
          if (slice.args && slice.args['dump_provider.name']) {
            const providerName = slice.args['dump_provider.name'];
            let durationAndCount = overheadByProvider[providerName];
            if (durationAndCount === undefined) {
              overheadByProvider[providerName] = durationAndCount =
                  {duration: 0, count: 0};
            }
            durationAndCount.duration += slice.duration;
            durationAndCount.count++;
          }
        }
      }
    }

    histograms.createHistogram('memory_dump_cpu_overhead',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        totalOverhead / memoryDumpCount, {
          binBoundaries: TIME_BOUNDARIES,
          description:
            'Average CPU overhead on all threads per memory-infra dump',
          summaryOptions: SUMMARY_OPTIONS,
        });

    histograms.createHistogram('nonmemory_thread_memory_dump_cpu_overhead',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        nonMemoryInfraThreadOverhead / memoryDumpCount, {
          binBoundaries: TIME_BOUNDARIES,
          description: 'Average CPU overhead on non-memory-infra threads ' +
            'per memory-infra dump',
          summaryOptions: SUMMARY_OPTIONS,
        });

    for (const [providerName, overhead] of Object.entries(overheadByProvider)) {
      histograms.createHistogram(`${providerName}_memory_dump_cpu_overhead`,
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
          overhead.duration / overhead.count, {
            binBoundaries: TIME_BOUNDARIES,
            description:
              `Average CPU overhead of ${providerName} per OnMemoryDump call`,
            summaryOptions: SUMMARY_OPTIONS,
          });
    }

    const memoryInfraEventsSize =
        categoryNamesToTotalEventSizes.get(MEMORY_INFRA_TRACING_CATEGORY);
    const memoryInfraTraceBytesValue = new tr.v.Histogram(
        'total_memory_dump_size',
        tr.b.Unit.byName.sizeInBytes_smallerIsBetter, BYTE_BOUNDARIES);
    memoryInfraTraceBytesValue.description =
        'Total trace size of memory-infra dumps in bytes';
    memoryInfraTraceBytesValue.customizeSummaryOptions(SUMMARY_OPTIONS);
    memoryInfraTraceBytesValue.addSample(memoryInfraEventsSize);
    histograms.addHistogram(memoryInfraTraceBytesValue);

    const traceBytesPerDumpValue = new tr.v.Histogram(
        'memory_dump_size',
        tr.b.Unit.byName.sizeInBytes_smallerIsBetter, BYTE_BOUNDARIES);
    traceBytesPerDumpValue.description =
        'Average trace size of memory-infra dumps in bytes';
    traceBytesPerDumpValue.customizeSummaryOptions(SUMMARY_OPTIONS);
    traceBytesPerDumpValue.addSample(memoryInfraEventsSize / memoryDumpCount);
    histograms.addHistogram(traceBytesPerDumpValue);
  }

  // TODO(charliea): The metrics in this file should be renamed to have names
  // more consistent with those in the rest of the codebase
  // (e.g. 'trace_size_growth_per_second', not 'Max event size in bytes per
  // second').
  // https://github.com/catapult-project/catapult/issues/3233
  function tracingMetric(histograms, model) {
    histograms.createHistogram('trace_import_duration',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        model.stats.traceImportDurationMs, {
          binBoundaries: TIME_BOUNDARIES,
          description:
            'Duration that trace viewer required to import the trace',
          summaryOptions: SUMMARY_OPTIONS,
        });

    if (!model.stats.hasEventSizesinBytes) return;

    const eventStats = model.stats.allTraceEventStatsInTimeIntervals;
    eventStats.sort((a, b) => a.timeInterval - b.timeInterval);

    const totalTraceBytes = eventStats.reduce(
        (a, b) => a + b.totalEventSizeinBytes, 0);

    // We maintain a sliding window of records [start ... end-1] where end
    // increments each time through the loop, and we move start just far enough
    // to keep the window less than 1 second wide. Note that we need to compute
    // the number of time intervals (i.e. units that timeInterval is given in)
    // in one second to know how wide the sliding window should be.
    let maxEventCountPerSec = 0;
    let maxEventBytesPerSec = 0;
    const INTERVALS_PER_SEC = Math.floor(
        1000 / model.stats.TIME_INTERVAL_SIZE_IN_MS);

    let runningEventNumPerSec = 0;
    let runningEventBytesPerSec = 0;
    let start = 0;
    let end = 0;

    while (end < eventStats.length) {
      // Slide the end marker forward. Moving the end marker from N
      // to N+1 adds eventStats[N] to the sliding window.
      runningEventNumPerSec += eventStats[end].numEvents;
      runningEventBytesPerSec += eventStats[end].totalEventSizeinBytes;
      end++;

      // Slide the start marker forward so that the time interval covered
      // by the window is less than 1 second wide.
      while ((eventStats[end - 1].timeInterval -
              eventStats[start].timeInterval) >= INTERVALS_PER_SEC) {
        runningEventNumPerSec -= eventStats[start].numEvents;
        runningEventBytesPerSec -= eventStats[start].totalEventSizeinBytes;
        start++;
      }

      // Update maximum values.
      maxEventCountPerSec = Math.max(maxEventCountPerSec,
          runningEventNumPerSec);
      maxEventBytesPerSec = Math.max(maxEventBytesPerSec,
          runningEventBytesPerSec);
    }

    const stats = model.stats.allTraceEventStats;
    const categoryNamesToTotalEventSizes = (
        stats.reduce((map, stat) => (
            map.set(stat.category,
                   ((map.get(stat.category) || 0) +
                    stat.totalEventSizeinBytes))), new Map()));

    // Determine the category with the highest total event size.
    const maxCatNameAndBytes = Array.from(
        categoryNamesToTotalEventSizes.entries()).reduce(
        (a, b) => ((b[1] >= a[1]) ? b : a));
    const maxEventBytesPerCategory = maxCatNameAndBytes[1];
    const categoryWithMaxEventBytes = maxCatNameAndBytes[0];

    const maxEventCountPerSecValue = new tr.v.Histogram(
        'peak_event_rate', tr.b.Unit.byName.count_smallerIsBetter,
        COUNT_BOUNDARIES);
    maxEventCountPerSecValue.description = 'Max number of events per second';
    maxEventCountPerSecValue.customizeSummaryOptions(SUMMARY_OPTIONS);
    maxEventCountPerSecValue.addSample(maxEventCountPerSec);

    const maxEventBytesPerSecValue = new tr.v.Histogram(
        'peak_event_size_rate', tr.b.Unit.byName.sizeInBytes_smallerIsBetter,
        BYTE_BOUNDARIES);
    maxEventBytesPerSecValue.description = 'Max event size in bytes per second';
    maxEventBytesPerSecValue.customizeSummaryOptions(SUMMARY_OPTIONS);
    maxEventBytesPerSecValue.addSample(maxEventBytesPerSec);

    const totalTraceBytesValue = new tr.v.Histogram('trace_size',
        tr.b.Unit.byName.sizeInBytes_smallerIsBetter, BYTE_BOUNDARIES);
    totalTraceBytesValue.customizeSummaryOptions(SUMMARY_OPTIONS);
    totalTraceBytesValue.addSample(totalTraceBytes);

    const biggestCategory = {
      name: categoryWithMaxEventBytes,
      size_in_bytes: maxEventBytesPerCategory
    };

    totalTraceBytesValue.diagnostics.set(
        'category_with_max_event_size',
        new tr.v.d.GenericSet([biggestCategory]));
    histograms.addHistogram(totalTraceBytesValue);

    maxEventCountPerSecValue.diagnostics.set(
        'category_with_max_event_size',
        new tr.v.d.GenericSet([biggestCategory]));
    histograms.addHistogram(maxEventCountPerSecValue);

    maxEventBytesPerSecValue.diagnostics.set(
        'category_with_max_event_size',
        new tr.v.d.GenericSet([biggestCategory]));
    histograms.addHistogram(maxEventBytesPerSecValue);

    addMemoryInfraHistograms(histograms, model, categoryNamesToTotalEventSizes);
  }

  tr.metrics.MetricRegistry.register(tracingMetric);

  return {
    tracingMetric,
    // For testing only:
    MEMORY_INFRA_TRACING_CATEGORY,
  };
});


'use strict';

tr.exportTo('tr.metrics.v8', function() {
  const CUSTOM_BOUNDARIES = tr.v.HistogramBinBoundaries.createLinear(
      4, 200, 100);

  function computeExecuteMetrics(histograms, model) {
    const cpuTotalExecution = new tr.v.Histogram('v8_execution_cpu_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuTotalExecution.description = 'cpu total time spent in script execution';
    const wallTotalExecution = new tr.v.Histogram('v8_execution_wall_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallTotalExecution.description =
      'wall total time spent in script execution';
    const cpuSelfExecution = new tr.v.Histogram('v8_execution_cpu_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuSelfExecution.description = 'cpu self time spent in script execution';
    const wallSelfExecution = new tr.v.Histogram('v8_execution_wall_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallSelfExecution.description = 'wall self time spent in script execution';

    for (const e of model.findTopmostSlicesNamed('V8.Execute')) {
      cpuTotalExecution.addSample(e.cpuDuration);
      wallTotalExecution.addSample(e.duration);
      cpuSelfExecution.addSample(e.cpuSelfTime);
      wallSelfExecution.addSample(e.selfTime);
    }

    histograms.addHistogram(cpuTotalExecution);
    histograms.addHistogram(wallTotalExecution);
    histograms.addHistogram(cpuSelfExecution);
    histograms.addHistogram(wallSelfExecution);
  }

  function computeParseLazyMetrics(histograms, model) {
    const cpuSelfParseLazy = new tr.v.Histogram('v8_parse_lazy_cpu_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuSelfParseLazy.description =
      'cpu self time spent performing lazy parsing';
    const wallSelfParseLazy = new tr.v.Histogram('v8_parse_lazy_wall_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallSelfParseLazy.description =
      'wall self time spent performing lazy parsing';

    for (const e of model.findTopmostSlicesNamed('V8.ParseLazyMicroSeconds')) {
      cpuSelfParseLazy.addSample(e.cpuSelfTime);
      wallSelfParseLazy.addSample(e.selfTime);
    }
    for (const e of model.findTopmostSlicesNamed('V8.ParseLazy')) {
      cpuSelfParseLazy.addSample(e.cpuSelfTime);
      wallSelfParseLazy.addSample(e.selfTime);
    }

    histograms.addHistogram(cpuSelfParseLazy);
    histograms.addHistogram(wallSelfParseLazy);
  }

  function computeCompileFullCodeMetrics(histograms, model) {
    const cpuSelfCompileFullCode = new tr.v.Histogram(
        'v8_compile_full_code_cpu_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuSelfCompileFullCode.description =
      'cpu self time spent performing compiling full code';
    const wallSelfCompileFullCode = new tr.v.Histogram(
        'v8_compile_full_code_wall_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallSelfCompileFullCode.description =
      'wall self time spent performing compiling full code';

    for (const e of model.findTopmostSlicesNamed('V8.CompileFullCode')) {
      cpuSelfCompileFullCode.addSample(e.cpuSelfTime);
      wallSelfCompileFullCode.addSample(e.selfTime);
    }

    histograms.addHistogram(cpuSelfCompileFullCode);
    histograms.addHistogram(wallSelfCompileFullCode);
  }

  function computeCompileIgnitionMetrics(histograms, model) {
    const cpuSelfCompileIgnition = new tr.v.Histogram(
        'v8_compile_ignition_cpu_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuSelfCompileIgnition.description =
      'cpu self time spent in compile ignition';
    const wallSelfCompileIgnition = new tr.v.Histogram(
        'v8_compile_ignition_wall_self',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallSelfCompileIgnition.description =
      'wall self time spent in compile ignition';

    for (const e of model.findTopmostSlicesNamed('V8.CompileIgnition')) {
      cpuSelfCompileIgnition.addSample(e.cpuSelfTime);
      wallSelfCompileIgnition.addSample(e.selfTime);
    }

    histograms.addHistogram(cpuSelfCompileIgnition);
    histograms.addHistogram(wallSelfCompileIgnition);
  }

  function computeRecompileMetrics(histograms, model) {
    const cpuTotalRecompileSynchronous = new tr.v.Histogram(
        'v8_recompile_synchronous_cpu_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuTotalRecompileSynchronous.description =
      'cpu total time spent in synchronous recompilation';
    const wallTotalRecompileSynchronous = new tr.v.Histogram(
        'v8_recompile_synchronous_wall_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallTotalRecompileSynchronous.description =
      'wall total time spent in synchronous recompilation';
    const cpuTotalRecompileConcurrent = new tr.v.Histogram(
        'v8_recompile_concurrent_cpu_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuTotalRecompileConcurrent.description =
      'cpu total time spent in concurrent recompilation';
    const wallTotalRecompileConcurrent = new tr.v.Histogram(
        'v8_recompile_concurrent_wall_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallTotalRecompileConcurrent.description =
      'wall total time spent in concurrent recompilation';
    // TODO(eakuefner): Stop computing overall histograms once dash v2 is ready.
    // https://github.com/catapult-project/catapult/issues/2180
    const cpuTotalRecompileOverall = new tr.v.Histogram(
        'v8_recompile_overall_cpu_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuTotalRecompileOverall.description =
      'cpu total time spent in synchronous or concurrent recompilation';
    const wallTotalRecompileOverall = new tr.v.Histogram(
        'v8_recompile_overall_wall_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallTotalRecompileOverall.description =
      'wall total time spent in synchronous or concurrent recompilation';

    for (const e of model.findTopmostSlicesNamed('V8.RecompileSynchronous')) {
      cpuTotalRecompileSynchronous.addSample(e.cpuDuration);
      wallTotalRecompileSynchronous.addSample(e.duration);
      cpuTotalRecompileOverall.addSample(e.cpuDuration);
      wallTotalRecompileOverall.addSample(e.duration);
    }

    histograms.addHistogram(cpuTotalRecompileSynchronous);
    histograms.addHistogram(wallTotalRecompileSynchronous);

    for (const e of model.findTopmostSlicesNamed('V8.RecompileConcurrent')) {
      cpuTotalRecompileConcurrent.addSample(e.cpuDuration);
      wallTotalRecompileConcurrent.addSample(e.duration);
      cpuTotalRecompileOverall.addSample(e.cpuDuration);
      wallTotalRecompileOverall.addSample(e.duration);
    }

    histograms.addHistogram(cpuTotalRecompileConcurrent);
    histograms.addHistogram(wallTotalRecompileConcurrent);
    histograms.addHistogram(cpuTotalRecompileOverall);
    histograms.addHistogram(wallTotalRecompileOverall);
  }

  function computeOptimizeCodeMetrics(histograms, model) {
    const cpuTotalOptimizeCode = new tr.v.Histogram(
        'v8_optimize_code_cpu_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuTotalOptimizeCode.description =
      'cpu total time spent in code optimization';
    const wallTotalOptimizeCode = new tr.v.Histogram(
        'v8_optimize_code_wall_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallTotalOptimizeCode.description =
      'wall total time spent in code optimization';

    for (const e of model.findTopmostSlicesNamed('V8.OptimizeCode')) {
      cpuTotalOptimizeCode.addSample(e.cpuDuration);
      wallTotalOptimizeCode.addSample(e.duration);
    }

    histograms.addHistogram(cpuTotalOptimizeCode);
    histograms.addHistogram(wallTotalOptimizeCode);
  }

  function computeDeoptimizeCodeMetrics(histograms, model) {
    const cpuTotalDeoptimizeCode = new tr.v.Histogram(
        'v8_deoptimize_code_cpu_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    cpuTotalDeoptimizeCode.description =
      'cpu total time spent in code deoptimization';
    const wallTotalDeoptimizeCode = new tr.v.Histogram(
        'v8_deoptimize_code_wall_total',
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    wallTotalDeoptimizeCode.description =
      'wall total time spent in code deoptimization';

    for (const e of model.findTopmostSlicesNamed('V8.DeoptimizeCode')) {
      cpuTotalDeoptimizeCode.addSample(e.cpuDuration);
      wallTotalDeoptimizeCode.addSample(e.duration);
    }

    histograms.addHistogram(cpuTotalDeoptimizeCode);
    histograms.addHistogram(wallTotalDeoptimizeCode);
  }

  function executionMetric(histograms, model) {
    computeExecuteMetrics(histograms, model);
    computeParseLazyMetrics(histograms, model);
    computeCompileIgnitionMetrics(histograms, model);
    computeCompileFullCodeMetrics(histograms, model);
    computeRecompileMetrics(histograms, model);
    computeOptimizeCodeMetrics(histograms, model);
    computeDeoptimizeCodeMetrics(histograms, model);
  }

  tr.metrics.MetricRegistry.register(executionMetric);

  return {
    executionMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.v8', function() {
  // The time window size for mutator utilization computation.
  // It is equal to the duration of one frame corresponding to 60 FPS rendering.
  const TARGET_FPS = 60;
  const MS_PER_SECOND = 1000;
  const WINDOW_SIZE_MS = MS_PER_SECOND / TARGET_FPS;

  function gcMetric(histograms, model) {
    addDurationOfTopEvents(histograms, model);
    addTotalDurationOfTopEvents(histograms, model);
    addDurationOfSubEvents(histograms, model);
    addPercentageInV8ExecuteOfTopEvents(histograms, model);
    addTotalPercentageInV8Execute(histograms, model);
  }

  tr.metrics.MetricRegistry.register(gcMetric);

  const timeDurationInMs_smallerIsBetter =
      tr.b.Unit.byName.timeDurationInMs_smallerIsBetter;
  const percentage_biggerIsBetter =
      tr.b.Unit.byName.normalizedPercentage_biggerIsBetter;
  const percentage_smallerIsBetter =
      tr.b.Unit.byName.normalizedPercentage_smallerIsBetter;

  // 0.1 steps from 0 to 20 since it is the most common range.
  // Exponentially increasing steps from 20 to 200.
  const CUSTOM_BOUNDARIES = tr.v.HistogramBinBoundaries.createLinear(0, 20, 200)
    .addExponentialBins(200, 100);

  function createNumericForTopEventTime(name) {
    const n = new tr.v.Histogram(name,
        timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    n.customizeSummaryOptions({
      avg: true,
      count: true,
      max: true,
      min: false,
      std: true,
      sum: true,
      percentile: [0.90]});
    return n;
  }

  function createNumericForSubEventTime(name) {
    const n = new tr.v.Histogram(name,
        timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    n.customizeSummaryOptions({
      avg: true,
      count: false,
      max: true,
      min: false,
      std: false,
      sum: false,
      percentile: [0.90]
    });
    return n;
  }

  function createNumericForIdleTime(name) {
    const n = new tr.v.Histogram(name,
        timeDurationInMs_smallerIsBetter, CUSTOM_BOUNDARIES);
    n.customizeSummaryOptions({
      avg: true,
      count: false,
      max: true,
      min: false,
      std: false,
      sum: true,
      percentile: []
    });
    return n;
  }

  function createPercentage(name, numerator, denominator, unit) {
    const hist = new tr.v.Histogram(name, unit);
    if (denominator === 0) {
      hist.addSample(0);
    } else {
      hist.addSample(numerator / denominator);
    }
    hist.customizeSummaryOptions({
      avg: true,
      count: false,
      max: false,
      min: false,
      std: false,
      sum: false,
      percentile: []
    });
    return hist;
  }

  function isNotForcedTopGarbageCollectionEvent(event) {
    // We exclude garbage collection events forced by benchmark runner,
    // because they cannot happen in real world.
    return tr.metrics.v8.utils.isTopGarbageCollectionEvent(event) &&
           !tr.metrics.v8.utils.isForcedGarbageCollectionEvent(event);
  }

  function isNotForcedSubGarbageCollectionEvent(event) {
    // We exclude garbage collection events forced by benchmark runner,
    // because they cannot happen in real world.
    return tr.metrics.v8.utils.isSubGarbageCollectionEvent(event) &&
           !tr.metrics.v8.utils.isForcedGarbageCollectionEvent(event);
  }

  /**
   * Example output:
   * - v8-gc-full-mark-compactor.
   */
  function addDurationOfTopEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isNotForcedTopGarbageCollectionEvent,
        tr.metrics.v8.utils.topGarbageCollectionEventName,
        function(name, events) {
          const cpuDuration = createNumericForTopEventTime(name);
          events.forEach(function(event) {
            cpuDuration.addSample(event.cpuDuration);
          });
          histograms.addHistogram(cpuDuration);
        }
    );
  }

  /**
   * Example output:
   * - v8-gc-total
   */
  function addTotalDurationOfTopEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isNotForcedTopGarbageCollectionEvent,
        event => 'v8-gc-total',
        function(name, events) {
          const cpuDuration = createNumericForTopEventTime(name);
          events.forEach(function(event) {
            cpuDuration.addSample(event.cpuDuration);
          });
          histograms.addHistogram(cpuDuration);
        }
    );
  }

  /**
   * Example output:
   * - v8-gc-full-mark-compactor-evacuate.
   */
  function addDurationOfSubEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isNotForcedSubGarbageCollectionEvent,
        tr.metrics.v8.utils.subGarbageCollectionEventName,
        function(name, events) {
          const cpuDuration = createNumericForSubEventTime(name);
          events.forEach(function(event) {
            cpuDuration.addSample(event.cpuDuration);
          });
          histograms.addHistogram(cpuDuration);
        }
    );
  }

  /**
   * Example output:
   * - v8-gc-full-mark-compactor_percentage_in_v8_execute.
   */
  function addPercentageInV8ExecuteOfTopEvents(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isNotForcedTopGarbageCollectionEvent,
        tr.metrics.v8.utils.topGarbageCollectionEventName,
        function(name, events) {
          addPercentageInV8Execute(histograms, model, name, events);
        }
    );
  }

  /**
   * Example output:
   * - v8-gc-total_percentage_in_v8_execute.
   */
  function addTotalPercentageInV8Execute(histograms, model) {
    tr.metrics.v8.utils.groupAndProcessEvents(model,
        isNotForcedTopGarbageCollectionEvent,
        event => 'v8-gc-total',
        function(name, events) {
          addPercentageInV8Execute(histograms, model, name, events);
        }
    );
  }

  function addPercentageInV8Execute(histograms, model, name, events) {
    let cpuDurationInV8Execute = 0;
    let cpuDurationTotal = 0;
    events.forEach(function(event) {
      const v8Execute = tr.metrics.v8.utils.findParent(
          event, tr.metrics.v8.utils.isV8ExecuteEvent);
      if (v8Execute) {
        cpuDurationInV8Execute += event.cpuDuration;
      }
      cpuDurationTotal += event.cpuDuration;
    });
    const percentage = createPercentage(
        name + '_percentage_in_v8_execute', cpuDurationInV8Execute,
        cpuDurationTotal, percentage_smallerIsBetter);
    histograms.addHistogram(percentage);
  }

  return {
    gcMetric,
    WINDOW_SIZE_MS,  // For testing purposes only.
  };
});


'use strict';

tr.exportTo('tr.metrics.v8', function() {
  const COUNT_CUSTOM_BOUNDARIES = tr.v.HistogramBinBoundaries
      .createExponential(1, 1000000, 50);
  const DURATION_CUSTOM_BOUNDARIES = tr.v.HistogramBinBoundaries
      .createExponential(0.1, 10000, 50);
  const SUMMARY_OPTIONS = {
    std: false,
    count: false,
    sum: false,
    min: false,
    max: false,
  };

  function computeDomContentLoadedTime_(model) {
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    let domContentLoadedTime = 0;

    for (const rendererHelper of Object.values(chromeHelper.rendererHelpers)) {
      for (const ev of rendererHelper.mainThread.sliceGroup.childEvents()) {
        if (ev.title === 'domContentLoadedEventEnd' &&
            ev.start > domContentLoadedTime) {
          domContentLoadedTime = ev.start;
        }
      }
    }
    return domContentLoadedTime;
  }

  function computeInteractiveTime_(model) {
    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    let interactiveTime = 0;
    for (const rendererHelper of Object.values(chromeHelper.rendererHelpers)) {
      const samples = tr.metrics.sh.collectLoadingMetricsForRenderer(
          rendererHelper).interactiveSamples;
      // TODO(fmeawad): Support multiple navigations.
      if (samples.length === 0) continue;
      if (interactiveTime !== 0) throw new Error('Too many navigations');
      const diagnostics = tr.b.getOnlyElement(samples).diagnostics;
      interactiveTime =
          tr.b.getOnlyElement(
              diagnostics.get('Navigation infos')).eventTimestamp;
    }
    return interactiveTime;
  }

  function convertMicroToMilli_(time) {
    return tr.b.convertUnit(time,
        tr.b.UnitPrefixScale.METRIC.MICRO, tr.b.UnitPrefixScale.METRIC.MILLI);
  }

  // TODO(crbug.com/688342): Remove this function when runtimeStatsMetric is
  // removed.
  function computeRuntimeStats(histograms, slices) {
    const runtimeGroupCollection = new tr.e.v8.RuntimeStatsGroupCollection();
    runtimeGroupCollection.addSlices(slices);

    function addHistogramsForRuntimeGroup(runtimeGroup, optRelatedNameMaps) {
      histograms.createHistogram(
          `${runtimeGroup.name}:duration`,
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, {
            value: convertMicroToMilli_(runtimeGroup.time),
            diagnostics: optRelatedNameMaps ?
                {samples: optRelatedNameMaps.durationBreakdown} : {}
          }, {
            binBoundaries: DURATION_CUSTOM_BOUNDARIES,
            summaryOptions: SUMMARY_OPTIONS,
            diagnostics: optRelatedNameMaps ?
                {samples: optRelatedNameMaps.durationNames} : {}
          });

      histograms.createHistogram(
          `${runtimeGroup.name}:count`,
          tr.b.Unit.byName.count_smallerIsBetter, {
            value: runtimeGroup.count,
            diagnostics: optRelatedNameMaps ?
                {samples: optRelatedNameMaps.countBreakdown} : {}
          }, {
            binBoundaries: COUNT_CUSTOM_BOUNDARIES,
            summaryOptions: SUMMARY_OPTIONS,
            diagnostics: optRelatedNameMaps ?
                {samples: optRelatedNameMaps.countNames} : {}
          });
    }

    function addDetailedHistogramsForRuntimeGroup(runtimeGroup) {
      const durationNames = new tr.v.d.RelatedNameMap();
      const durationBreakdown = new tr.v.d.Breakdown();
      const countNames = new tr.v.d.RelatedNameMap();
      const countBreakdown = new tr.v.d.Breakdown();

      for (const entry of runtimeGroup.values) {
        const durationSampleHistogram = histograms.createHistogram(
            `${entry.name}:duration`,
            tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
            convertMicroToMilli_(entry.time), {
              binBoundaries: DURATION_CUSTOM_BOUNDARIES,
              summaryOptions: SUMMARY_OPTIONS,
            });
        durationNames.set(entry.name, durationSampleHistogram.name);
        durationBreakdown.set(entry.name, convertMicroToMilli_(entry.time));

        const countSampleHistogram = histograms.createHistogram(
            `${entry.name}:count`,
            tr.b.Unit.byName.count_smallerIsBetter,
            entry.count, {
              binBoundaries: COUNT_CUSTOM_BOUNDARIES,
              summaryOptions: SUMMARY_OPTIONS,
            });
        countNames.set(entry.name, countSampleHistogram.name);
        countBreakdown.set(entry.name, entry.count);
      }

      addHistogramsForRuntimeGroup(runtimeGroup, {
        durationNames,
        durationBreakdown,
        countNames,
        countBreakdown
      });
    }

    for (const runtimeGroup of runtimeGroupCollection.runtimeGroups) {
      addHistogramsForRuntimeGroup(runtimeGroup);
    }

    const blinkGroupCollection = runtimeGroupCollection.blinkRCSGroupCollection;
    if (blinkGroupCollection.totalTime > 0) {
      blinkGroupCollection.runtimeGroups.forEach(
          addDetailedHistogramsForRuntimeGroup);
    }
  }

  // TODO(crbug.com/688342): Remove this metric and use runtimeStatsTotalMetric
  // instead when the runtimeStatsTotalMetric is stable.
  function runtimeStatsMetric(histograms, model) {
    const interactiveTime = computeInteractiveTime_(model);
    const domContentLoadedTime = computeDomContentLoadedTime_(model);
    const endTime = Math.max(interactiveTime, domContentLoadedTime);
    const slices = [...model.getDescendantEvents()].filter(event =>
          event instanceof tr.e.v8.V8ThreadSlice && event.start <= endTime);
    computeRuntimeStats(histograms, slices);
  }

  function addDurationHistogram(railStageName, runtimeGroupName, sampleValue,
      histograms, durationRelatedHistsByGroupName) {
    const durationHistogram = histograms.createHistogram(
        `${railStageName}_${runtimeGroupName}:duration`,
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        convertMicroToMilli_(sampleValue), {
          binBoundaries: DURATION_CUSTOM_BOUNDARIES,
          summaryOptions: SUMMARY_OPTIONS,
        });

    // Record this histogram in RelatedHistogramMap.
    if (durationRelatedHistsByGroupName.get(runtimeGroupName) ===
      undefined) {
      const durationHistogramMap = new tr.v.d.RelatedHistogramMap();
      durationHistogramMap.set(railStageName, durationHistogram);
      durationRelatedHistsByGroupName.set(runtimeGroupName,
          durationHistogramMap);
    } else {
      durationRelatedHistsByGroupName.get(runtimeGroupName).set(railStageName,
          durationHistogram);
    }
  }

  function addCountHistogram(railStageName, runtimeGroupName, sampleValue,
      histograms, countRelatedHistsByGroupName) {
    const countHistogram = histograms.createHistogram(
        `${railStageName}_${runtimeGroupName}:count`,
        tr.b.Unit.byName.count_smallerIsBetter, sampleValue, {
          binBoundaries: COUNT_CUSTOM_BOUNDARIES,
          summaryOptions: SUMMARY_OPTIONS,
        });

    // Record this histogram in RelatedHistogramMap.
    if (countRelatedHistsByGroupName.get(runtimeGroupName) === undefined) {
      const countHistogramMap = new tr.v.d.RelatedHistogramMap();
      countHistogramMap.set(railStageName, countHistogram);
      countRelatedHistsByGroupName.set(runtimeGroupName,
          countHistogramMap);
    } else {
      countRelatedHistsByGroupName.get(runtimeGroupName).set(railStageName,
          countHistogram);
    }
  }

  function addTotalDurationHistogram(histogramName, time, histograms,
      durationRelatedHistsByGroupName) {
    const durationHistogram = histograms.createHistogram(
        `${histogramName}:duration`,
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        convertMicroToMilli_(time), {
          binBoundaries: DURATION_CUSTOM_BOUNDARIES,
          summaryOptions: SUMMARY_OPTIONS,
        });

    // Add UE histograms as a diagnostic, so they can be hidden in the main
    // view, and the data across UE buckets can be grouped together.
    const durationRelatedHistogram = durationRelatedHistsByGroupName.get(
        histogramName);
    if (durationRelatedHistogram !== undefined) {
      durationHistogram.diagnostics.set('RAIL stages',
          durationRelatedHistogram);
    }
  }

  function addTotalCountHistogram(histogramName, count, histograms,
      countRelatedHistsByGroupName) {
    const countHistogram = histograms.createHistogram(
        `${histogramName}:count`,
        tr.b.Unit.byName.count_smallerIsBetter,
        count, {
          binBoundaries: COUNT_CUSTOM_BOUNDARIES,
          summaryOptions: SUMMARY_OPTIONS,
        });

    // Add UE histograms as a diagnostic, so they can be hidden in the main
    // view, and the data across UE buckets can be grouped together.
    const countRelatedHistogram = countRelatedHistsByGroupName.get(
        histogramName);
    if (countRelatedHistogram !== undefined) {
      countHistogram.diagnostics.set('RAIL stages', countRelatedHistogram);
    }
  }

  function computeRuntimeStatsBucketOnUE(histograms, slices,
      v8SlicesBucketOnUEMap) {
    const durationRelatedHistsByGroupName = new Map();
    const countRelatedHistsByGroupName = new Map();

    // Compute runtimeStats in each of the UE buckets. Also record the
    // histograms in RelatedHistogramMap. These histograms are added to the
    // corresponding histograms in the total bucket as a diagnostic. This keeps
    // the data grouped.
    for (const [name, slicesUE] of v8SlicesBucketOnUEMap) {
      const runtimeGroupCollection = new tr.e.v8.RuntimeStatsGroupCollection();
      runtimeGroupCollection.addSlices(slicesUE);

      let overallV8Time = runtimeGroupCollection.totalTime;
      let overallV8Count = runtimeGroupCollection.totalCount;
      for (const runtimeGroup of runtimeGroupCollection.runtimeGroups) {
        addDurationHistogram(name, runtimeGroup.name, runtimeGroup.time,
            histograms, durationRelatedHistsByGroupName);
        if (runtimeGroup.name === 'Blink C++') {
          overallV8Time -= runtimeGroup.time;
        }

        addCountHistogram(name, runtimeGroup.name, runtimeGroup.count,
            histograms, countRelatedHistsByGroupName);
        if (runtimeGroup.name === 'Blink C++') {
          overallV8Count -= runtimeGroup.count;
        }
      }

      if (runtimeGroupCollection.blinkRCSGroupCollection.totalTime > 0) {
        const blinkRCSGroupCollection =
            runtimeGroupCollection.blinkRCSGroupCollection;
        for (const group of blinkRCSGroupCollection.runtimeGroups) {
          addDurationHistogram(name, group.name, group.time,
              histograms, durationRelatedHistsByGroupName);
          addCountHistogram(name, group.name, group.count,
              histograms, countRelatedHistsByGroupName);
        }
      }

      // Add V8 only time that is Total - Blink C++ duration.
      addDurationHistogram(name, 'V8-Only', overallV8Time, histograms,
          durationRelatedHistsByGroupName);
      addCountHistogram(name, 'V8-Only', overallV8Count, histograms,
          countRelatedHistsByGroupName);
    }

    // Add the runtimeStats for all the samples. Please note, the values in
    // the UE buckets may not add upto the values computed here. Since UEs
    // can overlap, we count some of the samples in multiple UE buckets.
    const runtimeGroupCollection = new tr.e.v8.RuntimeStatsGroupCollection();
    runtimeGroupCollection.addSlices(slices);

    let overallV8Time = runtimeGroupCollection.totalTime;
    let overallV8Count = runtimeGroupCollection.totalCount;
    for (const runtimeGroup of runtimeGroupCollection.runtimeGroups) {
      addTotalDurationHistogram(runtimeGroup.name, runtimeGroup.time,
          histograms, durationRelatedHistsByGroupName);
      if (runtimeGroup.name === 'Blink C++') {
        overallV8Time -= runtimeGroup.time;
      }

      addTotalCountHistogram(runtimeGroup.name, runtimeGroup.count,
          histograms, countRelatedHistsByGroupName);
      if (runtimeGroup.name === 'Blink C++') {
        overallV8Count -= runtimeGroup.count;
      }
    }

    if (runtimeGroupCollection.blinkRCSGroupCollection.totalTime > 0) {
      const blinkRCSGroupCollection =
        runtimeGroupCollection.blinkRCSGroupCollection;
      for (const group of blinkRCSGroupCollection.runtimeGroups) {
        addTotalDurationHistogram(group.name, group.time,
            histograms, durationRelatedHistsByGroupName);
        addTotalCountHistogram(group.name, group.count,
            histograms, countRelatedHistsByGroupName);
      }
    }

    // Add V8 only time that is Total - Blink C++ duration.
    addTotalDurationHistogram('V8-Only', overallV8Time, histograms,
        durationRelatedHistsByGroupName);
    addTotalCountHistogram('V8-Only', overallV8Count, histograms,
        countRelatedHistsByGroupName);
  }

  function runtimeStatsTotalMetric(histograms, model) {
    const v8ThreadSlices = [...model.getDescendantEvents()].filter(event =>
          event instanceof tr.e.v8.V8ThreadSlice).sort((e1, e2) =>
          e1.start - e2.start);
    const v8SlicesBucketOnUEMap = new Map();
    // User expectations can sometime overlap. So, certain v8 slices can be
    // included in more than one expectation. We count such slices in each
    // of the expectations. This is done so as to minimize the noise due to
    // the differences in the extent of overlap between the runs.
    for (const expectation of model.userModel.expectations) {
      const slices = expectation.range.filterArray(v8ThreadSlices,
          event => event.start);
      if (slices.length === 0) continue;
      // filterArray filters the array that intersects the range inclusively.
      // Expectations are not inclusive i.e. expectations are like [0, 1),
      // [1, 2). v8ThreadSlices that start at 1 should be counted only in [1,2)
      // bucket. Filter out sample at the boundary so that they are not counted
      // twice.
      const lastSlice = slices[slices.length - 1];
      if (!expectation.range.intersectsRangeExclusive(lastSlice.range)) {
        slices.pop();
      }

      if (v8SlicesBucketOnUEMap.get(expectation.stageTitle) === undefined) {
        v8SlicesBucketOnUEMap.set(expectation.stageTitle, slices);
      } else {
        const totalSlices = v8SlicesBucketOnUEMap.get(expectation.stageTitle)
                                               .concat(slices);
        v8SlicesBucketOnUEMap.set(expectation.stageTitle, totalSlices);
      }
    }

    // Compute runtimeStats in each of the UE buckets and also compute
    // runtimeStats on all of the samples. The values in UE buckets do not add
    // up to the total of all samples, since we duplicate some of the samples in
    // multiple buckets when the UEs overlap.
    computeRuntimeStatsBucketOnUE(histograms, v8ThreadSlices,
        v8SlicesBucketOnUEMap);
  }

  tr.metrics.MetricRegistry.register(runtimeStatsTotalMetric);
  tr.metrics.MetricRegistry.register(runtimeStatsMetric);

  return {
    runtimeStatsMetric,
    runtimeStatsTotalMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.v8', function() {
  function v8AndMemoryMetrics(histograms, model) {
    tr.metrics.v8.executionMetric(histograms, model);
    tr.metrics.v8.gcMetric(histograms, model);
    tr.metrics.sh.memoryMetric(histograms, model,
        {rangeOfInterest: tr.metrics.v8.utils.rangeForMemoryDumps(model)});
  }

  tr.metrics.MetricRegistry.register(v8AndMemoryMetrics);

  return {
    v8AndMemoryMetrics,
  };
});


'use strict';

tr.exportTo('tr.metrics.vr', function() {
  function createHistograms(histograms, name, options) {
    return {
      wall: histograms.createHistogram(name + '_wall',
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, [], options),
      cpu: histograms.createHistogram(name + '_cpu',
          tr.b.Unit.byName.timeDurationInMs_smallerIsBetter, [], options),
    };
  }

  function frameCycleDurationMetric(histograms, model, opt_options) {
    const histogramsByEventTitle = new Map();
    histogramsByEventTitle.set('VrShellGl::DrawFrame',
        createHistograms(histograms, 'draw_frame',
          {description: 'Duration to render one frame'}));
    histogramsByEventTitle.set('VrShellGl::AcquireFrame',
        createHistograms(histograms, 'acquire_frame',
          {description: 'Duration acquire a frame from GVR'}));
    histogramsByEventTitle.set('VrShellGl::UpdateController',
        createHistograms(histograms, 'update_controller',
          {description: 'Duration to query input from the controller'}));
    histogramsByEventTitle.set('VrShellGl::DrawFrameSubmitWhenReady',
        createHistograms(histograms, 'submit_frame',
          {description: 'Duration to submit a frame to GVR'}));
    histogramsByEventTitle.set(
        'UiScene::OnBeginFrame.UpdateAnimations',
        createHistograms(
            histograms, 'update_animations',
            {description: 'Duration to apply animation changes'}));
    histogramsByEventTitle.set(
        'UiScene::OnBeginFrame.UpdateBindings',
        createHistograms(
            histograms, 'update_bindings',
            {description: 'Duration to push binding values'}));
    histogramsByEventTitle.set(
        'UiScene::OnBeginFrame.UpdateOpacity',
        createHistograms(
            histograms, 'update_opacity',
            {description: 'Duration to calculate inherited opacity'}));
    histogramsByEventTitle.set(
        'UiScene::OnBeginFrame.UpdateTexturesAndSizes',
        createHistograms(histograms, 'update_textures_and_sizes', {
          description: 'Duration to redraw textures and update element sizes'
        }));
    histogramsByEventTitle.set(
        'UiScene::OnBeginFrame.UpdateLayout',
        createHistograms(histograms, 'update_layout', {
          description:
              'Duration to reposition elements according to their layout'
        }));
    histogramsByEventTitle.set(
        'UiScene::OnBeginFrame.UpdateWorldSpaceTransform',
        createHistograms(histograms, 'update_world_space_transforms', {
          description: 'Duration to calculate element transforms in world space'
        }));

    const chromeHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);

    let rangeOfInterest = model.bounds;
    const userExpectationsOfInterest = [tr.model.um.AnimationExpectation];

    if (opt_options && opt_options.rangeOfInterest) {
      rangeOfInterest = opt_options.rangeOfInterest;
      userExpectationsOfInterest.push(tr.model.um.ResponseExpectation);
    }

    for (const ue of model.userModel.expectations) {
      // Skip user expecations not of the right type or not inside the range of
      // interest.
      if (ue.initiatorType !== tr.model.um.INITIATOR_TYPE.VR) {
        continue;
      }
      if (!userExpectationsOfInterest.some(function(ueOfInterest) {
        return ue instanceof ueOfInterest;
      })) {
        continue;
      }
      if (!rangeOfInterest.intersectsExplicitRangeInclusive(
          ue.start, ue.end)) {
        continue;
      }

      for (const helper of chromeHelper.browserHelpers) {
        // The events are traced on the GL thread in the browser process.
        // Unfortunately, this thread has no name.
        // TODO(tiborg): Give GL thread a name and reference the thread by
        // the given name.
        const glThreads = helper.process.findAllThreadsMatching(
            thread => !thread.name);

        for (const glThread of glThreads) {
          for (const event of glThread.getDescendantEvents()) {
            // Skip events that are neither in the user expecation, range of
            // interest nor part of the frame cycle durations.
            if (!(histogramsByEventTitle.has(event.title))) {
              continue;
            }
            if (event.start < ue.start || event.end > ue.end) {
              continue;
            }
            if (event.start < rangeOfInterest.min ||
                event.end > rangeOfInterest.max) {
              continue;
            }

            const {wall: wallHist, cpu: cpuHist} =
              histogramsByEventTitle.get(event.title);
            wallHist.addSample(event.duration);
            cpuHist.addSample(event.cpuDuration);
          }
        }
      }
    }
  }

  tr.metrics.MetricRegistry.register(frameCycleDurationMetric, {
    supportsRangeOfInterest: true,
  });

  return {
    frameCycleDurationMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.vr', function() {
  function webvrMetric(histograms, model, opt_options) {
    // Maps VR trace counters to histogram.
    const WEBVR_COUNTERS = new Map([
      ['gpu.WebVR FPS', {
        name: 'webvr_fps',
        unit: tr.b.Unit.byName.count_biggerIsBetter,
        samples: {},
        options: {
          description: 'WebVR frame per second',
          binBoundaries: tr.v.HistogramBinBoundaries.createLinear(20, 120, 25),
        },
      }],
      ['gpu.WebVR frame time (ms)', {
        name: 'webvr_frame_time',
        unit: tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        samples: {},
        options: {
          description: 'WebVR frame time in ms',
          binBoundaries: tr.v.HistogramBinBoundaries.createLinear(20, 120, 25),
        },
      }],
      ['gpu.WebVR pose prediction (ms)', {
        name: 'webvr_pose_prediction',
        unit: tr.b.Unit.byName.timeDurationInMs_smallerIsBetter,
        samples: {},
        options: {
          description: 'WebVR pose prediction in ms',
          binBoundaries: tr.v.HistogramBinBoundaries.createLinear(20, 120, 25),
        },
      }],
    ]);

    for (const ue of model.userModel.expectations) {
      const rangeOfInterestEnabled = opt_options && opt_options.rangeOfInterest;
      if (rangeOfInterestEnabled &&
          !opt_options.rangeOfInterest.intersectsExplicitRangeInclusive(
              ue.start, ue.end)) {
        continue;
      }

      // By default, only do calculations in the VR animation expectation, i.e.
      // some time after we've entered VR, in order to avoid skewed results
      // caused by VR entry, but allow calculation on the response expectation
      // if we've manually selected it as a range of interest
      if (ue.initiatorType !== tr.model.um.INITIATOR_TYPE.VR) continue;
      if (!rangeOfInterestEnabled) {
        if (!(ue instanceof tr.model.um.AnimationExpectation)) continue;
      } else {
        if (!(ue instanceof tr.model.um.AnimationExpectation ||
              ue instanceof tr.model.um.ResponseExpectation)) continue;
      }

      for (const counter of model.getAllCounters()) {
        if (!(WEBVR_COUNTERS.has(counter.id))) continue;

        for (const series of counter.series) {
          if (!(series.name in WEBVR_COUNTERS.get(counter.id).samples)) {
            WEBVR_COUNTERS.get(counter.id).samples[series.name] = [];
          }
          for (const sample of series.samples) {
            if (sample.timestamp < ue.start || sample.timestamp >= ue.end) {
              continue;
            }
            if (rangeOfInterestEnabled &&
                !opt_options.rangeOfInterest.intersectsExplicitRangeInclusive(
                    sample.timestamp, sample.timestamp)) {
              continue;
            }

            WEBVR_COUNTERS.get(counter.id).samples[series.name].push(
                sample.value);
          }
        }
      }
    }

    for (const [key, value] of WEBVR_COUNTERS) {
      for (const [seriesName, samples] of Object.entries(value.samples)) {
        let histogramName = value.name;
        if (seriesName !== 'value') {
          histogramName = `${histogramName}_${seriesName}`;
        }
        histograms.createHistogram(histogramName, value.unit,
            samples, value.options);
      }
    }
  }

  tr.metrics.MetricRegistry.register(webvrMetric, {
    supportsRangeOfInterest: true,
  });

  return {
    webvrMetric,
  };
});


'use strict';

tr.exportTo('tr.metrics.webrtc', function() {
  const DISPLAY_HERTZ = 60.0;
  const VSYNC_DURATION_US = 1e6 / DISPLAY_HERTZ;
  // How much more severe is a 'Badly out of sync' render event compared to an
  // 'Out of sync' one when calculating the smoothness score.
  const SEVERITY = 3;
  // How many vsyncs a frame should be displayed to be considered frozen.
  const FROZEN_FRAME_VSYNC_COUNT_THRESHOLD = 6;

  const WEB_MEDIA_PLAYER_UPDATE_TITLE = 'UpdateCurrentFrame';
  // These four are args for WebMediaPlayerMS update events.
  const IDEAL_RENDER_INSTANT_NAME = 'Ideal Render Instant';
  const ACTUAL_RENDER_BEGIN_NAME = 'Actual Render Begin';
  const ACTUAL_RENDER_END_NAME = 'Actual Render End';
  // The events of interest have a 'Serial' argument which represents the
  // stream ID.
  const STREAM_ID_NAME = 'Serial';

  const REQUIRED_EVENT_ARGS_NAMES = [
    IDEAL_RENDER_INSTANT_NAME, ACTUAL_RENDER_BEGIN_NAME, ACTUAL_RENDER_END_NAME,
    STREAM_ID_NAME
  ];

  // By default, we store a single value, so we only need one of the
  // statistics to keep track. We choose the average for that.
  const SUMMARY_OPTIONS = tr.v.Histogram.AVERAGE_ONLY_SUMMARY_OPTIONS;

  const count_smallerIsBetter =
        tr.b.Unit.byName.count_smallerIsBetter;
  const percentage_biggerIsBetter =
        tr.b.Unit.byName.normalizedPercentage_biggerIsBetter;
  const percentage_smallerIsBetter =
        tr.b.Unit.byName.normalizedPercentage_smallerIsBetter;
  const timeDurationInMs_smallerIsBetter =
        tr.b.Unit.byName.timeDurationInMs_smallerIsBetter;
  const unitlessNumber_biggerIsBetter =
        tr.b.Unit.byName.unitlessNumber_biggerIsBetter;

  /*
   * Verify that the event is a valid event.
   *
   * An event is valid if it is a UpdateCurrentFrame event,
   * and has all of the mandatory arguments. See MANDATORY above.
   */
  function isValidEvent(event) {
    if (event.title !== WEB_MEDIA_PLAYER_UPDATE_TITLE || !event.args) {
      return false;
    }
    for (const parameter of REQUIRED_EVENT_ARGS_NAMES) {
      if (!(parameter in event.args)) {
        return false;
      }
    }
    return true;
  }

  function webrtcRenderingMetric(histograms, model) {
    const modelHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    let webMediaPlayerMSEvents = [];
    for (const rendererPid in modelHelper.rendererHelpers) {
      const rendererHelper = modelHelper.rendererHelpers[rendererPid];
      const compositorThread = rendererHelper.compositorThread;
      if (compositorThread !== undefined) {
        webMediaPlayerMSEvents = webMediaPlayerMSEvents.concat(
            compositorThread.sliceGroup.slices.filter(isValidEvent));
      }
    }
    const eventsByStreamName = tr.b.groupIntoMap(
        webMediaPlayerMSEvents,
        event => event.args[STREAM_ID_NAME]
    );
    for (const [streamName, events] of eventsByStreamName) {
      getTimeStats(histograms, streamName, events);
    }
  }

  tr.metrics.MetricRegistry.register(webrtcRenderingMetric);

  function getTimeStats(histograms, streamName, events) {
    const frameHist = getFrameDistribution(histograms, events);
    addFpsFromFrameDistribution(histograms, frameHist);
    addFreezingScore(histograms, frameHist);

    const driftTimeStats = getDriftStats(events);
    histograms.createHistogram('WebRTCRendering_drift_time',
        timeDurationInMs_smallerIsBetter, driftTimeStats.driftTime, {
          summaryOptions: {
            count: false,
            min: false,
            percentile: [0.75, 0.9],
          },
        });
    histograms.createHistogram('WebRTCRendering_rendering_length_error',
        percentage_smallerIsBetter,
        driftTimeStats.renderingLengthError, {
          summaryOptions: SUMMARY_OPTIONS,
        });

    const smoothnessStats = getSmoothnessStats(driftTimeStats.driftTime);
    histograms.createHistogram('WebRTCRendering_percent_badly_out_of_sync',
        percentage_smallerIsBetter, smoothnessStats.percentBadlyOutOfSync, {
          summaryOptions: SUMMARY_OPTIONS,
        });
    histograms.createHistogram('WebRTCRendering_percent_out_of_sync',
        percentage_smallerIsBetter, smoothnessStats.percentOutOfSync, {
          summaryOptions: SUMMARY_OPTIONS,
        });
    histograms.createHistogram('WebRTCRendering_smoothness_score',
        percentage_biggerIsBetter, smoothnessStats.smoothnessScore, {
          summaryOptions: SUMMARY_OPTIONS,
        });
    histograms.createHistogram('WebRTCRendering_frames_out_of_sync',
        count_smallerIsBetter, smoothnessStats.framesOutOfSync, {
          summaryOptions: SUMMARY_OPTIONS,
        });
    histograms.createHistogram('WebRTCRendering_frames_badly_out_of_sync',
        count_smallerIsBetter, smoothnessStats.framesSeverelyOutOfSync, {
          summaryOptions: SUMMARY_OPTIONS,
        });
  }

  const FRAME_DISTRIBUTION_BIN_BOUNDARIES =
    tr.v.HistogramBinBoundaries.createLinear(1, 50, 49);

  /**
   * Create the frame distribution.
   *
   * If the overall display distribution is A1:A2:..:An, this will tell how
   * many times a frame stays displayed during Ak*VSYNC_DURATION_US, also known
   * as 'source to output' distribution.
   *
   * In other terms, a distribution B where
   * B[k] = number of frames that are displayed k times.
   *
   * @param {tr.v.HistogramSet} histograms
   * @param {Array.<event>} events - An array of events.
   * @returns {tr.v.Histogram} frameHist - The frame distribution.
   */
  function getFrameDistribution(histograms, events) {
    const cadence = tr.b.runLengthEncoding(
        events.map(e => e.args[IDEAL_RENDER_INSTANT_NAME]));
    return histograms.createHistogram('WebRTCRendering_frame_distribution',
        count_smallerIsBetter, cadence.map(ticks => ticks.count), {
          binBoundaries: FRAME_DISTRIBUTION_BIN_BOUNDARIES,
          summaryOptions: {
            percentile: [0.75, 0.9],
          },
        });
  }

  /**
   * Calculate the apparent FPS from frame distribution.
   *
   * Knowing the display frequency and the frame distribution, it is possible to
   * calculate the video apparent frame rate as played by WebMediaPlayerMs
   * module.
   *
   * @param {tr.v.HistogramSet} histograms
   * @param {tr.v.Histogram} frameHist - The frame distribution. See
   * getFrameDistribution.
   */
  function addFpsFromFrameDistribution(histograms, frameHist) {
    let numberFrames = 0;
    let numberVsyncs = 0;
    for (let ticks = 1; ticks < frameHist.allBins.length; ++ticks) {
      const count = frameHist.allBins[ticks].count;
      numberFrames += count;
      numberVsyncs += ticks * count;
    }
    const meanRatio = numberVsyncs / numberFrames;
    histograms.createHistogram('WebRTCRendering_fps',
        unitlessNumber_biggerIsBetter, DISPLAY_HERTZ / meanRatio, {
          summaryOptions: SUMMARY_OPTIONS,
        });
  }

  /**
   * Returns the weighted penalty for a number of frozen frames.
   *
   * In a series of repeated frames of length > 5, all frames after the first
   * are considered frozen. Conversely, no frames in a series of repeated frames
   * of length <= 5 will be considered frozen.
   *
   * This means the weight for 0 to 4 frozen frames is 0.
   *
   * @param {Number} numberFrozenFrames - The number of frozen frames.
   * @returns {Number} - The weight penalty for the number of frozen frames.
   */
  function frozenPenaltyWeight(numberFrozenFrames) {
    const penalty = {
      5: 1,
      6: 5,
      7: 15,
      8: 25
    };
    return penalty[numberFrozenFrames] || (8 * (numberFrozenFrames - 4));
  }

  /**
   * Adds the freezing score.
   *
   * @param {tr.v.HistogramSet} histograms
   * @param {tr.v.Histogram} frameHist - The frame distribution.
   * See getFrameDistribution.
   */
  function addFreezingScore(histograms, frameHist) {
    let numberVsyncs = 0;
    let freezingScore = 0;
    let frozenFramesCount = 0;
    for (let ticks = 1; ticks < frameHist.allBins.length; ++ticks) {
      const count = frameHist.allBins[ticks].count;
      numberVsyncs += ticks * count;
      if (ticks >= FROZEN_FRAME_VSYNC_COUNT_THRESHOLD) {
        // The first frame of the series is not considered frozen.
        frozenFramesCount += count * (ticks - 1);
        freezingScore += count * frozenPenaltyWeight(ticks - 1);
      }
    }
    freezingScore = 1 - freezingScore / numberVsyncs;
    if (freezingScore < 0) {
      freezingScore = 0;
    }
    histograms.createHistogram('WebRTCRendering_frozen_frames_count',
        count_smallerIsBetter, frozenFramesCount, {
          summaryOptions: SUMMARY_OPTIONS,
        });
    histograms.createHistogram('WebRTCRendering_freezing_score',
        percentage_biggerIsBetter, freezingScore, {
          summaryOptions: SUMMARY_OPTIONS,
        });
  }

  /**
   * Get the drift time statistics.
   *
   * This method will calculate:
   * - Drift Time: The difference between the Actual Render Begin and the Ideal
   *     Render Instant for each event.
   * - Rendering Length Error: The alignment error of the Ideal Render
   *     Instants. The Ideal Render Instants should be equally spaced by
   *     intervals of length VSYNC_DURATION_US. The Rendering Length error
   *     measures how much they are misaligned.
   *
   * @param {Array.<event>} events - An array of events.
   * @returns {Object.<Array.<Number>, Number>} - The drift time and rendering
   * length error.
   */
  function getDriftStats(events) {
    const driftTime = [];
    const discrepancy = [];
    let oldIdealRender = 0;
    let expectedIdealRender = 0;

    for (const event of events) {
      const currentIdealRender = event.args[IDEAL_RENDER_INSTANT_NAME];
      // The expected time of the next 'Ideal Render' event begins as the
      // current 'Ideal Render' time and increases by VSYNC_DURATION_US on every
      // frame.
      expectedIdealRender += VSYNC_DURATION_US;
      if (currentIdealRender === oldIdealRender) {
        continue;
      }
      const actualRenderBegin = event.args[ACTUAL_RENDER_BEGIN_NAME];
      // When was the frame rendered vs. when it would've been ideal.
      driftTime.push(actualRenderBegin - currentIdealRender);
      // The discrepancy is the absolute difference between the current Ideal
      // Render and the expected Ideal Render.
      discrepancy.push(Math.abs(currentIdealRender - expectedIdealRender));
      expectedIdealRender = currentIdealRender;
      oldIdealRender = currentIdealRender;
    }

    const discrepancySum = tr.b.math.Statistics.sum(discrepancy) -
      discrepancy[0];
    const lastIdealRender =
        events[events.length - 1].args[IDEAL_RENDER_INSTANT_NAME];
    const firstIdealRender = events[0].args[IDEAL_RENDER_INSTANT_NAME];
    const idealRenderSpan = lastIdealRender - firstIdealRender;

    const renderingLengthError = discrepancySum / idealRenderSpan;

    return {driftTime, renderingLengthError};
  }

  /**
   * Get the smoothness stats from the normalized drift time.
   *
   * This method will calculate the smoothness score, along with the percentage
   * of frames badly out of sync and the percentage of frames out of sync.
   * To be considered badly out of sync, a frame has to have missed rendering by
   * at least 2 * VSYNC_DURATION_US.
   * To be considered out of sync, a frame has to have missed rendering by at
   * least one VSYNC_DURATION_US.
   * The smoothness score is a measure of how out of sync the frames are.
   *
   * @param {Array.<Number>} driftTimes - See getDriftStats.
   * @returns {Object.<Number, Number, Number>} - The percentBadlyOutOfSync,
   * percentOutOfSync and smoothnesScore calculated from the driftTimes array.
   */
  function getSmoothnessStats(driftTimes) {
    const meanDriftTime = tr.b.math.Statistics.mean(driftTimes);
    const normDriftTimes = driftTimes.map(driftTime =>
        Math.abs(driftTime - meanDriftTime));

    // How many times is a frame later/earlier than T=2*VSYNC_DURATION_US. Time
    // is in microseconds
    const framesSeverelyOutOfSync = normDriftTimes
      .filter(driftTime => driftTime > 2 * VSYNC_DURATION_US)
      .length;
    // How many times is a frame later/earlier than VSYNC_DURATION_US.
    const framesOutOfSync = normDriftTimes
      .filter(driftTime => driftTime > VSYNC_DURATION_US)
      .length;

    const percentBadlyOutOfSync = framesSeverelyOutOfSync /
      driftTimes.length;
    const percentOutOfSync = framesOutOfSync / driftTimes.length;

    const framesOutOfSyncOnlyOnce = framesOutOfSync - framesSeverelyOutOfSync;

    // Calculate smoothness metric. From the formula, we can see that smoothness
    // score can be negative.
    let smoothnessScore = 1 - (framesOutOfSyncOnlyOnce +
        SEVERITY * framesSeverelyOutOfSync) / driftTimes.length;

    // Minimum smoothness_score value allowed is zero.
    if (smoothnessScore < 0) {
      smoothnessScore = 0;
    }

    return {
      framesOutOfSync,
      framesSeverelyOutOfSync,
      percentBadlyOutOfSync,
      percentOutOfSync,
      smoothnessScore
    };
  }

  return {
    webrtcRenderingMetric,
  };
});


'use strict';

tr.exportTo('tr.mre', function() {
  function Failure(job, functionHandleString, traceCanonicalUrl,
      failureTypeName, description, stack) {
    this.job = job;
    this.functionHandleString = functionHandleString;
    this.traceCanonicalUrl = traceCanonicalUrl;
    this.failureTypeName = failureTypeName;
    this.description = description;
    this.stack = stack;
  }

  Failure.prototype = {
    asDict() {
      // TODO(eakuefner): Serialize job once reduction is implemented.
      return {
        function_handle_string: this.functionHandleString,
        trace_canonical_url: this.traceCanonicalUrl,
        type: this.failureTypeName,
        description: this.description,
        stack: this.stack
      };
    }
  };

  Failure.fromDict = function(failureDict) {
    return new Failure(undefined, failureDict.function_handle_string,
                       failureDict.trace_canonical_url, failureDict.type,
                       failureDict.description, failureDict.stack);
  };

  return {
    Failure,
  };
});



'use strict';

tr.exportTo('tr.mre', function() {
  const FunctionRegistry = {
    allFunctions_: [],
    allFunctionsByName_: {},
    get allFunctions() { return this.allFunctions_; },
    get allFunctionsByName() { return this.allFunctionsByName_; }
  };

  FunctionRegistry.getFunction = function(name) {
    return this.allFunctionsByName_[name];
  };

  FunctionRegistry.register = function(func) {
    if (func.name === '') {
      throw new Error('Registered functions must not be anonymous');
    }
    if (this.allFunctionsByName[func.name] !== undefined) {
      throw new Error('Function named ' + func.name + 'is already registered.');
    }
    this.allFunctionsByName[func.name] = func;
    this.allFunctions.push(func);
  };

  function ModuleToLoad(href, filename) {
    if ((href !== undefined) ? (filename !== undefined) :
        (filename === undefined)) {
      throw new Error('ModuleToLoad must specify exactly one of href or ' +
                      'filename');
    }
    this.href = href;
    this.filename = filename;
  }

  ModuleToLoad.prototype = {
    asDict() {
      if (this.href !== undefined) {
        return {'href': this.href};
      }
      return {'filename': this.filename};
    },

    toString() {
      if (this.href !== undefined) {
        return 'ModuleToLoad(href="' + this.href + '")';
      }
      return 'ModuleToLoad(filename="' + this.filename + '")';
    }
  };

  ModuleToLoad.fromDict = function(moduleDict) {
    return new ModuleToLoad(moduleDict.href, moduleDict.filename);
  };

  function FunctionHandle(modulesToLoad, functionName, opt_options) {
    if (!(modulesToLoad instanceof Array)) {
      throw new Error('modulesToLoad in FunctionHandle must be an array');
    }
    if (typeof(functionName) !== 'string') {
      throw new Error('functionName in FunctionHandle must be a string');
    }
    this.modulesToLoad = modulesToLoad;
    this.functionName = functionName;
    this.options_ = opt_options;
  }

  FunctionHandle.prototype = {
    get options() {
      return this.options_;
    },

    asDict() {
      return {
        'modules_to_load': this.modulesToLoad.map(
            function(m) {return m.asDict();}),
        'function_name': this.functionName,
        'options': this.options_
      };
    },

    asUserFriendlyString() {
      const parts = this.modulesToLoad.map(mtl => mtl.filename);
      parts.push(this.functionName);
      parts.push(JSON.stringify(this.options_));
      return parts.join(',');
    },

    hasHrefs() {
      for (const module in this.modulesToLoad) {
        if (this.modulesToLoad[module].href !== undefined) {
          return true;
        }
      }
      return false;
    },

    load() {
      if (this.hasHrefs()) {
        const err = new Error(
            'FunctionHandle named ' + this.functionName +
            ' specifies hrefs, which cannot be loaded.');
        err.name = 'FunctionLoadingError';
        throw err;
      }

      for (const module in this.modulesToLoad) {
        const filename = this.modulesToLoad[module].filename;
        try {
          HTMLImportsLoader.loadHTMLFile(filename);
        } catch (err) {
          err.name = 'FunctionLoadingError';
          throw err;
        }
      }

      const func = FunctionRegistry.getFunction(this.functionName);
      if (func === undefined) {
        const err = new Error(
            'No registered function named ' + this.functionName);
        err.name = 'FunctionNotDefinedError';
        throw err;
      }

      return func;
    },

    toString() {
      const modulesToLoadStr = this.modulesToLoad.map(function(module) {
        return module.toString();
      });
      return 'FunctionHandle(modulesToLoad=[' + modulesToLoadStr + '], ' +
          'functionName="' + this.functionName + '", options="' +
          JSON.stringify(this.options_) + '")';
    }
  };

  FunctionHandle.loadFromFilename_ = function(filename) {
    try {
      const numFunctionsBefore = FunctionRegistry.allFunctions.length;
      HTMLImportsLoader.loadHTMLFile(filename);
    } catch (err) {
      err.name = 'FunctionLoadingError';
      throw err;
    }

    // Verify a new function was registered.
    const numFunctionsNow = FunctionRegistry.allFunctions.length;
    if (numFunctionsNow !== (numFunctionsBefore + 1)) {
      const err = new Error(
          filename + ' didn\'t call FunctionRegistry.register');
      err.name = 'FunctionNotDefinedError';
      throw err;
    }

    return FunctionRegistry.allFunctions[numFunctionsNow - 1];
  };

  FunctionHandle.fromDict = function(handleDict) {
    const options = handleDict.options;
    let modulesToLoad;
    if (handleDict.modules_to_load !== undefined) {
      modulesToLoad = handleDict.modules_to_load.map(function(module) {
        return ModuleToLoad.fromDict(module);
      });
    }
    return new FunctionHandle(modulesToLoad, handleDict.function_name, options);
  };

  return {
    FunctionHandle,
    ModuleToLoad,
    FunctionRegistry,
  };
});


'use strict';

tr.exportTo('tr.metrics', function() {
  /**
   * @param {!tr.model.Model} model
   * @param {!Object} options
   * @param {!Array.<string>} options.metrics
   * @param {!Function} addFailureCb
   * @return {!tr.v.HistogramSet}
   */
  function runMetrics(model, options, addFailureCb) {
    if (options === undefined) {
      throw new Error('Options are required.');
    }

    const metricNames = options.metrics;
    if (!metricNames) {
      throw new Error('Metric names should be specified.');
    }

    const categories = getTraceCategories(model);

    const histograms = new tr.v.HistogramSet();

    for (const metricName of metricNames) {
      const metric = tr.metrics.MetricRegistry.findTypeInfoWithName(metricName);
      if (metric === undefined) {
        throw new Error(`"${metricName}" is not a registered metric.`);
      }
      validateTraceCategories(metric.metadata.requiredCategories, categories);
      try {
        metric.constructor(histograms, model, options);
      } catch (e) {
        const err = tr.b.normalizeException(e);
        addFailureCb(new tr.mre.Failure(
            undefined, 'metricMapFunction', model.canonicalUrl, err.typeName,
            err.message, err.stack));
      }
    }

    validateDiagnosticNames(histograms);

    return histograms;
  }

  function getTraceCategories(model) {
    for (const metadata of model.metadata) {
      let config;
      if (metadata.name === 'TraceConfig' && metadata.value) {
        config = metadata.value;
      }
      if (metadata.name === 'metadata' && metadata.value &&
          metadata.value['trace-config'] &&
          metadata.value['trace-config'] !== '__stripped__') {
        config = JSON.parse(metadata.value['trace-config']);
      }
      if (config) {
        return {
          excluded: config.excluded_categories || [],
          included: config.included_categories || [],
        };
      }
    }
  }

  function validateTraceCategories(requiredCategories, categories) {
    if (!requiredCategories) return;

    if (!categories) throw new Error('Missing trace config metadata');

    for (const cat of requiredCategories) {
      const isDisabledByDefault = (cat.indexOf('disabled-by-default') === 0);
      let missing = false;
      if (isDisabledByDefault) {
        if (!categories.included.includes(cat)) {
          missing = true;
        }
      } else if (categories.excluded.includes(cat)) {
        missing = true;
      }
      if (missing) {
        throw new Error(`Trace is missing required category "${cat}"`);
      }
    }
  }

  /**
   * Ensure that metrics don't use reserved diagnostic names.
   *
   * @param {!tr.v.HistogramSet} histograms
   */
  function validateDiagnosticNames(histograms) {
    for (const hist of histograms) {
      for (const name of hist.diagnostics.keys()) {
        if (tr.v.d.RESERVED_NAMES_SET.has(name)) {
          throw new Error(
              `Illegal diagnostic name "${name}" on Histogram "${hist.name}"`);
        }
      }
    }
  }

  /**
   * @param {!tr.v.HistogramSet} histograms
   * @param {!tr.model.Model} model
   */
  function addTelemetryInfo(histograms, model) {
    for (const metadata of model.metadata) {
      if (!metadata.value || !metadata.value.telemetry) continue;

      const traceUrls = metadata.value.telemetry[
        tr.v.d.RESERVED_NAMES.TRACE_URLS];
      if (traceUrls && model.canonicalUrl !== traceUrls[0]) {
      // throw new Error(`canonicalUrl "${model.canonicalUrl}" != ` +
      //     `traceUrl "${traceUrls[0]}"`);
      }

      for (const [name, value] of Object.entries(metadata.value.telemetry)) {
        const type = tr.v.d.RESERVED_NAMES_TO_TYPES.get(name);
        if (type === undefined) {
          throw new Error(`Unexpected telemetry.${name}`);
        }
        histograms.addSharedDiagnosticToAllHistograms(name, new type(value));
      }
    }
  }

  /**
   * @param {!tr.mre.MreResult} result
   * @param {!tr.model.Model} model
   * @param {!Object} options
   * @param {!Array.<string>} options.metrics
   */
  function metricMapFunction(result, model, options) {
    const histograms = runMetrics(
        model, options, result.addFailure.bind(result));
    addTelemetryInfo(histograms, model);

    result.addPair('histograms', histograms.asDicts());

    const scalarDicts = [];
    for (const value of histograms) {
      for (const [statName, scalar] of value.statisticsScalars) {
        scalarDicts.push({
          name: value.name + '_' + statName,
          numeric: scalar.asDict(),
          description: value.description,
        });
      }
    }
    result.addPair('scalars', scalarDicts);
  }

  tr.mre.FunctionRegistry.register(metricMapFunction);

  return {
    metricMapFunction,
    runMetrics,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  const MAX_FUNCTION_ARGS_COUNT = Math.pow(2, 15) - 1;

  class InMemoryTraceStream extends tr.b.TraceStream {
    constructor(buffer, isBinary, opt_headerSize) {
      super();
      if (!buffer instanceof Uint8Array) {
        throw new Error('buffer should be a Uint8Array');
      }
      const headerSize = opt_headerSize || tr.b.TraceStream.HEADER_SIZE;

      this.data_ = buffer;
      this.isBinary_ = isBinary;
      this.header_ = InMemoryTraceStream.uint8ArrayToString_(
          this.data_.subarray(0, headerSize));
      this.cursor_ = 0;
    }

    get isBinary() {
      return this.isBinary_;
    }

    get hasData() {
      return this.cursor_ < this.data_.length;
    }

    get header() {
      return this.header_;
    }

    get data() {
      return this.data_;
    }

    toString() {
      this.rewind();
      return this.readNumBytes(Number.MAX_VALUE);
    }

    readUntilDelimiter(delim) {
      if (delim.length !== 1) {
        throw new Error('delim must be exactly one character');
      }
      const offset = this.data_.indexOf(delim.charCodeAt(0), this.cursor_) + 1;
      return this.readToOffset_(
          offset > 0 ? Math.min(offset, this.data_.length) : this.data_.length);
    }

    readNumBytes(opt_size) {
      if (opt_size !== undefined && opt_size <= 0) {
        throw new Error(
            `readNumBytes expects a positive size (${opt_size} given)`);
      }

      const size = opt_size || tr.b.TraceStream.CHUNK_SIZE;
      const offset = Math.min(this.cursor_ + size, this.data_.length);
      return this.readToOffset_(offset);
    }

    rewind() {
      this.cursor_ = 0;
    }

    // The underlying buffer is not copied.
    substream(startOffset, opt_endOffset, opt_headerSize) {
      return new InMemoryTraceStream(
          this.data_.subarray(startOffset, opt_endOffset), this.isBinary_,
          opt_headerSize);
    }

    /**
     * @returns {string} The contents of the stream between the current cursor
     * location (inclusive) and |offset| (exclusive). The cursor location is
     * moved forward to |offset|.
     */
    readToOffset_(offset) {
      const out = InMemoryTraceStream.uint8ArrayToString_(
          this.data_.subarray(this.cursor_, offset));
      this.cursor_ = offset;
      return out;
    }

    static uint8ArrayToString_(arr) {
      if (typeof TextDecoder !== 'undefined') {
        const decoder = new TextDecoder('utf-8');
        return decoder.decode(arr);
      }
      const c = [];
      for (let i = 0; i < arr.length; i += MAX_FUNCTION_ARGS_COUNT) {
        c.push(String.fromCharCode(...arr.subarray(
            i, i + MAX_FUNCTION_ARGS_COUNT)));
      }
      return c.join('');
    }
  }

  return {
    InMemoryTraceStream,
  };
});


'use strict';

tr.exportTo('tr.b', function() {
  let fs;
  if (tr.isNode) fs = require('fs');

  function guessBinary(url) {
    return /[.]gz$/.test(url) || /[.]zip$/.test(url);
  }
  function xhr(method, url, async, opt_data, forceBinary) {
    const req = new XMLHttpRequest();
    req.overrideMimeType('text/plain; charset=x-user-defined');
    req.open(method, url, async);

    const isBinary = forceBinary;

    if (isBinary === undefined) {
      guessBinary(url);
      if (isBinary && async) req.responseType = 'arraybuffer';
    }

    const data = opt_data !== undefined ? opt_data : null;

    if (!async) {
      req.send(data);
      if (req.status === 200) return req.responseText;
      throw new Error('XHR failed with status ' + req.status +
          ' for url ' + url);
    }

    const p = new Promise(function(resolve, reject) {
      req.onreadystatechange = function(aEvt) {
        if (req.readyState !== 4) return;
        tr.b.timeout(0).then(() => {
          if (req.status !== 200) {
            reject(new Error('XHR failed with status ' + req.status +
                ' for url ' + url));
            return;
          }
          if (req.responseType === 'arraybuffer') {
            resolve(req.response);
            return;
          }
          resolve(req.responseText);
        });
      };
    });
    req.send(data);
    return p;
  }

  function getAsync(url) {
    // Browser.
    if (!tr.isHeadless) return xhr('GET', url, true);

    // Node or vinn prep.
    let filename;
    if (url.startsWith('file:///')) {
      filename = url.substring(7);
    } else {
      filename = global.HTMLImportsLoader.hrefToAbsolutePath(url);
    }
    const isBinary = guessBinary(url);

    // Node.
    if (tr.isNode) {
      const encoding = isBinary ? undefined : 'utf8';
      return new Promise(function(resolve, reject) {
        fs.readFile(filename, encoding, function(err, data) {
          if (err) {
            reject(err);
            return;
          }
          resolve(data);
        });
      });
    }

    // Vinn.
    return Promise.resolve().then(function() {
      if (isBinary) return readbuffer(filename);
      return read(filename);
    });
  }

  function getSync(url, asTraceStream) {
    // Browser.
    if (!tr.isHeadless) return xhr('GET', url, false);

    // Node or vinn prep.
    let filename;
    if (url.startsWith('file:///')) {  // posix
      filename = url.substring(7);
    } else if (url.startsWith('file://') && url[8] === ':') {  // win
      filename = url.substring(7);
    } else {
      filename = global.HTMLImportsLoader.hrefToAbsolutePath(url);
    }
    const isBinary = guessBinary(url);

    // Node.
    if (tr.isNode) {
      const encoding = isBinary ? undefined : 'utf8';
      return fs.readFileSync(filename, encoding);
    }

    // Vinn.
    try {
      if (asTraceStream) {
        return new tr.b.InMemoryTraceStream(
            new Uint8Array(readbuffer(filename)), isBinary);
      } else if (isBinary) {
        return readbuffer(filename);
      }
      return read(filename);
    } catch (ex) {
      if (ex.message) {
        ex.message += ' when reading ' + filename;
        throw ex;
      }
      throw new Error(ex + ' when reading' + filename);
    }
  }

  function postAsync(url, data) {
    if (tr.isHeadless) {
      throw new Error('Only supported inside a browser');
    }
    return xhr('POST', url, true, data);
  }

  function postTextAsync(url, data) {
    if (tr.isHeadless) {
      throw new Error('Only supported inside a browser');
    }
    return xhr('POST', url, true, data, false);
  }

  return {
    getAsync,
    getSync,
    postAsync,
  };
});


'use strict';

/**
 * @fileoverview Class for managing android-specific model meta data,
 * such as rendering apps, and frames rendered.
 */
tr.exportTo('tr.model.helpers', function() {
  const Frame = tr.model.Frame;
  const Statistics = tr.b.math.Statistics;

  const UI_DRAW_TYPE = {
    NONE: 'none',
    LEGACY: 'legacy',
    MARSHMALLOW: 'marshmallow'
  };

  const UI_THREAD_DRAW_NAMES = {
    'performTraversals': UI_DRAW_TYPE.LEGACY,
    'Choreographer#doFrame': UI_DRAW_TYPE.MARSHMALLOW
  };

  const RENDER_THREAD_DRAW_NAME = 'DrawFrame';
  const RENDER_THREAD_INDEP_DRAW_NAME = 'doFrame';
  const RENDER_THREAD_QUEUE_NAME = 'queueBuffer';
  const RENDER_THREAD_SWAP_NAME = 'eglSwapBuffers';
  const THREAD_SYNC_NAME = 'syncFrameState';

  function getSlicesForThreadTimeRanges(threadTimeRanges) {
    const ret = [];
    threadTimeRanges.forEach(function(threadTimeRange) {
      const slices = [];

      threadTimeRange.thread.sliceGroup.iterSlicesInTimeRange(
          function(slice) { slices.push(slice); },
          threadTimeRange.start, threadTimeRange.end);
      ret.push.apply(ret, slices);
    });
    return ret;
  }

  function makeFrame(threadTimeRanges, surfaceFlinger) {
    const args = {};
    if (surfaceFlinger && surfaceFlinger.hasVsyncs) {
      const start = Statistics.min(threadTimeRanges,
          function(threadTimeRanges) { return threadTimeRanges.start; });
      args.deadline = surfaceFlinger.getFrameDeadline(start);
      args.frameKickoff = surfaceFlinger.getFrameKickoff(start);
    }
    const events = getSlicesForThreadTimeRanges(threadTimeRanges);
    return new Frame(events, threadTimeRanges, args);
  }

  function findOverlappingDrawFrame(renderThread, uiDrawSlice) {
    if (!renderThread) return undefined;

    // of all top level renderthread slices, find the one that has a 'sync'
    // within the uiDrawSlice
    let overlappingDrawFrame;
    const slices = tr.b.iterateOverIntersectingIntervals(
        renderThread.sliceGroup.slices,
        function(range) { return range.start; },
        function(range) { return range.end; },
        uiDrawSlice.start,
        uiDrawSlice.end,
        function(rtDrawSlice) {
          if (rtDrawSlice.title === RENDER_THREAD_DRAW_NAME) {
            const rtSyncSlice = rtDrawSlice.findDescendentSlice(
                THREAD_SYNC_NAME);
            if (rtSyncSlice &&
                rtSyncSlice.start >= uiDrawSlice.start &&
                rtSyncSlice.end <= uiDrawSlice.end) {
              // sync observed which overlaps ui draw. This means the RT draw
              // corresponds to the UI draw
              overlappingDrawFrame = rtDrawSlice;
            }
          }
        });
    return overlappingDrawFrame;
  }

  /**
   * Builds an array of {start, end} ranges grouping common work of a frame
   * that occurs just before performTraversals().
   *
   * Only necessary before Choreographer#doFrame tracing existed.
   */
  function getPreTraversalWorkRanges(uiThread) {
    if (!uiThread) return [];

    // gather all frame work that occurs outside of performTraversals
    const preFrameEvents = [];
    uiThread.sliceGroup.slices.forEach(function(slice) {
      if (slice.title === 'obtainView' ||
          slice.title === 'setupListItem' ||
          slice.title === 'deliverInputEvent' ||
          slice.title === 'RV Scroll') {
        preFrameEvents.push(slice);
      }
    });
    uiThread.asyncSliceGroup.slices.forEach(function(slice) {
      if (slice.title === 'deliverInputEvent') {
        preFrameEvents.push(slice);
      }
    });

    return tr.b.math.mergeRanges(
        tr.b.math.convertEventsToRanges(preFrameEvents),
        3,
        function(events) {
          return {
            start: events[0].min,
            end: events[events.length - 1].max
          };
        });
  }

  function getFrameStartTime(traversalStart, preTraversalWorkRanges) {
    const preTraversalWorkRange =
      tr.b.findClosestIntervalInSortedIntervals(
          preTraversalWorkRanges,
          function(range) { return range.start; },
          function(range) { return range.end; },
          traversalStart,
          3);

    if (preTraversalWorkRange) {
      return preTraversalWorkRange.start;
    }
    return traversalStart;
  }

  function getRtFrameEndTime(rtDrawSlice) {
    // First try and get time that frame is queued:
    const rtQueueSlice = rtDrawSlice.findDescendentSlice(
        RENDER_THREAD_QUEUE_NAME);
    if (rtQueueSlice) {
      return rtQueueSlice.end;
    }
    // failing that, end of swapbuffers:
    const rtSwapSlice = rtDrawSlice.findDescendentSlice(
        RENDER_THREAD_SWAP_NAME);
    if (rtSwapSlice) {
      return rtSwapSlice.end;
    }
    // failing that, end of renderthread frame trace
    return rtDrawSlice.end;
  }

  function getUiThreadDrivenFrames(app) {
    if (!app.uiThread) return [];

    let preTraversalWorkRanges = [];
    if (app.uiDrawType === UI_DRAW_TYPE.LEGACY) {
      preTraversalWorkRanges = getPreTraversalWorkRanges(app.uiThread);
    }

    const frames = [];
    app.uiThread.sliceGroup.slices.forEach(function(slice) {
      if (!(slice.title in UI_THREAD_DRAW_NAMES)) {
        return;
      }

      const threadTimeRanges = [];
      const uiThreadTimeRange = {
        thread: app.uiThread,
        start: getFrameStartTime(slice.start, preTraversalWorkRanges),
        end: slice.end
      };
      threadTimeRanges.push(uiThreadTimeRange);

      // on SDK 21+ devices with RenderThread,
      // account for time taken on RenderThread
      const rtDrawSlice = findOverlappingDrawFrame(
          app.renderThread, slice);
      if (rtDrawSlice) {
        const rtSyncSlice = rtDrawSlice.findDescendentSlice(THREAD_SYNC_NAME);
        if (rtSyncSlice) {
          // Generally, the UI thread is only on the critical path
          // until the start of sync.
          uiThreadTimeRange.end = Math.min(uiThreadTimeRange.end,
              rtSyncSlice.start);
        }

        threadTimeRanges.push({
          thread: app.renderThread,
          start: rtDrawSlice.start,
          end: getRtFrameEndTime(rtDrawSlice)
        });
      }
      frames.push(makeFrame(threadTimeRanges, app.surfaceFlinger));
    });
    return frames;
  }

  function getRenderThreadDrivenFrames(app) {
    if (!app.renderThread) return [];

    const frames = [];
    app.renderThread.sliceGroup.getSlicesOfName(RENDER_THREAD_INDEP_DRAW_NAME)
        .forEach(function(slice) {
          const threadTimeRanges = [{
            thread: app.renderThread,
            start: slice.start,
            end: slice.end
          }];
          frames.push(makeFrame(threadTimeRanges, app.surfaceFlinger));
        });
    return frames;
  }

  function getUiDrawType(uiThread) {
    if (!uiThread) {
      return UI_DRAW_TYPE.NONE;
    }

    const slices = uiThread.sliceGroup.slices;
    for (let i = 0; i < slices.length; i++) {
      if (slices[i].title in UI_THREAD_DRAW_NAMES) {
        return UI_THREAD_DRAW_NAMES[slices[i].title];
      }
    }
    return UI_DRAW_TYPE.NONE;
  }

  function getInputSamples(process) {
    let samples = undefined;
    for (const counterName in process.counters) {
      if (/^android\.aq\:pending/.test(counterName) &&
        process.counters[counterName].numSeries === 1) {
        samples = process.counters[counterName].series[0].samples;
        break;
      }
    }

    if (!samples) return [];

    // output rising edges only, since those are user inputs
    const inputSamples = [];
    let lastValue = 0;
    samples.forEach(function(sample) {
      if (sample.value > lastValue) {
        inputSamples.push(sample);
      }
      lastValue = sample.value;
    });
    return inputSamples;
  }

  function getAnimationAsyncSlices(uiThread) {
    if (!uiThread) return [];

    const slices = [];
    for (const slice of uiThread.asyncSliceGroup.getDescendantEvents()) {
      if (/^animator\:/.test(slice.title)) {
        slices.push(slice);
      }
    }
    return slices;
  }

  /**
   * Model for Android App specific data.
   * @constructor
   */
  function AndroidApp(process, uiThread, renderThread, surfaceFlinger,
      uiDrawType) {
    this.process = process;
    this.uiThread = uiThread;
    this.renderThread = renderThread;
    this.surfaceFlinger = surfaceFlinger;
    this.uiDrawType = uiDrawType;

    this.frames_ = undefined;
    this.inputs_ = undefined;
  }

  AndroidApp.createForProcessIfPossible = function(process, surfaceFlinger) {
    let uiThread = process.getThread(process.pid);
    const uiDrawType = getUiDrawType(uiThread);
    if (uiDrawType === UI_DRAW_TYPE.NONE) {
      uiThread = undefined;
    }
    const renderThreads = process.findAllThreadsNamed('RenderThread');
    const renderThread = (renderThreads.length === 1 ?
        renderThreads[0] : undefined);

    if (uiThread || renderThread) {
      return new AndroidApp(process, uiThread, renderThread, surfaceFlinger,
        uiDrawType);
    }
  };

  AndroidApp.prototype = {
  /**
   * Returns a list of all frames in the trace for the app,
   * constructed on first query.
   */
    getFrames() {
      if (!this.frames_) {
        const uiFrames = getUiThreadDrivenFrames(this);
        const rtFrames = getRenderThreadDrivenFrames(this);
        this.frames_ = uiFrames.concat(rtFrames);

        // merge frames by sorting by end timestamp
        this.frames_.sort(function(a, b) { a.end - b.end; });
      }
      return this.frames_;
    },

    /**
     * Returns list of CounterSamples for each input event enqueued to the app.
     */
    getInputSamples() {
      if (!this.inputs_) {
        this.inputs_ = getInputSamples(this.process);
      }
      return this.inputs_;
    },

    getAnimationAsyncSlices() {
      if (!this.animations_) {
        this.animations_ = getAnimationAsyncSlices(this.uiThread);
      }
      return this.animations_;
    }
  };

  return {
    AndroidApp,
  };
});


'use strict';

/**
 * @fileoverview Class for representing SurfaceFlinger process and its Vsyncs.
 */
tr.exportTo('tr.model.helpers', function() {
  const findLowIndexInSortedArray = tr.b.findLowIndexInSortedArray;

  const VSYNC_SF_NAME = 'android.VSYNC-sf';
  const VSYNC_APP_NAME = 'android.VSYNC-app';
  const VSYNC_FALLBACK_NAME = 'android.VSYNC';

  // when sampling vsync, push samples back by this much to ensure
  // frame start samples *between* vsyncs
  const TIMESTAMP_FUDGE_MS = 0.01;

  function getVsyncTimestamps(process, counterName) {
    let vsync = process.counters[counterName];
    if (!vsync) {
      vsync = process.counters[VSYNC_FALLBACK_NAME];
    }

    if (vsync && vsync.numSeries === 1 && vsync.numSamples > 1) {
      return vsync.series[0].timestamps;
    }
    return undefined;
  }

  /**
   * Model for SurfaceFlinger specific data.
   * @constructor
   */
  function AndroidSurfaceFlinger(process, thread) {
    this.process = process;
    this.thread = thread;

    this.appVsync_ = undefined;
    this.sfVsync_ = undefined;

    this.appVsyncTimestamps_ = getVsyncTimestamps(process, VSYNC_APP_NAME);
    this.sfVsyncTimestamps_ = getVsyncTimestamps(process, VSYNC_SF_NAME);

    // separation of vsync of app vs sf - assume app has at least window of 5ms
    this.deadlineDelayMs_ =
        this.appVsyncTimestamps_ !== this.sfVsyncTimestamps_ ?
        5 : TIMESTAMP_FUDGE_MS;
  }

  AndroidSurfaceFlinger.createForProcessIfPossible = function(process) {
    const mainThread = process.getThread(process.pid);

    // newer versions - main thread, lowercase name, preceeding forward slash
    if (mainThread && mainThread.name &&
        /surfaceflinger/.test(mainThread.name)) {
      return new AndroidSurfaceFlinger(process, mainThread);
    }

    // older versions - another thread is named SurfaceFlinger
    const primaryThreads = process.findAllThreadsNamed('SurfaceFlinger');
    if (primaryThreads.length === 1) {
      return new AndroidSurfaceFlinger(process, primaryThreads[0]);
    }
    return undefined;
  };

  AndroidSurfaceFlinger.prototype = {
    get hasVsyncs() {
      return !!this.appVsyncTimestamps_ && !!this.sfVsyncTimestamps_;
    },

    getFrameKickoff(timestamp) {
      if (!this.hasVsyncs) {
        throw new Error('cannot query vsync info without vsyncs');
      }

      const firstGreaterIndex =
          findLowIndexInSortedArray(this.appVsyncTimestamps_,
              function(x) { return x; },
              timestamp + TIMESTAMP_FUDGE_MS);

      if (firstGreaterIndex < 1) return undefined;
      return this.appVsyncTimestamps_[firstGreaterIndex - 1];
    },

    getFrameDeadline(timestamp) {
      if (!this.hasVsyncs) {
        throw new Error('cannot query vsync info without vsyncs');
      }

      const firstGreaterIndex =
          findLowIndexInSortedArray(this.sfVsyncTimestamps_,
              function(x) { return x; },
              timestamp + this.deadlineDelayMs_);
      if (firstGreaterIndex >= this.sfVsyncTimestamps_.length) {
        return undefined;
      }
      return this.sfVsyncTimestamps_[firstGreaterIndex];
    }
  };

  return {
    AndroidSurfaceFlinger,
  };
});


'use strict';

/**
 * @fileoverview Class for managing android-specific model meta data,
 * such as rendering apps, frames rendered, and SurfaceFlinger.
 */
tr.exportTo('tr.model.helpers', function() {
  const AndroidApp = tr.model.helpers.AndroidApp;
  const AndroidSurfaceFlinger = tr.model.helpers.AndroidSurfaceFlinger;

  const IMPORTANT_SURFACE_FLINGER_SLICES = {
    'doComposition': true,
    'updateTexImage': true,
    'postFramebuffer': true
  };
  const IMPORTANT_UI_THREAD_SLICES = {
    'Choreographer#doFrame': true,
    'performTraversals': true,
    'deliverInputEvent': true
  };
  const IMPORTANT_RENDER_THREAD_SLICES = {
    'doFrame': true
  };

  function iterateImportantThreadSlices(thread, important, callback) {
    if (!thread) return;

    thread.sliceGroup.slices.forEach(function(slice) {
      if (slice.title in important) {
        callback(slice);
      }
    });
  }

  /**
   * Model for Android-specific data.
   * @constructor
   */
  function AndroidModelHelper(model) {
    this.model = model;
    this.apps = [];
    this.surfaceFlinger = undefined;

    const processes = model.getAllProcesses();
    for (let i = 0; i < processes.length && !this.surfaceFlinger; i++) {
      this.surfaceFlinger =
          AndroidSurfaceFlinger.createForProcessIfPossible(processes[i]);
    }

    model.getAllProcesses().forEach(function(process) {
      const app = AndroidApp.createForProcessIfPossible(
          process, this.surfaceFlinger);
      if (app) {
        this.apps.push(app);
      }
    }, this);
  }

  AndroidModelHelper.guid = tr.b.GUID.allocateSimple();

  AndroidModelHelper.supportsModel = function(model) {
    return true;
  };

  AndroidModelHelper.prototype = {
    iterateImportantSlices(callback) {
      if (this.surfaceFlinger) {
        iterateImportantThreadSlices(
            this.surfaceFlinger.thread,
            IMPORTANT_SURFACE_FLINGER_SLICES,
            callback);
      }

      this.apps.forEach(function(app) {
        iterateImportantThreadSlices(
            app.uiThread,
            IMPORTANT_UI_THREAD_SLICES,
            callback);
        iterateImportantThreadSlices(
            app.renderThread,
            IMPORTANT_RENDER_THREAD_SLICES,
            callback);
      });
    }
  };

  return {
    AndroidModelHelper,
  };
});


'use strict';

/**
 * @fileoverview Class for Android-specific Auditing.
 */
tr.exportTo('tr.e.audits', function() {
  const SCHEDULING_STATE = tr.model.SCHEDULING_STATE;
  const Auditor = tr.c.Auditor;
  const AndroidModelHelper = tr.model.helpers.AndroidModelHelper;
  const ColorScheme = tr.b.ColorScheme;
  const Statistics = tr.b.math.Statistics;
  const FRAME_PERF_CLASS = tr.model.FRAME_PERF_CLASS;
  const Alert = tr.model.Alert;
  const EventInfo = tr.model.EventInfo;
  const Scalar = tr.b.Scalar;
  const timeDurationInMs = tr.b.Unit.byName.timeDurationInMs;

  // TODO: extract from VSYNC, since not all devices have vsync near 60fps
  const EXPECTED_FRAME_TIME_MS = 16.67;

  function getStart(e) { return e.start; }
  function getDuration(e) { return e.duration; }
  // used for general UI thread responsiveness alerts, falls back to duration
  function getCpuDuration(e) {
    return (e.cpuDuration !== undefined) ? e.cpuDuration : e.duration;
  }

  function frameIsActivityStart(frame) {
    return frame.associatedEvents.any(x => x.title === 'activityStart');
  }

  function frameMissedDeadline(frame) {
    return frame.args.deadline && frame.args.deadline < frame.end;
  }

  /** Builder object for EventInfo docLink structures */
  function DocLinkBuilder() {
    this.docLinks = [];
  }
  DocLinkBuilder.prototype = {
    addAppVideo(name, videoId) {
      this.docLinks.push({
        label: 'Video Link',
        textContent: ('Android Performance Patterns: ' + name),
        href: 'https://www.youtube.com/watch?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&v=' + videoId // @suppress longLineCheck
      });
      return this;
    },
    addDacRef(name, link) {
      this.docLinks.push({
        label: 'Doc Link',
        textContent: (name + ' documentation'),
        href: 'https://developer.android.com/reference/' + link
      });
      return this;
    },
    build() {
      return this.docLinks;
    }
  };

  /**
   * Auditor for Android-specific traces.
   * @constructor
   */
  function AndroidAuditor(model) {
    Auditor.call(this, model);

    const helper = model.getOrCreateHelper(AndroidModelHelper);
    if (helper.apps.length || helper.surfaceFlinger) {
      this.helper = helper;
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Rendering / RenderThread alerts - only available on SDK 22+
  //////////////////////////////////////////////////////////////////////////////

  AndroidAuditor.viewAlphaAlertInfo_ = new EventInfo(
      'Inefficient View alpha usage',
      'Setting an alpha between 0 and 1 has significant performance costs, if one of the fast alpha paths is not used.', // @suppress longLineCheck
      new DocLinkBuilder()
          .addAppVideo('Hidden Cost of Transparency', 'wIy8g8yNhNk')
          .addDacRef('View#setAlpha()', 'android/view/View.html#setAlpha(float)') // @suppress longLineCheck
          .build());
  AndroidAuditor.saveLayerAlertInfo_ = new EventInfo(
      'Expensive rendering with Canvas#saveLayer()',
      'Canvas#saveLayer() incurs extremely high rendering cost. They disrupt the rendering pipeline when drawn, forcing a flush of drawing content. Instead use View hardware layers, or static Bitmaps. This enables the offscreen buffers to be reused in between frames, and avoids the disruptive render target switch.', // @suppress longLineCheck
      new DocLinkBuilder()
          .addAppVideo('Hidden Cost of Transparency', 'wIy8g8yNhNk')
          .addDacRef('Canvas#saveLayerAlpha()', 'android/graphics/Canvas.html#saveLayerAlpha(android.graphics.RectF, int, int)') // @suppress longLineCheck
          .build());
  AndroidAuditor.getSaveLayerAlerts_ = function(frame) {
    const badAlphaRegEx =
        /^(.+) alpha caused (unclipped )?saveLayer (\d+)x(\d+)$/;
    const saveLayerRegEx = /^(unclipped )?saveLayer (\d+)x(\d+)$/;

    const ret = [];
    const events = [];

    frame.associatedEvents.forEach(function(slice) {
      const match = badAlphaRegEx.exec(slice.title);
      if (match) {
        // due to bug in tracing code on SDK 22, ignore
        // presence of 'unclipped' string in View alpha slices
        const args = { 'view name': match[1],
          'width': parseInt(match[3]),
          'height': parseInt(match[4]) };
        ret.push(new Alert(AndroidAuditor.viewAlphaAlertInfo_,
                           slice.start, [slice], args));
      } else if (saveLayerRegEx.test(slice.title)) {
        events.push(slice);
      }
    }, this);

    if (events.length > ret.length) {
      // more saveLayers than bad alpha can account for - add another alert

      const unclippedSeen = Statistics.sum(events, function(slice) {
        return saveLayerRegEx.exec(slice.title)[1] ? 1 : 0;
      });
      const clippedSeen = events.length - unclippedSeen;
      const earliestStart = Statistics.min(events, function(slice) {
        return slice.start;
      });

      const args = {
        'Unclipped saveLayer count (especially bad!)': unclippedSeen,
        'Clipped saveLayer count': clippedSeen
      };

      events.push(frame);
      ret.push(new Alert(AndroidAuditor.saveLayerAlertInfo_,
                         earliestStart, events, args));
    }

    return ret;
  };


  AndroidAuditor.pathAlertInfo_ = new EventInfo(
      'Path texture churn',
      'Paths are drawn with a mask texture, so when a path is modified / newly drawn, that texture must be generated and uploaded to the GPU. Ensure that you cache paths between frames and do not unnecessarily call Path#reset(). You can cut down on this cost by sharing Path object instances between drawables/views.'); // @suppress longLineCheck
  AndroidAuditor.getPathAlert_ = function(frame) {
    const uploadRegEx = /^Generate Path Texture$/;

    const events = frame.associatedEvents.filter(function(event) {
      return event.title === 'Generate Path Texture';
    });
    const start = Statistics.min(events, getStart);
    const duration = Statistics.sum(events, getDuration);

    if (duration < 3) return undefined;

    events.push(frame);
    return new Alert(AndroidAuditor.pathAlertInfo_, start, events,
        { 'Time spent': new Scalar(timeDurationInMs, duration) });
  };


  AndroidAuditor.uploadAlertInfo_ = new EventInfo(
      'Expensive Bitmap uploads',
      'Bitmaps that have been modified / newly drawn must be uploaded to the GPU. Since this is expensive if the total number of pixels uploaded is large, reduce the amount of Bitmap churn in this animation/context, per frame.'); // @suppress longLineCheck
  AndroidAuditor.getUploadAlert_ = function(frame) {
    const uploadRegEx = /^Upload (\d+)x(\d+) Texture$/;

    const events = [];
    let start = Number.POSITIVE_INFINITY;
    let duration = 0;
    let pixelsUploaded = 0;
    frame.associatedEvents.forEach(function(event) {
      const match = uploadRegEx.exec(event.title);
      if (match) {
        events.push(event);
        start = Math.min(start, event.start);
        duration += event.duration;
        pixelsUploaded += parseInt(match[1]) * parseInt(match[2]);
      }
    });
    if (events.length === 0 || duration < 3) return undefined;

    const mPixels = (pixelsUploaded / 1000000).toFixed(2) + ' million';
    const args = { 'Pixels uploaded': mPixels,
      'Time spent': new Scalar(timeDurationInMs, duration) };
    events.push(frame);
    return new Alert(AndroidAuditor.uploadAlertInfo_, start, events, args);
  };

  //////////////////////////////////////////////////////////////////////////////
  // UI responsiveness alerts
  //////////////////////////////////////////////////////////////////////////////

  AndroidAuditor.ListViewInflateAlertInfo_ = new EventInfo(
      'Inflation during ListView recycling',
      'ListView item recycling involved inflating views. Ensure your Adapter#getView() recycles the incoming View, instead of constructing a new one.'); // @suppress longLineCheck
  AndroidAuditor.ListViewBindAlertInfo_ = new EventInfo(
      'Inefficient ListView recycling/rebinding',
      'ListView recycling taking too much time per frame. Ensure your Adapter#getView() binds data efficiently.'); // @suppress longLineCheck
  AndroidAuditor.getListViewAlert_ = function(frame) {
    const events = frame.associatedEvents.filter(function(event) {
      return event.title === 'obtainView' || event.title === 'setupListItem';
    });
    const duration = Statistics.sum(events, getCpuDuration);

    if (events.length === 0 || duration < 3) return undefined;

    // simplifying assumption - check for *any* inflation.
    // TODO(ccraik): make 'inflate' slices associated events.
    let hasInflation = false;
    for (const event of events) {
      if (event.findDescendentSlice('inflate')) {
        hasInflation = true;
      }
    }

    const start = Statistics.min(events, getStart);
    const args = { 'Time spent': new Scalar(timeDurationInMs, duration) };
    args['ListView items ' + (hasInflation ? 'inflated' : 'rebound')] =
        events.length / 2;
    const eventInfo = hasInflation ? AndroidAuditor.ListViewInflateAlertInfo_ :
        AndroidAuditor.ListViewBindAlertInfo_;
    events.push(frame);
    return new Alert(eventInfo, start, events, args);
  };


  AndroidAuditor.measureLayoutAlertInfo_ = new EventInfo(
      'Expensive measure/layout pass',
      'Measure/Layout took a significant time, contributing to jank. Avoid triggering layout during animations.', // @suppress longLineCheck
      new DocLinkBuilder()
          .addAppVideo('Invalidations, Layouts, and Performance', 'we6poP0kw6E')
          .build());
  AndroidAuditor.getMeasureLayoutAlert_ = function(frame) {
    const events = frame.associatedEvents.filter(function(event) {
      return event.title === 'measure' || event.title === 'layout';
    });
    const duration = Statistics.sum(events, getCpuDuration);

    if (events.length === 0 || duration < 3) return undefined;

    const start = Statistics.min(events, getStart);
    events.push(frame);
    return new Alert(AndroidAuditor.measureLayoutAlertInfo_, start, events,
        { 'Time spent': new Scalar(timeDurationInMs, duration) });
  };


  AndroidAuditor.viewDrawAlertInfo_ = new EventInfo(
      'Long View#draw()',
      'Recording the drawing commands of invalidated Views took a long time. Avoid significant work in View or Drawable custom drawing, especially allocations or drawing to Bitmaps.', // @suppress longLineCheck
      new DocLinkBuilder()
          .addAppVideo('Invalidations, Layouts, and Performance', 'we6poP0kw6E')
          .addAppVideo('Avoiding Allocations in onDraw()', 'HAK5acHQ53E')
          .build());
  AndroidAuditor.getViewDrawAlert_ = function(frame) {
    let slice = undefined;
    for (const event of frame.associatedEvents) {
      if (event.title === 'getDisplayList' ||
          event.title === 'Record View#draw()') {
        slice = event;
        break;
      }
    }

    if (!slice || getCpuDuration(slice) < 3) return undefined;
    return new Alert(AndroidAuditor.viewDrawAlertInfo_, slice.start,
        [slice, frame],
        { 'Time spent': new Scalar(
            timeDurationInMs, getCpuDuration(slice)) });
  };


  //////////////////////////////////////////////////////////////////////////////
  // Runtime alerts
  //////////////////////////////////////////////////////////////////////////////

  AndroidAuditor.blockingGcAlertInfo_ = new EventInfo(
      'Blocking Garbage Collection',
      'Blocking GCs are caused by object churn, and made worse by having large numbers of objects in the heap. Avoid allocating objects during animations/scrolling, and recycle Bitmaps to avoid triggering garbage collection.', // @suppress longLineCheck
      new DocLinkBuilder()
          .addAppVideo('Garbage Collection in Android', 'pzfzz50W5Uo')
          .addAppVideo('Avoiding Allocations in onDraw()', 'HAK5acHQ53E')
          .build());
  AndroidAuditor.getBlockingGcAlert_ = function(frame) {
    const events = frame.associatedEvents.filter(function(event) {
      return event.title === 'DVM Suspend' ||
          event.title === 'GC: Wait For Concurrent';
    });
    const blockedDuration = Statistics.sum(events, getDuration);
    if (blockedDuration < 3) return undefined;

    const start = Statistics.min(events, getStart);
    events.push(frame);
    return new Alert(AndroidAuditor.blockingGcAlertInfo_, start, events,
        { 'Blocked duration': new Scalar(
            timeDurationInMs, blockedDuration) });
  };


  AndroidAuditor.lockContentionAlertInfo_ = new EventInfo(
      'Lock contention',
      'UI thread lock contention is caused when another thread holds a lock that the UI thread is trying to use. UI thread progress is blocked until the lock is released. Inspect locking done within the UI thread, and ensure critical sections are short.'); // @suppress longLineCheck
  AndroidAuditor.getLockContentionAlert_ = function(frame) {
    const events = frame.associatedEvents.filter(function(event) {
      return /^Lock Contention on /.test(event.title);
    });

    const blockedDuration = Statistics.sum(events, getDuration);
    if (blockedDuration < 1) return undefined;

    const start = Statistics.min(events, getStart);
    events.push(frame);
    return new Alert(AndroidAuditor.lockContentionAlertInfo_, start, events,
        { 'Blocked duration': new Scalar(
            timeDurationInMs, blockedDuration) });
  };

  AndroidAuditor.schedulingAlertInfo_ = new EventInfo(
      'Scheduling delay',
      'Work to produce this frame was descheduled for several milliseconds, contributing to jank. Ensure that code on the UI thread doesn\'t block on work being done on other threads, and that background threads (doing e.g. network or bitmap loading) are running at android.os.Process#THREAD_PRIORITY_BACKGROUND or lower so they are less likely to interrupt the UI thread. These background threads should show up with a priority number of 130 or higher in the scheduling section under the Kernel process.'); // @suppress longLineCheck
  AndroidAuditor.getSchedulingAlert_ = function(frame) {
    let totalDuration = 0;
    const totalStats = {};
    for (const ttr of frame.threadTimeRanges) {
      const stats = ttr.thread.getSchedulingStatsForRange(ttr.start, ttr.end);
      for (const [key, value] of Object.entries(stats)) {
        if (!(key in totalStats)) {
          totalStats[key] = 0;
        }
        totalStats[key] += value;
        totalDuration += value;
      }
    }

    // only alert if frame not running for > 3ms. Note that we expect a frame
    // to never describe intentionally idle time.
    if (!(SCHEDULING_STATE.RUNNING in totalStats) ||
        totalDuration === 0 ||
        totalDuration - totalStats[SCHEDULING_STATE.RUNNING] < 3) {
      return;
    }

    const args = {};
    for (const [key, value] of Object.entries(totalStats)) {
      let newKey = key;
      if (key === SCHEDULING_STATE.RUNNABLE) {
        newKey = 'Not scheduled, but runnable';
      } else if (key === SCHEDULING_STATE.UNINTR_SLEEP) {
        newKey = 'Blocking I/O delay';
      }
      args[newKey] = new Scalar(timeDurationInMs, value);
    }

    return new Alert(AndroidAuditor.schedulingAlertInfo_, frame.start, [frame],
                     args);
  };

  AndroidAuditor.prototype = {
    __proto__: Auditor.prototype,

    renameAndSort_() {
      this.model.kernel.important = false;// auto collapse
      // SurfaceFlinger first, other processes sorted by slice count
      this.model.getAllProcesses().forEach(function(process) {
        if (this.helper.surfaceFlinger &&
            process === this.helper.surfaceFlinger.process) {
          if (!process.name) {
            process.name = 'SurfaceFlinger';
          }
          process.sortIndex = Number.NEGATIVE_INFINITY;
          process.important = false; // auto collapse
          return;
        }

        const uiThread = process.getThread(process.pid);
        if (!process.name && uiThread && uiThread.name) {
          if (/^ndroid\./.test(uiThread.name)) {
            uiThread.name = 'a' + uiThread.name;
          }
          process.name = uiThread.name;

          uiThread.name = 'UI Thread';
        }

        process.sortIndex = 0;
        for (const tid in process.threads) {
          process.sortIndex -= process.threads[tid].sliceGroup.slices.length;
        }
      }, this);

      // ensure sequential, relative order for UI/Render/Worker threads
      this.model.getAllThreads().forEach(function(thread) {
        if (thread.tid === thread.parent.pid) {
          thread.sortIndex = -3;
        }
        if (thread.name === 'RenderThread') {
          thread.sortIndex = -2;
        }
        if (/^hwuiTask/.test(thread.name)) {
          thread.sortIndex = -1;
        }
      });
    },

    pushFramesAndJudgeJank_() {
      let badFramesObserved = 0;
      let framesObserved = 0;
      const surfaceFlinger = this.helper.surfaceFlinger;

      this.helper.apps.forEach(function(app) {
        // override frame list
        app.process.frames = app.getFrames();

        app.process.frames.forEach(function(frame) {
          if (frame.totalDuration > EXPECTED_FRAME_TIME_MS * 2) {
            badFramesObserved += 2;
            frame.perfClass = FRAME_PERF_CLASS.TERRIBLE;
          } else if (frame.totalDuration > EXPECTED_FRAME_TIME_MS ||
              frameMissedDeadline(frame)) {
            badFramesObserved++;
            frame.perfClass = FRAME_PERF_CLASS.BAD;
          } else {
            frame.perfClass = FRAME_PERF_CLASS.GOOD;
          }
        });
        framesObserved += app.process.frames.length;
      });

      if (framesObserved) {
        const portionBad = badFramesObserved / framesObserved;
        if (portionBad > 0.3) {
          this.model.faviconHue = 'red';
        } else if (portionBad > 0.05) {
          this.model.faviconHue = 'yellow';
        } else {
          this.model.faviconHue = 'green';
        }
      }
    },

    pushEventInfo_() {
      const appAnnotator = new AppAnnotator();
      this.helper.apps.forEach(function(app) {
        if (app.uiThread) {
          appAnnotator.applyEventInfos(app.uiThread.sliceGroup);
        }
        if (app.renderThread) {
          appAnnotator.applyEventInfos(app.renderThread.sliceGroup);
        }
      });
    },

    runAnnotate() {
      if (!this.helper) return;

      this.renameAndSort_();
      this.pushFramesAndJudgeJank_();
      this.pushEventInfo_();

      this.helper.iterateImportantSlices(function(slice) {
        slice.important = true;
      });
    },

    runAudit() {
      if (!this.helper) return;

      const alerts = this.model.alerts;
      this.helper.apps.forEach(function(app) {
        app.getFrames().forEach(function(frame) {
          alerts.push.apply(alerts, AndroidAuditor.getSaveLayerAlerts_(frame));

          // skip most alerts for neutral or good frames
          if (frame.perfClass === FRAME_PERF_CLASS.NEUTRAL ||
              frame.perfClass === FRAME_PERF_CLASS.GOOD) {
            return;
          }

          let alert = AndroidAuditor.getPathAlert_(frame);
          if (alert) alerts.push(alert);

          alert = AndroidAuditor.getUploadAlert_(frame);
          if (alert) alerts.push(alert);

          alert = AndroidAuditor.getListViewAlert_(frame);
          if (alert) alerts.push(alert);

          alert = AndroidAuditor.getMeasureLayoutAlert_(frame);
          if (alert) alerts.push(alert);

          alert = AndroidAuditor.getViewDrawAlert_(frame);
          if (alert) alerts.push(alert);

          alert = AndroidAuditor.getBlockingGcAlert_(frame);
          if (alert) alerts.push(alert);

          alert = AndroidAuditor.getLockContentionAlert_(frame);
          if (alert) alerts.push(alert);

          alert = AndroidAuditor.getSchedulingAlert_(frame);
          if (alert) alerts.push(alert);
        });
      }, this);

      this.addRenderingInteractionRecords();
      this.addInputInteractionRecords();
    },

    addRenderingInteractionRecords() {
      const events = [];
      this.helper.apps.forEach(function(app) {
        events.push.apply(events, app.getAnimationAsyncSlices());
        events.push.apply(events, app.getFrames());
      });

      const mergerFunction = function(events) {
        const ir = new tr.model.um.ResponseExpectation(
            this.model, 'Rendering',
            events[0].min,
            events[events.length - 1].max - events[0].min);
        this.model.userModel.expectations.push(ir);
      }.bind(this);
      tr.b.math.mergeRanges(
          tr.b.math.convertEventsToRanges(events), 30, mergerFunction);
    },

    addInputInteractionRecords() {
      const inputSamples = [];
      this.helper.apps.forEach(function(app) {
        inputSamples.push.apply(inputSamples, app.getInputSamples());
      });

      const mergerFunction = function(events) {
        const ir = new tr.model.um.ResponseExpectation(
            this.model, 'Input',
            events[0].min,
            events[events.length - 1].max - events[0].min);
        this.model.userModel.expectations.push(ir);
      }.bind(this);
      const inputRanges = inputSamples.map(function(sample) {
        return tr.b.math.Range.fromExplicitRange(
            sample.timestamp, sample.timestamp);
      });
      tr.b.math.mergeRanges(inputRanges, 30, mergerFunction);
    }
  };

  Auditor.register(AndroidAuditor);

  function AppAnnotator() {
    this.titleInfoLookup = new Map();
    this.titleParentLookup = new Map();
    this.build_();
  }

  AppAnnotator.prototype = {
    build_() {
      const registerEventInfo = function(dict) {
        this.titleInfoLookup.set(dict.title, new EventInfo(
            dict.title, dict.description, dict.docLinks));
        if (dict.parents) {
          this.titleParentLookup.set(dict.title, dict.parents);
        }
      }.bind(this);

      registerEventInfo({
        title: 'inflate',
        description: 'Constructing a View hierarchy from pre-processed XML via LayoutInflater#layout. This includes constructing all of the View objects in the hierarchy, and applying styled attributes.'}); // @suppress longLineCheck

      //////////////////////////////////////////////////////////////////////////
      // Adapter view
      //////////////////////////////////////////////////////////////////////////
      registerEventInfo({
        title: 'obtainView',
        description: 'Adapter#getView() called to bind content to a recycled View that is being presented.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'setupListItem',
        description: 'Attached a newly-bound, recycled View to its parent ListView.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'setupGridItem',
        description: 'Attached a newly-bound, recycled View to its parent GridView.'}); // @suppress longLineCheck

      //////////////////////////////////////////////////////////////////////////
      // Choreographer (tracing enabled on M+)
      //////////////////////////////////////////////////////////////////////////
      const choreographerLinks = new DocLinkBuilder()
          .addDacRef('Choreographer', 'android/view/Choreographer.html') // @suppress longLineCheck
          .build();
      registerEventInfo({
        title: 'Choreographer#doFrame',
        docLinks: choreographerLinks,
        description: 'Choreographer executes frame callbacks for inputs, animations, and rendering traversals. When this work is done, a frame will be presented to the user.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'input',
        parents: ['Choreographer#doFrame'],
        docLinks: choreographerLinks,
        description: 'Input callbacks are processed. This generally encompasses dispatching input to Views, as well as any work the Views do to process this input/gesture.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'animation',
        parents: ['Choreographer#doFrame'],
        docLinks: choreographerLinks,
        description: 'Animation callbacks are processed. This is generally minimal work, as animations determine progress for the frame, and push new state to animated objects (such as setting View properties).'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'traversals',
        parents: ['Choreographer#doFrame'],
        docLinks: choreographerLinks,
        description: 'Primary draw traversals. This is the primary traversal of the View hierarchy, including layout and draw passes.'}); // @suppress longLineCheck

      //////////////////////////////////////////////////////////////////////////
      // performTraversals + sub methods
      //////////////////////////////////////////////////////////////////////////
      const traversalParents = ['Choreographer#doFrame', 'performTraversals'];
      const layoutLinks = new DocLinkBuilder()
          .addDacRef('View#Layout', 'android/view/View.html#Layout')
          .build();
      registerEventInfo({
        title: 'performTraversals',
        description: 'A drawing traversal of the View hierarchy, comprised of all layout and drawing needed to produce the frame.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'measure',
        parents: traversalParents,
        docLinks: layoutLinks,
        description: 'First of two phases in view hierarchy layout. Views are asked to size themselves according to constraints supplied by their parent. Some ViewGroups may measure a child more than once to help satisfy their own constraints. Nesting ViewGroups that measure children more than once can lead to excessive and repeated work.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'layout',
        parents: traversalParents,
        docLinks: layoutLinks,
        description: 'Second of two phases in view hierarchy layout, repositioning content and child Views into their new locations.'}); // @suppress longLineCheck
      const drawString = 'Draw pass over the View hierarchy. Every invalidated View will have its drawing commands recorded. On Android versions prior to Lollipop, this would also include the issuing of draw commands to the GPU. Starting with Lollipop, it only includes the recording of commands, and syncing that information to the RenderThread.'; // @suppress longLineCheck
      registerEventInfo({
        title: 'draw',
        parents: traversalParents,
        description: drawString});

      const recordString = 'Every invalidated View\'s drawing commands are recorded. Each will have View#draw() called, and is passed a Canvas that will record and store its drawing commands until it is next invalidated/rerecorded.'; // @suppress longLineCheck
      registerEventInfo({
        title: 'getDisplayList', // Legacy name for compatibility.
        parents: ['draw'],
        description: recordString});
      registerEventInfo({
        title: 'Record View#draw()',
        parents: ['draw'],
        description: recordString});

      registerEventInfo({
        title: 'drawDisplayList',
        parents: ['draw'],
        description: 'Execution of recorded draw commands to generate a frame. This represents the actual formation and issuing of drawing commands to the GPU. On Android L and higher devices, this work is done on a dedicated RenderThread, instead of on the UI Thread.'}); // @suppress longLineCheck

      //////////////////////////////////////////////////////////////////////////
      // RenderThread
      //////////////////////////////////////////////////////////////////////////
      registerEventInfo({
        title: 'DrawFrame',
        description: 'RenderThread portion of the standard UI/RenderThread split frame. This represents the actual formation and issuing of drawing commands to the GPU.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'doFrame',
        description: 'RenderThread animation frame. Represents drawing work done by the RenderThread on a frame where the UI thread did not produce new drawing content.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'syncFrameState',
        description: 'Sync stage between the UI thread and the RenderThread, where the UI thread hands off a frame (including information about modified Views). Time in this method primarily consists of uploading modified Bitmaps to the GPU. After this sync is completed, the UI thread is unblocked, and the RenderThread starts to render the frame.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'flush drawing commands',
        description: 'Issuing the now complete drawing commands to the GPU.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'eglSwapBuffers',
        description: 'Complete GPU rendering of the frame.'}); // @suppress longLineCheck

      //////////////////////////////////////////////////////////////////////////
      // RecyclerView
      //////////////////////////////////////////////////////////////////////////
      registerEventInfo({
        title: 'RV Scroll',
        description: 'RecyclerView is calculating a scroll. If there are too many of these in Systrace, some Views inside RecyclerView might be causing it. Try to avoid using EditText, focusable views or handle them with care.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'RV OnLayout',
        description: 'OnLayout has been called by the View system. If this shows up too many times in Systrace, make sure the children of RecyclerView do not update themselves directly. This will cause a full re-layout but when it happens via the Adapter notifyItemChanged, RecyclerView can avoid full layout calculation.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'RV FullInvalidate',
        description: 'NotifyDataSetChanged or equal has been called. If this is taking a long time, try sending granular notify adapter changes instead of just calling notifyDataSetChanged or setAdapter / swapAdapter. Adding stable ids to your adapter might help.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'RV PartialInvalidate',
        description: 'RecyclerView is rebinding a View. If this is taking a lot of time, consider optimizing your layout or make sure you are not doing extra operations in onBindViewHolder call.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'RV OnBindView',
        description: 'RecyclerView is rebinding a View. If this is taking a lot of time, consider optimizing your layout or make sure you are not doing extra operations in onBindViewHolder call.'}); // @suppress longLineCheck
      registerEventInfo({
        title: 'RV CreateView',
        description: 'RecyclerView is creating a new View. If too many of these are present: 1) There might be a problem in Recycling (e.g. custom Animations that set transient state and prevent recycling or ItemAnimator not implementing the contract properly. See Adapter#onFailedToRecycleView(ViewHolder). 2) There may be too many item view types. Try merging them. 3) There might be too many itemChange animations and not enough space in RecyclerPool. Try increasing your pool size and item cache size.'}); // @suppress longLineCheck

      //////////////////////////////////////////////////////////////////////////
      // Graphics + Composition
      //////////////////////////////////////////////////////////////////////////
      // TODO(ccraik): SurfaceFlinger work
      registerEventInfo({
        title: 'eglSwapBuffers',
        description: 'The CPU has finished producing drawing commands, and is flushing drawing work to the GPU, and posting that buffer to the consumer (which is often SurfaceFlinger window composition). Once this is completed, the GPU can produce the frame content without any involvement from the CPU.'}); // @suppress longLineCheck
    },

    applyEventInfosRecursive_(parentNames, slice) {
      const checkExpectedParentNames = function(expectedParentNames) {
        if (!expectedParentNames) return true;
        return expectedParentNames.some(function(name) {
          return parentNames.has(name);
        });
      };

      // Set EventInfo on the slice if it matches title, and parent.
      if (this.titleInfoLookup.has(slice.title)) {
        if (checkExpectedParentNames(this.titleParentLookup.get(slice.title))) {
          slice.info = this.titleInfoLookup.get(slice.title);
        }
      }

      // Push slice into parentNames, and recurse over subSlices.
      if (slice.subSlices.length > 0) {
        // Increment title in parentName dict.
        if (!parentNames.has(slice.title)) {
          parentNames.set(slice.title, 0);
        }
        parentNames.set(slice.title, parentNames.get(slice.title) + 1);

        // Recurse over subSlices.
        slice.subSlices.forEach(function(subSlice) {
          this.applyEventInfosRecursive_(parentNames, subSlice);
        }, this);

        // Decrement title in parentName dict.
        parentNames.set(slice.title, parentNames.get(slice.title) - 1);
        if (parentNames.get(slice.title) === 0) {
          delete parentNames[slice.title];
        }
      }
    },

    applyEventInfos(sliceGroup) {
      sliceGroup.topLevelSlices.forEach(function(slice) {
        this.applyEventInfosRecursive_(new Map(), slice);
      }, this);
    }
  };

  return {
    AndroidAuditor,
  };
});


'use strict';

/**
 * @fileoverview BlameContext is the Trace Viewer side correspondence of
 * Chrome's class base::trace_event::BlameContext. More specifically,
 *
 * BlameContextSnapshot, which inherits from ObjectSnapshot, is the base class
 * of all snapshots of blame contexts traced in Chrome.
 *
 * BlameContextInstance, which inherits from ObjectInstance, gathers snapshots
 * of the same blame context traced in Chrome.
 *
 * BlameContextSnapshot and BlameContextInstance should never be instantiated
 * directly. Subclasses corresponding to different BlameContexts in Chrome
 * should define their own BlameContextSnapshot and BlameContextInstance
 * specializations for instantiation.
 *
 */
tr.exportTo('tr.e.chrome', function() {
  const ObjectSnapshot = tr.model.ObjectSnapshot;
  const ObjectInstance = tr.model.ObjectInstance;

  function BlameContextSnapshot() {
    ObjectSnapshot.apply(this, arguments);
  }

  BlameContextSnapshot.prototype = {
    __proto__: ObjectSnapshot.prototype,

    /**
     * Returns the parent in the context tree.
     */
    get parentContext() {
      if (this.args.parent instanceof BlameContextSnapshot) {
        return this.args.parent;
      }
      return undefined;
    },

    get userFriendlyName() {
      return 'BlameContext';
    }
  };

  function BlameContextInstance() {
    ObjectInstance.apply(this, arguments);
  }

  BlameContextInstance.prototype = {
    __proto__: ObjectInstance.prototype,

    /**
     * Returns the type of the blame context, to be overriden by subclasses.
     */
    get blameContextType() {
      throw new Error('Not implemented');
    }
  };

  return {
    BlameContextSnapshot,
    BlameContextInstance,
  };
});


'use strict';

/**
 * @fileoverview Trace Viewer side's correspondence of Chrome's
 * content::FrameTreeNode class.
 *
 */
tr.exportTo('tr.e.chrome', function() {
  const BlameContextSnapshot = tr.e.chrome.BlameContextSnapshot;
  const BlameContextInstance = tr.e.chrome.BlameContextInstance;

  function FrameTreeNodeSnapshot() {
    BlameContextSnapshot.apply(this, arguments);
  }

  FrameTreeNodeSnapshot.prototype = {
    __proto__: BlameContextSnapshot.prototype,

    get renderFrame() {
      if (this.args.renderFrame instanceof tr.e.chrome.RenderFrameSnapshot) {
        return this.args.renderFrame;
      }
      return undefined;
    },

    get url() {
      return this.args.url;
    },

    get userFriendlyName() {
      return 'FrameTreeNode';
    }
  };

  tr.model.ObjectSnapshot.subTypes.register(
      FrameTreeNodeSnapshot,
      {typeName: 'FrameTreeNode'});

  function FrameTreeNodeInstance() {
    BlameContextInstance.apply(this, arguments);
  }

  FrameTreeNodeInstance.prototype = {
    __proto__: BlameContextInstance.prototype,

    get blameContextType() {
      return 'Frame';
    }
  };

  tr.model.ObjectInstance.subTypes.register(
      FrameTreeNodeInstance,
      {typeName: 'FrameTreeNode'});

  return {
    FrameTreeNodeSnapshot,
    FrameTreeNodeInstance,
  };
});


'use strict';

/**
 * @fileoverview Trace Viewer side's correspondence of Chrome's
 * content::FrameBlameContext class.
 *
 */
tr.exportTo('tr.e.chrome', function() {
  const BlameContextSnapshot = tr.e.chrome.BlameContextSnapshot;
  const BlameContextInstance = tr.e.chrome.BlameContextInstance;

  function RenderFrameSnapshot() {
    BlameContextSnapshot.apply(this, arguments);
  }

  RenderFrameSnapshot.prototype = {
    __proto__: BlameContextSnapshot.prototype,

    referencedAt(item, object, field) {
      if (item instanceof tr.e.chrome.FrameTreeNodeSnapshot &&
          object === item.args &&
          field === 'renderFrame') {
        this.args.frameTreeNode = item;
      }
    },

    get frameTreeNode() {
      if (this.args.frameTreeNode instanceof
          tr.e.chrome.FrameTreeNodeSnapshot) {
        return this.args.frameTreeNode;
      }
      return undefined;
    },

    get url() {
      if (this.frameTreeNode) {
        return this.frameTreeNode.url;
      }
      return undefined;
    },

    get userFriendlyName() {
      return 'RenderFrame';
    }
  };

  tr.model.ObjectSnapshot.subTypes.register(
      RenderFrameSnapshot,
      {typeName: 'RenderFrame'});

  function RenderFrameInstance() {
    BlameContextInstance.apply(this, arguments);
  }

  RenderFrameInstance.prototype = {
    __proto__: BlameContextInstance.prototype,

    get blameContextType() {
      return 'Frame';
    }
  };

  tr.model.ObjectInstance.subTypes.register(
      RenderFrameInstance,
      {typeName: 'RenderFrame'});

  return {
    RenderFrameSnapshot,
    RenderFrameInstance,
  };
});


'use strict';

/**
 * @fileoverview Trace Viewer side's correspondence of Chrome's
 * content::TopLevelBlameContext class.
 *
 */
tr.exportTo('tr.e.chrome', function() {
  const BlameContextSnapshot = tr.e.chrome.BlameContextSnapshot;
  const BlameContextInstance = tr.e.chrome.BlameContextInstance;

  function TopLevelSnapshot() {
    BlameContextSnapshot.apply(this, arguments);
  }

  TopLevelSnapshot.prototype = {
    __proto__: BlameContextSnapshot.prototype,

    get userFriendlyName() {
      return 'TopLevel';
    }
  };

  tr.model.ObjectSnapshot.subTypes.register(
      TopLevelSnapshot,
      {typeName: 'TopLevel'});

  function TopLevelInstance() {
    BlameContextInstance.apply(this, arguments);
  }

  TopLevelInstance.prototype = {
    __proto__: BlameContextInstance.prototype,

    get blameContextType() {
      return 'TopLevel';
    }
  };

  tr.model.ObjectInstance.subTypes.register(
      TopLevelInstance,
      {typeName: 'TopLevel'});

  return {
    TopLevelSnapshot,
    TopLevelInstance,
  };
});


'use strict';

tr.exportTo('tr.e.blink', function() {
  class BlinkSchedulerAsyncSlice extends tr.model.AsyncSlice {
    get viewSubGroupGroupingKey() {
      if (this.title.startsWith('WebFrameScheduler.')) {
        return 'WebFrame' + this.id;
      }
      return undefined;
    }
  }

  tr.model.AsyncSlice.subTypes.register(BlinkSchedulerAsyncSlice, {
    categoryParts: [
      'renderer.scheduler',
      'disabled-by-default-renderer.scheduler',
    ]
  });

  return {
    BlinkSchedulerAsyncSlice,
  };
});


'use strict';

/**
 * @fileoverview Base class for trace data Auditors.
 */
tr.exportTo('tr.e.audits', function() {
  const Auditor = tr.c.Auditor;

  /**
   * Auditor for Chrome-specific traces.
   * @constructor
   */
  function ChromeAuditor(model) {
    Auditor.call(this, model);

    const modelHelper = this.model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    if (modelHelper && modelHelper.browserHelper) {
      // Must be a browserHelper in order to do audits.
      this.modelHelper = modelHelper;
    } else {
      this.modelHelper = undefined;
    }
  }

  ChromeAuditor.prototype = {
    __proto__: Auditor.prototype,

    runAnnotate() {
      if (!this.modelHelper) return;

      for (const pid in this.modelHelper.rendererHelpers) {
        const rendererHelper = this.modelHelper.rendererHelpers[pid];

        if (rendererHelper.isChromeTracingUI) {
          rendererHelper.process.important = false;
        }
      }
    },

    /**
     * Called by import to install userFriendlyCategoryDriver.
     */
    installUserFriendlyCategoryDriverIfNeeded() {
      this.model.addUserFriendlyCategoryDriver(
          tr.e.chrome.ChromeUserFriendlyCategoryDriver);
    },

    runAudit() {
      if (!this.modelHelper) return;

      this.model.replacePIDRefsInPatchups(
          tr.model.BROWSER_PROCESS_PID_REF,
          this.modelHelper.browserProcess.pid);
      this.model.applyObjectRefPatchups();
    }
  };

  Auditor.register(ChromeAuditor);

  return {
    ChromeAuditor,
  };
});


'use strict';

tr.exportTo('tr.e.chrome', function() {
  const KNOWN_PROPERTIES = {
    absX: 1,
    absY: 1,
    address: 1,
    anonymous: 1,
    childNeeds: 1,
    children: 1,
    classNames: 1,
    col: 1,
    colSpan: 1,
    float: 1,
    height: 1,
    htmlId: 1,
    name: 1,
    posChildNeeds: 1,
    positioned: 1,
    positionedMovement: 1,
    relX: 1,
    relY: 1,
    relativePositioned: 1,
    row: 1,
    rowSpan: 1,
    selfNeeds: 1,
    stickyPositioned: 1,
    tag: 1,
    width: 1
  };

  function LayoutObject(snapshot, args) {
    this.snapshot_ = snapshot;
    this.id_ = args.address;
    this.name_ = args.name;
    this.childLayoutObjects_ = [];
    this.otherProperties_ = {};
    this.tag_ = args.tag;
    this.relativeRect_ = tr.b.math.Rect.fromXYWH(
        args.relX, args.relY, args.width, args.height);
    this.absoluteRect_ = tr.b.math.Rect.fromXYWH(
        args.absX, args.absY, args.width, args.height);
    this.isFloat_ = args.float;
    this.isStickyPositioned_ = args.stickyPositioned;
    this.isPositioned_ = args.positioned;
    this.isRelativePositioned_ = args.relativePositioned;
    this.isAnonymous_ = args.anonymous;
    this.htmlId_ = args.htmlId;
    this.classNames_ = args.classNames;
    this.needsLayoutReasons_ = [];
    if (args.selfNeeds) {
      this.needsLayoutReasons_.push('self');
    }
    if (args.childNeeds) {
      this.needsLayoutReasons_.push('child');
    }
    if (args.posChildNeeds) {
      this.needsLayoutReasons_.push('positionedChild');
    }
    if (args.positionedMovement) {
      this.needsLayoutReasons_.push('positionedMovement');
    }
    this.tableRow_ = args.row;
    this.tableCol_ = args.col;
    this.tableRowSpan_ = args.rowSpan;
    this.tableColSpan_ = args.colSpan;

    if (args.children) {
      args.children.forEach(function(child) {
        this.childLayoutObjects_.push(new LayoutObject(snapshot, child));
      }.bind(this));
    }

    for (const property in args) {
      if (!KNOWN_PROPERTIES[property]) {
        this.otherProperties_[property] = args[property];
      }
    }
  }

  LayoutObject.prototype = {
    get snapshot() {
      return this.snapshot_;
    },

    get id() {
      return this.id_;
    },

    get name() {
      return this.name_;
    },

    get tag() {
      return this.tag_;
    },

    get relativeRect() {
      return this.relativeRect_;
    },

    get absoluteRect() {
      return this.absoluteRect_;
    },

    get isPositioned() {
      return this.isPositioned_;
    },

    get isFloat() {
      return this.isFloat_;
    },

    get isStickyPositioned() {
      return this.isStickyPositioned_;
    },

    get isRelativePositioned() {
      return this.isRelativePositioned_;
    },

    get isAnonymous() {
      return this.isAnonymous_;
    },

    get tableRow() {
      return this.tableRow_;
    },

    get tableCol() {
      return this.tableCol_;
    },

    get tableRowSpan() {
      return this.tableRowSpan_;
    },

    get tableColSpan() {
      return this.tableColSpan_;
    },

    get htmlId() {
      return this.htmlId_;
    },

    get classNames() {
      return this.classNames_;
    },

    get needsLayoutReasons() {
      return this.needsLayoutReasons_;
    },

    get hasChildLayoutObjects() {
      return this.childLayoutObjects_.length > 0;
    },

    get childLayoutObjects() {
      return this.childLayoutObjects_;
    },

    traverseTree(cb, opt_this) {
      cb.call(opt_this, this);
      if (!this.hasChildLayoutObjects) return;
      this.childLayoutObjects.forEach(function(child) {
        child.traverseTree(cb, opt_this);
      });
    },

    get otherPropertyNames() {
      const names = [];
      for (const name in this.otherProperties_) {
        names.push(name);
      }
      return names;
    },

    getProperty(name) {
      return this.otherProperties_[name];
    },

    get previousSnapshotLayoutObject() {
      if (!this.snapshot.previousSnapshot) return undefined;
      return this.snapshot.previousSnapshot.getLayoutObjectById(this.id);
    },

    get nextSnapshotLayoutObject() {
      if (!this.snapshot.nextSnapshot) return undefined;
      return this.snapshot.nextSnapshot.getLayoutObjectById(this.id);
    }
  };

  return {
    LayoutObject,
  };
});


'use strict';

tr.exportTo('tr.e.chrome', function() {
  const ObjectSnapshot = tr.model.ObjectSnapshot;
  const ObjectInstance = tr.model.ObjectInstance;

  function LayoutTreeInstance() {
    ObjectInstance.apply(this, arguments);
  }

  LayoutTreeInstance.prototype = {
    __proto__: ObjectInstance.prototype,
  };

  ObjectInstance.subTypes.register(
      LayoutTreeInstance, {typeName: 'LayoutTree'});

  function LayoutTreeSnapshot() {
    ObjectSnapshot.apply(this, arguments);
    this.rootLayoutObject = new tr.e.chrome.LayoutObject(this, this.args);
  }

  LayoutTreeSnapshot.prototype = {
    __proto__: ObjectSnapshot.prototype,
  };

  ObjectSnapshot.subTypes.register(
      LayoutTreeSnapshot, {typeName: 'LayoutTree'});

  return {
    LayoutTreeInstance,
    LayoutTreeSnapshot,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const Event = tr.model.Event;
  const EventRegistry = tr.model.EventRegistry;

  /**
   * A sample containing data about what fraction of a resource
   * (CPU or GPU) is being used at a given point in time.
   */
  class ResourceUsageSample extends Event {

    /**
     * @param {ResourceUsageSeries } series The ResourceUsageSeries that this
     * sample will be a part of.
     * @param {float} start Time of the sample.
     * @param {float} usage Fraction of the resource (CPU or GPU) in use at the
     * time of the sample.
     */
    constructor(series, start, usage) {
      super();

      this.series_ = series;
      this.start_ = start;
      this.usage_ = usage;
    }

    get series() {
      return this.series_;
    }

    get start() {
      return this.start_;
    }

    set start(value) {
      this.start_ = value;
    }

    get usage() {
      return this.usage_;
    }

    set usage(value) {
      this.usage_ = value;
    }

    addBoundsToRange(range) {
      range.addValue(this.start);
    }
  }

  EventRegistry.register(
      ResourceUsageSample,
      {
        name: 'resourceUsageSample',
        pluralName: 'resourceUsageSamples'
      });

  return {
    ResourceUsageSample,
  };
});


'use strict';

tr.exportTo('tr.model', function() {
  const ResourceUsageSample = tr.model.ResourceUsageSample;

  /**
   * A container holding a time series of samples giving the
   * fraction of usage of a resource (e.g. CPU or GPU) at each
   * sample time.
   */

  class ResourceUsageSeries extends tr.model.EventContainer {
    constructor(device) {
      super();

      this.device_ = device;
      this.samples_ = [];
    }

    get device() {
      return this.device_;
    }

    get samples() {
      return this.samples_;
    }

    get stableId() {
      return this.device_.stableId + '.ResourceUsageSeries';
    }

    /**
     * Adds a usage sample to the series and returns it.
     *
     * Note: Samples must be added in chronological order.
     */
    addUsageSample(ts, val) {
      const sample = new ResourceUsageSample(this, ts, val);
      this.samples_.push(sample);
      return sample;
    }

    /**
     * Returns the total time consumed by a resource (e.g. CPU or GPU) between
     * the specified start and end timestamps (in milliseconds).
     */
    computeResourceTimeConsumedInMs(start, end) {
      const measurementRange = tr.b.math.Range.fromExplicitRange(start, end);

      let resourceTimeInMs = 0;
      let startIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, start) - 1;
      const endIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, end);

      if (startIndex < 0) startIndex = 0;

      for (let i = startIndex; i < endIndex; i++) {
        const sample = this.samples[i];
        const nextSample = this.samples[i + 1];

        const sampleRange = new tr.b.math.Range();
        sampleRange.addValue(sample.start);
        sampleRange.addValue(nextSample ? nextSample.start : sample.start);

        const intersectionRangeInMs = measurementRange.findIntersection(
            sampleRange);

        resourceTimeInMs += intersectionRangeInMs.duration * sample.usage;
      }

      return resourceTimeInMs;
    }

    getSamplesWithinRange(start, end) {
      const startIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, start);
      const endIndex = tr.b.findLowIndexInSortedArray(
          this.samples, x => x.start, end);
      return this.samples.slice(startIndex, endIndex);
    }

    shiftTimestampsForward(amount) {
      for (let i = 0; i < this.samples_.length; ++i) {
        this.samples_[i].start += amount;
      }
    }

    updateBounds() {
      this.bounds.reset();

      if (this.samples_.length === 0) return;

      this.bounds.addValue(this.samples_[0].start);
      this.bounds.addValue(this.samples_[this.samples_.length - 1].start);
    }

    * childEvents() {
      yield* this.samples_;
    }
  }

  return {
    ResourceUsageSeries,
  };
});


'use strict';

tr.exportTo('tr.e.audits', function() {
  /**
   * Auditor that analyzes the model and, if possible, adds data to it
   * showing CPU usage.
   */
  class CpuUsageAuditor extends tr.c.Auditor {

    constructor(model) {
      super();
      this.model_ = model;
    }

    runAnnotate() {
      this.model_.device.cpuUsageSeries = this.computeCpuUsageSeries_(
          this.model_.bounds.min, this.model_.bounds.max,
          this.computeCpuUsage_());
    }

    /**
     * Compute the bin size given the start and end times of the trace.
     */
    computeBinSize_(start, end) {
      const MIN_BIN_SIZE_MS = 1.0;
      const MAX_NUM_BINS = 100000;
      const interval = end - start;
      let binSize = MIN_BIN_SIZE_MS;
      while (binSize * MAX_NUM_BINS < interval) binSize *= 2;
      return binSize;
    }

    /**
     * Returns a CPU usage series from a given set of CPU usage slices.
     * Slices are in the format created by getCpuUsage below.
     */
    computeCpuUsageSeries_(start, end, usageRecords) {
      const series = new tr.model.ResourceUsageSeries();
      if (start === undefined || usageRecords.length === 0) return series;
      const binSize = this.computeBinSize_(start, end);
      const numBins = Math.ceil((end - start) / binSize);
      const arr = new Array(numBins).fill(0);
      for (const record of usageRecords) {
        const firstIndex = Math.ceil((record.start - start) / binSize);
        const lastIndex = Math.floor((record.end - start) / binSize);
        for (let i = firstIndex; i <= lastIndex; i++) arr[i] += record.usage;
      }
      for (let i = 0; i < numBins; i++) {
        series.addUsageSample(start + (i * binSize), arr[i]);
      }
      return series;
    }

    /**
     * Returns a list of CPU usage slices based on tracing data. Thus, this
     * effectively counts only processes that are traced (will not count
     * e.g. background processes)
     */
    computeCpuUsage_() {
      const model = this.model_;
      const result = [];
      for (const pid in model.processes) {
        for (const e of model.processes[pid].getDescendantEvents()) {
          if (!(e instanceof tr.model.ThreadSlice) || e.duration === 0 ||
              e.cpuDuration === undefined) {
            continue;
          }

          // This slice contains the most fine-grained CPU usage information
          // for the area of the trace that it covers but that is not covered
          // by its subslices.
          // The math goes this way:
          //   s.selfTime    : duration of slice s not spent in its subslices.
          //   s.cpuSelfTime : cpuDuration over slice s but not its subslices.
          //
          // We're looking for
          //   s.cpuSelfTimeRatio: average CPU usage over the area covered by
          //                       s but not any of its subslices.
          //                       = s.cpuSelfTime / s.selfTime
          if (e.selfTime === 0 || e.selfTime === undefined ||
              e.cpuSelfTime === undefined) {
            continue;
          }
          const usage = tr.b.math.clamp(e.cpuSelfTime / e.selfTime, 0, 1);

          // Go through the area covered by this slice but not its subslices
          // and add the cpuSelfTimeRatio contribution over this area.
          let lastTime = e.start;
          for (const subslice of e.subSlices) {
            result.push({usage, start: lastTime, end: subslice.start});
            lastTime = subslice.end;
          }
          result.push({usage, start: lastTime, end: e.end});
        }
      }
      return result;
    }
  }

  tr.c.Auditor.register(CpuUsageAuditor);

  return {
    CpuUsageAuditor
  };
});


'use strict';

/**
 * @fileoverview Base class for Windows ETW event parsers.
 *
 * The ETW trace event importer depends on subclasses of
 * Parser to parse event data.  Each subclass corresponds
 * to a group of trace events; e.g. Thread and Process implements
 * decoding of scheduling events.  Parser subclasses must
 * call Parser.register to arrange to be instantiated
 * and their constructor must register their event handlers with the
 * importer.  For example,
 *
 * var Parser = tr.e.importer.etw.Parser;
 *
 * function ThreadParser(importer) {
 *   Parser.call(this, importer);
 *
 *   importer.registerEventHandler(guid, kThreadStartOpcode,
 *       ThreadParser.prototype.decodeStart.bind(this));
 *   importer.registerEventHandler(guid, kThreadEndOpcode,
 *       ThreadParser.prototype.decodeEnd.bind(this));
 * }
 *
 * Parser.register(ThreadParser);
 *
 * When a registered event is found, the associated event handler is invoked:
 *
 *   decodeStart: function(header, decoder) {
 *     [...]
 *     return true;
 *   },
 *
 * If the routine returns false the caller will generate an import error
 * saying there was a problem parsing it.  Handlers can also emit import
 * messages using this.importer.model.importWarning.  If this is done in lieu of
 * the generic import error it may be desirable for the handler to return
 * true.
 *
 */
tr.exportTo('tr.e.importer.etw', function() {
  /**
   * Parses Windows ETW events.
   * @constructor
   */
  function Parser(importer) {
    this.importer = importer;
    this.model = importer.model;
  }

  Parser.prototype = {
    __proto__: Object.prototype
  };

  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  options.mandatoryBaseClass = Parser;
  tr.b.decorateExtensionRegistry(Parser, options);


  return {
    Parser,
  };
});


'use strict';

/**
 * @fileoverview Parses EventTrace events in the Windows event trace format.
 */

tr.exportTo('tr.e.importer.etw', function() {
  const Parser = tr.e.importer.etw.Parser;

  // Constants for EventTrace events.
  const guid = '68FDD900-4A3E-11D1-84F4-0000F80464E3';
  const kEventTraceHeaderOpcode = 0;

  /**
   * Parses Windows EventTrace trace events.
   * @constructor
   */
  function EventTraceParser(importer) {
    Parser.call(this, importer);

    // Register handlers.
    importer.registerEventHandler(guid, kEventTraceHeaderOpcode,
        EventTraceParser.prototype.decodeHeader.bind(this));
  }

  EventTraceParser.prototype = {
    __proto__: Parser.prototype,

    decodeFields(header, decoder) {
      if (header.version !== 2) {
        throw new Error('Incompatible EventTrace event version.');
      }

      const bufferSize = decoder.decodeUInt32();
      const version = decoder.decodeUInt32();
      const providerVersion = decoder.decodeUInt32();
      const numberOfProcessors = decoder.decodeUInt32();
      const endTime = decoder.decodeUInt64ToString();
      const timerResolution = decoder.decodeUInt32();
      const maxFileSize = decoder.decodeUInt32();
      const logFileMode = decoder.decodeUInt32();
      const buffersWritten = decoder.decodeUInt32();
      const startBuffers = decoder.decodeUInt32();
      const pointerSize = decoder.decodeUInt32();
      const eventsLost = decoder.decodeUInt32();
      const cpuSpeed = decoder.decodeUInt32();
      const loggerName = decoder.decodeUInteger(header.is64);
      const logFileName = decoder.decodeUInteger(header.is64);
      const timeZoneInformation = decoder.decodeTimeZoneInformation();
      const padding = decoder.decodeUInt32();
      const bootTime = decoder.decodeUInt64ToString();
      const perfFreq = decoder.decodeUInt64ToString();
      const startTime = decoder.decodeUInt64ToString();
      const reservedFlags = decoder.decodeUInt32();
      const buffersLost = decoder.decodeUInt32();
      const sessionNameString = decoder.decodeW16String();
      const logFileNameString = decoder.decodeW16String();

      return {
        bufferSize,
        version,
        providerVersion,
        numberOfProcessors,
        endTime,
        timerResolution,
        maxFileSize,
        logFileMode,
        buffersWritten,
        startBuffers,
        pointerSize,
        eventsLost,
        cpuSpeed,
        loggerName,
        logFileName,
        timeZoneInformation,
        bootTime,
        perfFreq,
        startTime,
        reservedFlags,
        buffersLost,
        sessionNameString,
        logFileNameString
      };
    },

    decodeHeader(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      // TODO(etienneb): Update the Model with |fields|.
      return true;
    }

  };

  Parser.register(EventTraceParser);

  return {
    EventTraceParser,
  };
});


'use strict';

/**
 * @fileoverview Parses processes events in the Windows event trace format.
 *
 * The Windows process events are:
 *
 * - DCStart: Describes a process that was already running when the trace
 *    started. ETW automatically generates these events for all running
 *    processes at the beginning of the trace.
 * - Start: Describes a process launched during the tracing session.
 * - End: Describes a process that ended during the tracing session.
 * - DCEnd: Describes a process that was still running when the trace ended.
 *
 * See http://msdn.microsoft.com/library/windows/desktop/aa364092.aspx
 */
tr.exportTo('tr.e.importer.etw', function() {
  const Parser = tr.e.importer.etw.Parser;

  // Constants for Process events.
  const guid = '3D6FA8D0-FE05-11D0-9DDA-00C04FD7BA7C';
  const kProcessStartOpcode = 1;
  const kProcessEndOpcode = 2;
  const kProcessDCStartOpcode = 3;
  const kProcessDCEndOpcode = 4;
  const kProcessDefunctOpcode = 39;

  /**
   * Parses Windows process trace events.
   * @constructor
   */
  function ProcessParser(importer) {
    Parser.call(this, importer);

    // Register handlers.
    importer.registerEventHandler(guid, kProcessStartOpcode,
        ProcessParser.prototype.decodeStart.bind(this));
    importer.registerEventHandler(guid, kProcessEndOpcode,
        ProcessParser.prototype.decodeEnd.bind(this));
    importer.registerEventHandler(guid, kProcessDCStartOpcode,
        ProcessParser.prototype.decodeDCStart.bind(this));
    importer.registerEventHandler(guid, kProcessDCEndOpcode,
        ProcessParser.prototype.decodeDCEnd.bind(this));
    importer.registerEventHandler(guid, kProcessDefunctOpcode,
        ProcessParser.prototype.decodeDefunct.bind(this));
  }

  ProcessParser.prototype = {
    __proto__: Parser.prototype,

    decodeFields(header, decoder) {
      if (header.version > 5) {
        throw new Error('Incompatible Process event version.');
      }

      let pageDirectoryBase;
      if (header.version === 1) {
        pageDirectoryBase = decoder.decodeUInteger(header.is64);
      }

      let uniqueProcessKey;
      if (header.version >= 2) {
        uniqueProcessKey = decoder.decodeUInteger(header.is64);
      }

      const processId = decoder.decodeUInt32();
      const parentId = decoder.decodeUInt32();

      let sessionId;
      let exitStatus;
      if (header.version >= 1) {
        sessionId = decoder.decodeUInt32();
        exitStatus = decoder.decodeInt32();
      }

      let directoryTableBase;
      if (header.version >= 3) {
        directoryTableBase = decoder.decodeUInteger(header.is64);
      }

      let flags;
      if (header.version >= 4) {
        flags = decoder.decodeUInt32();
      }

      const userSID = decoder.decodeSID(header.is64);

      let imageFileName;
      if (header.version >= 1) {
        imageFileName = decoder.decodeString();
      }

      let commandLine;
      if (header.version >= 2) {
        commandLine = decoder.decodeW16String();
      }

      let packageFullName;
      let applicationId;
      if (header.version >= 4) {
        packageFullName = decoder.decodeW16String();
        applicationId = decoder.decodeW16String();
      }

      let exitTime;
      if (header.version === 5 && header.opcode === kProcessDefunctOpcode) {
        exitTime = decoder.decodeUInt64ToString();
      }

      return {
        pageDirectoryBase,
        uniqueProcessKey,
        processId,
        parentId,
        sessionId,
        exitStatus,
        directoryTableBase,
        flags,
        userSID,
        imageFileName,
        commandLine,
        packageFullName,
        applicationId,
        exitTime
      };
    },

    decodeStart(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      const process = this.model.getOrCreateProcess(fields.processId);
      if (process.hasOwnProperty('has_ended')) {
        // On Windows, a process ID used by a process could be reused as soon as
        // the process ends (there is no pid cycling like on Linux). However, in
        // a short trace, this is unlikely to happen.
        throw new Error('Process clash detected.');
      }
      process.name = fields.imageFileName;
      return true;
    },

    decodeEnd(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      const process = this.model.getOrCreateProcess(fields.processId);
      process.has_ended = true;
      return true;
    },

    decodeDCStart(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      const process = this.model.getOrCreateProcess(fields.processId);
      if (process.hasOwnProperty('has_ended')) {
        throw new Error('Process clash detected.');
      }
      process.name = fields.imageFileName;
      return true;
    },

    decodeDCEnd(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      const process = this.model.getOrCreateProcess(fields.processId);
      process.has_ended = true;
      return true;
    },

    decodeDefunct(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      // TODO(etienneb): Update the Model with |fields|.
      return true;
    }

  };

  Parser.register(ProcessParser);

  return {
    ProcessParser,
  };
});


'use strict';

/**
 * @fileoverview Parses threads events in the Windows event trace format.
 *
 * The Windows thread events are:
 *
 * - DCStart: Describes a thread that was already running when the trace
 *    started. ETW automatically generates these events for all running
 *    threads at the beginning of the trace.
 * - Start: Describes a thread that started during the tracing session.
 * - End: Describes a thread that ended during the tracing session.
 * - DCEnd: Describes a thread that was still alive when the trace ended.
 *
 * See http://msdn.microsoft.com/library/windows/desktop/aa364132.aspx
 */
tr.exportTo('tr.e.importer.etw', function() {
  const Parser = tr.e.importer.etw.Parser;

  // Constants for Thread events.
  const guid = '3D6FA8D1-FE05-11D0-9DDA-00C04FD7BA7C';
  const kThreadStartOpcode = 1;
  const kThreadEndOpcode = 2;
  const kThreadDCStartOpcode = 3;
  const kThreadDCEndOpcode = 4;
  const kThreadCSwitchOpcode = 36;

  /**
   * Parses Windows threads trace events.
   * @constructor
   */
  function ThreadParser(importer) {
    Parser.call(this, importer);

    // Register handlers.
    importer.registerEventHandler(guid, kThreadStartOpcode,
        ThreadParser.prototype.decodeStart.bind(this));
    importer.registerEventHandler(guid, kThreadEndOpcode,
        ThreadParser.prototype.decodeEnd.bind(this));
    importer.registerEventHandler(guid, kThreadDCStartOpcode,
        ThreadParser.prototype.decodeDCStart.bind(this));
    importer.registerEventHandler(guid, kThreadDCEndOpcode,
        ThreadParser.prototype.decodeDCEnd.bind(this));
    importer.registerEventHandler(guid, kThreadCSwitchOpcode,
        ThreadParser.prototype.decodeCSwitch.bind(this));
  }

  ThreadParser.prototype = {
    __proto__: Parser.prototype,

    decodeFields(header, decoder) {
      if (header.version > 3) {
        throw new Error('Incompatible Thread event version.');
      }

      // Common fields to all Thread events.
      const processId = decoder.decodeUInt32();
      const threadId = decoder.decodeUInt32();

      // Extended fields.
      let stackBase;
      let stackLimit;
      let userStackBase;
      let userStackLimit;
      let affinity;
      let startAddr;
      let win32StartAddr;
      let tebBase;
      let subProcessTag;
      let basePriority;
      let pagePriority;
      let ioPriority;
      let threadFlags;
      let waitMode;

      if (header.version === 1) {
        // On version 1, only start events have extended information.
        if (header.opcode === kThreadStartOpcode ||
            header.opcode === kThreadDCStartOpcode) {
          stackBase = decoder.decodeUInteger(header.is64);
          stackLimit = decoder.decodeUInteger(header.is64);
          userStackBase = decoder.decodeUInteger(header.is64);
          userStackLimit = decoder.decodeUInteger(header.is64);
          startAddr = decoder.decodeUInteger(header.is64);
          win32StartAddr = decoder.decodeUInteger(header.is64);
          waitMode = decoder.decodeInt8();
          decoder.skip(3);
        }
      } else {
        stackBase = decoder.decodeUInteger(header.is64);
        stackLimit = decoder.decodeUInteger(header.is64);
        userStackBase = decoder.decodeUInteger(header.is64);
        userStackLimit = decoder.decodeUInteger(header.is64);

        // Version 2 produces a field named 'startAddr'.
        if (header.version === 2) {
          startAddr = decoder.decodeUInteger(header.is64);
        } else {
          affinity = decoder.decodeUInteger(header.is64);
        }

        win32StartAddr = decoder.decodeUInteger(header.is64);
        tebBase = decoder.decodeUInteger(header.is64);
        subProcessTag = decoder.decodeUInt32();

        if (header.version === 3) {
          basePriority = decoder.decodeUInt8();
          pagePriority = decoder.decodeUInt8();
          ioPriority = decoder.decodeUInt8();
          threadFlags = decoder.decodeUInt8();
        }
      }

      return {
        processId,
        threadId,
        stackBase,
        stackLimit,
        userStackBase,
        userStackLimit,
        affinity,
        startAddr,
        win32StartAddr,
        tebBase,
        subProcessTag,
        waitMode,
        basePriority,
        pagePriority,
        ioPriority,
        threadFlags
      };
    },

    decodeCSwitchFields(header, decoder) {
      if (header.version !== 2) {
        throw new Error('Incompatible Thread event version.');
      }

      // Decode CSwitch payload.
      const newThreadId = decoder.decodeUInt32();
      const oldThreadId = decoder.decodeUInt32();
      const newThreadPriority = decoder.decodeInt8();
      const oldThreadPriority = decoder.decodeInt8();
      const previousCState = decoder.decodeUInt8();
      const spareByte = decoder.decodeInt8();
      const oldThreadWaitReason = decoder.decodeInt8();
      const oldThreadWaitMode = decoder.decodeInt8();
      const oldThreadState = decoder.decodeInt8();
      const oldThreadWaitIdealProcessor = decoder.decodeInt8();
      const newThreadWaitTime = decoder.decodeUInt32();
      const reserved = decoder.decodeUInt32();

      return {
        newThreadId,
        oldThreadId,
        newThreadPriority,
        oldThreadPriority,
        previousCState,
        spareByte,
        oldThreadWaitReason,
        oldThreadWaitMode,
        oldThreadState,
        oldThreadWaitIdealProcessor,
        newThreadWaitTime,
        reserved
      };
    },

    decodeStart(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      this.importer.createThreadIfNeeded(fields.processId, fields.threadId);
      return true;
    },

    decodeEnd(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      this.importer.removeThreadIfPresent(fields.threadId);
      return true;
    },

    decodeDCStart(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      this.importer.createThreadIfNeeded(fields.processId, fields.threadId);
      return true;
    },

    decodeDCEnd(header, decoder) {
      const fields = this.decodeFields(header, decoder);
      this.importer.removeThreadIfPresent(fields.threadId);
      return true;
    },

    decodeCSwitch(header, decoder) {
      const fields = this.decodeCSwitchFields(header, decoder);
      const cpu = this.importer.getOrCreateCpu(header.cpu);
      const newThread =
          this.importer.getThreadFromWindowsTid(fields.newThreadId);

      // Generate the new thread name. If some events were lost, it's possible
      // that information about the new thread or process is not available.
      let newThreadName;
      if (newThread && newThread.userFriendlyName) {
        newThreadName = newThread.userFriendlyName;
      } else {
        const newProcessId = this.importer.getPidFromWindowsTid(
            fields.newThreadId);
        const newProcess = this.model.getProcess(newProcessId);
        let newProcessName;
        if (newProcess) {
          newProcessName = newProcess.name;
        } else {
          newProcessName = 'Unknown process';
        }

        newThreadName =
            newProcessName + ' (tid ' + fields.newThreadId + ')';
      }

      cpu.switchActiveThread(
          header.timestamp,
          {},
          fields.newThreadId,
          newThreadName,
          fields);
      return true;
    }

  };

  Parser.register(ThreadParser);

  return {
    ThreadParser,
  };
});


/**
 * @fileoverview Imports JSON file with the raw payloads from a Windows event
 * trace into the Model. This format is outputted by Chrome running
 * on a Windows system.
 *
 * This importer assumes the events arrived as a JSON file and the payloads are
 * undecoded sequence of bytes in hex format string. The unit tests provide
 * examples of the trace format.
 *
 * The format of the system trace is
 *     {
 *       name: 'ETW',
 *       content: [ <events> ]
 *     }
  *
 * where the <events> are dictionary values with fields.
 *
 *     {
 *       guid: "1234-...",    // The unique GUID for the event.
 *       op: 12,              // The opcode of the event.
 *       ver: 1,              // The encoding version of the event.
 *       cpu: 0,              // The cpu id on which the event was captured.
 *       ts: 1092,            // The thread id on which the event was captured.
 *       payload: "aaaa"      // A base64 encoded string of the raw payload.
 *     }
 *
 * The payload is an undecoded version of the raw event sent by ETW.
 * This importer uses specific parsers to decode recognized events.
 * A parser need to register the recognized event by calling
 * registerEventHandler(guid, opcode, handler). The parser is responsible to
 * decode the payload and update the Model.
 *
 * The payload formats are described there:
 *   http://msdn.microsoft.com/en-us/library/windows/desktop/aa364085(v=vs.85).aspx
 *
 */
'use strict';

tr.exportTo('tr.e.importer.etw', function() {
  // GUID and opcode of a Thread DCStart event, as defined at the link above.
  const kThreadGuid = '3D6FA8D1-FE05-11D0-9DDA-00C04FD7BA7C';
  const kThreadDCStartOpcode = 3;

  /**
   * Represents the raw bytes payload decoder.
   * @constructor
   */
  function Decoder() {
    this.payload_ = new DataView(new ArrayBuffer(256));
  }

  Decoder.prototype = {
    __proto__: Object.prototype,

    reset(base64Payload) {
      const decodedSize = tr.b.Base64.getDecodedBufferLength(base64Payload);
      if (decodedSize > this.payload_.byteLength) {
        this.payload_ = new DataView(new ArrayBuffer(decodedSize));
      }

      tr.b.Base64.DecodeToTypedArray(base64Payload, this.payload_);
      this.position_ = 0;
    },

    skip(length) {
      this.position_ += length;
    },

    decodeUInt8() {
      const result = this.payload_.getUint8(this.position_, true);
      this.position_ += 1;
      return result;
    },

    decodeUInt16() {
      const result = this.payload_.getUint16(this.position_, true);
      this.position_ += 2;
      return result;
    },

    decodeUInt32() {
      const result = this.payload_.getUint32(this.position_, true);
      this.position_ += 4;
      return result;
    },

    decodeUInt64ToString() {
      // Javascript isn't able to manage 64-bit numeric values.
      const low = this.decodeUInt32();
      const high = this.decodeUInt32();
      const lowStr = ('0000000' + low.toString(16)).substr(-8);
      const highStr = ('0000000' + high.toString(16)).substr(-8);
      const result = highStr + lowStr;
      return result;
    },

    decodeInt8() {
      const result = this.payload_.getInt8(this.position_, true);
      this.position_ += 1;
      return result;
    },

    decodeInt16() {
      const result = this.payload_.getInt16(this.position_, true);
      this.position_ += 2;
      return result;
    },

    decodeInt32() {
      const result = this.payload_.getInt32(this.position_, true);
      this.position_ += 4;
      return result;
    },

    decodeInt64ToString() {
      // Javascript isn't able to manage 64-bit numeric values.
      // Fallback to unsigned 64-bit hexa value.
      return this.decodeUInt64ToString();
    },

    decodeUInteger(is64) {
      if (is64) {
        return this.decodeUInt64ToString();
      }
      return this.decodeUInt32();
    },

    decodeString() {
      let str = '';
      while (true) {
        const c = this.decodeUInt8();
        if (!c) return str;
        str = str + String.fromCharCode(c);
      }
    },

    decodeW16String() {
      let str = '';
      while (true) {
        const c = this.decodeUInt16();
        if (!c) return str;
        str = str + String.fromCharCode(c);
      }
    },

    decodeFixedW16String(length) {
      const oldPosition = this.position_;
      let str = '';
      for (let i = 0; i < length; i++) {
        const c = this.decodeUInt16();
        if (!c) break;
        str = str + String.fromCharCode(c);
      }

      // Move the position after the fixed buffer (i.e. wchar[length]).
      this.position_ = oldPosition + 2 * length;
      return str;
    },

    decodeBytes(length) {
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        const c = this.decodeUInt8();
        bytes.push(c);
      }
      return bytes;
    },

    decodeSID(is64) {
      // Decode the TOKEN_USER structure.
      const pSid = this.decodeUInteger(is64);
      const attributes = this.decodeUInt32();

      // Skip padding.
      if (is64) {
        this.decodeUInt32();
      }

      // Decode the SID structure.
      const revision = this.decodeUInt8();
      const subAuthorityCount = this.decodeUInt8();
      this.decodeUInt16();
      this.decodeUInt32();

      if (revision !== 1) {
        throw new Error(
            'Invalid SID revision: could not decode the SID structure.');
      }

      const sid = this.decodeBytes(4 * subAuthorityCount);

      return {
        pSid,
        attributes,
        sid
      };
    },

    decodeSystemTime() {
      // Decode the SystemTime structure.
      const wYear = this.decodeInt16();
      const wMonth = this.decodeInt16();
      const wDayOfWeek = this.decodeInt16();
      const wDay = this.decodeInt16();
      const wHour = this.decodeInt16();
      const wMinute = this.decodeInt16();
      const wSecond = this.decodeInt16();
      const wMilliseconds = this.decodeInt16();
      return {
        wYear,
        wMonth,
        wDayOfWeek,
        wDay,
        wHour,
        wMinute,
        wSecond,
        wMilliseconds
      };
    },

    decodeTimeZoneInformation() {
      // Decode the TimeZoneInformation structure.
      const bias = this.decodeUInt32();
      const standardName = this.decodeFixedW16String(32);
      const standardDate = this.decodeSystemTime();
      const standardBias = this.decodeUInt32();
      const daylightName = this.decodeFixedW16String(32);
      const daylightDate = this.decodeSystemTime();
      const daylightBias = this.decodeUInt32();
      return {
        bias,
        standardName,
        standardDate,
        standardBias,
        daylightName,
        daylightDate,
        daylightBias
      };
    }

  };

  /**
   * Imports Windows ETW kernel events into a specified model.
   * @constructor
   */
  function EtwImporter(model, events) {
    this.importPriority = 3;
    this.model_ = model;
    this.events_ = events;
    this.handlers_ = {};
    this.decoder_ = new Decoder();
    this.walltime_ = undefined;
    this.ticks_ = undefined;
    this.is64bit_ = undefined;

    // A map of tids to their process pid. On Windows, the tid is global to
    // the system and doesn't need to belong to a process. As many events
    // only provide tid, this map allows to retrieve the parent process.
    this.tidsToPid_ = {};

    // Instantiate the parsers; this will register handlers for known events.
    const allTypeInfos = tr.e.importer.etw.Parser.getAllRegisteredTypeInfos();
    this.parsers_ = allTypeInfos.map(
        function(typeInfo) {
          return new typeInfo.constructor(this);
        }, this);
  }

  /**
   * Guesses whether the provided events is from a Windows ETW trace.
   * The object must has a property named 'name' with the value 'ETW' and
   * a property 'content' with all the undecoded events.
   *
   * @return {boolean} True when events is a Windows ETW array.
   */
  EtwImporter.canImport = function(events) {
    if (!events.hasOwnProperty('name') ||
        !events.hasOwnProperty('content') ||
        events.name !== 'ETW') {
      return false;
    }

    return true;
  };

  EtwImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'EtwImporter';
    },

    get model() {
      return this.model_;
    },

    createThreadIfNeeded(pid, tid) {
      this.tidsToPid_[tid] = pid;
    },

    removeThreadIfPresent(tid) {
      this.tidsToPid_[tid] = undefined;
    },

    getPidFromWindowsTid(tid) {
      if (tid === 0) return 0;
      const pid = this.tidsToPid_[tid];
      if (pid === undefined) {
        // Kernel threads are not defined.
        return 0;
      }
      return pid;
    },

    getThreadFromWindowsTid(tid) {
      const pid = this.getPidFromWindowsTid(tid);
      const process = this.model_.getProcess(pid);
      if (!process) return undefined;
      return process.getThread(tid);
    },

    /*
     * Retrieve the Cpu for a given cpuNumber.
     * @return {Cpu} A Cpu corresponding to the given cpuNumber.
     */
    getOrCreateCpu(cpuNumber) {
      const cpu = this.model_.kernel.getOrCreateCpu(cpuNumber);
      return cpu;
    },

    /**
     * Imports the data in this.events_ into this.model_.
     */
    importEvents() {
      this.events_.content.forEach(this.parseInfo.bind(this));

      if (this.walltime_ === undefined || this.ticks_ === undefined) {
        throw Error('Cannot find clock sync information in the system trace.');
      }

      if (this.is64bit_ === undefined) {
        throw Error('Cannot determine pointer size of the system trace.');
      }

      this.events_.content.forEach(this.parseEvent.bind(this));
    },

    importTimestamp(timestamp) {
      const ts = parseInt(timestamp, 16);
      return (ts - this.walltime_ + this.ticks_) / 1000.;
    },

    parseInfo(event) {
      // Retrieve clock sync information.
      if (event.hasOwnProperty('guid') &&
          event.hasOwnProperty('walltime') &&
          event.hasOwnProperty('tick') &&
          event.guid === 'ClockSync') {
        this.walltime_ = parseInt(event.walltime, 16);
        this.ticks_ = parseInt(event.tick, 16);
      }

      // Retrieve pointer size information from a Thread.DCStart event.
      if (this.is64bit_ === undefined &&
          event.hasOwnProperty('guid') &&
          event.hasOwnProperty('op') &&
          event.hasOwnProperty('ver') &&
          event.hasOwnProperty('payload') &&
          event.guid === kThreadGuid &&
          event.op === kThreadDCStartOpcode) {
        const decodedSize = tr.b.Base64.getDecodedBufferLength(event.payload);

        if (event.ver === 1) {
          if (decodedSize >= 52) {
            this.is64bit_ = true;
          } else {
            this.is64bit_ = false;
          }
        } else if (event.ver === 2) {
          if (decodedSize >= 64) {
            this.is64bit_ = true;
          } else {
            this.is64bit_ = false;
          }
        } else if (event.ver === 3) {
          if (decodedSize >= 60) {
            this.is64bit_ = true;
          } else {
            this.is64bit_ = false;
          }
        }
      }

      return true;
    },

    parseEvent(event) {
      if (!event.hasOwnProperty('guid') ||
          !event.hasOwnProperty('op') ||
          !event.hasOwnProperty('ver') ||
          !event.hasOwnProperty('cpu') ||
          !event.hasOwnProperty('ts') ||
          !event.hasOwnProperty('payload')) {
        return false;
      }

      const timestamp = this.importTimestamp(event.ts);

      // Create the event header.
      const header = {
        guid: event.guid,
        opcode: event.op,
        version: event.ver,
        cpu: event.cpu,
        timestamp,
        is64: this.is64bit_
      };

      // Set the payload to decode.
      const decoder = this.decoder_;
      decoder.reset(event.payload);

      // Retrieve the handler to decode the payload.
      const handler = this.getEventHandler(header.guid, header.opcode);
      if (!handler) return false;

      if (!handler(header, decoder)) {
        this.model_.importWarning({
          type: 'parse_error',
          message: 'Malformed ' + header.guid + ' event (' + event.payload + ')'
        });
        return false;
      }

      return true;
    },

    /**
     * Registers a windows ETW event handler used by parseEvent().
     */
    registerEventHandler(guid, opcode, handler) {
      if (this.handlers_[guid] === undefined) {
        this.handlers_[guid] = [];
      }
      this.handlers_[guid][opcode] = handler;
    },

    /**
     * Retrieves a registered event handler.
     */
    getEventHandler(guid, opcode) {
      if (this.handlers_[guid] === undefined) {
        return undefined;
      }
      return this.handlers_[guid][opcode];
    }

  };

  // Register the EtwImporter to the Importer.
  tr.importer.Importer.register(EtwImporter);

  return {
    EtwImporter,
  };
});


'use strict';

tr.exportTo('tr.e.importer.fuchsia', function() {
  const IMPORT_PRIORITY = 0;
  const IDLE_THREAD_THRESHOLD = 6444000000;

  class FuchsiaImporter extends tr.importer.Importer {
    constructor(model, eventData) {
      super(model, eventData);
      this.importPriority = IMPORT_PRIORITY;
      this.model_ = model;
      this.events_ = eventData.events;
      this.parsers_ = [];
      this.threadInfo_ = new Map();
      this.processNames_ = new Map();
    }

    static canImport(eventData) {
      if (eventData instanceof tr.b.TraceStream) {
        if (eventData.isBinary) return false;
        eventData = eventData.header;
      }

      if (eventData instanceof Object && eventData.type === 'fuchsia') {
        return true;
      }

      return false;
    }

    get importerName() {
      return 'FuchsiaImporter';
    }

    get model() {
      return this.model_;
    }

    importClockSyncMarkers() {
    }

    finalizeImport() {
    }

    processContextSwitchEvent_(event) {
      let tid = event.in.tid;
      let threadName = tid.toString();
      let procName = '';

      if (this.threadInfo_.has(tid)) {
        const threadInfo = this.threadInfo_.get(tid);
        threadName = threadInfo.name;
        const pid = threadInfo.pid;
        if (this.processNames_.has(pid)) {
          procName = this.processNames_.get(pid) + ':';
        }
      }

      const name = procName + threadName;

      // There's not a good way to detect the kernel's idle threads right now
      // so we're stuck with assuming that large numbered threads are idle ones.
      if (tid > IDLE_THREAD_THRESHOLD) {
        tid = undefined; // Fake kernel idle task
      }

      const cpu = this.model_.kernel.getOrCreateCpu(event.cpu);
      cpu.switchActiveThread(tr.b.Unit.timestampFromUs(event.ts),
                             {}, tid, name, tid);
    }

    processProcessInfoEvent_(event) {
      const process = this.model_.getOrCreateProcess(event.pid);
      process.name = event.name;
      this.processNames_.set(event.pid, event.name);

      if ('sort_index' in event) {
        process.sortIndex = event.sort_index;
      }
    }

    processThreadInfoEvent_(event) {
      const thread = this.model_.getOrCreateProcess(event.pid).
          getOrCreateThread(event.tid);
      thread.name = event.name;
      this.threadInfo_.set(event.tid, {'name': event.name, 'pid': event.pid});

      if ('sort_index' in event) {
        const thread = this.model_.getOrCreateProcess(event.pid).
            getOrCreateThread(event.tid);
        thread.sortIndex = event.sort_index;
      }
    }

    processEvent_(event) {
      switch (event.ph) {
        case 'k':
          this.processContextSwitchEvent_(event);
          break;
        case 'p':
          this.processProcessInfoEvent_(event);
          break;
        case 't':
          this.processThreadInfoEvent_(event);
          break;
      }
    }

    /**
     * Imports the data in this.events_ into model_.
     */
    importEvents() {
      for (const event of this.events_) {
        this.processEvent_(event);
      }
    }
  }

  tr.importer.Importer.register(FuchsiaImporter);

  return {
    FuchsiaImporter,
    IMPORT_PRIORITY,
  };
});

!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a||t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=s.assign({level:_,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:u,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new h,this.strm.avail_out=0;var a=r.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==f)throw new Error(l[a]);if(e.header&&r.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===d.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(a=r.deflateSetDictionary(this.strm,n))!==f)throw new Error(l[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg||l[a.err];return a.result}var r=t("./zlib/deflate"),s=t("./utils/common"),o=t("./utils/strings"),l=t("./zlib/messages"),h=t("./zlib/zstream"),d=Object.prototype.toString,f=0,_=-1,u=0,c=8;i.prototype.push=function(t,e){var a,i,n=this.strm,l=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:!0===e?4:0,"string"==typeof t?n.input=o.string2buf(t):"[object ArrayBuffer]"===d.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new s.Buf8(l),n.next_out=0,n.avail_out=l),1!==(a=r.deflate(n,i))&&a!==f)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(o.buf2binstring(s.shrinkBuf(n.output,n.next_out))):this.onData(s.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&1!==a);return 4===i?(a=r.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===f):2!==i||(this.onEnd(f),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===f&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=function(t,e){return e=e||{},e.raw=!0,n(t,e)},a.gzip=function(t,e){return e=e||{},e.gzip=!0,n(t,e)}},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=s.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new d,this.strm.avail_out=0;var a=r.inflateInit2(this.strm,e.windowBits);if(a!==l.Z_OK)throw new Error(h[a]);this.header=new f,r.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg||h[a.err];return a.result}var r=t("./zlib/inflate"),s=t("./utils/common"),o=t("./utils/strings"),l=t("./zlib/constants"),h=t("./zlib/messages"),d=t("./zlib/zstream"),f=t("./zlib/gzheader"),_=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,h,d,f,u=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:!0===e?l.Z_FINISH:l.Z_NO_FLUSH,"string"==typeof t?u.input=o.binstring2buf(t):"[object ArrayBuffer]"===_.call(t)?u.input=new Uint8Array(t):u.input=t,u.next_in=0,u.avail_in=u.input.length;do{if(0===u.avail_out&&(u.output=new s.Buf8(c),u.next_out=0,u.avail_out=c),(a=r.inflate(u,l.Z_NO_FLUSH))===l.Z_NEED_DICT&&b&&(f="string"==typeof b?o.string2buf(b):"[object ArrayBuffer]"===_.call(b)?new Uint8Array(b):b,a=r.inflateSetDictionary(this.strm,f)),a===l.Z_BUF_ERROR&&!0===g&&(a=l.Z_OK,g=!1),a!==l.Z_STREAM_END&&a!==l.Z_OK)return this.onEnd(a),this.ended=!0,!1;u.next_out&&(0!==u.avail_out&&a!==l.Z_STREAM_END&&(0!==u.avail_in||i!==l.Z_FINISH&&i!==l.Z_SYNC_FLUSH)||("string"===this.options.to?(n=o.utf8border(u.output,u.next_out),h=u.next_out-n,d=o.buf2string(u.output,n),u.next_out=h,u.avail_out=c-h,h&&s.arraySet(u.output,u.output,n,h,0),this.onData(d)):this.onData(s.shrinkBuf(u.output,u.next_out)))),0===u.avail_in&&0===u.avail_out&&(g=!0)}while((u.avail_in>0||0===u.avail_out)&&a!==l.Z_STREAM_END);return a===l.Z_STREAM_END&&(i=l.Z_FINISH),i===l.Z_FINISH?(a=r.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===l.Z_OK):i!==l.Z_SYNC_FLUSH||(this.onEnd(l.Z_OK),u.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===l.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=function(t,e){return e=e||{},e.raw=!0,n(t,e)},a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var n in a)i(a,n)&&(t[n]=a[n])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var r={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(a,a+i),n);else for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},s={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,r)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,s))},a.setTyped(n)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)55296==(64512&(a=t.charCodeAt(r)))&&r+1<o&&56320==(64512&(i=t.charCodeAt(r+1)))&&(a=65536+(a-55296<<10)+(i-56320),r++),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)55296==(64512&(a=t.charCodeAt(r)))&&r+1<o&&56320==(64512&(i=t.charCodeAt(r+1)))&&(a=65536+(a-55296<<10)+(i-56320),r++),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if((r=t[a++])<128)h[n++]=r;else if((s=o[r])>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for((e=e||t.length)>t.length&&(e=t.length),a=e-1;a>=0&&128==(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";e.exports=function(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){a-=s=a>2e3?2e3:a;do{r=r+(n=n+e[i++]|0)|0}while(--s);n%=65521,r%=65521}return n|r<<16|0}},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";var i=function(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}();e.exports=function(t,e,a,n){var r=i,s=n+a;t^=-1;for(var o=n;o<s;o++)t=t>>>8^r[255&(t^e[o])];return-1^t}},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=A[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(z.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){B._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,z.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=S(t.adler,e,n,a):2===t.state.wrap&&(t.adler=E(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-it?t.strstart-(t.w_size-it):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+at,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do{}while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=at-(_-r),r=_-at,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}}while((e=f[e&d])>l&&0!=--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-it)){z.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,e=a=t.hash_size;do{i=t.head[--e],t.head[e]=i>=s?i-s:0}while(--a);e=a=s;do{i=t.prev[--e],t.prev[e]=i>=s?i-s:0}while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=et)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+et-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<et)););}while(t.lookahead<it&&0!==t.strm.avail_in)}function u(t,e){for(var a,i;;){if(t.lookahead<it){if(_(t),t.lookahead<it&&e===Z)return _t;if(0===t.lookahead)break}if(a=0,t.lookahead>=et&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-it&&(t.match_length=f(t,a)),t.match_length>=et)if(i=B._tr_tally(t,t.strstart-t.match_start,t.match_length-et),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=et){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=t.strstart<et-1?t.strstart:et-1,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function c(t,e){for(var a,i,n;;){if(t.lookahead<it){if(_(t),t.lookahead<it&&e===Z)return _t;if(0===t.lookahead)break}if(a=0,t.lookahead>=et&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=et-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-it&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===H||t.match_length===et&&t.strstart-t.match_start>4096)&&(t.match_length=et-1)),t.prev_length>=et&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-et,i=B._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-et),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+et-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=et-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return _t}else if(t.match_available){if((i=B._tr_tally(t,0,t.window[t.strstart-1]))&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return _t}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=B._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<et-1?t.strstart:et-1,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function b(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=at){if(_(t),t.lookahead<=at&&e===Z)return _t;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=et&&t.strstart>0&&(n=t.strstart-1,(i=s[n])===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+at;do{}while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=at-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=et?(a=B._tr_tally(t,1,t.match_length-et),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function g(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===Z)return _t;break}if(t.match_length=0,a=B._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?_t:ut}function m(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function w(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=x[t.level].max_lazy,t.good_match=x[t.level].good_length,t.nice_match=x[t.level].nice_length,t.max_chain_length=x[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=et-1,t.match_available=0,t.ins_h=0}function p(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=q,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new z.Buf16(2*$),this.dyn_dtree=new z.Buf16(2*(2*Q+1)),this.bl_tree=new z.Buf16(2*(2*V+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new z.Buf16(tt+1),this.heap=new z.Buf16(2*J+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new z.Buf16(2*J+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function v(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Y,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?rt:dt,t.adler=2===e.wrap?0:1,e.last_flush=Z,B._tr_init(e),D):i(t,U)}function k(t){var e=v(t);return e===D&&w(t.state),e}function y(t,e,a,n,r,s){if(!t)return U;var o=1;if(e===L&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>G||a!==q||n<8||n>15||e<0||e>9||s<0||s>M)return i(t,U);8===n&&(n=9);var l=new p;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+et-1)/et),l.window=new z.Buf8(2*l.w_size),l.head=new z.Buf16(l.hash_size),l.prev=new z.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new z.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,k(t)}var x,z=t("../utils/common"),B=t("./trees"),S=t("./adler32"),E=t("./crc32"),A=t("./messages"),Z=0,R=1,C=3,N=4,O=5,D=0,I=1,U=-2,T=-3,F=-5,L=-1,H=1,j=2,K=3,M=4,P=0,Y=2,q=8,G=9,X=15,W=8,J=286,Q=30,V=19,$=2*J+1,tt=15,et=3,at=258,it=at+et+1,nt=32,rt=42,st=69,ot=73,lt=91,ht=103,dt=113,ft=666,_t=1,ut=2,ct=3,bt=4,gt=3;x=[new m(0,0,0,0,function(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===Z)return _t;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return _t;if(t.strstart-t.block_start>=t.w_size-it&&(o(t,!1),0===t.strm.avail_out))return _t}return t.insert=0,e===N?(o(t,!0),0===t.strm.avail_out?ct:bt):(t.strstart>t.block_start&&(o(t,!1),t.strm.avail_out),_t)}),new m(4,4,8,4,u),new m(4,5,16,8,u),new m(4,6,32,32,u),new m(4,4,16,16,c),new m(8,16,32,32,c),new m(8,16,128,128,c),new m(8,32,128,256,c),new m(32,128,258,1024,c),new m(32,258,258,4096,c)],a.deflateInit=function(t,e){return y(t,e,q,X,W,P)},a.deflateInit2=y,a.deflateReset=k,a.deflateResetKeep=v,a.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?U:(t.state.gzhead=e,D):U},a.deflate=function(t,e){var a,o,d,f;if(!t||!t.state||e>O||e<0)return t?i(t,U):U;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===ft&&e!==N)return i(t,0===t.avail_out?F:U);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===rt)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=j||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=E(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=st):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=j||o.level<2?4:0),l(o,gt),o.status=dt);else{var _=q+(o.w_bits-8<<4)<<8;_|=(o.strategy>=j||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(_|=nt),_+=31-_%31,o.status=dt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===st)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=ot)}else o.status=ot;if(o.status===ot)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=lt)}else o.status=lt;if(o.status===lt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=E(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=ht)}else o.status=ht;if(o.status===ht&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=dt)):o.status=dt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,D}else if(0===t.avail_in&&n(e)<=n(a)&&e!==N)return i(t,F);if(o.status===ft&&0!==t.avail_in)return i(t,F);if(0!==t.avail_in||0!==o.lookahead||e!==Z&&o.status!==ft){var u=o.strategy===j?g(o,e):o.strategy===K?b(o,e):x[o.level].func(o,e);if(u!==ct&&u!==bt||(o.status=ft),u===_t||u===ct)return 0===t.avail_out&&(o.last_flush=-1),D;if(u===ut&&(e===R?B._tr_align(o):e!==O&&(B._tr_stored_block(o,0,0,!1),e===C&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,D}return e!==N?D:o.wrap<=0?I:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?D:I)},a.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==rt&&e!==st&&e!==ot&&e!==lt&&e!==ht&&e!==dt&&e!==ft?i(t,U):(t.state=null,e===dt?i(t,T):D):U},a.deflateSetDictionary=function(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return U;if(a=t.state,2===(s=a.wrap)||1===s&&a.status!==rt||a.lookahead)return U;for(1===s&&(t.adler=S(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new z.Buf8(a.w_size),z.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=et;){i=a.strstart,n=a.lookahead-(et-1);do{a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+et-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++}while(--n);a.strstart=i,a.lookahead=et-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=et-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,D},a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],10:[function(t,e,a){"use strict";e.exports=function(t,e){var a,i,n,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S;a=t.state,i=t.next_in,B=t.input,n=i+(t.avail_in-5),r=t.next_out,S=t.output,s=r-(e-t.avail_out),o=r+(t.avail_out-257),l=a.dmax,h=a.wsize,d=a.whave,f=a.wnext,_=a.window,u=a.hold,c=a.bits,b=a.lencode,g=a.distcode,m=(1<<a.lenbits)-1,w=(1<<a.distbits)-1;t:do{c<15&&(u+=B[i++]<<c,c+=8,u+=B[i++]<<c,c+=8),p=b[u&m];e:for(;;){if(v=p>>>24,u>>>=v,c-=v,0===(v=p>>>16&255))S[r++]=65535&p;else{if(!(16&v)){if(0==(64&v)){p=b[(65535&p)+(u&(1<<v)-1)];continue e}if(32&v){a.mode=12;break t}t.msg="invalid literal/length code",a.mode=30;break t}k=65535&p,(v&=15)&&(c<v&&(u+=B[i++]<<c,c+=8),k+=u&(1<<v)-1,u>>>=v,c-=v),c<15&&(u+=B[i++]<<c,c+=8,u+=B[i++]<<c,c+=8),p=g[u&w];a:for(;;){if(v=p>>>24,u>>>=v,c-=v,!(16&(v=p>>>16&255))){if(0==(64&v)){p=g[(65535&p)+(u&(1<<v)-1)];continue a}t.msg="invalid distance code",a.mode=30;break t}if(y=65535&p,v&=15,c<v&&(u+=B[i++]<<c,(c+=8)<v&&(u+=B[i++]<<c,c+=8)),(y+=u&(1<<v)-1)>l){t.msg="invalid distance too far back",a.mode=30;break t}if(u>>>=v,c-=v,v=r-s,y>v){if((v=y-v)>d&&a.sane){t.msg="invalid distance too far back",a.mode=30;break t}if(x=0,z=_,0===f){if(x+=h-v,v<k){k-=v;do{S[r++]=_[x++]}while(--v);x=r-y,z=S}}else if(f<v){if(x+=h+f-v,(v-=f)<k){k-=v;do{S[r++]=_[x++]}while(--v);if(x=0,f<k){k-=v=f;do{S[r++]=_[x++]}while(--v);x=r-y,z=S}}}else if(x+=f-v,v<k){k-=v;do{S[r++]=_[x++]}while(--v);x=r-y,z=S}for(;k>2;)S[r++]=z[x++],S[r++]=z[x++],S[r++]=z[x++],k-=3;k&&(S[r++]=z[x++],k>1&&(S[r++]=z[x++]))}else{x=r-y;do{S[r++]=S[x++],S[r++]=S[x++],S[r++]=S[x++],k-=3}while(k>2);k&&(S[r++]=S[x++],k>1&&(S[r++]=S[x++]))}break}}break}}while(i<n&&r<o);i-=k=c>>3,u&=(1<<(c-=k<<3))-1,t.next_in=i,t.next_out=r,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=r<o?o-r+257:257-(r-o),a.hold=u,a.bits=c}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new u.Buf16(320),this.work=new u.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=N,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new u.Buf32(dt),e.distcode=e.distdyn=new u.Buf32(ft),e.sane=1,e.back=-1,z):E}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):E}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?E:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):E}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,(a=o(t,e))!==z&&(t.state=null),a):E}function h(t){if(ut){var e;for(f=new u.Buf32(512),_=new u.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(m(p,t.lens,0,288,f,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;m(v,t.lens,0,32,_,0,t.work,{bits:5}),ut=!1}t.lencode=f,t.lenbits=9,t.distcode=_,t.distbits=5}function d(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new u.Buf8(r.wsize)),i>=r.wsize?(u.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):((n=r.wsize-r.wnext)>i&&(n=i),u.arraySet(r.window,e,a-i,n,r.wnext),(i-=n)?(u.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}var f,_,u=t("../utils/common"),c=t("./adler32"),b=t("./crc32"),g=t("./inffast"),m=t("./inftrees"),w=0,p=1,v=2,k=4,y=5,x=6,z=0,B=1,S=2,E=-2,A=-3,Z=-4,R=-5,C=8,N=1,O=2,D=3,I=4,U=5,T=6,F=7,L=8,H=9,j=10,K=11,M=12,P=13,Y=14,q=15,G=16,X=17,W=18,J=19,Q=20,V=21,$=22,tt=23,et=24,at=25,it=26,nt=27,rt=28,st=29,ot=30,lt=31,ht=32,dt=852,ft=592,_t=15,ut=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=function(t){return l(t,_t)},a.inflateInit2=l,a.inflate=function(t,e){var a,n,r,s,o,l,f,_,dt,ft,_t,ut,ct,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new u.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return E;(a=t.state).mode===M&&(a.mode=P),o=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,dt=a.bits,ft=l,_t=f,xt=z;t:for(;;)switch(a.mode){case N:if(0===a.wrap){a.mode=P;break}for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0),_=0,dt=0,a.mode=O;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=ot;break}if((15&_)!==C){t.msg="unknown compression method",a.mode=ot;break}if(_>>>=4,dt-=4,yt=8+(15&_),0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=ot;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?j:M,_=0,dt=0;break;case O:for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(a.flags=_,(255&a.flags)!==C){t.msg="unknown compression method",a.mode=ot;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=ot;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0)),_=0,dt=0,a.mode=D;case D:for(;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=b(a.check,Et,4,0)),_=0,dt=0,a.mode=I;case I:for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0)),_=0,dt=0,a.mode=U;case U:if(1024&a.flags){for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=b(a.check,Et,2,0)),_=0,dt=0}else a.head&&(a.head.extra=null);a.mode=T;case T:if(1024&a.flags&&((ut=a.length)>l&&(ut=l),ut&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),u.arraySet(a.head.extra,n,s,ut,yt)),512&a.flags&&(a.check=b(a.check,n,ut,s)),l-=ut,s+=ut,a.length-=ut),a.length))break t;a.length=0,a.mode=F;case F:if(2048&a.flags){if(0===l)break t;ut=0;do{yt=n[s+ut++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt))}while(yt&&ut<l);if(512&a.flags&&(a.check=b(a.check,n,ut,s)),l-=ut,s+=ut,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=L;case L:if(4096&a.flags){if(0===l)break t;ut=0;do{yt=n[s+ut++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt))}while(yt&&ut<l);if(512&a.flags&&(a.check=b(a.check,n,ut,s)),l-=ut,s+=ut,yt)break t}else a.head&&(a.head.comment=null);a.mode=H;case H:if(512&a.flags){for(;dt<16;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=ot;break}_=0,dt=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=M;break;case j:for(;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}t.adler=a.check=i(_),_=0,dt=0,a.mode=K;case K:if(0===a.havedict)return t.next_out=o,t.avail_out=f,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=dt,S;t.adler=a.check=1,a.mode=M;case M:if(e===y||e===x)break t;case P:if(a.last){_>>>=7&dt,dt-=7&dt,a.mode=nt;break}for(;dt<3;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}switch(a.last=1&_,_>>>=1,dt-=1,3&_){case 0:a.mode=Y;break;case 1:if(h(a),a.mode=Q,e===x){_>>>=2,dt-=2;break t}break;case 2:a.mode=X;break;case 3:t.msg="invalid block type",a.mode=ot}_>>>=2,dt-=2;break;case Y:for(_>>>=7&dt,dt-=7&dt;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if((65535&_)!=(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=ot;break}if(a.length=65535&_,_=0,dt=0,a.mode=q,e===x)break t;case q:a.mode=G;case G:if(ut=a.length){if(ut>l&&(ut=l),ut>f&&(ut=f),0===ut)break t;u.arraySet(r,n,s,ut,o),l-=ut,s+=ut,f-=ut,o+=ut,a.length-=ut;break}a.mode=M;break;case X:for(;dt<14;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(a.nlen=257+(31&_),_>>>=5,dt-=5,a.ndist=1+(31&_),_>>>=5,dt-=5,a.ncode=4+(15&_),_>>>=4,dt-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=ot;break}a.have=0,a.mode=W;case W:for(;a.have<a.ncode;){for(;dt<3;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.lens[At[a.have++]]=7&_,_>>>=3,dt-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=m(w,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=ot;break}a.have=0,a.mode=J;case J:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(wt<16)_>>>=gt,dt-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(_>>>=gt,dt-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=ot;break}yt=a.lens[a.have-1],ut=3+(3&_),_>>>=2,dt-=2}else if(17===wt){for(Bt=gt+3;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}dt-=gt,yt=0,ut=3+(7&(_>>>=gt)),_>>>=3,dt-=3}else{for(Bt=gt+7;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}dt-=gt,yt=0,ut=11+(127&(_>>>=gt)),_>>>=7,dt-=7}if(a.have+ut>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=ot;break}for(;ut--;)a.lens[a.have++]=yt}}if(a.mode===ot)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=ot;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=m(p,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=ot;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=m(v,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=ot;break}if(a.mode=Q,e===x)break t;case Q:a.mode=V;case V:if(l>=6&&f>=258){t.next_out=o,t.avail_out=f,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=dt,g(t,_t),o=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,dt=a.bits,a.mode===M&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(mt&&0==(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}_>>>=pt,dt-=pt,a.back+=pt}if(_>>>=gt,dt-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=it;break}if(32&mt){a.back=-1,a.mode=M;break}if(64&mt){t.msg="invalid literal/length code",a.mode=ot;break}a.extra=15&mt,a.mode=$;case $:if(a.extra){for(Bt=a.extra;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,dt-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=tt;case tt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(0==(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=dt);){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}_>>>=pt,dt-=pt,a.back+=pt}if(_>>>=gt,dt-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=ot;break}a.offset=wt,a.extra=15&mt,a.mode=et;case et:if(a.extra){for(Bt=a.extra;dt<Bt;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,dt-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=ot;break}a.mode=at;case at:if(0===f)break t;if(ut=_t-f,a.offset>ut){if((ut=a.offset-ut)>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=ot;break}ut>a.wnext?(ut-=a.wnext,ct=a.wsize-ut):ct=a.wnext-ut,ut>a.length&&(ut=a.length),bt=a.window}else bt=r,ct=o-a.offset,ut=a.length;ut>f&&(ut=f),f-=ut,a.length-=ut;do{r[o++]=bt[ct++]}while(--ut);0===a.length&&(a.mode=V);break;case it:if(0===f)break t;r[o++]=a.length,f--,a.mode=V;break;case nt:if(a.wrap){for(;dt<32;){if(0===l)break t;l--,_|=n[s++]<<dt,dt+=8}if(_t-=f,t.total_out+=_t,a.total+=_t,_t&&(t.adler=a.check=a.flags?b(a.check,r,_t,o-_t):c(a.check,r,_t,o-_t)),_t=f,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=ot;break}_=0,dt=0}a.mode=rt;case rt:if(a.wrap&&a.flags){for(;dt<32;){if(0===l)break t;l--,_+=n[s++]<<dt,dt+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=ot;break}_=0,dt=0}a.mode=st;case st:xt=B;break t;case ot:xt=A;break t;case lt:return Z;case ht:default:return E}return t.next_out=o,t.avail_out=f,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=dt,(a.wsize||_t!==t.avail_out&&a.mode<ot&&(a.mode<nt||e!==k))&&d(t,t.output,t.next_out,_t-t.avail_out)?(a.mode=lt,Z):(ft-=t.avail_in,_t-=t.avail_out,t.total_in+=ft,t.total_out+=_t,a.total+=_t,a.wrap&&_t&&(t.adler=a.check=a.flags?b(a.check,r,_t,t.next_out-_t):c(a.check,r,_t,t.next_out-_t)),t.data_type=a.bits+(a.last?64:0)+(a.mode===M?128:0)+(a.mode===Q||a.mode===q?256:0),(0===ft&&0===_t||e===k)&&xt===z&&(xt=R),xt)},a.inflateEnd=function(t){if(!t||!t.state)return E;var e=t.state;return e.window&&(e.window=null),t.state=null,z},a.inflateGetHeader=function(t,e){var a;return t&&t.state?0==(2&(a=t.state).wrap)?E:(a.head=e,e.done=!1,z):E},a.inflateSetDictionary=function(t,e){var a,i,n=e.length;return t&&t.state?0!==(a=t.state).wrap&&a.mode!==K?E:a.mode===K&&(i=1,(i=c(i,e,n,0))!==a.check)?A:d(t,e,n,n)?(a.mode=lt,Z):(a.havedict=1,z):E},a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],r=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],s=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],o=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,l,h,d,f,_){var u,c,b,g,m,w,p,v,k,y=_.bits,x=0,z=0,B=0,S=0,E=0,A=0,Z=0,R=0,C=0,N=0,O=null,D=0,I=new i.Buf16(16),U=new i.Buf16(16),T=null,F=0;for(x=0;x<=15;x++)I[x]=0;for(z=0;z<l;z++)I[e[a+z]]++;for(E=y,S=15;S>=1&&0===I[S];S--);if(E>S&&(E=S),0===S)return h[d++]=20971520,h[d++]=20971520,_.bits=1,0;for(B=1;B<S&&0===I[B];B++);for(E<B&&(E=B),R=1,x=1;x<=15;x++)if(R<<=1,(R-=I[x])<0)return-1;if(R>0&&(0===t||1!==S))return-1;for(U[1]=0,x=1;x<15;x++)U[x+1]=U[x]+I[x];for(z=0;z<l;z++)0!==e[a+z]&&(f[U[e[a+z]]++]=z);if(0===t?(O=T=f,w=19):1===t?(O=n,D-=257,T=r,F-=257,w=256):(O=s,T=o,w=-1),N=0,z=0,x=B,m=d,A=E,Z=0,b=-1,C=1<<E,g=C-1,1===t&&C>852||2===t&&C>592)return 1;for(;;){p=x-Z,f[z]<w?(v=0,k=f[z]):f[z]>w?(v=T[F+f[z]],k=O[D+f[z]]):(v=96,k=0),u=1<<x-Z,B=c=1<<A;do{h[m+(N>>Z)+(c-=u)]=p<<24|v<<16|k|0}while(0!==c);for(u=1<<x-1;N&u;)u>>=1;if(0!==u?(N&=u-1,N+=u):N=0,z++,0==--I[x]){if(x===S)break;x=e[a+f[z]]}if(x>E&&(N&g)!==b){for(0===Z&&(Z=E),m+=B,R=1<<(A=x-Z);A+Z<S&&!((R-=I[A+Z])<=0);)A++,R<<=1;if(C+=1<<A,1===t&&C>852||2===t&&C>592)return 1;h[b=N&g]=E<<24|A<<16|m-d|0}}return 0!==N&&(h[m+N]=x-Z<<24|64<<16|0),_.bits=E,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?et[t]:et[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>M-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>M-t.bi_valid,t.bi_valid+=a-M):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=K;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<j;a++)(r=l[2*l[2*(i=t.heap[a])+1]+1]+1)>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)(n=t.heap[--a])>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(K+1),s=0;for(i=1;i<=K;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(K+1);for(a=0,i=0;i<U-1;i++)for(it[i]=a,t=0;t<1<<W[i];t++)at[a++]=i;for(at[a-1]=i,r=0,i=0;i<16;i++)for(nt[i]=r,t=0;t<1<<J[i];t++)et[r++]=i;for(r>>=7;i<L;i++)for(nt[i]=r<<7,t=0;t<1<<J[i]-7;t++)et[256+r++]=i;for(e=0;e<=K;e++)s[e]=0;for(t=0;t<=143;)$[2*t+1]=8,t++,s[8]++;for(;t<=255;)$[2*t+1]=9,t++,s[9]++;for(;t<=279;)$[2*t+1]=7,t++,s[7]++;for(;t<=287;)$[2*t+1]=8,t++,s[8]++;for(u($,F+1,s),t=0;t<L;t++)tt[2*t+1]=5,tt[2*t]=d(t,5);rt=new n($,W,T+1,F,K),st=new n(tt,J,0,L,K),ot=new n(new Array(0),Q,0,H,P)}function b(t){var e;for(e=0;e<F;e++)t.dyn_ltree[2*e]=0;for(e=0;e<L;e++)t.dyn_dtree[2*e]=0;for(e=0;e<H;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Y]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),A.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do{i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(h(t,(r=at[n])+T+1,e),0!==(o=W[r])&&l(t,n-=it[r],o),h(t,r=s(--i),a),0!==(o=J[r])&&l(t,i-=nt[r],o))}while(d<t.last_lit);h(t,Y,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=j,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)r[2*(n=t.heap[++t.heap_len]=h<2?++h:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do{a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*q]++):o<=10?t.bl_tree[2*G]++:t.bl_tree[2*X]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f)do{h(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,q,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,G,t.bl_tree),l(t,o-3,3)):(h(t,X,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=H-1;e>=3&&0===t.bl_tree[2*V[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*V[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return R;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return C;for(e=32;e<T;e++)if(0!==t.dyn_ltree[2*e])return C;return R}function E(t,e,a,i){l(t,(O<<1)+(i?1:0),3),m(t,e,a,!0)}var A=t("../utils/common"),Z=4,R=0,C=1,N=2,O=0,D=1,I=2,U=29,T=256,F=T+1+U,L=30,H=19,j=2*F+1,K=15,M=16,P=7,Y=256,q=16,G=17,X=18,W=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],J=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Q=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],V=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],$=new Array(2*(F+2));i($);var tt=new Array(2*L);i(tt);var et=new Array(512);i(et);var at=new Array(256);i(at);var it=new Array(U);i(it);var nt=new Array(L);i(nt);var rt,st,ot,lt=!1;a._tr_init=function(t){lt||(c(),lt=!0),t.l_desc=new r(t.dyn_ltree,rt),t.d_desc=new r(t.dyn_dtree,st),t.bl_desc=new r(t.bl_tree,ot),t.bi_buf=0,t.bi_valid=0,b(t)},a._tr_stored_block=E,a._tr_flush_block=function(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===N&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,(r=t.static_len+3+7>>>3)<=n&&(n=r)):n=r=a+5,a+4<=n&&-1!==e?E(t,e,a,i):t.strategy===Z||r===n?(l(t,(D<<1)+(i?1:0),3),v(t,$,tt)):(l(t,(I<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)},a._tr_tally=function(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(at[a]+T+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1},a._tr_align=function(t){l(t,D<<1,3),h(t,Y,$),f(t)}},{"../utils/common":3}],15:[function(t,e,a){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],"/":[function(t,e,a){"use strict";var i={};(0,t("./lib/utils/common").assign)(i,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=i},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});


'use strict';

/**
 * @fileoverview GzipImporter inflates gzip compressed data and passes it along
 * to an actual importer.
 */
tr.exportTo('tr.e.importer', function() {
  const GZIP_MEMBER_HEADER_ID_SIZE = 3;

  const GZIP_HEADER_ID1 = 0x1f;
  const GZIP_HEADER_ID2 = 0x8b;
  const GZIP_DEFLATE_COMPRESSION = 8;

  function _stringToUInt8Array(str) {
    const array = new Uint8Array(str.length);
    for (let i = 0; i < str.length; ++i) {
      array[i] = str.charCodeAt(i);
    }
    return array;
  }

  function GzipImporter(model, eventData) {
    // Normalize the data into an Uint8Array.
    this.inflateAsTraceStream = false;
    if (typeof(eventData) === 'string' || eventData instanceof String) {
      eventData = _stringToUInt8Array(eventData);
    } else if (eventData instanceof ArrayBuffer) {
      eventData = new Uint8Array(eventData);
    } else if (eventData instanceof tr.b.InMemoryTraceStream) {
      // This importer does not support processing general TraceStreams, only
      // InMemoryTraceStreams for now.
      eventData = eventData.data;
      this.inflateAsTraceStream_ = true;
    } else {
      throw new Error('Unknown gzip data format');
    }
    this.model_ = model;
    this.gzipData_ = eventData;
  }

  /**
   * @param {eventData} Possibly gzip compressed data as a string or an
   *                    ArrayBuffer.
   * @return {boolean} Whether obj looks like gzip compressed data.
   */
  GzipImporter.canImport = function(eventData) {
    // This importer does not support processing general TraceStreams, only
    // InMemoryTraceStreams for now.
    if (eventData instanceof tr.b.InMemoryTraceStream) {
      eventData = eventData.header;
    }

    let header;
    if (eventData instanceof ArrayBuffer) {
      header = new Uint8Array(eventData.slice(0, GZIP_MEMBER_HEADER_ID_SIZE));
    } else if (typeof(eventData) === 'string' || eventData instanceof String) {
      header = eventData.substring(0, GZIP_MEMBER_HEADER_ID_SIZE);
      header = _stringToUInt8Array(header);
    } else {
      return false;
    }
    return header[0] === GZIP_HEADER_ID1 &&
        header[1] === GZIP_HEADER_ID2 &&
        header[2] === GZIP_DEFLATE_COMPRESSION;
  };

  /**
   * Inflates (decompresses) the data stored in the given gzip bitstream.
   * @return {string} Inflated data.
   */
  GzipImporter.inflateGzipData_ = function(data) {
    let position = 0;

    function getByte() {
      if (position >= data.length) {
        throw new Error('Unexpected end of gzip data');
      }
      return data[position++];
    }

    function getWord() {
      const low = getByte();
      const high = getByte();
      return (high << 8) + low;
    }

    function skipBytes(amount) {
      position += amount;
    }

    function skipZeroTerminatedString() {
      while (getByte() !== 0) {}
    }

    const id1 = getByte();
    const id2 = getByte();
    if (id1 !== GZIP_HEADER_ID1 || id2 !== GZIP_HEADER_ID2) {
      throw new Error('Not gzip data');
    }
    const compressionMethod = getByte();
    if (compressionMethod !== GZIP_DEFLATE_COMPRESSION) {
      throw new Error('Unsupported compression method: ' + compressionMethod);
    }
    const flags = getByte();
    const haveHeaderCrc = flags & (1 << 1);
    const haveExtraFields = flags & (1 << 2);
    const haveFileName = flags & (1 << 3);
    const haveComment = flags & (1 << 4);

    // Skip modification time, extra flags and OS.
    skipBytes(4 + 1 + 1);

    // Skip remaining fields before compressed data.
    if (haveExtraFields) {
      const bytesToSkip = getWord();
      skipBytes(bytesToSkip);
    }
    if (haveFileName) skipZeroTerminatedString();
    if (haveComment) skipZeroTerminatedString();
    if (haveHeaderCrc) getWord();

    // Inflate the data using pako.
    const inflatedData = pako.inflateRaw(data.subarray(position));

    if (this.inflateAsTraceStream_) {
      return GzipImporter.transformToStream(inflatedData);
    }

    let string;
    try {
      string = GzipImporter.transformToString(inflatedData);
    } catch (err) {
      // It may be the case that inflated data does not fit into a V8 string. In
      // that case, try to transform to a trace stream.
      return GzipImporter.transformToStream(inflatedData);
    }

    if (inflatedData.length > 0 && string.length === 0) {
      // Try transforming to a trace stream.
      return GzipImporter.transformToStream(inflatedData);
    }

    return string;
  };

  GzipImporter.transformToStream = function(data) {
    if (data instanceof Uint8Array) {
      return new tr.b.InMemoryTraceStream(data, false);
    }

    throw new Error(`Cannot transform ${type} to TraceStream.`);
  };

  /**
   * Transforms an array-like object to a string.
   *
   * Note that the following two expressions yield identical results:
   *
   *   GzipImporter.transformToString_(data)
   *   JSZip.utils.transformTo('string', data)
   *
   * We use a custom static method because it is faster and, more importantly,
   * avoids OOMing on large traces. See
   * https://github.com/catapult-project/catapult/issues/2051.
   */
  GzipImporter.transformToString = function(data) {
    if (typeof(data) === 'string') return data;  // We already have a string.

    // Fall back to manual conversion if TextDecoder is not available.
    if (typeof TextDecoder === 'undefined') {
      if (data instanceof ArrayBuffer) {
        data = new Uint8Array(data);
      }

      // Based on JSZip.Utils.stringToArrayLike
      const result = [];
      let chunk = 65536;
      let k = 0;
      const len = data.length;

      while (k < len && chunk > 1) {
        try {
          const chunklen = Math.min(k + chunk, len);
          let dataslice;
          if (data instanceof Array) {
            dataslice = data.slice(k, chunklen);
          } else {
            dataslice = data.subarray(k, chunklen);
          }
          result.push(String.fromCharCode.apply(null, dataslice));
          k += chunk;
        } catch (e) {
          chunk = Math.floor(chunk / 2);
        }
      }

      return result.join('');
    }

    if (data instanceof Array) {
      // TextDecoder requires an ArrayBuffer or an ArrayBufferView.
      data = new Uint8Array(data);
    }

    return new TextDecoder('utf-8').decode(data);
  };

  GzipImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'GzipImporter';
    },

    /**
     * Called by the Model to check whether the importer just encapsulates
     * the actual trace data which needs to be imported by another importer.
     */
    isTraceDataContainer() {
      return true;
    },

    /**
     * Called by the Model to extract subtraces from the event data. The
     * subtraces are passed on to other importers that can recognize them.
     */
    extractSubtraces() {
      const eventData = GzipImporter.inflateGzipData_(this.gzipData_);
      return eventData ? [eventData] : [];
    }
  };

  tr.importer.Importer.register(GzipImporter);

  return {
    GzipImporter,
  };
});


'use strict';

tr.exportTo('tr.importer', function() {
  class SimpleLineReader {
    constructor(text) {
      this.data_ = text instanceof tr.b.TraceStream ? text : text.split('\n');
      this.curLine_ = 0;
      this.readLastLine_ = false;
      this.savedLines_ = undefined;
    }

    * [Symbol.iterator]() {
      let lastLine = undefined;
      while (this.hasData_) {
        if (this.readLastLine_) {
          this.curLine_++;
          this.readLastLine_ = false;
        } else if (this.data_ instanceof tr.b.TraceStream) {
          this.curLine_++;
          const line = this.data_.readUntilDelimiter('\n');
          lastLine = line.endsWith('\n') ? line.slice(0, -1) : line;
        } else {
          this.curLine_++;
          lastLine = this.data_[this.curLine_ - 1];
        }
        yield lastLine;
      }
    }

    get curLineNumber() {
      return this.curLine_;
    }

    get hasData_() {
      if (this.data_ instanceof tr.b.TraceStream) return this.data_.hasData;
      return this.curLine_ < this.data_.length;
    }

    advanceToLineMatching(regex) {
      for (const line of this) {
        if (this.savedLines_ !== undefined) this.savedLines_.push(line);
        if (regex.test(line)) {
          this.goBack_();
          return true;
        }
      }
      return false;
    }

    goBack_() {
      if (this.readLastLine_) {
        throw new Error('There should be at least one nextLine call between ' +
                        'any two goBack calls.');
      }
      if (this.curLine_ === 0) {
        throw new Error('There should be at least one nextLine call before ' +
                        'the first goBack call.');
      }
      this.readLastLine_ = true;
      this.curLine_--;
    }

    beginSavingLines() {
      this.savedLines_ = [];
    }

    endSavingLinesAndGetResult() {
      const tmp = this.savedLines_;
      this.savedLines_ = undefined;
      return tmp;
    }
  }

  return {
    SimpleLineReader,
  };
});


'use strict';

tr.exportTo('tr.e.importer', function() {
  function Trace2HTMLImporter(model, events) {
    this.importPriority = 0;
  }

  Trace2HTMLImporter.subtraces_ = [];

  function _extractEventsFromHTML(text) {
    // Clear the array before pushing data to it.
    Trace2HTMLImporter.subtraces_ = [];

    const r = new tr.importer.SimpleLineReader(text);

    // Try to find viewer-data...
    while (true) {
      if (!r.advanceToLineMatching(
          new RegExp('^<\s*script id="viewer-data" ' +
                     'type="(application\/json|text\/plain)">$'))) {
        break;
      }

      r.beginSavingLines();
      if (!r.advanceToLineMatching(/^<\/\s*script>$/)) return;

      let rawEvents = r.endSavingLinesAndGetResult();

      // Drop off first and last event as it contains the end script tag.
      rawEvents = rawEvents.slice(1, rawEvents.length - 1);
      const data64 = rawEvents.join('\n');
      const buffer = new ArrayBuffer(
          tr.b.Base64.getDecodedBufferLength(data64));
      const len = tr.b.Base64.DecodeToTypedArray(data64, new DataView(buffer));
      Trace2HTMLImporter.subtraces_.push(buffer.slice(0, len));
    }
  }

  function _canImportFromHTML(text) {
    if (!/^<!DOCTYPE html>/.test(text)) return false;

    // Try to find viewer-data...
    _extractEventsFromHTML(text);
    if (Trace2HTMLImporter.subtraces_.length === 0) return false;
    return true;
  }

  Trace2HTMLImporter.canImport = function(events) {
    if (events instanceof tr.b.TraceStream) return false;
    return _canImportFromHTML(events);
  };

  Trace2HTMLImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'Trace2HTMLImporter';
    },

    isTraceDataContainer() {
      return true;
    },

    extractSubtraces() {
      return Trace2HTMLImporter.subtraces_;
    },

    importEvents() {
    }
  };


  tr.importer.Importer.register(Trace2HTMLImporter);


  return {
    Trace2HTMLImporter,
  };
});


'use strict';

/**
 * @fileoverview Log Reader is used to process log file produced by V8.
 */
tr.exportTo('tr.e.importer.v8', function() {
  /**
   * Creates a CSV lines parser.
   */
  function CsvParser() { }

  /**
   * A regex for matching a CSV field.
   * @private
   */
  CsvParser.CSV_FIELD_RE_ = /^"((?:[^"]|"")*)"|([^,]*)/;

  /**
   * A regex for matching a double quote.
   * @private
   */
  CsvParser.DOUBLE_QUOTE_RE_ = /""/g;

  /**
   * Parses a line of CSV-encoded values. Returns an array of fields.
   *
   * @param {string} line Input line.
   */
  CsvParser.prototype.parseLine = function(line) {
    const fieldRe = CsvParser.CSV_FIELD_RE_;
    const doubleQuoteRe = CsvParser.DOUBLE_QUOTE_RE_;
    let pos = 0;
    const endPos = line.length;
    const fields = [];
    if (endPos > 0) {
      do {
        const fieldMatch = fieldRe.exec(line.substr(pos));
        if (typeof fieldMatch[1] === 'string') {
          const field = fieldMatch[1];
          pos += field.length + 3;  // Skip comma and quotes.
          fields.push(field.replace(doubleQuoteRe, '"'));
        } else {
          // The second field pattern will match anything, thus
          // in the worst case the match will be an empty string.
          const field = fieldMatch[2];
          pos += field.length + 1;  // Skip comma.
          fields.push(field);
        }
      } while (pos <= endPos);
    }
    return fields;
  };

  /**
   * Base class for processing log files.
   *
   * @param {Array.<Object>} dispatchTable A table used for parsing and
   * processing log records.
   *
   * @constructor
   */
  function LogReader(dispatchTable) {
    /**
     * @type {Array.<Object>}
     */
    this.dispatchTable_ = dispatchTable;

    /**
     * Current line.
     * @type {number}
     */
    this.lineNum_ = 0;

    /**
     * CSV lines parser.
     * @type {CsvParser}
     */
    this.csvParser_ = new CsvParser();
  }

  /**
   * Used for printing error messages.
   *
   * @param {string} str Error message.
   */
  LogReader.prototype.printError = function(str) {
    // Do nothing.
  };

  /**
   * Processes a portion of V8 profiler event log.
   *
   * @param {string} chunk A portion of log.
   */
  LogReader.prototype.processLogChunk = function(chunk) {
    this.processLog_(chunk.split('\n'));
  };

  /**
   * Processes a line of V8 profiler event log.
   *
   * @param {string} line A line of log.
   */
  LogReader.prototype.processLogLine = function(line) {
    this.processLog_([line]);
  };

  /**
   * Processes stack record.
   *
   * @param {number} pc Program counter.
   * @param {number} func JS Function.
   * @param {Array.<string>} stack String representation of a stack.
   * @return {Array.<number>} Processed stack.
   */
  LogReader.prototype.processStack = function(pc, func, stack) {
    const fullStack = func ? [pc, func] : [pc];
    let prevFrame = pc;
    for (let i = 0, n = stack.length; i < n; ++i) {
      const frame = stack[i];
      const firstChar = frame.charAt(0);
      if (firstChar === '+' || firstChar === '-') {
        // An offset from the previous frame.
        prevFrame += parseInt(frame, 16);
        fullStack.push(prevFrame);
      // Filter out possible 'overflow' string.
      } else if (firstChar !== 'o') {
        fullStack.push(parseInt(frame, 16));
      }
    }
    return fullStack;
  };

  /**
   * Returns whether a particular dispatch must be skipped.
   *
   * @param {!Object} dispatch Dispatch record.
   * @return {boolean} True if dispatch must be skipped.
   */
  LogReader.prototype.skipDispatch = function(dispatch) {
    return false;
  };

  /**
   * Does a dispatch of a log record.
   *
   * @param {Array.<string>} fields Log record.
   * @private
   */
  LogReader.prototype.dispatchLogRow_ = function(fields) {
    // Obtain the dispatch.
    const command = fields[0];
    if (!(command in this.dispatchTable_)) return;

    const dispatch = this.dispatchTable_[command];

    if (dispatch === null || this.skipDispatch(dispatch)) {
      return;
    }

    // Parse fields.
    const parsedFields = [];
    for (let i = 0; i < dispatch.parsers.length; ++i) {
      const parser = dispatch.parsers[i];
      if (parser === null) {
        parsedFields.push(fields[1 + i]);
      } else if (typeof parser === 'function') {
        parsedFields.push(parser(fields[1 + i]));
      } else {
        // var-args
        parsedFields.push(fields.slice(1 + i));
        break;
      }
    }

    // Run the processor.
    dispatch.processor.apply(this, parsedFields);
  };

  /**
   * Processes log lines.
   *
   * @param {Array.<string>} lines Log lines.
   * @private
   */
  LogReader.prototype.processLog_ = function(lines) {
    for (let i = 0, n = lines.length; i < n; ++i, ++this.lineNum_) {
      const line = lines[i];
      if (!line) {
        continue;
      }
      try {
        const fields = this.csvParser_.parseLine(line);
        this.dispatchLogRow_(fields);
      } catch (e) {
        this.printError('line ' + (this.lineNum_ + 1) + ': ' +
                        (e.message || e));
      }
    }
  };
  return {
    LogReader,
  };
});


'use strict';

/**
 * @fileoverview Provides the V8CpuProfileNode class.
 */
tr.exportTo('tr.e.v8', function() {
  const ProfileNode = tr.model.ProfileNode;
  /**
   * A V8CpuProfileNode represents a node in the v8 cpu profile tree,
   * it is essentially a frame in the stack when the sample gets recorded.
   */
  function V8CpuProfileNode(id, callFrame, parentNode) {
    ProfileNode.call(this, id, callFrame.functionName, parentNode);
    this.callFrame_ = tr.b.deepCopy(callFrame);
    this.deoptReason_ = '';
    this.colorId_ = tr.b.ColorScheme.getColorIdForGeneralPurposeString(
        callFrame.functionName);
  }

  V8CpuProfileNode.prototype = {
    __proto__: ProfileNode.prototype,

    get functionName() {
      return this.callFrame_.functionName;
    },

    get scriptId() {
      return this.callFrame_.scriptId;
    },

    get url() {
      if (!this.callFrame_.url) {
        return 'unknown';
      }
      let url = this.callFrame_.url;
      if (this.callFrame_.lineNumber === undefined) {
        return url;
      }
      url = url + ':' + this.callFrame_.lineNumber;
      if (this.callFrame_.columnNumber === undefined) {
        return url;
      }
      url = url + ':' + this.callFrame_.columnNumber;
      return url;
    },

    get deoptReason() {
      return this.deoptReason_;
    },

    set deoptReason(value) {
      this.deoptReason_ = value;
    },

    get userFriendlyName() {
      const name = this.functionName + ' url: ' + this.url;
      return !this.deoptReason_ ?
        name : name + ' Deoptimized reason: ' + this.deoptReason_;
    },

    get sampleTitle() {
      return 'V8 Sample';
    }
  };

  V8CpuProfileNode.constructFromObject = function(profileTree, node) {
    const nodeId = node.id;
    if (nodeId === 1) {
      // Ignore fake root.
      // The node with id 1 is a fake root for the profile tree,
      // since we are using map, we don't really need it.
      return undefined;
    }
    const parentNode = profileTree.getNode(node.parent);
    const profileNode = new V8CpuProfileNode(nodeId, node.callFrame,
                                           parentNode);
    if (node.deoptReason !== undefined) {
      profileNode.deoptReason = node.deoptReason;
    }
    return profileNode;
  };

  ProfileNode.subTypes.register(
      V8CpuProfileNode,
      {
        typeName: 'cpuProfile',
        name: 'v8 cpu profile node',
        pluralName: 'v8 cpu profile nodes'
      }
  );

  ProfileNode.subTypes.register(
      V8CpuProfileNode,
      {
        typeName: 'legacySample',
        name: 'v8 cpu profile node',
        pluralName: 'v8 cpu profile nodes'
      }
  );

  return {
    ProfileNode,
  };
});



'use strict';

/**
 * @fileoverview V8LogImporter imports v8.log files into the provided model.
 */
tr.exportTo('tr.e.importer.v8', function() {
  const CodeEntry = tr.e.importer.v8.CodeMap.CodeEntry;
  const CodeMap = tr.e.importer.v8.CodeMap;
  const ColorScheme = tr.b.ColorScheme;
  const DynamicFuncCodeEntry = tr.e.importer.v8.CodeMap.DynamicFuncCodeEntry;
  const FunctionEntry = tr.e.importer.v8.CodeMap.FunctionEntry;
  const ProfileNodeType = tr.model.ProfileNode.subTypes.getConstructor(
      undefined, 'legacySample');

  function V8LogImporter(model, eventData) {
    this.importPriority = 3;
    this.model_ = model;

    this.logData_ = eventData;

    this.code_map_ = new CodeMap();
    this.v8_timer_thread_ = undefined;
    this.v8_thread_ = undefined;

    this.profileTree_ = new tr.model.ProfileTree();
    // We predefine a unknown Profile Node so that when a stack address
    // can't be symbolized, we make it attach to the unknown Profile Node.
    this.profileTree_.add(new ProfileNodeType(
        -1, {
          url: '',
          functionName: 'unknown'
        }
    ));

    // We reconstruct the stack timeline from ticks.
    this.v8_stack_timeline_ = [];
  }

  const kV8BinarySuffixes = ['/d8', '/libv8.so'];


  const TimerEventDefaultArgs = {
    'V8.Execute': { pause: false, no_execution: false},
    'V8.External': { pause: false, no_execution: true},
    'V8.CompileFullCode': { pause: true, no_execution: true},
    'V8.RecompileSynchronous': { pause: true, no_execution: true},
    'V8.RecompileParallel': { pause: false, no_execution: false},
    'V8.CompileEval': { pause: true, no_execution: true},
    'V8.Parse': { pause: true, no_execution: true},
    'V8.PreParse': { pause: true, no_execution: true},
    'V8.ParseLazy': { pause: true, no_execution: true},
    'V8.GCScavenger': { pause: true, no_execution: true},
    'V8.GCCompactor': { pause: true, no_execution: true},
    'V8.GCContext': { pause: true, no_execution: true}
  };

  /**
   * @return {boolean} Whether obj is a V8 log string.
   */
  V8LogImporter.canImport = function(eventData) {
    if (typeof(eventData) !== 'string' && !(eventData instanceof String)) {
      return false;
    }

    return eventData.substring(0, 11) === 'v8-version,' ||
           eventData.substring(0, 12) === 'timer-event,' ||
           eventData.substring(0, 5) === 'tick,' ||
           eventData.substring(0, 15) === 'shared-library,' ||
           eventData.substring(0, 9) === 'profiler,' ||
           eventData.substring(0, 14) === 'code-creation,';
  };

  V8LogImporter.prototype = {

    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'V8LogImporter';
    },

    processTimerEvent_(name, startInUs, lengthInUs) {
      const args = TimerEventDefaultArgs[name];
      if (args === undefined) return;
      const startInMs = tr.b.convertUnit(startInUs,
          tr.b.UnitPrefixScale.METRIC.MICRO,
          tr.b.UnitPrefixScale.METRIC.MILLI);
      const lengthInMs = tr.b.convertUnit(lengthInUs,
          tr.b.UnitPrefixScale.METRIC.MICRO,
          tr.b.UnitPrefixScale.METRIC.MILLI);
      const colorId = ColorScheme.getColorIdForGeneralPurposeString(name);
      const slice = new tr.model.ThreadSlice('v8', name, colorId, startInMs,
          args, lengthInMs);
      this.v8_timer_thread_.sliceGroup.pushSlice(slice);
    },

    processTimerEventStart_(name, startInUs) {
      const args = TimerEventDefaultArgs[name];
      if (args === undefined) return;
      const startInMs = tr.b.convertUnit(startInUs,
          tr.b.UnitPrefixScale.METRIC.MICRO,
          tr.b.UnitPrefixScale.METRIC.MILLI);
      this.v8_timer_thread_.sliceGroup.beginSlice('v8', name, startInMs, args);
    },

    processTimerEventEnd_(name, endInUs) {
      const endInMs = tr.b.convertUnit(endInUs,
          tr.b.UnitPrefixScale.METRIC.MICRO,
          tr.b.UnitPrefixScale.METRIC.MILLI);
      this.v8_timer_thread_.sliceGroup.endSlice(endInMs);
    },

    processCodeCreateEvent_(type, kind, address, size, name,
        maybeFunc) {
      function parseState(s) {
        switch (s) {
          case '': return CodeMap.CodeState.COMPILED;
          case '~': return CodeMap.CodeState.OPTIMIZABLE;
          case '*': return CodeMap.CodeState.OPTIMIZED;
        }
        throw new Error('unknown code state: ' + s);
      }

      if (maybeFunc.length) {
        const funcAddr = parseInt(maybeFunc[0]);
        const state = parseState(maybeFunc[1]);
        let func = this.code_map_.findDynamicEntryByStartAddress(funcAddr);
        if (!func) {
          func = new FunctionEntry(name);
          func.kind = kind;
          this.code_map_.addCode(funcAddr, func);
        } else if (func.name !== name) {
          // Function object has been overwritten with a new one.
          func.name = name;
        }
        let entry = this.code_map_.findDynamicEntryByStartAddress(address);
        if (entry) {
          if (entry.size === size && entry.func === func) {
            // Entry state has changed.
            entry.state = state;
          }
        } else {
          entry = new DynamicFuncCodeEntry(size, type, func, state);
          entry.kind = kind;
          this.code_map_.addCode(address, entry);
        }
      } else {
        const codeEntry = new CodeEntry(size, name);
        codeEntry.kind = kind;
        this.code_map_.addCode(address, codeEntry);
      }
    },

    processCodeMoveEvent_(from, to) {
      this.code_map_.moveCode(from, to);
    },

    processCodeDeleteEvent_(address) {
      this.code_map_.deleteCode(address);
    },

    processSharedLibrary_(name, start, end) {
      const codeEntry = new CodeEntry(end - start, name,
                                     CodeEntry.TYPE.SHARED_LIB);
      codeEntry.kind = -3;  // External code kind.
      for (let i = 0; i < kV8BinarySuffixes.length; i++) {
        const suffix = kV8BinarySuffixes[i];
        if (name.indexOf(suffix, name.length - suffix.length) >= 0) {
          codeEntry.kind = -1;  // V8 runtime code kind.
          break;
        }
      }
      this.code_map_.addLibrary(start, codeEntry);
    },

    processCppSymbol_(address, size, name) {
      const codeEntry = new CodeEntry(size, name, CodeEntry.TYPE.CPP);
      codeEntry.kind = -1;
      this.code_map_.addStaticCode(address, codeEntry);
    },

    processTickEvent_(pc, startInUs, isExternalCallback,
        tosOrExternalCallback, vmstate, stack) {
      const startInMs = tr.b.convertUnit(startInUs,
          tr.b.UnitPrefixScale.METRIC.MICRO,
          tr.b.UnitPrefixScale.METRIC.MILLI);

      function findChildWithEntryID(stackFrame, entryID) {
        for (let i = 0; i < stackFrame.children.length; i++) {
          if (stackFrame.children[i].entryID === entryID) {
            return stackFrame.children[i];
          }
        }
        return undefined;
      }

      function processStack(pc, func, stack) {
        const fullStack = func ? [pc, func] : [pc];
        let prevFrame = pc;
        for (let i = 0, n = stack.length; i < n; ++i) {
          const frame = stack[i];
          const firstChar = frame.charAt(0);
          if (firstChar === '+' || firstChar === '-') {
            // An offset from the previous frame.
            prevFrame += parseInt(frame, 16);
            fullStack.push(prevFrame);
            // Filter out possible 'overflow' string.
          } else if (firstChar !== 'o') {
            fullStack.push(parseInt(frame, 16));
          }
          // Otherwise, they will be skipped.
        }
        return fullStack;
      }

      if (isExternalCallback) {
        // Don't use PC when in external callback code, as it can point
        // inside callback's code, and we will erroneously report
        // that a callback calls itself. Instead use tosOrExternalCallback,
        // as simply resetting PC will produce unaccounted ticks.
        pc = tosOrExternalCallback;
        tosOrExternalCallback = 0;
      } else if (tosOrExternalCallback) {
        // Find out, if top of stack was pointing inside a JS function
        // meaning that we have encountered a frameless invocation.
        const funcEntry = this.code_map_.findEntry(tosOrExternalCallback);
        if (!funcEntry ||
            !funcEntry.isJSFunction ||
            !funcEntry.isJSFunction()) {
          tosOrExternalCallback = 0;
        }
      }

      let processedStack = processStack(pc, tosOrExternalCallback, stack);
      let node = undefined;
      let lastNode = undefined;
      // v8 log stacks are inverted, leaf first and the root at the end.
      processedStack = processedStack.reverse();
      for (let i = 0, n = processedStack.length; i < n; i++) {
        const frame = processedStack[i];
        if (!frame) break;
        const entry = this.code_map_.findEntry(frame);

        if (!entry && i !== 0) {
          continue;
        }

        let sourceInfo = undefined;
        if (entry && entry.type === CodeEntry.TYPE.CPP) {
          const libEntry = this.code_map_.findEntryInLibraries(frame);
          if (libEntry) {
            sourceInfo = {
              file: libEntry.name
            };
          }
        }
        const entryId = entry ? entry.id : -1;
        node = this.profileTree_.getNode(entryId);
        if (node === undefined) {
          node = this.profileTree_.add(new ProfileNodeType(
            entryId, {
              functionName: entry.name,
              url: sourceInfo ? sourceInfo.file : '',
              lineNumber: sourceInfo ? sourceInfo.line : undefined,
              columnNumber: sourceInfo ? sourceInfo.column : undefined,
              scriptId: sourceInfo ? sourceInfo.scriptId : undefined
            }, lastNode));
        }
        lastNode = node;
      }
      this.model_.samples.push(new tr.model.Sample(
          startInMs, 'V8 PC', node, this.v8_thread_, undefined, 1));
    },

    processDistortion_(distortionInPicoseconds) {
      // Do nothing.
    },

    processPlotRange_(start, end) {
      // Do nothing.
    },

    processV8Version_(major, minor, build, patch, candidate) {
      // Do nothing.
    },

    /**
     * Walks through the events_ list and outputs the structures discovered to
     * model_.
     */
    importEvents() {
      const logreader = new tr.e.importer.v8.LogReader(
          { 'timer-event': {
            parsers: [null, parseInt, parseInt],
            processor: this.processTimerEvent_.bind(this)
          },
            'shared-library': {
              parsers: [null, parseInt, parseInt],
              processor: this.processSharedLibrary_.bind(this)
            },
            'timer-event-start': {
              parsers: [null, parseInt],
              processor: this.processTimerEventStart_.bind(this)
            },
            'timer-event-end': {
              parsers: [null, parseInt],
              processor: this.processTimerEventEnd_.bind(this)
            },
            'code-creation': {
              parsers: [null, parseInt, parseInt, parseInt, null, 'var-args'],
              processor: this.processCodeCreateEvent_.bind(this)
            },
            'code-move': {
              parsers: [parseInt, parseInt],
              processor: this.processCodeMoveEvent_.bind(this)
            },
            'code-delete': {
              parsers: [parseInt],
              processor: this.processCodeDeleteEvent_.bind(this)
            },
            'cpp': {
              parsers: [parseInt, parseInt, null],
              processor: this.processCppSymbol_.bind(this)
            },
            'tick': {
              parsers: [parseInt, parseInt, parseInt, parseInt, parseInt,
                'var-args'],
              processor: this.processTickEvent_.bind(this)
            },
            'distortion': {
              parsers: [parseInt],
              processor: this.processDistortion_.bind(this)
            },
            'plot-range': {
              parsers: [parseInt, parseInt],
              processor: this.processPlotRange_.bind(this)
            },
            'v8-version': {
              parsers: [parseInt, parseInt, parseInt, parseInt, parseInt],
              processor: this.processV8Version_.bind(this)
            }
          });

      this.v8_timer_thread_ =
          this.model_.getOrCreateProcess(-32).getOrCreateThread(1);
      this.v8_timer_thread_.name = 'V8 Timers';
      this.v8_thread_ =
          this.model_.getOrCreateProcess(-32).getOrCreateThread(2);
      this.v8_thread_.name = 'V8';

      const lines = this.logData_.split('\n');
      for (let i = 0; i < lines.length; i++) {
        logreader.processLogLine(lines[i]);
      }

      function addSlices(slices, thread) {
        for (let i = 0; i < slices.length; i++) {
          const duration = slices[i].end - slices[i].start;
          const slice = new tr.model.ThreadSlice('v8', slices[i].name,
              ColorScheme.getColorIdForGeneralPurposeString(slices[i].name),
              slices[i].start, {}, duration);
          thread.sliceGroup.pushSlice(slice);
          addSlices(slices[i].children, thread);
        }
      }
      addSlices(this.v8_stack_timeline_, this.v8_thread_);
    }
  };

  tr.importer.Importer.register(V8LogImporter);

  return {
    V8LogImporter,
  };
});


'use strict';
// Vinn workaround for JSzip requiring window.
if (tr.isVinn) {
  /**
   * Hack.
   */
  global.window = {};
}

/*!

JSZip - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/
!function(a){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var b;"undefined"!=typeof window?b=window:"undefined"!=typeof global?b=global:"undefined"!=typeof self&&(b=self),b.JSZip=a()}}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){"use strict";var d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";c.encode=function(a){for(var b,c,e,f,g,h,i,j="",k=0;k<a.length;)b=a.charCodeAt(k++),c=a.charCodeAt(k++),e=a.charCodeAt(k++),f=b>>2,g=(3&b)<<4|c>>4,h=(15&c)<<2|e>>6,i=63&e,isNaN(c)?h=i=64:isNaN(e)&&(i=64),j=j+d.charAt(f)+d.charAt(g)+d.charAt(h)+d.charAt(i);return j},c.decode=function(a){var b,c,e,f,g,h,i,j="",k=0;for(a=a.replace(/[^A-Za-z0-9\+\/\=]/g,"");k<a.length;)f=d.indexOf(a.charAt(k++)),g=d.indexOf(a.charAt(k++)),h=d.indexOf(a.charAt(k++)),i=d.indexOf(a.charAt(k++)),b=f<<2|g>>4,c=(15&g)<<4|h>>2,e=(3&h)<<6|i,j+=String.fromCharCode(b),64!=h&&(j+=String.fromCharCode(c)),64!=i&&(j+=String.fromCharCode(e));return j}},{}],2:[function(a,b){"use strict";function c(){this.compressedSize=0,this.uncompressedSize=0,this.crc32=0,this.compressionMethod=null,this.compressedContent=null}c.prototype={getContent:function(){return null},getCompressedContent:function(){return null}},b.exports=c},{}],3:[function(a,b,c){"use strict";c.STORE={magic:"\x00\x00",compress:function(a){return a},uncompress:function(a){return a},compressInputType:null,uncompressInputType:null},c.DEFLATE=a("./flate")},{"./flate":8}],4:[function(a,b){"use strict";var c=a("./utils"),d=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];b.exports=function(a,b){if("undefined"==typeof a||!a.length)return 0;var e="string"!==c.getTypeOf(a);"undefined"==typeof b&&(b=0);var f=0,g=0,h=0;b=-1^b;for(var i=0,j=a.length;j>i;i++)h=e?a[i]:a.charCodeAt(i),g=255&(b^h),f=d[g],b=b>>>8^f;return-1^b}},{"./utils":21}],5:[function(a,b){"use strict";function c(){this.data=null,this.length=0,this.index=0}var d=a("./utils");c.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<a||0>a)throw new Error("End of data reached (data length = "+this.length+", asked index = "+a+"). Corrupted zip ?")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(){},readInt:function(a){var b,c=0;for(this.checkOffset(a),b=this.index+a-1;b>=this.index;b--)c=(c<<8)+this.byteAt(b);return this.index+=a,c},readString:function(a){return d.transformTo("string",this.readData(a))},readData:function(){},lastIndexOfSignature:function(){},readDate:function(){var a=this.readInt(4);return new Date((a>>25&127)+1980,(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1)}},b.exports=c},{"./utils":21}],6:[function(a,b,c){"use strict";c.base64=!1,c.binary=!1,c.dir=!1,c.createFolders=!1,c.date=null,c.compression=null,c.comment=null},{}],7:[function(a,b,c){"use strict";var d=a("./utils");c.string2binary=function(a){return d.string2binary(a)},c.string2Uint8Array=function(a){return d.transformTo("uint8array",a)},c.uint8Array2String=function(a){return d.transformTo("string",a)},c.string2Blob=function(a){var b=d.transformTo("arraybuffer",a);return d.arrayBuffer2Blob(b)},c.arrayBuffer2Blob=function(a){return d.arrayBuffer2Blob(a)},c.transformTo=function(a,b){return d.transformTo(a,b)},c.getTypeOf=function(a){return d.getTypeOf(a)},c.checkSupport=function(a){return d.checkSupport(a)},c.MAX_VALUE_16BITS=d.MAX_VALUE_16BITS,c.MAX_VALUE_32BITS=d.MAX_VALUE_32BITS,c.pretty=function(a){return d.pretty(a)},c.findCompression=function(a){return d.findCompression(a)},c.isRegExp=function(a){return d.isRegExp(a)}},{"./utils":21}],8:[function(a,b,c){"use strict";var d="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,e=a("pako");c.uncompressInputType=d?"uint8array":"array",c.compressInputType=d?"uint8array":"array",c.magic="\b\x00",c.compress=function(a){return e.deflateRaw(a)},c.uncompress=function(a){return e.inflateRaw(a)}},{pako:24}],9:[function(a,b){"use strict";function c(a,b){return this instanceof c?(this.files={},this.comment=null,this.root="",a&&this.load(a,b),void(this.clone=function(){var a=new c;for(var b in this)"function"!=typeof this[b]&&(a[b]=this[b]);return a})):new c(a,b)}var d=a("./base64");c.prototype=a("./object"),c.prototype.load=a("./load"),c.support=a("./support"),c.defaults=a("./defaults"),c.utils=a("./deprecatedPublicUtils"),c.base64={encode:function(a){return d.encode(a)},decode:function(a){return d.decode(a)}},c.compressions=a("./compressions"),b.exports=c},{"./base64":1,"./compressions":3,"./defaults":6,"./deprecatedPublicUtils":7,"./load":10,"./object":13,"./support":17}],10:[function(a,b){"use strict";var c=a("./base64"),d=a("./zipEntries");b.exports=function(a,b){var e,f,g,h;for(b=b||{},b.base64&&(a=c.decode(a)),f=new d(a,b),e=f.files,g=0;g<e.length;g++)h=e[g],this.file(h.fileName,h.decompressed,{binary:!0,optimizedBinaryString:!0,date:h.date,dir:h.dir,comment:h.fileComment.length?h.fileComment:null,createFolders:b.createFolders});return f.zipComment.length&&(this.comment=f.zipComment),this}},{"./base64":1,"./zipEntries":22}],11:[function(a,b){(function(a){"use strict";b.exports=function(b,c){return new a(b,c)},b.exports.test=function(b){return a.isBuffer(b)}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],12:[function(a,b){"use strict";function c(a){this.data=a,this.length=this.data.length,this.index=0}var d=a("./uint8ArrayReader");c.prototype=new d,c.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.index,this.index+a);return this.index+=a,b},b.exports=c},{"./uint8ArrayReader":18}],13:[function(a,b){"use strict";var c=a("./support"),d=a("./utils"),e=a("./crc32"),f=a("./signature"),g=a("./defaults"),h=a("./base64"),i=a("./compressions"),j=a("./compressedObject"),k=a("./nodeBuffer"),l=a("./utf8"),m=a("./stringWriter"),n=a("./uint8ArrayWriter"),o=function(a){if(a._data instanceof j&&(a._data=a._data.getContent(),a.options.binary=!0,a.options.base64=!1,"uint8array"===d.getTypeOf(a._data))){var b=a._data;a._data=new Uint8Array(b.length),0!==b.length&&a._data.set(b,0)}return a._data},p=function(a){var b=o(a),e=d.getTypeOf(b);return"string"===e?!a.options.binary&&c.nodebuffer?k(b,"utf-8"):a.asBinary():b},q=function(a){var b=o(this);return null===b||"undefined"==typeof b?"":(this.options.base64&&(b=h.decode(b)),b=a&&this.options.binary?A.utf8decode(b):d.transformTo("string",b),a||this.options.binary||(b=d.transformTo("string",A.utf8encode(b))),b)},r=function(a,b,c){this.name=a,this.dir=c.dir,this.date=c.date,this.comment=c.comment,this._data=b,this.options=c,this._initialMetadata={dir:c.dir,date:c.date}};r.prototype={asText:function(){return q.call(this,!0)},asBinary:function(){return q.call(this,!1)},asNodeBuffer:function(){var a=p(this);return d.transformTo("nodebuffer",a)},asUint8Array:function(){var a=p(this);return d.transformTo("uint8array",a)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var s=function(a,b){var c,d="";for(c=0;b>c;c++)d+=String.fromCharCode(255&a),a>>>=8;return d},t=function(){var a,b,c={};for(a=0;a<arguments.length;a++)for(b in arguments[a])arguments[a].hasOwnProperty(b)&&"undefined"==typeof c[b]&&(c[b]=arguments[a][b]);return c},u=function(a){return a=a||{},a.base64!==!0||null!==a.binary&&void 0!==a.binary||(a.binary=!0),a=t(a,g),a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),a},v=function(a,b,c){var e,f=d.getTypeOf(b);if(c=u(c),c.createFolders&&(e=w(a))&&x.call(this,e,!0),c.dir||null===b||"undefined"==typeof b)c.base64=!1,c.binary=!1,b=null;else if("string"===f)c.binary&&!c.base64&&c.optimizedBinaryString!==!0&&(b=d.string2binary(b));else{if(c.base64=!1,c.binary=!0,!(f||b instanceof j))throw new Error("The data of '"+a+"' is in an unsupported format !");"arraybuffer"===f&&(b=d.transformTo("uint8array",b))}var g=new r(a,b,c);return this.files[a]=g,g},w=function(a){"/"==a.slice(-1)&&(a=a.substring(0,a.length-1));var b=a.lastIndexOf("/");return b>0?a.substring(0,b):""},x=function(a,b){return"/"!=a.slice(-1)&&(a+="/"),b="undefined"!=typeof b?b:!1,this.files[a]||v.call(this,a,null,{dir:!0,createFolders:b}),this.files[a]},y=function(a,b){var c,f=new j;return a._data instanceof j?(f.uncompressedSize=a._data.uncompressedSize,f.crc32=a._data.crc32,0===f.uncompressedSize||a.dir?(b=i.STORE,f.compressedContent="",f.crc32=0):a._data.compressionMethod===b.magic?f.compressedContent=a._data.getCompressedContent():(c=a._data.getContent(),f.compressedContent=b.compress(d.transformTo(b.compressInputType,c)))):(c=p(a),(!c||0===c.length||a.dir)&&(b=i.STORE,c=""),f.uncompressedSize=c.length,f.crc32=e(c),f.compressedContent=b.compress(d.transformTo(b.compressInputType,c))),f.compressedSize=f.compressedContent.length,f.compressionMethod=b.magic,f},z=function(a,b,c,g){var h,i,j,k,m=(c.compressedContent,d.transformTo("string",l.utf8encode(b.name))),n=b.comment||"",o=d.transformTo("string",l.utf8encode(n)),p=m.length!==b.name.length,q=o.length!==n.length,r=b.options,t="",u="",v="";j=b._initialMetadata.dir!==b.dir?b.dir:r.dir,k=b._initialMetadata.date!==b.date?b.date:r.date,h=k.getHours(),h<<=6,h|=k.getMinutes(),h<<=5,h|=k.getSeconds()/2,i=k.getFullYear()-1980,i<<=4,i|=k.getMonth()+1,i<<=5,i|=k.getDate(),p&&(u=s(1,1)+s(e(m),4)+m,t+="up"+s(u.length,2)+u),q&&(v=s(1,1)+s(this.crc32(o),4)+o,t+="uc"+s(v.length,2)+v);var w="";w+="\n\x00",w+=p||q?"\x00\b":"\x00\x00",w+=c.compressionMethod,w+=s(h,2),w+=s(i,2),w+=s(c.crc32,4),w+=s(c.compressedSize,4),w+=s(c.uncompressedSize,4),w+=s(m.length,2),w+=s(t.length,2);var x=f.LOCAL_FILE_HEADER+w+m+t,y=f.CENTRAL_FILE_HEADER+"\x00"+w+s(o.length,2)+"\x00\x00\x00\x00"+(j===!0?"\x00\x00\x00":"\x00\x00\x00\x00")+s(g,4)+m+t+o;return{fileRecord:x,dirRecord:y,compressedObject:c}},A={load:function(){throw new Error("Load method is not defined. Is the file jszip-load.js included ?")},filter:function(a){var b,c,d,e,f=[];for(b in this.files)this.files.hasOwnProperty(b)&&(d=this.files[b],e=new r(d.name,d._data,t(d.options)),c=b.slice(this.root.length,b.length),b.slice(0,this.root.length)===this.root&&a(c,e)&&f.push(e));return f},file:function(a,b,c){if(1===arguments.length){if(d.isRegExp(a)){var e=a;return this.filter(function(a,b){return!b.dir&&e.test(a)})}return this.filter(function(b,c){return!c.dir&&b===a})[0]||null}return a=this.root+a,v.call(this,a,b,c),this},folder:function(a){if(!a)return this;if(d.isRegExp(a))return this.filter(function(b,c){return c.dir&&a.test(b)});var b=this.root+a,c=x.call(this,b),e=this.clone();return e.root=c.name,e},remove:function(a){a=this.root+a;var b=this.files[a];if(b||("/"!=a.slice(-1)&&(a+="/"),b=this.files[a]),b&&!b.dir)delete this.files[a];else for(var c=this.filter(function(b,c){return c.name.slice(0,a.length)===a}),d=0;d<c.length;d++)delete this.files[c[d].name];return this},generate:function(a){a=t(a||{},{base64:!0,compression:"STORE",type:"base64",comment:null}),d.checkSupport(a.type);var b,c,e=[],g=0,j=0,k=d.transformTo("string",this.utf8encode(a.comment||this.comment||""));for(var l in this.files)if(this.files.hasOwnProperty(l)){var o=this.files[l],p=o.options.compression||a.compression.toUpperCase(),q=i[p];if(!q)throw new Error(p+" is not a valid compression method !");var r=y.call(this,o,q),u=z.call(this,l,o,r,g);g+=u.fileRecord.length+r.compressedSize,j+=u.dirRecord.length,e.push(u)}var v="";v=f.CENTRAL_DIRECTORY_END+"\x00\x00\x00\x00"+s(e.length,2)+s(e.length,2)+s(j,4)+s(g,4)+s(k.length,2)+k;var w=a.type.toLowerCase();for(b="uint8array"===w||"arraybuffer"===w||"blob"===w||"nodebuffer"===w?new n(g+j+v.length):new m(g+j+v.length),c=0;c<e.length;c++)b.append(e[c].fileRecord),b.append(e[c].compressedObject.compressedContent);for(c=0;c<e.length;c++)b.append(e[c].dirRecord);b.append(v);var x=b.finalize();switch(a.type.toLowerCase()){case"uint8array":case"arraybuffer":case"nodebuffer":return d.transformTo(a.type.toLowerCase(),x);case"blob":return d.arrayBuffer2Blob(d.transformTo("arraybuffer",x));case"base64":return a.base64?h.encode(x):x;default:return x}},crc32:function(a,b){return e(a,b)},utf8encode:function(a){return d.transformTo("string",l.utf8encode(a))},utf8decode:function(a){return l.utf8decode(a)}};b.exports=A},{"./base64":1,"./compressedObject":2,"./compressions":3,"./crc32":4,"./defaults":6,"./nodeBuffer":11,"./signature":14,"./stringWriter":16,"./support":17,"./uint8ArrayWriter":19,"./utf8":20,"./utils":21}],14:[function(a,b,c){"use strict";c.LOCAL_FILE_HEADER="PK",c.CENTRAL_FILE_HEADER="PK",c.CENTRAL_DIRECTORY_END="PK",c.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",c.ZIP64_CENTRAL_DIRECTORY_END="PK",c.DATA_DESCRIPTOR="PK\b"},{}],15:[function(a,b){"use strict";function c(a,b){this.data=a,b||(this.data=e.string2binary(this.data)),this.length=this.data.length,this.index=0}var d=a("./dataReader"),e=a("./utils");c.prototype=new d,c.prototype.byteAt=function(a){return this.data.charCodeAt(a)},c.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)},c.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.index,this.index+a);return this.index+=a,b},b.exports=c},{"./dataReader":5,"./utils":21}],16:[function(a,b){"use strict";var c=a("./utils"),d=function(){this.data=[]};d.prototype={append:function(a){a=c.transformTo("string",a),this.data.push(a)},finalize:function(){return this.data.join("")}},b.exports=d},{"./utils":21}],17:[function(a,b,c){(function(a){"use strict";if(c.base64=!0,c.array=!0,c.string=!0,c.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,c.nodebuffer="undefined"!=typeof a,c.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)c.blob=!1;else{var b=new ArrayBuffer(0);try{c.blob=0===new Blob([b],{type:"application/zip"}).size}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;f.append(b),c.blob=0===f.getBlob("application/zip").size}catch(d){c.blob=!1}}}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],18:[function(a,b){"use strict";function c(a){a&&(this.data=a,this.length=this.data.length,this.index=0)}var d=a("./dataReader");c.prototype=new d,c.prototype.byteAt=function(a){return this.data[a]},c.prototype.lastIndexOfSignature=function(a){for(var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.length-4;f>=0;--f)if(this.data[f]===b&&this.data[f+1]===c&&this.data[f+2]===d&&this.data[f+3]===e)return f;return-1},c.prototype.readData=function(a){if(this.checkOffset(a),0===a)return new Uint8Array(0);var b=this.data.subarray(this.index,this.index+a);return this.index+=a,b},b.exports=c},{"./dataReader":5}],19:[function(a,b){"use strict";var c=a("./utils"),d=function(a){this.data=new Uint8Array(a),this.index=0};d.prototype={append:function(a){0!==a.length&&(a=c.transformTo("uint8array",a),this.data.set(a,this.index),this.index+=a.length)},finalize:function(){return this.data}},b.exports=d},{"./utils":21}],20:[function(a,b,c){"use strict";for(var d=a("./utils"),e=a("./support"),f=a("./nodeBuffer"),g=new Array(256),h=0;256>h;h++)g[h]=h>=252?6:h>=248?5:h>=240?4:h>=224?3:h>=192?2:1;g[254]=g[254]=1;var i=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;h>f;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=128>c?1:2048>c?2:65536>c?3:4;for(b=e.uint8array?new Uint8Array(i):new Array(i),g=0,f=0;i>g;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),128>c?b[g++]=c:2048>c?(b[g++]=192|c>>>6,b[g++]=128|63&c):65536>c?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},j=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return 0>c?b:0===c?b:c+g[a[c]]>b?c:b},k=function(a){var b,c,e,f,h=a.length,i=new Array(2*h);for(c=0,b=0;h>b;)if(e=a[b++],128>e)i[c++]=e;else if(f=g[e],f>4)i[c++]=65533,b+=f-1;else{for(e&=2===f?31:3===f?15:7;f>1&&h>b;)e=e<<6|63&a[b++],f--;f>1?i[c++]=65533:65536>e?i[c++]=e:(e-=65536,i[c++]=55296|e>>10&1023,i[c++]=56320|1023&e)}return i.length!==c&&(i.subarray?i=i.subarray(0,c):i.length=c),d.applyFromCharCode(i)};c.utf8encode=function(a){return e.nodebuffer?f(a,"utf-8"):i(a)},c.utf8decode=function(a){if(e.nodebuffer)return d.transformTo("nodebuffer",a).toString("utf-8");a=d.transformTo(e.uint8array?"uint8array":"array",a);for(var b=[],c=0,f=a.length,g=65536;f>c;){var h=j(a,Math.min(c+g,f));b.push(e.uint8array?k(a.subarray(c,h)):k(a.slice(c,h))),c=h}return b.join("")}},{"./nodeBuffer":11,"./support":17,"./utils":21}],21:[function(a,b,c){"use strict";function d(a){return a}function e(a,b){for(var c=0;c<a.length;++c)b[c]=255&a.charCodeAt(c);return b}function f(a){var b=65536,d=[],e=a.length,f=c.getTypeOf(a),g=0,h=!0;try{switch(f){case"uint8array":String.fromCharCode.apply(null,new Uint8Array(0));break;case"nodebuffer":String.fromCharCode.apply(null,j(0))}}catch(i){h=!1}if(!h){for(var k="",l=0;l<a.length;l++)k+=String.fromCharCode(a[l]);return k}for(;e>g&&b>1;)try{d.push("array"===f||"nodebuffer"===f?String.fromCharCode.apply(null,a.slice(g,Math.min(g+b,e))):String.fromCharCode.apply(null,a.subarray(g,Math.min(g+b,e)))),g+=b}catch(i){b=Math.floor(b/2)}return d.join("")}function g(a,b){for(var c=0;c<a.length;c++)b[c]=a[c];return b}var h=a("./support"),i=a("./compressions"),j=a("./nodeBuffer");c.string2binary=function(a){for(var b="",c=0;c<a.length;c++)b+=String.fromCharCode(255&a.charCodeAt(c));return b},c.arrayBuffer2Blob=function(a){c.checkSupport("blob");try{return new Blob([a],{type:"application/zip"})}catch(b){try{var d=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,e=new d;return e.append(a),e.getBlob("application/zip")}catch(b){throw new Error("Bug : can't construct the Blob.")}}},c.applyFromCharCode=f;var k={};k.string={string:d,array:function(a){return e(a,new Array(a.length))},arraybuffer:function(a){return k.string.uint8array(a).buffer},uint8array:function(a){return e(a,new Uint8Array(a.length))},nodebuffer:function(a){return e(a,j(a.length))}},k.array={string:f,array:d,arraybuffer:function(a){return new Uint8Array(a).buffer},uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(a)}},k.arraybuffer={string:function(a){return f(new Uint8Array(a))},array:function(a){return g(new Uint8Array(a),new Array(a.byteLength))},arraybuffer:d,uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(new Uint8Array(a))}},k.uint8array={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return a.buffer},uint8array:d,nodebuffer:function(a){return j(a)}},k.nodebuffer={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return k.nodebuffer.uint8array(a).buffer},uint8array:function(a){return g(a,new Uint8Array(a.length))},nodebuffer:d},c.transformTo=function(a,b){if(b||(b=""),!a)return b;c.checkSupport(a);var d=c.getTypeOf(b),e=k[d][a](b);return e},c.getTypeOf=function(a){return"string"==typeof a?"string":"[object Array]"===Object.prototype.toString.call(a)?"array":h.nodebuffer&&j.test(a)?"nodebuffer":h.uint8array&&a instanceof Uint8Array?"uint8array":h.arraybuffer&&a instanceof ArrayBuffer?"arraybuffer":void 0},c.checkSupport=function(a){var b=h[a.toLowerCase()];if(!b)throw new Error(a+" is not supported by this browser")},c.MAX_VALUE_16BITS=65535,c.MAX_VALUE_32BITS=-1,c.pretty=function(a){var b,c,d="";for(c=0;c<(a||"").length;c++)b=a.charCodeAt(c),d+="\\x"+(16>b?"0":"")+b.toString(16).toUpperCase();return d},c.findCompression=function(a){for(var b in i)if(i.hasOwnProperty(b)&&i[b].magic===a)return i[b];return null},c.isRegExp=function(a){return"[object RegExp]"===Object.prototype.toString.call(a)}},{"./compressions":3,"./nodeBuffer":11,"./support":17}],22:[function(a,b){"use strict";function c(a,b){this.files=[],this.loadOptions=b,a&&this.load(a)}var d=a("./stringReader"),e=a("./nodeBufferReader"),f=a("./uint8ArrayReader"),g=a("./utils"),h=a("./signature"),i=a("./zipEntry"),j=a("./support"),k=a("./object");c.prototype={checkSignature:function(a){var b=this.reader.readString(4);if(b!==a)throw new Error("Corrupted zip or bug : unexpected signature ("+g.pretty(b)+", expected "+g.pretty(a)+")")},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2),this.zipComment=this.reader.readString(this.zipCommentLength),this.zipComment=k.utf8decode(this.zipComment)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.versionMadeBy=this.reader.readString(2),this.versionNeeded=this.reader.readInt(2),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var a,b,c,d=this.zip64EndOfCentralSize-44,e=0;d>e;)a=this.reader.readInt(2),b=this.reader.readInt(4),c=this.reader.readString(b),this.zip64ExtensibleData[a]={id:a,length:b,value:c}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var a,b;for(a=0;a<this.files.length;a++)b=this.files[a],this.reader.setIndex(b.localHeaderOffset),this.checkSignature(h.LOCAL_FILE_HEADER),b.readLocalPart(this.reader),b.handleUTF8()},readCentralDir:function(){var a;for(this.reader.setIndex(this.centralDirOffset);this.reader.readString(4)===h.CENTRAL_FILE_HEADER;)a=new i({zip64:this.zip64},this.loadOptions),a.readCentralPart(this.reader),this.files.push(a)},readEndOfCentral:function(){var a=this.reader.lastIndexOfSignature(h.CENTRAL_DIRECTORY_END);if(-1===a)throw new Error("Corrupted zip : can't find end of central directory");if(this.reader.setIndex(a),this.checkSignature(h.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===g.MAX_VALUE_16BITS||this.diskWithCentralDirStart===g.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===g.MAX_VALUE_16BITS||this.centralDirRecords===g.MAX_VALUE_16BITS||this.centralDirSize===g.MAX_VALUE_32BITS||this.centralDirOffset===g.MAX_VALUE_32BITS){if(this.zip64=!0,a=this.reader.lastIndexOfSignature(h.ZIP64_CENTRAL_DIRECTORY_LOCATOR),-1===a)throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");this.reader.setIndex(a),this.checkSignature(h.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(h.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}},prepareReader:function(a){var b=g.getTypeOf(a);this.reader="string"!==b||j.uint8array?"nodebuffer"===b?new e(a):new f(g.transformTo("uint8array",a)):new d(a,this.loadOptions.optimizedBinaryString)},load:function(a){this.prepareReader(a),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},b.exports=c},{"./nodeBufferReader":12,"./object":13,"./signature":14,"./stringReader":15,"./support":17,"./uint8ArrayReader":18,"./utils":21,"./zipEntry":23}],23:[function(a,b){"use strict";function c(a,b){this.options=a,this.loadOptions=b}var d=a("./stringReader"),e=a("./utils"),f=a("./compressedObject"),g=a("./object");c.prototype={isEncrypted:function(){return 1===(1&this.bitFlag)},useUTF8:function(){return 2048===(2048&this.bitFlag)},prepareCompressedContent:function(a,b,c){return function(){var d=a.index;a.setIndex(b);var e=a.readData(c);return a.setIndex(d),e}},prepareContent:function(a,b,c,d,f){return function(){var a=e.transformTo(d.uncompressInputType,this.getCompressedContent()),b=d.uncompress(a);if(b.length!==f)throw new Error("Bug : uncompressed data size mismatch");return b}},readLocalPart:function(a){var b,c;if(a.skip(22),this.fileNameLength=a.readInt(2),c=a.readInt(2),this.fileName=a.readString(this.fileNameLength),a.skip(c),-1==this.compressedSize||-1==this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");if(b=e.findCompression(this.compressionMethod),null===b)throw new Error("Corrupted zip : compression "+e.pretty(this.compressionMethod)+" unknown (inner file : "+this.fileName+")");if(this.decompressed=new f,this.decompressed.compressedSize=this.compressedSize,this.decompressed.uncompressedSize=this.uncompressedSize,this.decompressed.crc32=this.crc32,this.decompressed.compressionMethod=this.compressionMethod,this.decompressed.getCompressedContent=this.prepareCompressedContent(a,a.index,this.compressedSize,b),this.decompressed.getContent=this.prepareContent(a,a.index,this.compressedSize,b,this.uncompressedSize),this.loadOptions.checkCRC32&&(this.decompressed=e.transformTo("string",this.decompressed.getContent()),g.crc32(this.decompressed)!==this.crc32))throw new Error("Corrupted zip : CRC32 mismatch")},readCentralPart:function(a){if(this.versionMadeBy=a.readString(2),this.versionNeeded=a.readInt(2),this.bitFlag=a.readInt(2),this.compressionMethod=a.readString(2),this.date=a.readDate(),this.crc32=a.readInt(4),this.compressedSize=a.readInt(4),this.uncompressedSize=a.readInt(4),this.fileNameLength=a.readInt(2),this.extraFieldsLength=a.readInt(2),this.fileCommentLength=a.readInt(2),this.diskNumberStart=a.readInt(2),this.internalFileAttributes=a.readInt(2),this.externalFileAttributes=a.readInt(4),this.localHeaderOffset=a.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");this.fileName=a.readString(this.fileNameLength),this.readExtraFields(a),this.parseZIP64ExtraField(a),this.fileComment=a.readString(this.fileCommentLength),this.dir=16&this.externalFileAttributes?!0:!1},parseZIP64ExtraField:function(){if(this.extraFields[1]){var a=new d(this.extraFields[1].value);this.uncompressedSize===e.MAX_VALUE_32BITS&&(this.uncompressedSize=a.readInt(8)),this.compressedSize===e.MAX_VALUE_32BITS&&(this.compressedSize=a.readInt(8)),this.localHeaderOffset===e.MAX_VALUE_32BITS&&(this.localHeaderOffset=a.readInt(8)),this.diskNumberStart===e.MAX_VALUE_32BITS&&(this.diskNumberStart=a.readInt(4))}},readExtraFields:function(a){var b,c,d,e=a.index;for(this.extraFields=this.extraFields||{};a.index<e+this.extraFieldsLength;)b=a.readInt(2),c=a.readInt(2),d=a.readString(c),this.extraFields[b]={id:b,length:c,value:d}},handleUTF8:function(){if(this.useUTF8())this.fileName=g.utf8decode(this.fileName),this.fileComment=g.utf8decode(this.fileComment);else{var a=this.findExtraFieldUnicodePath();null!==a&&(this.fileName=a);var b=this.findExtraFieldUnicodeComment();null!==b&&(this.fileComment=b)}},findExtraFieldUnicodePath:function(){var a=this.extraFields[28789];if(a){var b=new d(a.value);return 1!==b.readInt(1)?null:g.crc32(this.fileName)!==b.readInt(4)?null:g.utf8decode(b.readString(a.length-5))}return null},findExtraFieldUnicodeComment:function(){var a=this.extraFields[25461];if(a){var b=new d(a.value);return 1!==b.readInt(1)?null:g.crc32(this.fileComment)!==b.readInt(4)?null:g.utf8decode(b.readString(a.length-5))}return null}},b.exports=c},{"./compressedObject":2,"./object":13,"./stringReader":15,"./utils":21}],24:[function(a,b){"use strict";var c=a("./lib/utils/common").assign,d=a("./lib/deflate"),e=a("./lib/inflate"),f=a("./lib/zlib/constants"),g={};c(g,d,e,f),b.exports=g},{"./lib/deflate":25,"./lib/inflate":26,"./lib/utils/common":27,"./lib/zlib/constants":30}],25:[function(a,b,c){"use strict";function d(a,b){var c=new s(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function e(a,b){return b=b||{},b.raw=!0,d(a,b)}function f(a,b){return b=b||{},b.gzip=!0,d(a,b)}var g=a("./zlib/deflate.js"),h=a("./utils/common"),i=a("./utils/strings"),j=a("./zlib/messages"),k=a("./zlib/zstream"),l=0,m=4,n=0,o=1,p=-1,q=0,r=8,s=function(a){this.options=h.assign({level:p,method:r,chunkSize:16384,windowBits:15,memLevel:8,strategy:q,to:""},a||{});var b=this.options;b.raw&&b.windowBits>0?b.windowBits=-b.windowBits:b.gzip&&b.windowBits>0&&b.windowBits<16&&(b.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new k,this.strm.avail_out=0;var c=g.deflateInit2(this.strm,b.level,b.method,b.windowBits,b.memLevel,b.strategy);if(c!==n)throw new Error(j[c]);b.header&&g.deflateSetHeader(this.strm,b.header)
};s.prototype.push=function(a,b){var c,d,e=this.strm,f=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?m:l,e.input="string"==typeof a?i.string2buf(a):a,e.next_in=0,e.avail_in=e.input.length;do{if(0===e.avail_out&&(e.output=new h.Buf8(f),e.next_out=0,e.avail_out=f),c=g.deflate(e,d),c!==o&&c!==n)return this.onEnd(c),this.ended=!0,!1;(0===e.avail_out||0===e.avail_in&&d===m)&&this.onData("string"===this.options.to?i.buf2binstring(h.shrinkBuf(e.output,e.next_out)):h.shrinkBuf(e.output,e.next_out))}while((e.avail_in>0||0===e.avail_out)&&c!==o);return d===m?(c=g.deflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===n):!0},s.prototype.onData=function(a){this.chunks.push(a)},s.prototype.onEnd=function(a){a===n&&(this.result="string"===this.options.to?this.chunks.join(""):h.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Deflate=s,c.deflate=d,c.deflateRaw=e,c.gzip=f},{"./utils/common":27,"./utils/strings":28,"./zlib/deflate.js":32,"./zlib/messages":37,"./zlib/zstream":39}],26:[function(a,b,c){"use strict";function d(a,b){var c=new m(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function e(a,b){return b=b||{},b.raw=!0,d(a,b)}var f=a("./zlib/inflate.js"),g=a("./utils/common"),h=a("./utils/strings"),i=a("./zlib/constants"),j=a("./zlib/messages"),k=a("./zlib/zstream"),l=a("./zlib/gzheader"),m=function(a){this.options=g.assign({chunkSize:16384,windowBits:0,to:""},a||{});var b=this.options;b.raw&&b.windowBits>=0&&b.windowBits<16&&(b.windowBits=-b.windowBits,0===b.windowBits&&(b.windowBits=-15)),!(b.windowBits>=0&&b.windowBits<16)||a&&a.windowBits||(b.windowBits+=32),b.windowBits>15&&b.windowBits<48&&0===(15&b.windowBits)&&(b.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new k,this.strm.avail_out=0;var c=f.inflateInit2(this.strm,b.windowBits);if(c!==i.Z_OK)throw new Error(j[c]);this.header=new l,f.inflateGetHeader(this.strm,this.header)};m.prototype.push=function(a,b){var c,d,e,j,k,l=this.strm,m=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?i.Z_FINISH:i.Z_NO_FLUSH,l.input="string"==typeof a?h.binstring2buf(a):a,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new g.Buf8(m),l.next_out=0,l.avail_out=m),c=f.inflate(l,i.Z_NO_FLUSH),c!==i.Z_STREAM_END&&c!==i.Z_OK)return this.onEnd(c),this.ended=!0,!1;l.next_out&&(0===l.avail_out||c===i.Z_STREAM_END||0===l.avail_in&&d===i.Z_FINISH)&&("string"===this.options.to?(e=h.utf8border(l.output,l.next_out),j=l.next_out-e,k=h.buf2string(l.output,e),l.next_out=j,l.avail_out=m-j,j&&g.arraySet(l.output,l.output,e,j,0),this.onData(k)):this.onData(g.shrinkBuf(l.output,l.next_out)))}while(l.avail_in>0&&c!==i.Z_STREAM_END);return c===i.Z_STREAM_END&&(d=i.Z_FINISH),d===i.Z_FINISH?(c=f.inflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===i.Z_OK):!0},m.prototype.onData=function(a){this.chunks.push(a)},m.prototype.onEnd=function(a){a===i.Z_OK&&(this.result="string"===this.options.to?this.chunks.join(""):g.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Inflate=m,c.inflate=d,c.inflateRaw=e,c.ungzip=d},{"./utils/common":27,"./utils/strings":28,"./zlib/constants":30,"./zlib/gzheader":33,"./zlib/inflate.js":35,"./zlib/messages":37,"./zlib/zstream":39}],27:[function(a,b,c){"use strict";var d="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;c.assign=function(a){for(var b=Array.prototype.slice.call(arguments,1);b.length;){var c=b.shift();if(c){if("object"!=typeof c)throw new TypeError(c+"must be non-object");for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}}return a},c.shrinkBuf=function(a,b){return a.length===b?a:a.subarray?a.subarray(0,b):(a.length=b,a)};var e={arraySet:function(a,b,c,d,e){if(b.subarray&&a.subarray)return void a.set(b.subarray(c,c+d),e);for(var f=0;d>f;f++)a[e+f]=b[c+f]},flattenChunks:function(a){var b,c,d,e,f,g;for(d=0,b=0,c=a.length;c>b;b++)d+=a[b].length;for(g=new Uint8Array(d),e=0,b=0,c=a.length;c>b;b++)f=a[b],g.set(f,e),e+=f.length;return g}},f={arraySet:function(a,b,c,d,e){for(var f=0;d>f;f++)a[e+f]=b[c+f]},flattenChunks:function(a){return[].concat.apply([],a)}};c.setTyped=function(a){a?(c.Buf8=Uint8Array,c.Buf16=Uint16Array,c.Buf32=Int32Array,c.assign(c,e)):(c.Buf8=Array,c.Buf16=Array,c.Buf32=Array,c.assign(c,f))},c.setTyped(d)},{}],28:[function(a,b,c){"use strict";function d(a,b){if(65537>b&&(a.subarray&&g||!a.subarray&&f))return String.fromCharCode.apply(null,e.shrinkBuf(a,b));for(var c="",d=0;b>d;d++)c+=String.fromCharCode(a[d]);return c}var e=a("./common"),f=!0,g=!0;try{String.fromCharCode.apply(null,[0])}catch(h){f=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(h){g=!1}for(var i=new e.Buf8(256),j=0;256>j;j++)i[j]=j>=252?6:j>=248?5:j>=240?4:j>=224?3:j>=192?2:1;i[254]=i[254]=1,c.string2buf=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;h>f;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=128>c?1:2048>c?2:65536>c?3:4;for(b=new e.Buf8(i),g=0,f=0;i>g;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),128>c?b[g++]=c:2048>c?(b[g++]=192|c>>>6,b[g++]=128|63&c):65536>c?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},c.buf2binstring=function(a){return d(a,a.length)},c.binstring2buf=function(a){for(var b=new e.Buf8(a.length),c=0,d=b.length;d>c;c++)b[c]=a.charCodeAt(c);return b},c.buf2string=function(a,b){var c,e,f,g,h=b||a.length,j=new Array(2*h);for(e=0,c=0;h>c;)if(f=a[c++],128>f)j[e++]=f;else if(g=i[f],g>4)j[e++]=65533,c+=g-1;else{for(f&=2===g?31:3===g?15:7;g>1&&h>c;)f=f<<6|63&a[c++],g--;g>1?j[e++]=65533:65536>f?j[e++]=f:(f-=65536,j[e++]=55296|f>>10&1023,j[e++]=56320|1023&f)}return d(j,e)},c.utf8border=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return 0>c?b:0===c?b:c+i[a[c]]>b?c:b}},{"./common":27}],29:[function(a,b){"use strict";function c(a,b,c,d){for(var e=65535&a|0,f=a>>>16&65535|0,g=0;0!==c;){g=c>2e3?2e3:c,c-=g;do e=e+b[d++]|0,f=f+e|0;while(--g);e%=65521,f%=65521}return e|f<<16|0}b.exports=c},{}],30:[function(a,b){b.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],31:[function(a,b){"use strict";function c(){for(var a,b=[],c=0;256>c;c++){a=c;for(var d=0;8>d;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function d(a,b,c,d){var f=e,g=d+c;a=-1^a;for(var h=d;g>h;h++)a=a>>>8^f[255&(a^b[h])];return-1^a}var e=c();b.exports=d},{}],32:[function(a,b,c){"use strict";function d(a,b){return a.msg=G[b],b}function e(a){return(a<<1)-(a>4?9:0)}function f(a){for(var b=a.length;--b>=0;)a[b]=0}function g(a){var b=a.state,c=b.pending;c>a.avail_out&&(c=a.avail_out),0!==c&&(C.arraySet(a.output,b.pending_buf,b.pending_out,c,a.next_out),a.next_out+=c,b.pending_out+=c,a.total_out+=c,a.avail_out-=c,b.pending-=c,0===b.pending&&(b.pending_out=0))}function h(a,b){D._tr_flush_block(a,a.block_start>=0?a.block_start:-1,a.strstart-a.block_start,b),a.block_start=a.strstart,g(a.strm)}function i(a,b){a.pending_buf[a.pending++]=b}function j(a,b){a.pending_buf[a.pending++]=b>>>8&255,a.pending_buf[a.pending++]=255&b}function k(a,b,c,d){var e=a.avail_in;return e>d&&(e=d),0===e?0:(a.avail_in-=e,C.arraySet(b,a.input,a.next_in,e,c),1===a.state.wrap?a.adler=E(a.adler,b,e,c):2===a.state.wrap&&(a.adler=F(a.adler,b,e,c)),a.next_in+=e,a.total_in+=e,e)}function l(a,b){var c,d,e=a.max_chain_length,f=a.strstart,g=a.prev_length,h=a.nice_match,i=a.strstart>a.w_size-jb?a.strstart-(a.w_size-jb):0,j=a.window,k=a.w_mask,l=a.prev,m=a.strstart+ib,n=j[f+g-1],o=j[f+g];a.prev_length>=a.good_match&&(e>>=2),h>a.lookahead&&(h=a.lookahead);do if(c=b,j[c+g]===o&&j[c+g-1]===n&&j[c]===j[f]&&j[++c]===j[f+1]){f+=2,c++;do;while(j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&m>f);if(d=ib-(m-f),f=m-ib,d>g){if(a.match_start=b,g=d,d>=h)break;n=j[f+g-1],o=j[f+g]}}while((b=l[b&k])>i&&0!==--e);return g<=a.lookahead?g:a.lookahead}function m(a){var b,c,d,e,f,g=a.w_size;do{if(e=a.window_size-a.lookahead-a.strstart,a.strstart>=g+(g-jb)){C.arraySet(a.window,a.window,g,g,0),a.match_start-=g,a.strstart-=g,a.block_start-=g,c=a.hash_size,b=c;do d=a.head[--b],a.head[b]=d>=g?d-g:0;while(--c);c=g,b=c;do d=a.prev[--b],a.prev[b]=d>=g?d-g:0;while(--c);e+=g}if(0===a.strm.avail_in)break;if(c=k(a.strm,a.window,a.strstart+a.lookahead,e),a.lookahead+=c,a.lookahead+a.insert>=hb)for(f=a.strstart-a.insert,a.ins_h=a.window[f],a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+1])&a.hash_mask;a.insert&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+hb-1])&a.hash_mask,a.prev[f&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=f,f++,a.insert--,!(a.lookahead+a.insert<hb)););}while(a.lookahead<jb&&0!==a.strm.avail_in)}function n(a,b){var c=65535;for(c>a.pending_buf_size-5&&(c=a.pending_buf_size-5);;){if(a.lookahead<=1){if(m(a),0===a.lookahead&&b===H)return sb;if(0===a.lookahead)break}a.strstart+=a.lookahead,a.lookahead=0;var d=a.block_start+c;if((0===a.strstart||a.strstart>=d)&&(a.lookahead=a.strstart-d,a.strstart=d,h(a,!1),0===a.strm.avail_out))return sb;if(a.strstart-a.block_start>=a.w_size-jb&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.strstart>a.block_start&&(h(a,!1),0===a.strm.avail_out)?sb:sb}function o(a,b){for(var c,d;;){if(a.lookahead<jb){if(m(a),a.lookahead<jb&&b===H)return sb;if(0===a.lookahead)break}if(c=0,a.lookahead>=hb&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),0!==c&&a.strstart-c<=a.w_size-jb&&(a.match_length=l(a,c)),a.match_length>=hb)if(d=D._tr_tally(a,a.strstart-a.match_start,a.match_length-hb),a.lookahead-=a.match_length,a.match_length<=a.max_lazy_match&&a.lookahead>=hb){a.match_length--;do a.strstart++,a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart;while(0!==--a.match_length);a.strstart++}else a.strstart+=a.match_length,a.match_length=0,a.ins_h=a.window[a.strstart],a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+1])&a.hash_mask;else d=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++;if(d&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=a.strstart<hb-1?a.strstart:hb-1,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function p(a,b){for(var c,d,e;;){if(a.lookahead<jb){if(m(a),a.lookahead<jb&&b===H)return sb;if(0===a.lookahead)break}if(c=0,a.lookahead>=hb&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),a.prev_length=a.match_length,a.prev_match=a.match_start,a.match_length=hb-1,0!==c&&a.prev_length<a.max_lazy_match&&a.strstart-c<=a.w_size-jb&&(a.match_length=l(a,c),a.match_length<=5&&(a.strategy===S||a.match_length===hb&&a.strstart-a.match_start>4096)&&(a.match_length=hb-1)),a.prev_length>=hb&&a.match_length<=a.prev_length){e=a.strstart+a.lookahead-hb,d=D._tr_tally(a,a.strstart-1-a.prev_match,a.prev_length-hb),a.lookahead-=a.prev_length-1,a.prev_length-=2;do++a.strstart<=e&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+hb-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart);while(0!==--a.prev_length);if(a.match_available=0,a.match_length=hb-1,a.strstart++,d&&(h(a,!1),0===a.strm.avail_out))return sb}else if(a.match_available){if(d=D._tr_tally(a,0,a.window[a.strstart-1]),d&&h(a,!1),a.strstart++,a.lookahead--,0===a.strm.avail_out)return sb}else a.match_available=1,a.strstart++,a.lookahead--}return a.match_available&&(d=D._tr_tally(a,0,a.window[a.strstart-1]),a.match_available=0),a.insert=a.strstart<hb-1?a.strstart:hb-1,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function q(a,b){for(var c,d,e,f,g=a.window;;){if(a.lookahead<=ib){if(m(a),a.lookahead<=ib&&b===H)return sb;if(0===a.lookahead)break}if(a.match_length=0,a.lookahead>=hb&&a.strstart>0&&(e=a.strstart-1,d=g[e],d===g[++e]&&d===g[++e]&&d===g[++e])){f=a.strstart+ib;do;while(d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&f>e);a.match_length=ib-(f-e),a.match_length>a.lookahead&&(a.match_length=a.lookahead)}if(a.match_length>=hb?(c=D._tr_tally(a,1,a.match_length-hb),a.lookahead-=a.match_length,a.strstart+=a.match_length,a.match_length=0):(c=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++),c&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function r(a,b){for(var c;;){if(0===a.lookahead&&(m(a),0===a.lookahead)){if(b===H)return sb;break}if(a.match_length=0,c=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++,c&&(h(a,!1),0===a.strm.avail_out))return sb}return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ub:vb):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sb:tb}function s(a){a.window_size=2*a.w_size,f(a.head),a.max_lazy_match=B[a.level].max_lazy,a.good_match=B[a.level].good_length,a.nice_match=B[a.level].nice_length,a.max_chain_length=B[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=hb-1,a.match_available=0,a.ins_h=0}function t(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Y,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new C.Buf16(2*fb),this.dyn_dtree=new C.Buf16(2*(2*db+1)),this.bl_tree=new C.Buf16(2*(2*eb+1)),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new C.Buf16(gb+1),this.heap=new C.Buf16(2*cb+1),f(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new C.Buf16(2*cb+1),f(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function u(a){var b;return a&&a.state?(a.total_in=a.total_out=0,a.data_type=X,b=a.state,b.pending=0,b.pending_out=0,b.wrap<0&&(b.wrap=-b.wrap),b.status=b.wrap?lb:qb,a.adler=2===b.wrap?0:1,b.last_flush=H,D._tr_init(b),M):d(a,O)}function v(a){var b=u(a);return b===M&&s(a.state),b}function w(a,b){return a&&a.state?2!==a.state.wrap?O:(a.state.gzhead=b,M):O}function x(a,b,c,e,f,g){if(!a)return O;var h=1;if(b===R&&(b=6),0>e?(h=0,e=-e):e>15&&(h=2,e-=16),1>f||f>Z||c!==Y||8>e||e>15||0>b||b>9||0>g||g>V)return d(a,O);8===e&&(e=9);var i=new t;return a.state=i,i.strm=a,i.wrap=h,i.gzhead=null,i.w_bits=e,i.w_size=1<<i.w_bits,i.w_mask=i.w_size-1,i.hash_bits=f+7,i.hash_size=1<<i.hash_bits,i.hash_mask=i.hash_size-1,i.hash_shift=~~((i.hash_bits+hb-1)/hb),i.window=new C.Buf8(2*i.w_size),i.head=new C.Buf16(i.hash_size),i.prev=new C.Buf16(i.w_size),i.lit_bufsize=1<<f+6,i.pending_buf_size=4*i.lit_bufsize,i.pending_buf=new C.Buf8(i.pending_buf_size),i.d_buf=i.lit_bufsize>>1,i.l_buf=3*i.lit_bufsize,i.level=b,i.strategy=g,i.method=c,v(a)}function y(a,b){return x(a,b,Y,$,_,W)}function z(a,b){var c,h,k,l;if(!a||!a.state||b>L||0>b)return a?d(a,O):O;if(h=a.state,!a.output||!a.input&&0!==a.avail_in||h.status===rb&&b!==K)return d(a,0===a.avail_out?Q:O);if(h.strm=a,c=h.last_flush,h.last_flush=b,h.status===lb)if(2===h.wrap)a.adler=0,i(h,31),i(h,139),i(h,8),h.gzhead?(i(h,(h.gzhead.text?1:0)+(h.gzhead.hcrc?2:0)+(h.gzhead.extra?4:0)+(h.gzhead.name?8:0)+(h.gzhead.comment?16:0)),i(h,255&h.gzhead.time),i(h,h.gzhead.time>>8&255),i(h,h.gzhead.time>>16&255),i(h,h.gzhead.time>>24&255),i(h,9===h.level?2:h.strategy>=T||h.level<2?4:0),i(h,255&h.gzhead.os),h.gzhead.extra&&h.gzhead.extra.length&&(i(h,255&h.gzhead.extra.length),i(h,h.gzhead.extra.length>>8&255)),h.gzhead.hcrc&&(a.adler=F(a.adler,h.pending_buf,h.pending,0)),h.gzindex=0,h.status=mb):(i(h,0),i(h,0),i(h,0),i(h,0),i(h,0),i(h,9===h.level?2:h.strategy>=T||h.level<2?4:0),i(h,wb),h.status=qb);else{var m=Y+(h.w_bits-8<<4)<<8,n=-1;n=h.strategy>=T||h.level<2?0:h.level<6?1:6===h.level?2:3,m|=n<<6,0!==h.strstart&&(m|=kb),m+=31-m%31,h.status=qb,j(h,m),0!==h.strstart&&(j(h,a.adler>>>16),j(h,65535&a.adler)),a.adler=1}if(h.status===mb)if(h.gzhead.extra){for(k=h.pending;h.gzindex<(65535&h.gzhead.extra.length)&&(h.pending!==h.pending_buf_size||(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending!==h.pending_buf_size));)i(h,255&h.gzhead.extra[h.gzindex]),h.gzindex++;h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),h.gzindex===h.gzhead.extra.length&&(h.gzindex=0,h.status=nb)}else h.status=nb;if(h.status===nb)if(h.gzhead.name){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.name.length?255&h.gzhead.name.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.gzindex=0,h.status=ob)}else h.status=ob;if(h.status===ob)if(h.gzhead.comment){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.comment.length?255&h.gzhead.comment.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.status=pb)}else h.status=pb;if(h.status===pb&&(h.gzhead.hcrc?(h.pending+2>h.pending_buf_size&&g(a),h.pending+2<=h.pending_buf_size&&(i(h,255&a.adler),i(h,a.adler>>8&255),a.adler=0,h.status=qb)):h.status=qb),0!==h.pending){if(g(a),0===a.avail_out)return h.last_flush=-1,M}else if(0===a.avail_in&&e(b)<=e(c)&&b!==K)return d(a,Q);if(h.status===rb&&0!==a.avail_in)return d(a,Q);if(0!==a.avail_in||0!==h.lookahead||b!==H&&h.status!==rb){var o=h.strategy===T?r(h,b):h.strategy===U?q(h,b):B[h.level].func(h,b);if((o===ub||o===vb)&&(h.status=rb),o===sb||o===ub)return 0===a.avail_out&&(h.last_flush=-1),M;if(o===tb&&(b===I?D._tr_align(h):b!==L&&(D._tr_stored_block(h,0,0,!1),b===J&&(f(h.head),0===h.lookahead&&(h.strstart=0,h.block_start=0,h.insert=0))),g(a),0===a.avail_out))return h.last_flush=-1,M}return b!==K?M:h.wrap<=0?N:(2===h.wrap?(i(h,255&a.adler),i(h,a.adler>>8&255),i(h,a.adler>>16&255),i(h,a.adler>>24&255),i(h,255&a.total_in),i(h,a.total_in>>8&255),i(h,a.total_in>>16&255),i(h,a.total_in>>24&255)):(j(h,a.adler>>>16),j(h,65535&a.adler)),g(a),h.wrap>0&&(h.wrap=-h.wrap),0!==h.pending?M:N)}function A(a){var b;return a&&a.state?(b=a.state.status,b!==lb&&b!==mb&&b!==nb&&b!==ob&&b!==pb&&b!==qb&&b!==rb?d(a,O):(a.state=null,b===qb?d(a,P):M)):O}var B,C=a("../utils/common"),D=a("./trees"),E=a("./adler32"),F=a("./crc32"),G=a("./messages"),H=0,I=1,J=3,K=4,L=5,M=0,N=1,O=-2,P=-3,Q=-5,R=-1,S=1,T=2,U=3,V=4,W=0,X=2,Y=8,Z=9,$=15,_=8,ab=29,bb=256,cb=bb+1+ab,db=30,eb=19,fb=2*cb+1,gb=15,hb=3,ib=258,jb=ib+hb+1,kb=32,lb=42,mb=69,nb=73,ob=91,pb=103,qb=113,rb=666,sb=1,tb=2,ub=3,vb=4,wb=3,xb=function(a,b,c,d,e){this.good_length=a,this.max_lazy=b,this.nice_length=c,this.max_chain=d,this.func=e};B=[new xb(0,0,0,0,n),new xb(4,4,8,4,o),new xb(4,5,16,8,o),new xb(4,6,32,32,o),new xb(4,4,16,16,p),new xb(8,16,32,32,p),new xb(8,16,128,128,p),new xb(8,32,128,256,p),new xb(32,128,258,1024,p),new xb(32,258,258,4096,p)],c.deflateInit=y,c.deflateInit2=x,c.deflateReset=v,c.deflateResetKeep=u,c.deflateSetHeader=w,c.deflate=z,c.deflateEnd=A,c.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":27,"./adler32":29,"./crc32":31,"./messages":37,"./trees":38}],33:[function(a,b){"use strict";function c(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}b.exports=c},{}],34:[function(a,b){"use strict";var c=30,d=12;b.exports=function(a,b){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;e=a.state,f=a.next_in,B=a.input,g=f+(a.avail_in-5),h=a.next_out,C=a.output,i=h-(b-a.avail_out),j=h+(a.avail_out-257),k=e.dmax,l=e.wsize,m=e.whave,n=e.wnext,o=e.window,p=e.hold,q=e.bits,r=e.lencode,s=e.distcode,t=(1<<e.lenbits)-1,u=(1<<e.distbits)-1;a:do{15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=r[p&t];b:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,0===w)C[h++]=65535&v;else{if(!(16&w)){if(0===(64&w)){v=r[(65535&v)+(p&(1<<w)-1)];continue b}if(32&w){e.mode=d;break a}a.msg="invalid literal/length code",e.mode=c;break a}x=65535&v,w&=15,w&&(w>q&&(p+=B[f++]<<q,q+=8),x+=p&(1<<w)-1,p>>>=w,q-=w),15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=s[p&u];c:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,!(16&w)){if(0===(64&w)){v=s[(65535&v)+(p&(1<<w)-1)];continue c}a.msg="invalid distance code",e.mode=c;break a}if(y=65535&v,w&=15,w>q&&(p+=B[f++]<<q,q+=8,w>q&&(p+=B[f++]<<q,q+=8)),y+=p&(1<<w)-1,y>k){a.msg="invalid distance too far back",e.mode=c;break a}if(p>>>=w,q-=w,w=h-i,y>w){if(w=y-w,w>m&&e.sane){a.msg="invalid distance too far back",e.mode=c;break a}if(z=0,A=o,0===n){if(z+=l-w,x>w){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}else if(w>n){if(z+=l+n-w,w-=n,x>w){x-=w;do C[h++]=o[z++];while(--w);if(z=0,x>n){w=n,x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}}else if(z+=n-w,x>w){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}for(;x>2;)C[h++]=A[z++],C[h++]=A[z++],C[h++]=A[z++],x-=3;x&&(C[h++]=A[z++],x>1&&(C[h++]=A[z++]))}else{z=h-y;do C[h++]=C[z++],C[h++]=C[z++],C[h++]=C[z++],x-=3;while(x>2);x&&(C[h++]=C[z++],x>1&&(C[h++]=C[z++]))}break}}break}}while(g>f&&j>h);x=q>>3,f-=x,q-=x<<3,p&=(1<<q)-1,a.next_in=f,a.next_out=h,a.avail_in=g>f?5+(g-f):5-(f-g),a.avail_out=j>h?257+(j-h):257-(h-j),e.hold=p,e.bits=q}},{}],35:[function(a,b,c){"use strict";function d(a){return(a>>>24&255)+(a>>>8&65280)+((65280&a)<<8)+((255&a)<<24)}function e(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function f(a){var b;return a&&a.state?(b=a.state,a.total_in=a.total_out=b.total=0,a.msg="",b.wrap&&(a.adler=1&b.wrap),b.mode=K,b.last=0,b.havedict=0,b.dmax=32768,b.head=null,b.hold=0,b.bits=0,b.lencode=b.lendyn=new r.Buf32(ob),b.distcode=b.distdyn=new r.Buf32(pb),b.sane=1,b.back=-1,C):F}function g(a){var b;return a&&a.state?(b=a.state,b.wsize=0,b.whave=0,b.wnext=0,f(a)):F}function h(a,b){var c,d;return a&&a.state?(d=a.state,0>b?(c=0,b=-b):(c=(b>>4)+1,48>b&&(b&=15)),b&&(8>b||b>15)?F:(null!==d.window&&d.wbits!==b&&(d.window=null),d.wrap=c,d.wbits=b,g(a))):F}function i(a,b){var c,d;return a?(d=new e,a.state=d,d.window=null,c=h(a,b),c!==C&&(a.state=null),c):F}function j(a){return i(a,rb)}function k(a){if(sb){var b;for(p=new r.Buf32(512),q=new r.Buf32(32),b=0;144>b;)a.lens[b++]=8;for(;256>b;)a.lens[b++]=9;for(;280>b;)a.lens[b++]=7;for(;288>b;)a.lens[b++]=8;for(v(x,a.lens,0,288,p,0,a.work,{bits:9}),b=0;32>b;)a.lens[b++]=5;v(y,a.lens,0,32,q,0,a.work,{bits:5}),sb=!1}a.lencode=p,a.lenbits=9,a.distcode=q,a.distbits=5}function l(a,b,c,d){var e,f=a.state;return null===f.window&&(f.wsize=1<<f.wbits,f.wnext=0,f.whave=0,f.window=new r.Buf8(f.wsize)),d>=f.wsize?(r.arraySet(f.window,b,c-f.wsize,f.wsize,0),f.wnext=0,f.whave=f.wsize):(e=f.wsize-f.wnext,e>d&&(e=d),r.arraySet(f.window,b,c-d,e,f.wnext),d-=e,d?(r.arraySet(f.window,b,c-d,d,0),f.wnext=d,f.whave=f.wsize):(f.wnext+=e,f.wnext===f.wsize&&(f.wnext=0),f.whave<f.wsize&&(f.whave+=e))),0}function m(a,b){var c,e,f,g,h,i,j,m,n,o,p,q,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,Ab=0,Bb=new r.Buf8(4),Cb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!a||!a.state||!a.output||!a.input&&0!==a.avail_in)return F;c=a.state,c.mode===V&&(c.mode=W),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,o=i,p=j,xb=C;a:for(;;)switch(c.mode){case K:if(0===c.wrap){c.mode=W;break}for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(2&c.wrap&&35615===m){c.check=0,Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0),m=0,n=0,c.mode=L;break}if(c.flags=0,c.head&&(c.head.done=!1),!(1&c.wrap)||(((255&m)<<8)+(m>>8))%31){a.msg="incorrect header check",c.mode=lb;break}if((15&m)!==J){a.msg="unknown compression method",c.mode=lb;break}if(m>>>=4,n-=4,wb=(15&m)+8,0===c.wbits)c.wbits=wb;else if(wb>c.wbits){a.msg="invalid window size",c.mode=lb;break}c.dmax=1<<wb,a.adler=c.check=1,c.mode=512&m?T:V,m=0,n=0;break;case L:for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.flags=m,(255&c.flags)!==J){a.msg="unknown compression method",c.mode=lb;break}if(57344&c.flags){a.msg="unknown header flags set",c.mode=lb;break}c.head&&(c.head.text=m>>8&1),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0)),m=0,n=0,c.mode=M;case M:for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.time=m),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,Bb[2]=m>>>16&255,Bb[3]=m>>>24&255,c.check=t(c.check,Bb,4,0)),m=0,n=0,c.mode=N;case N:for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.xflags=255&m,c.head.os=m>>8),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0)),m=0,n=0,c.mode=O;case O:if(1024&c.flags){for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length=m,c.head&&(c.head.extra_len=m),512&c.flags&&(Bb[0]=255&m,Bb[1]=m>>>8&255,c.check=t(c.check,Bb,2,0)),m=0,n=0}else c.head&&(c.head.extra=null);c.mode=P;case P:if(1024&c.flags&&(q=c.length,q>i&&(q=i),q&&(c.head&&(wb=c.head.extra_len-c.length,c.head.extra||(c.head.extra=new Array(c.head.extra_len)),r.arraySet(c.head.extra,e,g,q,wb)),512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,c.length-=q),c.length))break a;c.length=0,c.mode=Q;case Q:if(2048&c.flags){if(0===i)break a;q=0;do wb=e[g+q++],c.head&&wb&&c.length<65536&&(c.head.name+=String.fromCharCode(wb));while(wb&&i>q);if(512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,wb)break a}else c.head&&(c.head.name=null);c.length=0,c.mode=R;case R:if(4096&c.flags){if(0===i)break a;q=0;do wb=e[g+q++],c.head&&wb&&c.length<65536&&(c.head.comment+=String.fromCharCode(wb));while(wb&&i>q);if(512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,wb)break a}else c.head&&(c.head.comment=null);c.mode=S;case S:if(512&c.flags){for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(65535&c.check)){a.msg="header crc mismatch",c.mode=lb;break}m=0,n=0}c.head&&(c.head.hcrc=c.flags>>9&1,c.head.done=!0),a.adler=c.check=0,c.mode=V;break;case T:for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}a.adler=c.check=d(m),m=0,n=0,c.mode=U;case U:if(0===c.havedict)return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,E;a.adler=c.check=1,c.mode=V;case V:if(b===A||b===B)break a;case W:if(c.last){m>>>=7&n,n-=7&n,c.mode=ib;break}for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}switch(c.last=1&m,m>>>=1,n-=1,3&m){case 0:c.mode=X;break;case 1:if(k(c),c.mode=bb,b===B){m>>>=2,n-=2;break a}break;case 2:c.mode=$;break;case 3:a.msg="invalid block type",c.mode=lb}m>>>=2,n-=2;break;case X:for(m>>>=7&n,n-=7&n;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if((65535&m)!==(m>>>16^65535)){a.msg="invalid stored block lengths",c.mode=lb;break}if(c.length=65535&m,m=0,n=0,c.mode=Y,b===B)break a;case Y:c.mode=Z;case Z:if(q=c.length){if(q>i&&(q=i),q>j&&(q=j),0===q)break a;r.arraySet(f,e,g,q,h),i-=q,g+=q,j-=q,h+=q,c.length-=q;break}c.mode=V;break;case $:for(;14>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.nlen=(31&m)+257,m>>>=5,n-=5,c.ndist=(31&m)+1,m>>>=5,n-=5,c.ncode=(15&m)+4,m>>>=4,n-=4,c.nlen>286||c.ndist>30){a.msg="too many length or distance symbols",c.mode=lb;break}c.have=0,c.mode=_;case _:for(;c.have<c.ncode;){for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.lens[Cb[c.have++]]=7&m,m>>>=3,n-=3}for(;c.have<19;)c.lens[Cb[c.have++]]=0;if(c.lencode=c.lendyn,c.lenbits=7,yb={bits:c.lenbits},xb=v(w,c.lens,0,19,c.lencode,0,c.work,yb),c.lenbits=yb.bits,xb){a.msg="invalid code lengths set",c.mode=lb;break}c.have=0,c.mode=ab;case ab:for(;c.have<c.nlen+c.ndist;){for(;Ab=c.lencode[m&(1<<c.lenbits)-1],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(16>sb)m>>>=qb,n-=qb,c.lens[c.have++]=sb;else{if(16===sb){for(zb=qb+2;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m>>>=qb,n-=qb,0===c.have){a.msg="invalid bit length repeat",c.mode=lb;break}wb=c.lens[c.have-1],q=3+(3&m),m>>>=2,n-=2}else if(17===sb){for(zb=qb+3;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qb,n-=qb,wb=0,q=3+(7&m),m>>>=3,n-=3}else{for(zb=qb+7;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qb,n-=qb,wb=0,q=11+(127&m),m>>>=7,n-=7}if(c.have+q>c.nlen+c.ndist){a.msg="invalid bit length repeat",c.mode=lb;break}for(;q--;)c.lens[c.have++]=wb}}if(c.mode===lb)break;if(0===c.lens[256]){a.msg="invalid code -- missing end-of-block",c.mode=lb;break}if(c.lenbits=9,yb={bits:c.lenbits},xb=v(x,c.lens,0,c.nlen,c.lencode,0,c.work,yb),c.lenbits=yb.bits,xb){a.msg="invalid literal/lengths set",c.mode=lb;break}if(c.distbits=6,c.distcode=c.distdyn,yb={bits:c.distbits},xb=v(y,c.lens,c.nlen,c.ndist,c.distcode,0,c.work,yb),c.distbits=yb.bits,xb){a.msg="invalid distances set",c.mode=lb;break}if(c.mode=bb,b===B)break a;case bb:c.mode=cb;case cb:if(i>=6&&j>=258){a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,u(a,p),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,c.mode===V&&(c.back=-1);break}for(c.back=0;Ab=c.lencode[m&(1<<c.lenbits)-1],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(rb&&0===(240&rb)){for(tb=qb,ub=rb,vb=sb;Ab=c.lencode[vb+((m&(1<<tb+ub)-1)>>tb)],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=tb+qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=tb,n-=tb,c.back+=tb}if(m>>>=qb,n-=qb,c.back+=qb,c.length=sb,0===rb){c.mode=hb;break}if(32&rb){c.back=-1,c.mode=V;break}if(64&rb){a.msg="invalid literal/length code",c.mode=lb;break}c.extra=15&rb,c.mode=db;case db:if(c.extra){for(zb=c.extra;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}c.was=c.length,c.mode=eb;case eb:for(;Ab=c.distcode[m&(1<<c.distbits)-1],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(0===(240&rb)){for(tb=qb,ub=rb,vb=sb;Ab=c.distcode[vb+((m&(1<<tb+ub)-1)>>tb)],qb=Ab>>>24,rb=Ab>>>16&255,sb=65535&Ab,!(n>=tb+qb);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=tb,n-=tb,c.back+=tb}if(m>>>=qb,n-=qb,c.back+=qb,64&rb){a.msg="invalid distance code",c.mode=lb;break}c.offset=sb,c.extra=15&rb,c.mode=fb;case fb:if(c.extra){for(zb=c.extra;zb>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.offset+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}if(c.offset>c.dmax){a.msg="invalid distance too far back",c.mode=lb;break}c.mode=gb;case gb:if(0===j)break a;
if(q=p-j,c.offset>q){if(q=c.offset-q,q>c.whave&&c.sane){a.msg="invalid distance too far back",c.mode=lb;break}q>c.wnext?(q-=c.wnext,ob=c.wsize-q):ob=c.wnext-q,q>c.length&&(q=c.length),pb=c.window}else pb=f,ob=h-c.offset,q=c.length;q>j&&(q=j),j-=q,c.length-=q;do f[h++]=pb[ob++];while(--q);0===c.length&&(c.mode=cb);break;case hb:if(0===j)break a;f[h++]=c.length,j--,c.mode=cb;break;case ib:if(c.wrap){for(;32>n;){if(0===i)break a;i--,m|=e[g++]<<n,n+=8}if(p-=j,a.total_out+=p,c.total+=p,p&&(a.adler=c.check=c.flags?t(c.check,f,p,h-p):s(c.check,f,p,h-p)),p=j,(c.flags?m:d(m))!==c.check){a.msg="incorrect data check",c.mode=lb;break}m=0,n=0}c.mode=jb;case jb:if(c.wrap&&c.flags){for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(4294967295&c.total)){a.msg="incorrect length check",c.mode=lb;break}m=0,n=0}c.mode=kb;case kb:xb=D;break a;case lb:xb=G;break a;case mb:return H;case nb:default:return F}return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,(c.wsize||p!==a.avail_out&&c.mode<lb&&(c.mode<ib||b!==z))&&l(a,a.output,a.next_out,p-a.avail_out)?(c.mode=mb,H):(o-=a.avail_in,p-=a.avail_out,a.total_in+=o,a.total_out+=p,c.total+=p,c.wrap&&p&&(a.adler=c.check=c.flags?t(c.check,f,p,a.next_out-p):s(c.check,f,p,a.next_out-p)),a.data_type=c.bits+(c.last?64:0)+(c.mode===V?128:0)+(c.mode===bb||c.mode===Y?256:0),(0===o&&0===p||b===z)&&xb===C&&(xb=I),xb)}function n(a){if(!a||!a.state)return F;var b=a.state;return b.window&&(b.window=null),a.state=null,C}function o(a,b){var c;return a&&a.state?(c=a.state,0===(2&c.wrap)?F:(c.head=b,b.done=!1,C)):F}var p,q,r=a("../utils/common"),s=a("./adler32"),t=a("./crc32"),u=a("./inffast"),v=a("./inftrees"),w=0,x=1,y=2,z=4,A=5,B=6,C=0,D=1,E=2,F=-2,G=-3,H=-4,I=-5,J=8,K=1,L=2,M=3,N=4,O=5,P=6,Q=7,R=8,S=9,T=10,U=11,V=12,W=13,X=14,Y=15,Z=16,$=17,_=18,ab=19,bb=20,cb=21,db=22,eb=23,fb=24,gb=25,hb=26,ib=27,jb=28,kb=29,lb=30,mb=31,nb=32,ob=852,pb=592,qb=15,rb=qb,sb=!0;c.inflateReset=g,c.inflateReset2=h,c.inflateResetKeep=f,c.inflateInit=j,c.inflateInit2=i,c.inflate=m,c.inflateEnd=n,c.inflateGetHeader=o,c.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":27,"./adler32":29,"./crc32":31,"./inffast":34,"./inftrees":36}],36:[function(a,b){"use strict";var c=a("../utils/common"),d=15,e=852,f=592,g=0,h=1,i=2,j=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],k=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],l=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],m=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];b.exports=function(a,b,n,o,p,q,r,s){var t,u,v,w,x,y,z,A,B,C=s.bits,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=null,O=0,P=new c.Buf16(d+1),Q=new c.Buf16(d+1),R=null,S=0;for(D=0;d>=D;D++)P[D]=0;for(E=0;o>E;E++)P[b[n+E]]++;for(H=C,G=d;G>=1&&0===P[G];G--);if(H>G&&(H=G),0===G)return p[q++]=20971520,p[q++]=20971520,s.bits=1,0;for(F=1;G>F&&0===P[F];F++);for(F>H&&(H=F),K=1,D=1;d>=D;D++)if(K<<=1,K-=P[D],0>K)return-1;if(K>0&&(a===g||1!==G))return-1;for(Q[1]=0,D=1;d>D;D++)Q[D+1]=Q[D]+P[D];for(E=0;o>E;E++)0!==b[n+E]&&(r[Q[b[n+E]]++]=E);if(a===g?(N=R=r,y=19):a===h?(N=j,O-=257,R=k,S-=257,y=256):(N=l,R=m,y=-1),M=0,E=0,D=F,x=q,I=H,J=0,v=-1,L=1<<H,w=L-1,a===h&&L>e||a===i&&L>f)return 1;for(var T=0;;){T++,z=D-J,r[E]<y?(A=0,B=r[E]):r[E]>y?(A=R[S+r[E]],B=N[O+r[E]]):(A=96,B=0),t=1<<D-J,u=1<<I,F=u;do u-=t,p[x+(M>>J)+u]=z<<24|A<<16|B|0;while(0!==u);for(t=1<<D-1;M&t;)t>>=1;if(0!==t?(M&=t-1,M+=t):M=0,E++,0===--P[D]){if(D===G)break;D=b[n+r[E]]}if(D>H&&(M&w)!==v){for(0===J&&(J=H),x+=F,I=D-J,K=1<<I;G>I+J&&(K-=P[I+J],!(0>=K));)I++,K<<=1;if(L+=1<<I,a===h&&L>e||a===i&&L>f)return 1;v=M&w,p[v]=H<<24|I<<16|x-q|0}}return 0!==M&&(p[x+M]=D-J<<24|64<<16|0),s.bits=H,0}},{"../utils/common":27}],37:[function(a,b){"use strict";b.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],38:[function(a,b,c){"use strict";function d(a){for(var b=a.length;--b>=0;)a[b]=0}function e(a){return 256>a?gb[a]:gb[256+(a>>>7)]}function f(a,b){a.pending_buf[a.pending++]=255&b,a.pending_buf[a.pending++]=b>>>8&255}function g(a,b,c){a.bi_valid>V-c?(a.bi_buf|=b<<a.bi_valid&65535,f(a,a.bi_buf),a.bi_buf=b>>V-a.bi_valid,a.bi_valid+=c-V):(a.bi_buf|=b<<a.bi_valid&65535,a.bi_valid+=c)}function h(a,b,c){g(a,c[2*b],c[2*b+1])}function i(a,b){var c=0;do c|=1&a,a>>>=1,c<<=1;while(--b>0);return c>>>1}function j(a){16===a.bi_valid?(f(a,a.bi_buf),a.bi_buf=0,a.bi_valid=0):a.bi_valid>=8&&(a.pending_buf[a.pending++]=255&a.bi_buf,a.bi_buf>>=8,a.bi_valid-=8)}function k(a,b){var c,d,e,f,g,h,i=b.dyn_tree,j=b.max_code,k=b.stat_desc.static_tree,l=b.stat_desc.has_stree,m=b.stat_desc.extra_bits,n=b.stat_desc.extra_base,o=b.stat_desc.max_length,p=0;for(f=0;U>=f;f++)a.bl_count[f]=0;for(i[2*a.heap[a.heap_max]+1]=0,c=a.heap_max+1;T>c;c++)d=a.heap[c],f=i[2*i[2*d+1]+1]+1,f>o&&(f=o,p++),i[2*d+1]=f,d>j||(a.bl_count[f]++,g=0,d>=n&&(g=m[d-n]),h=i[2*d],a.opt_len+=h*(f+g),l&&(a.static_len+=h*(k[2*d+1]+g)));if(0!==p){do{for(f=o-1;0===a.bl_count[f];)f--;a.bl_count[f]--,a.bl_count[f+1]+=2,a.bl_count[o]--,p-=2}while(p>0);for(f=o;0!==f;f--)for(d=a.bl_count[f];0!==d;)e=a.heap[--c],e>j||(i[2*e+1]!==f&&(a.opt_len+=(f-i[2*e+1])*i[2*e],i[2*e+1]=f),d--)}}function l(a,b,c){var d,e,f=new Array(U+1),g=0;for(d=1;U>=d;d++)f[d]=g=g+c[d-1]<<1;for(e=0;b>=e;e++){var h=a[2*e+1];0!==h&&(a[2*e]=i(f[h]++,h))}}function m(){var a,b,c,d,e,f=new Array(U+1);for(c=0,d=0;O-1>d;d++)for(ib[d]=c,a=0;a<1<<_[d];a++)hb[c++]=d;for(hb[c-1]=d,e=0,d=0;16>d;d++)for(jb[d]=e,a=0;a<1<<ab[d];a++)gb[e++]=d;for(e>>=7;R>d;d++)for(jb[d]=e<<7,a=0;a<1<<ab[d]-7;a++)gb[256+e++]=d;for(b=0;U>=b;b++)f[b]=0;for(a=0;143>=a;)eb[2*a+1]=8,a++,f[8]++;for(;255>=a;)eb[2*a+1]=9,a++,f[9]++;for(;279>=a;)eb[2*a+1]=7,a++,f[7]++;for(;287>=a;)eb[2*a+1]=8,a++,f[8]++;for(l(eb,Q+1,f),a=0;R>a;a++)fb[2*a+1]=5,fb[2*a]=i(a,5);kb=new nb(eb,_,P+1,Q,U),lb=new nb(fb,ab,0,R,U),mb=new nb(new Array(0),bb,0,S,W)}function n(a){var b;for(b=0;Q>b;b++)a.dyn_ltree[2*b]=0;for(b=0;R>b;b++)a.dyn_dtree[2*b]=0;for(b=0;S>b;b++)a.bl_tree[2*b]=0;a.dyn_ltree[2*X]=1,a.opt_len=a.static_len=0,a.last_lit=a.matches=0}function o(a){a.bi_valid>8?f(a,a.bi_buf):a.bi_valid>0&&(a.pending_buf[a.pending++]=a.bi_buf),a.bi_buf=0,a.bi_valid=0}function p(a,b,c,d){o(a),d&&(f(a,c),f(a,~c)),E.arraySet(a.pending_buf,a.window,b,c,a.pending),a.pending+=c}function q(a,b,c,d){var e=2*b,f=2*c;return a[e]<a[f]||a[e]===a[f]&&d[b]<=d[c]}function r(a,b,c){for(var d=a.heap[c],e=c<<1;e<=a.heap_len&&(e<a.heap_len&&q(b,a.heap[e+1],a.heap[e],a.depth)&&e++,!q(b,d,a.heap[e],a.depth));)a.heap[c]=a.heap[e],c=e,e<<=1;a.heap[c]=d}function s(a,b,c){var d,f,i,j,k=0;if(0!==a.last_lit)do d=a.pending_buf[a.d_buf+2*k]<<8|a.pending_buf[a.d_buf+2*k+1],f=a.pending_buf[a.l_buf+k],k++,0===d?h(a,f,b):(i=hb[f],h(a,i+P+1,b),j=_[i],0!==j&&(f-=ib[i],g(a,f,j)),d--,i=e(d),h(a,i,c),j=ab[i],0!==j&&(d-=jb[i],g(a,d,j)));while(k<a.last_lit);h(a,X,b)}function t(a,b){var c,d,e,f=b.dyn_tree,g=b.stat_desc.static_tree,h=b.stat_desc.has_stree,i=b.stat_desc.elems,j=-1;for(a.heap_len=0,a.heap_max=T,c=0;i>c;c++)0!==f[2*c]?(a.heap[++a.heap_len]=j=c,a.depth[c]=0):f[2*c+1]=0;for(;a.heap_len<2;)e=a.heap[++a.heap_len]=2>j?++j:0,f[2*e]=1,a.depth[e]=0,a.opt_len--,h&&(a.static_len-=g[2*e+1]);for(b.max_code=j,c=a.heap_len>>1;c>=1;c--)r(a,f,c);e=i;do c=a.heap[1],a.heap[1]=a.heap[a.heap_len--],r(a,f,1),d=a.heap[1],a.heap[--a.heap_max]=c,a.heap[--a.heap_max]=d,f[2*e]=f[2*c]+f[2*d],a.depth[e]=(a.depth[c]>=a.depth[d]?a.depth[c]:a.depth[d])+1,f[2*c+1]=f[2*d+1]=e,a.heap[1]=e++,r(a,f,1);while(a.heap_len>=2);a.heap[--a.heap_max]=a.heap[1],k(a,b),l(f,j,a.bl_count)}function u(a,b,c){var d,e,f=-1,g=b[1],h=0,i=7,j=4;for(0===g&&(i=138,j=3),b[2*(c+1)+1]=65535,d=0;c>=d;d++)e=g,g=b[2*(d+1)+1],++h<i&&e===g||(j>h?a.bl_tree[2*e]+=h:0!==e?(e!==f&&a.bl_tree[2*e]++,a.bl_tree[2*Y]++):10>=h?a.bl_tree[2*Z]++:a.bl_tree[2*$]++,h=0,f=e,0===g?(i=138,j=3):e===g?(i=6,j=3):(i=7,j=4))}function v(a,b,c){var d,e,f=-1,i=b[1],j=0,k=7,l=4;for(0===i&&(k=138,l=3),d=0;c>=d;d++)if(e=i,i=b[2*(d+1)+1],!(++j<k&&e===i)){if(l>j){do h(a,e,a.bl_tree);while(0!==--j)}else 0!==e?(e!==f&&(h(a,e,a.bl_tree),j--),h(a,Y,a.bl_tree),g(a,j-3,2)):10>=j?(h(a,Z,a.bl_tree),g(a,j-3,3)):(h(a,$,a.bl_tree),g(a,j-11,7));j=0,f=e,0===i?(k=138,l=3):e===i?(k=6,l=3):(k=7,l=4)}}function w(a){var b;for(u(a,a.dyn_ltree,a.l_desc.max_code),u(a,a.dyn_dtree,a.d_desc.max_code),t(a,a.bl_desc),b=S-1;b>=3&&0===a.bl_tree[2*cb[b]+1];b--);return a.opt_len+=3*(b+1)+5+5+4,b}function x(a,b,c,d){var e;for(g(a,b-257,5),g(a,c-1,5),g(a,d-4,4),e=0;d>e;e++)g(a,a.bl_tree[2*cb[e]+1],3);v(a,a.dyn_ltree,b-1),v(a,a.dyn_dtree,c-1)}function y(a){var b,c=4093624447;for(b=0;31>=b;b++,c>>>=1)if(1&c&&0!==a.dyn_ltree[2*b])return G;if(0!==a.dyn_ltree[18]||0!==a.dyn_ltree[20]||0!==a.dyn_ltree[26])return H;for(b=32;P>b;b++)if(0!==a.dyn_ltree[2*b])return H;return G}function z(a){pb||(m(),pb=!0),a.l_desc=new ob(a.dyn_ltree,kb),a.d_desc=new ob(a.dyn_dtree,lb),a.bl_desc=new ob(a.bl_tree,mb),a.bi_buf=0,a.bi_valid=0,n(a)}function A(a,b,c,d){g(a,(J<<1)+(d?1:0),3),p(a,b,c,!0)}function B(a){g(a,K<<1,3),h(a,X,eb),j(a)}function C(a,b,c,d){var e,f,h=0;a.level>0?(a.strm.data_type===I&&(a.strm.data_type=y(a)),t(a,a.l_desc),t(a,a.d_desc),h=w(a),e=a.opt_len+3+7>>>3,f=a.static_len+3+7>>>3,e>=f&&(e=f)):e=f=c+5,e>=c+4&&-1!==b?A(a,b,c,d):a.strategy===F||f===e?(g(a,(K<<1)+(d?1:0),3),s(a,eb,fb)):(g(a,(L<<1)+(d?1:0),3),x(a,a.l_desc.max_code+1,a.d_desc.max_code+1,h+1),s(a,a.dyn_ltree,a.dyn_dtree)),n(a),d&&o(a)}function D(a,b,c){return a.pending_buf[a.d_buf+2*a.last_lit]=b>>>8&255,a.pending_buf[a.d_buf+2*a.last_lit+1]=255&b,a.pending_buf[a.l_buf+a.last_lit]=255&c,a.last_lit++,0===b?a.dyn_ltree[2*c]++:(a.matches++,b--,a.dyn_ltree[2*(hb[c]+P+1)]++,a.dyn_dtree[2*e(b)]++),a.last_lit===a.lit_bufsize-1}var E=a("../utils/common"),F=4,G=0,H=1,I=2,J=0,K=1,L=2,M=3,N=258,O=29,P=256,Q=P+1+O,R=30,S=19,T=2*Q+1,U=15,V=16,W=7,X=256,Y=16,Z=17,$=18,_=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],ab=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],bb=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],cb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],db=512,eb=new Array(2*(Q+2));d(eb);var fb=new Array(2*R);d(fb);var gb=new Array(db);d(gb);var hb=new Array(N-M+1);d(hb);var ib=new Array(O);d(ib);var jb=new Array(R);d(jb);var kb,lb,mb,nb=function(a,b,c,d,e){this.static_tree=a,this.extra_bits=b,this.extra_base=c,this.elems=d,this.max_length=e,this.has_stree=a&&a.length},ob=function(a,b){this.dyn_tree=a,this.max_code=0,this.stat_desc=b},pb=!1;c._tr_init=z,c._tr_stored_block=A,c._tr_flush_block=C,c._tr_tally=D,c._tr_align=B},{"../utils/common":27}],39:[function(a,b){"use strict";function c(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}b.exports=c},{}]},{},[9])(9)});

'use strict';
// Vinn workaround for JSzip requiring window.
if (tr.isVinn) {
  /**
   * Hack.
   */
  global.JSZip = global.window.JSZip;
  global.window = undefined;
} else if (tr.isNode) {
  const jsZipAbsPath = HTMLImportsLoader.hrefToAbsolutePath(
      '/jszip.min.js');
  const jsZipModule = require(jsZipAbsPath);
  global.JSZip = jsZipModule;
}


'use strict';

/**
 * @fileoverview ZipImporter inflates zip compressed data and passes it along
 * to an actual importer.
 */
tr.exportTo('tr.e.importer', function() {
  function ZipImporter(model, eventData) {
    if (eventData instanceof ArrayBuffer) {
      eventData = new Uint8Array(eventData);
    }
    this.model_ = model;
    this.eventData_ = eventData;
  }

  /**
   * @param {eventData} string Possibly zip compressed data.
   * @return {boolean} Whether eventData looks like zip compressed data.
   */
  ZipImporter.canImport = function(eventData) {
    let header;
    if (eventData instanceof ArrayBuffer) {
      header = new Uint8Array(eventData.slice(0, 2));
    } else if (typeof(eventData) === 'string' || eventData instanceof String) {
      header = [eventData.charCodeAt(0), eventData.charCodeAt(1)];
    } else {
      return false;
    }
    return header[0] === 'P'.charCodeAt(0) && header[1] === 'K'.charCodeAt(0);
  };

  ZipImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'ZipImporter';
    },

    isTraceDataContainer() {
      return true;
    },

    extractSubtraces() {
      const zip = new JSZip(this.eventData_);
      const subtraces = [];
      for (const idx in zip.files) {
        subtraces.push(zip.files[idx].asBinary());
      }
      return subtraces;
    }
  };

  tr.importer.Importer.register(ZipImporter);

  return {
    ZipImporter,
  };
});


'use strict';

tr.exportTo('tr.e.measure', function() {
  const AsyncSlice = tr.model.AsyncSlice;

  function MeasureAsyncSlice() {
    this.groupTitle_ = 'Ungrouped Measure';
    const matched = /([^\/:]+):([^\/:]+)\/?(.*)/.exec(arguments[1]);
    if (matched !== null) {
      arguments[1] = matched[2];
      this.groupTitle_ = matched[1];
    }
    AsyncSlice.apply(this, arguments);
  }

  MeasureAsyncSlice.prototype = {
    __proto__: AsyncSlice.prototype,

    get viewSubGroupTitle() {
      return this.groupTitle_;
    },

    get title() {
      return this.title_;
    },

    set title(title) {
      this.title_ = title;
    }
  };

  AsyncSlice.subTypes.register(
      MeasureAsyncSlice,
      {
        categoryParts: ['blink.user_timing']
      });

  return {
    MeasureAsyncSlice,
  };
});


'use strict';

tr.exportTo('tr.e.net', function() {
  const AsyncSlice = tr.model.AsyncSlice;

  function NetAsyncSlice() {
    AsyncSlice.apply(this, arguments);
    this.url_ = undefined;
    this.byteCount_ = undefined;
    // Boolean variables indicating whether we have computed corresponding
    // fields. Computing these fields needs iteration through all sub-slices and
    // so recomputation will be costly.
    this.isTitleComputed_ = false;
    this.isUrlComputed_ = false;
  }

  NetAsyncSlice.prototype = {
    __proto__: AsyncSlice.prototype,

    get viewSubGroupTitle() {
      return 'NetLog';
    },

    get title() {
      if (this.isTitleComputed_ || !this.isTopLevel) {
        return this.title_;
      }

      if (this.url !== undefined && this.url.length > 0) {
        // Set the title so we do not have to recompute when it is redrawn.
        this.title_ = this.url;
      } else if (this.args !== undefined &&
                 this.args.source_type !== undefined) {
        // We do not have a URL, use the source type as the title.
        this.title_ = this.args.source_type;
      }
      this.isTitleComputed_ = true;
      return this.title_;
    },

    set title(title) {
      this.title_ = title;
    },

    // A recursive helper function that gets the url param of a slice or its
    // nested subslices if there is one.
    get url() {
      if (this.isUrlComputed_) {
        return this.url_;
      }
      if (this.args !== undefined && this.args.params !== undefined &&
          this.args.params.url !== undefined) {
        this.url_ = this.args.params.url;
      } else if (this.subSlices !== undefined && this.subSlices.length > 0) {
        for (let i = 0; i < this.subSlices.length && ! this.url_; i++) {
          if (this.subSlices[i].url !== undefined) {
            this.url_ = this.subSlices[i].url;
          }
        }
      }
      this.isUrlComputed_ = true;
      return this.url_;
    },

    get byteCount() {
      if (this.byteCount_ !== undefined) {
        return this.byteCount_;
      }

      this.byteCount_ = 0;
      if ((this.originalTitle === 'URL_REQUEST_JOB_FILTERED_BYTES_READ' ||
           this.originalTitle === 'URL_REQUEST_JOB_BYTES_READ') &&
           this.args !== undefined && this.args.params !== undefined &&
           this.args.params.byte_count !== undefined) {
        this.byteCount_ = this.args.params.byte_count;
      }
      for (let i = 0; i < this.subSlices.length; i++) {
        this.byteCount_ += this.subSlices[i].byteCount;
      }
      return this.byteCount_;
    }
  };

  AsyncSlice.subTypes.register(
      NetAsyncSlice,
      {
        categoryParts: ['netlog', 'disabled-by-default-netlog']
      });

  return {
    NetAsyncSlice,
  };
});


'use strict';

/**
 * @fileoverview Base class for linux perf event parsers.
 *
 * The linux perf trace event importer depends on subclasses of
 * Parser to parse event data.  Each subclass corresponds
 * to a group of trace events; e.g. SchedParser implements
 * parsing of sched:* kernel trace events.  Parser subclasses must
 * call Parser.register to arrange to be instantiated
 * and their constructor must register their event handlers with the
 * importer.  For example,
 *
 * var Parser = tr.e.importer.linux_perf.Parser;
 *
 * function WorkqueueParser(importer) {
 *   Parser.call(this, importer);
 *
 *   importer.registerEventHandler('workqueue_execute_start',
 *       WorkqueueParser.prototype.executeStartEvent.bind(this));
 *   importer.registerEventHandler('workqueue_execute_end',
 *       WorkqueueParser.prototype.executeEndEvent.bind(this));
 * }
 *
 * Parser.register(WorkqueueParser);
 *
 * When a registered event name is found in the data stream the associated
 * event handler is invoked:
 *
 *   executeStartEvent: function(eventName, cpuNumber, ts, eventBase)
 *
 * If the routine returns false the caller will generate an import error
 * saying there was a problem parsing it.  Handlers can also emit import
 * messages using this.importer.model.importWarning.  If this is done in lieu of
 * the generic import error it may be desirable for the handler to return
 * true.
 *
 * Trace events generated by writing to the trace_marker file are expected
 * to have a leading text marker followed by a ':'; e.g. the trace clock
 * synchronization event is:
 *
 *  tracing_mark_write: trace_event_clock_sync: parent_ts=0
 *
 * To register an event handler for these events, prepend the marker with
 * 'tracing_mark_write:'; e.g.
 *
 *    this.registerEventHandler('tracing_mark_write:trace_event_clock_sync',
 *
 * All subclasses should depend on importer.linux_perf.parser, e.g.
 *
 * tr.defineModule('importer.linux_perf.workqueue_parser')
 *   .dependsOn('importer.linux_perf.parser')
 *   .exportsTo('tracing', function()
 *
 * and be listed in the dependsOn of FTraceImporter.  Beware that after adding a
 * new subclass you must run build/generate_about_tracing_contents.py to
 * regenerate tr.ui.e.about_tracing.*.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  /**
   * Parses linux perf events.
   * @constructor
   */
  function Parser(importer) {
    this.importer = importer;
    this.model = importer.model;
  }

  Parser.prototype = {
    __proto__: Object.prototype
  };

  const options = new tr.b.ExtensionRegistryOptions(tr.b.BASIC_REGISTRY_MODE);
  options.mandatoryBaseClass = Parser;
  tr.b.decorateExtensionRegistry(Parser, options);

  return {
    Parser,
  };
});


'use strict';

/**
 * @fileoverview Parses trace_marker events that were inserted in the trace by
 * userland.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux trace mark events that were inserted in the trace by userland.
   * @constructor
   */
  function AndroidParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('tracing_mark_write:android',
        AndroidParser.prototype.traceMarkWriteAndroidEvent.bind(this));
    importer.registerEventHandler('0:android',
        AndroidParser.prototype.traceMarkWriteAndroidEvent.bind(this));

    this.model_ = importer.model_;
    this.ppids_ = {};
  }

  function parseArgs(argsString) {
    const args = {};
    if (argsString) {
      const argsArray = argsString.split(';');
      for (let i = 0; i < argsArray.length; ++i) {
        const parts = argsArray[i].split('=');
        if (parts[0]) {
          args[parts.shift()] = parts.join('=');
        }
      }
    }
    return args;
  }

  AndroidParser.prototype = {
    __proto__: Parser.prototype,

    openAsyncSlice(thread, category, name, cookie, ts, args) {
      const asyncSliceConstructor =
         tr.model.AsyncSlice.subTypes.getConstructor(
             category, name);
      const slice = new asyncSliceConstructor(
          category, name,
          ColorScheme.getColorIdForGeneralPurposeString(name), ts, args);
      const key = category + ':' + name + ':' + cookie;
      slice.id = cookie;
      slice.startThread = thread;

      if (!this.openAsyncSlices) {
        this.openAsyncSlices = { };
      }
      this.openAsyncSlices[key] = slice;
    },

    closeAsyncSlice(thread, category, name, cookie, ts, args) {
      if (!this.openAsyncSlices) {
        // No async slices have been started.
        return;
      }

      const key = category + ':' + name + ':' + cookie;
      const slice = this.openAsyncSlices[key];
      if (!slice) {
        // No async slices w/ this key have been started.
        return;
      }

      for (const arg in args) {
        if (slice.args[arg] !== undefined) {
          this.model_.importWarning({
            type: 'parse_error',
            message: 'Both the S and F events of ' + slice.title +
                ' provided values for argument ' + arg + '.' +
                ' The value of the F event will be used.'
          });
        }
        slice.args[arg] = args[arg];
      }

      slice.endThread = thread;
      slice.duration = ts - slice.start;
      slice.startThread.asyncSliceGroup.push(slice);
      delete this.openAsyncSlices[key];
    },

    traceMarkWriteAndroidEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      const eventData = eventBase.details.split('|');
      switch (eventData[0]) {
        case 'B': {
          const ppid = parseInt(eventData[1]);
          const title = eventData[2];
          const args = parseArgs(eventData[3]);
          let category = eventData[4];
          if (category === undefined) category = 'android';

          const thread = this.model_.getOrCreateProcess(ppid)
              .getOrCreateThread(pid);
          thread.name = eventBase.threadName;
          if (!thread.sliceGroup.isTimestampValidForBeginOrEnd(ts)) {
            this.model_.importWarning({
              type: 'parse_error',
              message: 'Timestamps are moving backward.'
            });
            return false;
          }

          this.ppids_[pid] = ppid;
          thread.sliceGroup.beginSlice(category, title, ts, args);

          break;
        }

        case 'E': {
          const ppid = this.ppids_[pid];
          if (ppid === undefined) {
            // Silently ignore unmatched E events.
            break;
          }

          const thread = this.model_.getOrCreateProcess(ppid)
              .getOrCreateThread(pid);
          if (!thread.sliceGroup.openSliceCount) {
            // Silently ignore unmatched E events.
            break;
          }

          const slice = thread.sliceGroup.endSlice(ts);

          const args = parseArgs(eventData[3]);
          for (const arg in args) {
            if (slice.args[arg] !== undefined) {
              this.model_.importWarning({
                type: 'parse_error',
                message: 'Both the B and E events of ' + slice.title +
                    ' provided values for argument ' + arg + '.' +
                    ' The value of the E event will be used.'
              });
            }
            slice.args[arg] = args[arg];
          }

          break;
        }

        case 'C': {
          const ppid = parseInt(eventData[1]);
          const name = eventData[2];
          const value = parseInt(eventData[3]);
          let category = eventData[4];
          if (category === undefined) category = 'android';

          const ctr = this.model_.getOrCreateProcess(ppid)
              .getOrCreateCounter(category, name);
          // Initialize the counter's series fields if needed.
          if (ctr.numSeries === 0) {
            ctr.addSeries(new tr.model.CounterSeries(value,
                ColorScheme.getColorIdForGeneralPurposeString(
                    ctr.name + '.' + 'value')));
          }

          ctr.series.forEach(function(series) {
            series.addCounterSample(ts, value);
          });

          break;
        }

        case 'S': {
          const ppid = parseInt(eventData[1]);
          const name = eventData[2];
          const cookie = parseInt(eventData[3]);
          const args = parseArgs(eventData[4]);
          let category = eventData[5];
          if (category === undefined) category = 'android';

          const thread = this.model_.getOrCreateProcess(ppid)
            .getOrCreateThread(pid);
          thread.name = eventBase.threadName;

          this.ppids_[pid] = ppid;
          this.openAsyncSlice(thread, category, name, cookie, ts, args);

          break;
        }

        case 'F': {
          // Note: An async slice may end on a different thread from the one
          // that started it so this thread may not have been seen yet.
          const ppid = parseInt(eventData[1]);

          const name = eventData[2];
          const cookie = parseInt(eventData[3]);
          const args = parseArgs(eventData[4]);
          let category = eventData[5];
          if (category === undefined) category = 'android';

          const thread = this.model_.getOrCreateProcess(ppid)
            .getOrCreateThread(pid);
          thread.name = eventBase.threadName;

          this.ppids_[pid] = ppid;
          this.closeAsyncSlice(thread, category, name, cookie, ts, args);

          break;
        }

        default:
          return false;
      }

      return true;
    }
  };

  Parser.register(AndroidParser);

  return {
    AndroidParser,
  };
});


'use strict';

/**
 * @fileoverview Parses Binder events
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  // Matches binder transactions:
  // transaction=%d dest_node=%d dest_proc=%d dest_thread=%d reply=%d flags=0x%x
  // code=0x%x
  const binderTransRE = new RegExp('transaction=(\\d+) dest_node=(\\d+) ' +
                                 'dest_proc=(\\d+) dest_thread=(\\d+) ' +
                                 'reply=(\\d+) flags=(0x[0-9a-fA-F]+) ' +
                                 'code=(0x[0-9a-fA-F]+)');

  const binderTransReceivedRE = /transaction=(\d+)/;

  function isBinderThread(name) {
    return (name.indexOf('Binder') > -1);
  }

  // Taken from kernel source: include/uapi/linux/android/binder.h.
  const TF_ONE_WAY = 0x01;
  const TF_ROOT_OBJECT = 0x04;
  const TF_STATUS_CODE = 0x08;
  const TF_ACCEPT_FDS = 0x10;
  const NO_FLAGS = 0;

  function binderFlagsToHuman(num) {
    const flag = parseInt(num, 16);
    let str = '';

    if (flag & TF_ONE_WAY) {
      str += 'this is a one-way call: async, no return; ';
    }
    if (flag & TF_ROOT_OBJECT) {
      str += 'contents are the components root object; ';
    }
    if (flag & TF_STATUS_CODE) {
      str += 'contents are a 32-bit status code; ';
    }
    if (flag & TF_ACCEPT_FDS) {
      str += 'allow replies with file descriptors; ';
    }
    if (flag === NO_FLAGS) {
      str += 'No Flags Set';
    }

    return str;
  }

  function isReplyToOrigin(calling, called) {
    return (called.dest_proc === calling.calling_pid ||
            called.dest_thread === calling.calling_pid);
  }

  function binderCodeToHuman(code) {
    return 'Java Layer Dependent';
  }

  function doInternalSlice(trans, slice, ts) {
    if (slice.subSlices.length !== 0) {
      /* We want to make sure we keep moving the small slice to the end of
         the big slice or else the arrows will not point to the end.
      */
      slice.subSlices[0].start = ts;
      return slice.subSlices[0];
    }
    const kthread = trans.calling_kthread.thread;
    const internalSlice = kthread.sliceGroup.pushCompleteSlice('binder',
        slice.title,
        ts, .001, 0, 0,
        slice.args);

    internalSlice.title = slice.title;
    internalSlice.id = slice.id;
    internalSlice.colorId = slice.colorId;
    slice.subSlices.push(internalSlice);
    return internalSlice;
  }

  function generateBinderArgsForSlice(trans, cThreadName) {
    return {
      'Transaction Id': trans.transaction_key,
      'Destination Node': trans.dest_node,
      'Destination Process': trans.dest_proc,
      'Destination Thread': trans.dest_thread,
      'Destination Name': cThreadName,
      'Reply transaction?': trans.is_reply_transaction,
      'Flags': trans.flags + ' ' +
           binderFlagsToHuman(trans.flags),

      'Code': trans.code + ' ' +
           binderCodeToHuman(trans.code),

      'Calling PID': trans.calling_pid,
      'Calling tgid': trans.calling_kthread.thread.parent.pid
    };
  }

  /** @constructor */
  function BinderTransaction(events, callingPid, callingTs, callingKthread) {
    this.transaction_key = parseInt(events[1]);
    this.dest_node = parseInt(events[2]);
    this.dest_proc = parseInt(events[3]);
    this.dest_thread = parseInt(events[4]);
    this.is_reply_transaction = parseInt(events[5]) === 1 ? true : false;
    this.expect_reply = ((this.is_reply_transaction === false) &&
        (parseInt(events[6], 16) & TF_ONE_WAY) === 0);

    this.flags = events[6];
    this.code = events[7];
    this.calling_pid = callingPid;
    this.calling_ts = callingTs;
    this.calling_kthread = callingKthread;
  }


  /** @constructor */
  function BinderParser(importer) {
    Parser.call(this, importer);
    importer.registerEventHandler('binder_locked',
        BinderParser.prototype.
            binderLocked.bind(this));
    importer.registerEventHandler('binder_unlock',
        BinderParser.prototype.
            binderUnlock.bind(this));
    importer.registerEventHandler('binder_lock',
        BinderParser.prototype.binderLock.bind(this));
    importer.registerEventHandler('binder_transaction',
        BinderParser.prototype.
            binderTransaction.bind(this));
    importer.registerEventHandler('binder_transaction_received',
        BinderParser.prototype.
            binderTransactionReceived.bind(this));

    this.model_ = importer.model;
    this.kthreadlookup = {};
    this.importer_ = importer;
    this.transWaitingRecv = {};
    this.syncTransWaitingCompletion = {};
    this.recursiveSyncTransWaitingCompletion_ByPID = {};
    this.receivedTransWaitingConversion = {};
  }

  BinderParser.prototype = {
    __proto__: Parser.prototype,

    binderLock(eventName, cpuNumber, pid, ts, eventBase) {
      const tgid = parseInt(eventBase.tgid);
      if (isNaN(tgid)) return false;

      this.doNameMappings(pid, tgid, eventName.threadName);

      const kthread = this.importer_.
          getOrCreateBinderKernelThread(eventBase.threadName, tgid, pid);

      kthread.binderAttemptLockTS = ts;
      kthread.binderOpenTsA = ts;
      return true;
    },

    binderLocked(eventName, cpuNumber, pid, ts, eventBase) {
      const tgid = parseInt(eventBase.tgid);
      if (isNaN(tgid)) return false;

      const binderThread = isBinderThread(eventBase.threadName);
      const name = eventBase.threadName;

      const kthread = this.importer_.
          getOrCreateBinderKernelThread(eventBase.threadName, tgid, pid);

      this.doNameMappings(pid, tgid, name);

      const rthread = kthread.thread;
      kthread.binderLockAquiredTS = ts;

      if (kthread.binderAttemptLockTS === undefined) return false;

      const args = this.generateArgsForSlice(tgid, pid, name, kthread);
      rthread.sliceGroup.pushCompleteSlice('binder', 'binder lock waiting',
          kthread.binderAttemptLockTS,
          ts - kthread.binderAttemptLockTS,
          0, 0, args);

      kthread.binderAttemptLockTS = undefined;
      return true;
    },

    binderUnlock(eventName, cpuNumber, pid, ts, eventBase) {
      const tgid = parseInt(eventBase.tgid);
      if (isNaN(tgid)) return false;

      const kthread = this.importer_.
          getOrCreateBinderKernelThread(
          eventBase.threadName, tgid, pid);

      if (kthread.binderLockAquiredTS === undefined) return false;

      const args = this.generateArgsForSlice(tgid, pid, eventBase.threadName,
          kthread);
      kthread.thread.sliceGroup.pushCompleteSlice(
          'binder',
          'binder lock held',
          kthread.binderLockAquiredTS,
          ts - kthread.binderLockAquiredTS,
          0, 0, args);

      kthread.binderLockAquiredTS = undefined;
      return true;
    },

    /** There are a few transaction status changes that signify
     *  progress through a binder transaction:
     *
     * Case One: Sync transaction.
     *  Thread A calls a blocking function on Thread B. We receive a
     *  binder_transaction msg From thread A stating that it is going to Call
     *  thread B. We create a slice and a binder object for this transaction and
     *  add it to addTransactionWaitingForRecv(transaction key, binder object)
     *  This notifies thread B and passes the slice, binder object and time
     *  stamp.
     *
     * Case Two: Async transaction.
     *  Thread A calls an async function on Thread B. Like above we receive a
     *  binder_transaction message, but the flags differ from above. The
     *  TF_ONEWAY flags are set so we know that when Thread B gets the
     *  binder_transaction_received with the same transaciton key the total
     *  transaction is complete.
     *
     * Case Three: 'Prior_receive'
     *  Prior_receive occurs when the thread being called (think A calls B),
     *  receives a binder_transaction_received message, but cannot correlate it
     *  to any current outstanding recursive transactions. That means the
     *  message it just received is the start of some communication, not some
     *  ongoing communication.
     *  Once the execution flow has been passed to thread B, from A:
     *  Thread B enters binder_transaction_received() we see that Thread A
     *  had notified us that it sent us a message by calling
     *  getTransactionWaitingForRecv(transaction key);
     *  What can happen now is either this was a simple Call reply,
     *  or this is a call -> recursion -> reply. We call modelPriorReceive()
     *  which sets up the slices accordingly.
     *  If this is a call -> recursion -> reply
     *  we will go to case 4 by calling addRecursiveSyncTransNeedingCompletion()
     *  The function takes B's PID, the binder object from A and the current
     *  binder object from B. This function adds outstanding non-complete
     *  transactions to a stack on thread B.
     *
     * Case Four: 'recursiveTrans'
     *  This case follows Like above:
     *  A sent binder_transaction
     *  B got binder_transaction_received
     *  B instead of replying to A can Call C or call 'into' A, ie recursion
     *  Case four also deals with setting up a large slice to 'contain'
     *  all the recursive transactions that happen until B finally replies to
     *  A.
     *
     *
     * An example: A-> B-> C-> B-> A
     *
     * (1) A starts a synchronous transaction to B.
     * (2) A enters binderTransaction() event handler, hits the else statement
     * (3) A calls addTransactionWaitingForRecv(trans key, object) to notify
     *     Thread B.
     * (4) B Enters binderTransactionReceived().
     * (5) B hits the second if after calling
     *     getTransactionWaitingForRecv(trans key)
     *     This function returns us the object set up in step (3).
     * (6) This is not an async transaction, B calls
     *      setCurrentReceiveOnPID(B's PID, [ts for (4), object from (3)]).
     *
     * (7) B enters binderTransaction() event handler, first if triggers after
     *     calling getPriorReceiveOnPID(B's PID) the tuple from (6) is returned.
     *
     * (8) Execution enters modelPriorReceive().
     * (8a) A slice is setup for this binder transaction in B's timeline.
     * (9) This is not a reply to thread A, B is going to call Thread C.
     * (10) else statement is hit.
     * (11) We set the tile from (8a) to be binder_reply this is the
     *     'containg slice' for the recursion
     * (12) We create a new slice 'binder_transaction' this slice is the
     *      recursive slice that will have arrows to Thread C's slice.
     * (13) addRecursiveSyncTransNeedingCompletion(B's PID,
     *                                            [obj from (3), obj from 7])
     *      this sets up notification that B's pid has outstanding recursive
     *      transactions that need to be completed.
     * (14) B notifies C that a transaction is waiting for it by calling
     *      addTransactionWaitingForRecv like in step (3).
     * (15) C enters binderTransactionReceived() step 5 6 7 8 8a happen, but in
     *      the context of Thread C.
     * (16) C is in modelPriorReceive(), it hits the first if statement,
     *      this transaction _IS_ a reply, and it is a reply to B.
     * (17) C calls addSyncTransNeedingCompletion(trans key,
     *                                       [object from(3), object from 15-5])
     * (18) B enters binderTransactionReceived() hits the first if after calling
     *      getSyncTransNeedingCompletion(trans key from (17)) the tuple from
     *     (17) gets returned.
     *
     * (19) B scales up the slice created in (12) and sets up flows from 15-8a
     *      slice.
     * (20) B enters BinderTransaction() event handler and the second if is hit
     *      after calling getRecursiveTransactionNeedingCompletion(B's pid).
     * (21) modelRecursiveTransactions() gets called, first if executes.
     * (22) slice durations are fixed up.
     * (23) B notifies A via
     *      addSyncTransNeedingCompletion(trans key, binder obj from 8a).
     * (24) B deletes the outstanding asynctrans via
     (      removeRecursiveTransaction(B's pid).
     * (25) A enters binderTransactionReceived() event handler and finishes up
     *      some flows, and slices.
     */
    binderTransaction(eventName, cpuNumber, pid, ts, eventBase) {
      const event = binderTransRE.exec(eventBase.details);
      if (event === undefined) return false;

      const tgid = parseInt(eventBase.tgid);
      if (isNaN(tgid)) return false;

      this.doNameMappings(pid, tgid, eventBase.threadName);

      const kthread = this.importer_.
          getOrCreateBinderKernelThread(eventBase.threadName, tgid, pid);

      const trans = new BinderTransaction(event, pid, ts, kthread);
      const args = generateBinderArgsForSlice(trans, eventBase.threadName);
      /**
       * This thread previously ack'd the transaction with a
       * transaction_received. That means someone sent us a message we processed
       * it and are now sending a transaction.
       * The transaction could be a response, or it could be recursive.
       */
      const priorReceive = this.getPriorReceiveOnPID(pid);

      if (priorReceive !== false) {
        return this.modelPriorReceive(priorReceive, ts, pid, tgid, kthread,
            trans, args, event);
      }
      /**
       * This Thread has an already established recursive slice. We will now
       * either complete the entire transaction, OR do more recursive calls.
       */
      const recursiveTrans = this.getRecursiveTransactionNeedingCompletion(pid);

      if (recursiveTrans !== false) {
        return this.modelRecursiveTransactions(recursiveTrans, ts, pid,
            kthread, trans, args);
      }

      /**
       * Start of a Transaction. This thread is the initiator of either a call
       * response, an async call -> ack, or a call -> recursion -> response.
       * Note, we put a fake duration into this slice and patch it up later.
       */
      const slice = kthread.thread.sliceGroup.pushCompleteSlice('binder',
          '', ts, .03, 0, 0, args);

      slice.colorId = ColorScheme.getColorIdForGeneralPurposeString(
          ts.toString());
      trans.slice = slice;

      if (trans.expect_reply) {
        slice.title = 'binder transaction';
      } else {
        slice.title = 'binder transaction async';
      }

      this.addTransactionWaitingForRecv(trans.transaction_key, trans);

      return true;
    },

    binderTransactionReceived(eventName, cpuNumber, pid, ts,
        eventBase) {
      const event = binderTransReceivedRE.exec(eventBase.details);
      if (event === undefined) return false;
      const tgid = parseInt(eventBase.tgid);
      if (isNaN(tgid)) return false;

      const transactionkey = parseInt(event[1]);
      const kthread = this.importer_.
          getOrCreateBinderKernelThread(eventBase.threadName, tgid, pid);

      const syncComplete = this.getSyncTransNeedsCompletion(transactionkey);

      if (syncComplete !== false) {
        /* This recv is the completion of a synchronous transaction.
         * We need to scale the slice up to the current ts and finish
         * creating some flows.
         */
        const syncTrans = syncComplete[0];
        const syncSlice = syncTrans.slice;
        const responseTrans = syncComplete[1];
        const responseSlice = responseTrans.slice;

        syncSlice.duration = ts - syncSlice.start;
        /** These calls are a little hack that places a very small slice at
         *  the end of the sync slice and the response slice. This allows us
         *  to hook flow events (arrows) from the start to the end of the
         *  slices.
         */
        const syncInternal = doInternalSlice(syncTrans, syncSlice, ts);
        const responseTs = responseSlice.start + responseSlice.duration;
        const responseInternal = doInternalSlice(responseTrans,
            responseSlice, responseTs);

        if (responseSlice.outFlowEvents.length === 0 ||
            syncSlice.inFlowEvents.length === 0) {
          const flow = this.generateFlow(responseInternal, syncInternal,
              responseTrans, syncTrans);

          syncSlice.inFlowEvents.push(flow);
          responseSlice.outFlowEvents.push(flow);
          this.model_.flowEvents.push(flow);
        }
        // Move flow arrows -- but not the first one.
        for (let i = 1; i < syncSlice.inFlowEvents.length; i++) {
          syncSlice.inFlowEvents[i].duration =
              ts - syncSlice.inFlowEvents[i].start;
        }
        return true;
      }

      const trForRecv = this.getTransactionWaitingForRecv(transactionkey);

      if (trForRecv !== false) {
        if (!trForRecv.expect_reply) {
          // This is an async call place an Async slice.
          const args = generateBinderArgsForSlice(trForRecv,
              eventBase.threadName);
          const slice = kthread.thread.sliceGroup.
              pushCompleteSlice('binder',
              'binder Async recv',
              ts, .03, 0, 0,
              args);

          const fakeEvent = [0, 0, 0, 0, 0, 0, 0];
          const fakeTrans = new BinderTransaction(fakeEvent, pid, ts, kthread);
          const flow = this.generateFlow(trForRecv.slice, slice,
              trForRecv, fakeTrans);

          this.model_.flowEvents.push(flow);
          trForRecv.slice.title = 'binder transaction async';
          trForRecv.slice.duration = .03;
          return true;
        }
        // Setup prior receive.
        trForRecv.slice.title = 'binder transaction';
        this.setCurrentReceiveOnPID(pid, [ts, trForRecv]);
        return true;
      }
      /** This case is when we received an ack for a transaction we have
       *  never seen before. This usually happens at the start of a trace.
       *  We will get incomplete transactions that started before started
       *  tracing. Just discard them.
       */
      return false;
    },

    // helper functions
    modelRecursiveTransactions(recursiveTrans, ts, pid, kthread,
        trans, args) {
      const recursiveSlice = recursiveTrans[1].slice;
      const origSlice = recursiveTrans[0].slice;
      recursiveSlice.duration = ts - recursiveSlice.start;
      trans.slice = recursiveSlice;

      if (trans.is_reply_transaction) {
        /* Case one:
         * This transaction is finally the reply of the recursion.
         */
        origSlice.duration = ts - origSlice.start;
        this.addSyncTransNeedingCompletion(trans.transaction_key,
            recursiveTrans);

        if (isReplyToOrigin(recursiveTrans[0], trans)) {
          this.removeRecursiveTransaction(pid);
        }
      } else {
        /**
         *  Case two:
         *  This transaction is more recursive calls.
         *  This is a nested call within an already started transaction,
         *  it can either be a async or a normal sync transaction.
         */
        const slice = kthread.thread.sliceGroup.pushCompleteSlice('binder',
            '', ts, .03, 0,
            0, args);

        trans.slice = slice;
        this.addTransactionWaitingForRecv(trans.transaction_key, trans);
      }
      return true;
    },

    modelPriorReceive(priorReceive, ts, pid, tgid, kthread, trans,
        args, event) {
      const calleeSlice = priorReceive[1].slice;
      const calleeTrans = priorReceive[1];
      const recvTs = priorReceive[0];
      let slice = kthread.thread.sliceGroup.pushCompleteSlice('binder',
          '', recvTs, ts - recvTs, 0, 0, args);

      const flow = this.generateFlow(calleeSlice, slice, calleeTrans, trans);
      this.model_.flowEvents.push(flow);
      trans.slice = slice;

      if (trans.is_reply_transaction) {
        /* This is a response to a synchronous or a recursive sync
         * transaction.
         */
        slice.title = 'binder reply';
        /* Notify this transaction key that when it recv's it is completing
         * a sync transaction.
         */
        this.addSyncTransNeedingCompletion(trans.transaction_key,
            [calleeTrans, trans]);
      } else {
        /**
         * Recursive calls and or calls around, either way it's not
         * going to complete a transaction.
         */
        slice.title = 'binder reply';
          /* Since this is a recursive transaction we want to create the main
           * large slice which will contain all these recursive transactions.
           * For that we created the main slice above and this is a recursive
           * transaction that will be placed right below it. Note, that this
           * is only for the first recursive transaction. If more come they will
           * be handled below in the getRecursiveTransactionNeedingCompletion
           */
        const trans1 = new BinderTransaction(event, pid, ts, kthread);

        slice = kthread.thread.sliceGroup.
          pushCompleteSlice('binder',
            'binder transaction',
            recvTs,
              (ts - recvTs), 0,
            0, args);

          /* could be a async trans if so set the length to be a small one */
        if (!trans.expect_reply) {
          slice.title = 'binder transaction async';
          slice.duration = .03;
        } else {
            /* stupid hack to stop merging of AIDL slices and
             * this slice. This is currently disabled, if AIDL tracing is on we
             * will see merging of this slice and the AIDL slice. Once upstream
             * has a solution for flow events to be placed in the middle of
             * slices this part can be fixed.
             *
             * This is commented out because AIDL tracing doesn't exit yet.
             */
            // slice.start += .15;
        }
        trans1.slice = slice;
        this.addRecursiveSyncTransNeedingCompletion(pid,
              [calleeTrans, trans]);
        this.addTransactionWaitingForRecv(trans.transaction_key, trans1);
      }
      return true;
    },

    getRecursiveTransactionNeedingCompletion(pid) {
      if (this.recursiveSyncTransWaitingCompletion_ByPID[pid] === undefined) {
        return false;
      }

      const len = this.recursiveSyncTransWaitingCompletion_ByPID[pid].length;
      if (len === 0) return false;

      return this.recursiveSyncTransWaitingCompletion_ByPID[pid][len - 1];
    },

    addRecursiveSyncTransNeedingCompletion(pid, tuple) {
      if (this.recursiveSyncTransWaitingCompletion_ByPID[pid] === undefined) {
        this.recursiveSyncTransWaitingCompletion_ByPID[pid] = [];
      }

      this.recursiveSyncTransWaitingCompletion_ByPID[pid].push(tuple);
    },

    removeRecursiveTransaction(pid) {
      const len = this.recursiveSyncTransWaitingCompletion_ByPID[pid].length;
      if (len === 0) {
        delete this.recursiveSyncTransWaitingCompletion_ByPID[pid];
        return;
      }

      this.recursiveSyncTransWaitingCompletion_ByPID[pid].splice(len - 1, 1);
    },

    setCurrentReceiveOnPID(pid, tuple) {
      if (this.receivedTransWaitingConversion[pid] === undefined) {
        this.receivedTransWaitingConversion[pid] = [];
      }
      this.receivedTransWaitingConversion[pid].push(tuple);
    },

    getPriorReceiveOnPID(pid) {
      if (this.receivedTransWaitingConversion[pid] === undefined) {
        return false;
      }

      const len = this.receivedTransWaitingConversion[pid].length;
      if (len === 0) return false;

      return this.receivedTransWaitingConversion[pid].splice(len - 1, 1)[0];
    },

    addSyncTransNeedingCompletion(transactionkey, tuple) {
      const dict = this.syncTransWaitingCompletion;
      dict[transactionkey] = tuple;
    },

    getSyncTransNeedsCompletion(transactionkey) {
      const ret = this.syncTransWaitingCompletion[transactionkey];
      if (ret === undefined) return false;

      delete this.syncTransWaitingCompletion[transactionkey];
      return ret;
    },

    getTransactionWaitingForRecv(transactionkey) {
      const ret = this.transWaitingRecv[transactionkey];
      if (ret === undefined) return false;

      delete this.transWaitingRecv[transactionkey];
      return ret;
    },

    addTransactionWaitingForRecv(transactionkey, transaction) {
      this.transWaitingRecv[transactionkey] = transaction;
    },

    generateFlow(from, to, fromTrans, toTrans) {
      const title = 'Transaction from : ' +
        this.pid2name(fromTrans.calling_pid) +
        ' From PID: ' + fromTrans.calling_pid + ' to pid: ' +
        toTrans.calling_pid +
        ' Thread Name: ' + this.pid2name(toTrans.calling_pid);

      const ts = from.start;
      const flow = new tr.model.FlowEvent('binder', 'binder',
          title, 1, ts, []);
      flow.startSlice = from;
      flow.endSlice = to;
      flow.start = from.start;
      flow.duration = to.start - ts;

      from.outFlowEvents.push(flow);
      to.inFlowEvents.push(flow);

      return flow;
    },

    generateArgsForSlice(tgid, pid, name, kthread) {
      return {
        'Thread Name': name,
        pid,
        'gid': tgid
      };
    },

    pid2name(pid) {
      return this.kthreadlookup[pid];
    },

    doNameMappings(pid, tgid, name) {
      this.registerPidName(pid, name);
      this.registerPidName(tgid, name);
    },

    registerPidName(pid, name) {
      if (this.pid2name(pid) === undefined) {
        this.kthreadlookup[pid] = name;
      }
    }
  };

  Parser.register(BinderParser);
  return {
    BinderParser,
  };
});


'use strict';

/**
 * @fileoverview Parses trace_marker events that were inserted in the trace by
 * userland.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux trace mark events that were inserted in the trace by userland.
   * @constructor
   */
  function BusParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('memory_bus_usage',
        BusParser.prototype.traceMarkWriteBusEvent.bind(this));

    this.model_ = importer.model_;
    this.ppids_ = {};
  }

  BusParser.prototype = {
    __proto__: Parser.prototype,

    traceMarkWriteBusEvent(eventName, cpuNumber, pid, ts,
        eventBase, threadName) {
      const re = new RegExp('bus=(\\S+) rw_bytes=(\\d+) r_bytes=(\\d+) ' +
                            'w_bytes=(\\d+) cycles=(\\d+) ns=(\\d+)');
      const event = re.exec(eventBase.details);

      const name = event[1];
      const rwBytes = parseInt(event[2]);
      const rBytes = parseInt(event[3]);
      const wBytes = parseInt(event[4]);
      const cycles = parseInt(event[5]);
      const ns = parseInt(event[6]);

      // BW in MiB/s.
      const sec = tr.b.convertUnit(ns, tr.b.UnitPrefixScale.METRIC.NANO,
          tr.b.UnitPrefixScale.METRIC.NONE);
      const readBandwidthInBps = rBytes / sec;
      const readBandwidthInMiBps = tr.b.convertUnit(readBandwidthInBps,
          tr.b.UnitPrefixScale.BINARY.NONE,
          tr.b.UnitPrefixScale.BINARY.MEBI);
      const writeBandwidthInBps = wBytes / sec;
      const writeBandwidthInMiBps = tr.b.convertUnit(writeBandwidthInBps,
          tr.b.UnitPrefixScale.BINARY.NONE,
          tr.b.UnitPrefixScale.BINARY.MEBI);

      let ctr = this.model_.kernel
              .getOrCreateCounter(null, 'bus ' + name + ' read');
      if (ctr.numSeries === 0) {
        ctr.addSeries(new tr.model.CounterSeries('value',
            ColorScheme.getColorIdForGeneralPurposeString(
                ctr.name + '.' + 'value')));
      }
      ctr.series.forEach(function(series) {
        series.addCounterSample(ts, readBandwidthInMiBps);
      });

      ctr = this.model_.kernel
              .getOrCreateCounter(null, 'bus ' + name + ' write');
      if (ctr.numSeries === 0) {
        ctr.addSeries(new tr.model.CounterSeries('value',
            ColorScheme.getColorIdForGeneralPurposeString(
                ctr.name + '.' + 'value')));
      }
      ctr.series.forEach(function(series) {
        series.addCounterSample(ts, writeBandwidthInMiBps);
      });

      return true;
    }
  };

  Parser.register(BusParser);

  return {
    BusParser,
  };
});


'use strict';

/**
 * @fileoverview Parses trace_marker events that were inserted in the trace by
 * userland.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux trace mark events that were inserted in the trace by userland.
   * @constructor
   */
  function ClockParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('clock_set_rate',
        ClockParser.prototype.traceMarkWriteClockEvent.bind(this));

    this.model_ = importer.model_;
    this.ppids_ = {};
  }

  ClockParser.prototype = {
    __proto__: Parser.prototype,

    traceMarkWriteClockEvent(eventName, cpuNumber, pid, ts,
        eventBase, threadName) {
      const event = /(\S+) state=(\d+) cpu_id=(\d+)/.exec(eventBase.details);


      const name = event[1];
      const rate = parseInt(event[2]);

      const ctr = this.model_.kernel
              .getOrCreateCounter(null, name);
      // Initialize the counter's series fields if needed.
      if (ctr.numSeries === 0) {
        ctr.addSeries(new tr.model.CounterSeries('value',
            ColorScheme.getColorIdForGeneralPurposeString(
                ctr.name + '.' + 'value')));
      }
      ctr.series.forEach(function(series) {
        series.addCounterSample(ts, rate);
      });

      return true;
    }
  };

  Parser.register(ClockParser);

  return {
    ClockParser,
  };
});


'use strict';

/**
 * @fileoverview Parses cpufreq events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux cpufreq trace events.
   * @constructor
   */
  function CpufreqParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('cpufreq_interactive_up',
        CpufreqParser.prototype.cpufreqUpDownEvent.bind(this));
    importer.registerEventHandler('cpufreq_interactive_down',
        CpufreqParser.prototype.cpufreqUpDownEvent.bind(this));
    importer.registerEventHandler('cpufreq_interactive_already',
        CpufreqParser.prototype.cpufreqTargetEvent.bind(this));
    importer.registerEventHandler('cpufreq_interactive_notyet',
        CpufreqParser.prototype.cpufreqTargetEvent.bind(this));
    importer.registerEventHandler('cpufreq_interactive_setspeed',
        CpufreqParser.prototype.cpufreqTargetEvent.bind(this));
    importer.registerEventHandler('cpufreq_interactive_target',
        CpufreqParser.prototype.cpufreqTargetEvent.bind(this));
    importer.registerEventHandler('cpufreq_interactive_boost',
        CpufreqParser.prototype.cpufreqBoostUnboostEvent.bind(this));
    importer.registerEventHandler('cpufreq_interactive_unboost',
        CpufreqParser.prototype.cpufreqBoostUnboostEvent.bind(this));
  }

  function splitData(input) {
    // TODO(sleffler) split by cpu
    const data = {};
    const args = input.split(/\s+/);
    const len = args.length;
    for (let i = 0; i < len; i++) {
      const item = args[i].split('=');
      data[item[0]] = parseInt(item[1]);
    }
    return data;
  }

  CpufreqParser.prototype = {
    __proto__: Parser.prototype,

    cpufreqSlice(ts, eventName, cpu, args) {
      // TODO(sleffler) should be per-cpu
      const kthread = this.importer.getOrCreatePseudoThread('cpufreq');
      kthread.openSlice = eventName;
      const slice = new tr.model.ThreadSlice('', kthread.openSlice,
          ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
          ts, args, 0);

      kthread.thread.sliceGroup.pushSlice(slice);
    },

    cpufreqBoostSlice(ts, eventName, args) {
      const kthread = this.importer.getOrCreatePseudoThread('cpufreq_boost');
      kthread.openSlice = eventName;
      const slice = new tr.model.ThreadSlice('', kthread.openSlice,
          ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
          ts, args, 0);

      kthread.thread.sliceGroup.pushSlice(slice);
    },

    /**
     * Parses cpufreq events and sets up state in the importer.
     */
    cpufreqUpDownEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const data = splitData(eventBase.details);
      this.cpufreqSlice(ts, eventName, data.cpu, data);
      return true;
    },

    cpufreqTargetEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      const data = splitData(eventBase.details);
      this.cpufreqSlice(ts, eventName, data.cpu, data);
      return true;
    },

    cpufreqBoostUnboostEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      this.cpufreqBoostSlice(ts, eventName,
          {
            type: eventBase.details
          });
      return true;
    }
  };

  Parser.register(CpufreqParser);

  return {
    CpufreqParser,
  };
});


'use strict';

/**
 * @fileoverview Parses filesystem and block device events in the Linux event
 * trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux filesystem and block device trace events.
   * @constructor
   */
  function DiskParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('f2fs_write_begin',
        DiskParser.prototype.f2fsWriteBeginEvent.bind(this));
    importer.registerEventHandler('f2fs_write_end',
        DiskParser.prototype.f2fsWriteEndEvent.bind(this));
    importer.registerEventHandler('f2fs_sync_file_enter',
        DiskParser.prototype.f2fsSyncFileEnterEvent.bind(this));
    importer.registerEventHandler('f2fs_sync_file_exit',
        DiskParser.prototype.f2fsSyncFileExitEvent.bind(this));
    importer.registerEventHandler('ext4_sync_file_enter',
        DiskParser.prototype.ext4SyncFileEnterEvent.bind(this));
    importer.registerEventHandler('ext4_sync_file_exit',
        DiskParser.prototype.ext4SyncFileExitEvent.bind(this));
    importer.registerEventHandler('ext4_da_write_begin',
        DiskParser.prototype.ext4WriteBeginEvent.bind(this));
    importer.registerEventHandler('ext4_da_write_end',
        DiskParser.prototype.ext4WriteEndEvent.bind(this));
    importer.registerEventHandler('block_rq_issue',
        DiskParser.prototype.blockRqIssueEvent.bind(this));
    importer.registerEventHandler('block_rq_complete',
        DiskParser.prototype.blockRqCompleteEvent.bind(this));
  }

  DiskParser.prototype = {
    __proto__: Parser.prototype,

    openAsyncSlice(ts, category, threadName, pid, key, name) {
      const kthread = this.importer.getOrCreateKernelThread(
          category + ':' + threadName, pid);
      const asyncSliceConstructor =
         tr.model.AsyncSlice.subTypes.getConstructor(
             category, name);
      const slice = new asyncSliceConstructor(
          category, name,
          ColorScheme.getColorIdForGeneralPurposeString(name),
          ts);
      slice.startThread = kthread.thread;

      if (!kthread.openAsyncSlices) {
        kthread.openAsyncSlices = { };
      }
      kthread.openAsyncSlices[key] = slice;
    },

    closeAsyncSlice(ts, category, threadName, pid, key, args) {
      const kthread = this.importer.getOrCreateKernelThread(
          category + ':' + threadName, pid);
      if (kthread.openAsyncSlices) {
        const slice = kthread.openAsyncSlices[key];
        if (slice) {
          slice.duration = ts - slice.start;
          slice.args = args;
          slice.endThread = kthread.thread;
          slice.subSlices = [
            new tr.model.AsyncSlice(category, slice.title,
                slice.colorId, slice.start, slice.args, slice.duration)
          ];
          kthread.thread.asyncSliceGroup.push(slice);
          delete kthread.openAsyncSlices[key];
        }
      }
    },

    /**
     * Parses events and sets up state in the importer.
     */
    f2fsWriteBeginEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev = \((\d+,\d+)\), ino = (\d+), pos = (\d+), len = (\d+), flags = (\d+)/. // @suppress longLineCheck
          exec(eventBase.details);
      if (!event) return false;
      const device = event[1];
      const inode = parseInt(event[2]);
      const pos = parseInt(event[3]);
      const len = parseInt(event[4]);
      const key = device + '-' + inode + '-' + pos + '-' + len;
      this.openAsyncSlice(ts, 'f2fs', eventBase.threadName, eventBase.pid,
          key, 'f2fs_write');
      return true;
    },

    f2fsWriteEndEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev = \((\d+,\d+)\), ino = (\d+), pos = (\d+), len = (\d+), copied = (\d+)/. // @suppress longLineCheck
          exec(eventBase.details);
      if (!event) return false;

      const device = event[1];
      const inode = parseInt(event[2]);
      const pos = parseInt(event[3]);
      const len = parseInt(event[4]);
      const error = parseInt(event[5]) !== len;
      const key = device + '-' + inode + '-' + pos + '-' + len;
      this.closeAsyncSlice(ts, 'f2fs', eventBase.threadName, eventBase.pid,
          key, {
            device,
            inode,
            error
          });
      return true;
    },

    ext4WriteBeginEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev (\d+,\d+) ino (\d+) pos (\d+) len (\d+) flags (\d+)/.
          exec(eventBase.details);
      if (!event) return false;
      const device = event[1];
      const inode = parseInt(event[2]);
      const pos = parseInt(event[3]);
      const len = parseInt(event[4]);
      const key = device + '-' + inode + '-' + pos + '-' + len;
      this.openAsyncSlice(ts, 'ext4', eventBase.threadName, eventBase.pid,
          key, 'ext4_write');
      return true;
    },

    ext4WriteEndEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev (\d+,\d+) ino (\d+) pos (\d+) len (\d+) copied (\d+)/.
          exec(eventBase.details);
      if (!event) return false;

      const device = event[1];
      const inode = parseInt(event[2]);
      const pos = parseInt(event[3]);
      const len = parseInt(event[4]);
      const error = parseInt(event[5]) !== len;
      const key = device + '-' + inode + '-' + pos + '-' + len;
      this.closeAsyncSlice(ts, 'ext4', eventBase.threadName, eventBase.pid,
          key, {
            device,
            inode,
            error
          });
      return true;
    },

    f2fsSyncFileEnterEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = new RegExp(
          'dev = \\((\\d+,\\d+)\\), ino = (\\d+), pino = (\\d+), i_mode = (\\S+), ' + // @suppress longLineCheck
          'i_size = (\\d+), i_nlink = (\\d+), i_blocks = (\\d+), i_advise = (\\d+)'). // @suppress longLineCheck
          exec(eventBase.details);
      if (!event) return false;

      const device = event[1];
      const inode = parseInt(event[2]);
      const key = device + '-' + inode;
      this.openAsyncSlice(ts, 'f2fs', eventBase.threadName, eventBase.pid,
          key, 'fsync');
      return true;
    },

    f2fsSyncFileExitEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = new RegExp('dev = \\((\\d+,\\d+)\\), ino = (\\d+), checkpoint is (\\S+), ' + // @suppress longLineCheck
          'datasync = (\\d+), ret = (\\d+)').
          exec(eventBase.details.replace('not needed', 'not_needed'));
      if (!event) return false;

      const device = event[1];
      const inode = parseInt(event[2]);
      const error = parseInt(event[5]);
      const key = device + '-' + inode;
      this.closeAsyncSlice(ts, 'f2fs', eventBase.threadName, eventBase.pid,
          key, {
            device,
            inode,
            error
          });
      return true;
    },

    ext4SyncFileEnterEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev (\d+,\d+) ino (\d+) parent (\d+) datasync (\d+)/.
          exec(eventBase.details);
      if (!event) return false;

      const device = event[1];
      const inode = parseInt(event[2]);
      const datasync = (event[4] === '1') || (event[4] === 1);
      const key = device + '-' + inode;
      const action = datasync ? 'fdatasync' : 'fsync';
      this.openAsyncSlice(ts, 'ext4', eventBase.threadName, eventBase.pid,
          key, action);
      return true;
    },

    ext4SyncFileExitEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev (\d+,\d+) ino (\d+) ret (\d+)/.exec(eventBase.details);
      if (!event) return false;

      const device = event[1];
      const inode = parseInt(event[2]);
      const error = parseInt(event[3]);
      const key = device + '-' + inode;
      this.closeAsyncSlice(ts, 'ext4', eventBase.threadName, eventBase.pid,
          key, {
            device,
            inode,
            error
          });
      return true;
    },

    blockRqIssueEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = new RegExp('(\\d+,\\d+) (F)?([DWRN])(F)?(A)?(S)?(M)? ' +
          '\\d+ \\(.*\\) (\\d+) \\+ (\\d+) \\[.*\\]').exec(eventBase.details);
      if (!event) return false;

      let action;
      switch (event[3]) {
        case 'D':
          action = 'discard';
          break;
        case 'W':
          action = 'write';
          break;
        case 'R':
          action = 'read';
          break;
        case 'N':
          action = 'none';
          break;
        default:
          action = 'unknown';
          break;
      }

      if (event[2]) {
        action += ' flush';
      }
      if (event[4] === 'F') {
        action += ' fua';
      }
      if (event[5] === 'A') {
        action += ' ahead';
      }
      if (event[6] === 'S') {
        action += ' sync';
      }
      if (event[7] === 'M') {
        action += ' meta';
      }
      const device = event[1];
      const sector = parseInt(event[8]);
      const numSectors = parseInt(event[9]);
      const key = device + '-' + sector + '-' + numSectors;
      this.openAsyncSlice(ts, 'block', eventBase.threadName, eventBase.pid,
          key, action);
      return true;
    },

    blockRqCompleteEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = new RegExp('(\\d+,\\d+) (F)?([DWRN])(F)?(A)?(S)?(M)? ' +
          '\\(.*\\) (\\d+) \\+ (\\d+) \\[(.*)\\]').exec(eventBase.details);
      if (!event) return false;

      const device = event[1];
      const sector = parseInt(event[8]);
      const numSectors = parseInt(event[9]);
      const error = parseInt(event[10]);
      const key = device + '-' + sector + '-' + numSectors;
      this.closeAsyncSlice(ts, 'block', eventBase.threadName, eventBase.pid,
          key, {
            device,
            sector,
            numSectors,
            error
          });
      return true;
    }
  };

  Parser.register(DiskParser);

  return {
    DiskParser,
  };
});


'use strict';

/**
 * @fileoverview Parses drm driver events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux drm trace events.
   * @constructor
   */
  function DrmParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('drm_vblank_event',
        DrmParser.prototype.vblankEvent.bind(this));
  }

  DrmParser.prototype = {
    __proto__: Parser.prototype,

    drmVblankSlice(ts, eventName, args) {
      const kthread = this.importer.getOrCreatePseudoThread('drm_vblank');
      kthread.openSlice = eventName;
      const slice = new tr.model.ThreadSlice('', kthread.openSlice,
          ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
          ts, args, 0);

      kthread.thread.sliceGroup.pushSlice(slice);
    },

    /**
     * Parses drm driver events and sets up state in the importer.
     */
    vblankEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /crtc=(\d+), seq=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      const crtc = parseInt(event[1]);
      const seq = parseInt(event[2]);
      this.drmVblankSlice(ts, 'vblank:' + crtc,
          {
            crtc,
            seq
          });
      return true;
    }
  };

  Parser.register(DrmParser);

  return {
    DrmParser,
  };
});


'use strict';

/**
 * @fileoverview Parses exynos events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux exynos trace events.
   * @constructor
   */
  function ExynosParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('exynos_busfreq_target_int',
        ExynosParser.prototype.busfreqTargetIntEvent.bind(this));
    importer.registerEventHandler('exynos_busfreq_target_mif',
        ExynosParser.prototype.busfreqTargetMifEvent.bind(this));

    importer.registerEventHandler('exynos_page_flip_state',
        ExynosParser.prototype.pageFlipStateEvent.bind(this));
  }

  ExynosParser.prototype = {
    __proto__: Parser.prototype,

    exynosBusfreqSample(name, ts, frequency) {
      const targetCpu = this.importer.getOrCreateCpu(0);
      const counter = targetCpu.getOrCreateCounter('', name);
      if (counter.numSeries === 0) {
        counter.addSeries(new tr.model.CounterSeries('frequency',
            ColorScheme.getColorIdForGeneralPurposeString(
                counter.name + '.' + 'frequency')));
      }
      counter.series.forEach(function(series) {
        series.addCounterSample(ts, frequency);
      });
    },

    /**
     * Parses exynos_busfreq_target_int events and sets up state.
     */
    busfreqTargetIntEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /frequency=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      this.exynosBusfreqSample('INT Frequency', ts, parseInt(event[1]));
      return true;
    },

    /**
     * Parses exynos_busfreq_target_mif events and sets up state.
     */
    busfreqTargetMifEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /frequency=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      this.exynosBusfreqSample('MIF Frequency', ts, parseInt(event[1]));
      return true;
    },

    exynosPageFlipStateOpenSlice(ts, pipe, fb, state) {
      const kthread = this.importer.getOrCreatePseudoThread(
          'exynos_flip_state (pipe:' + pipe + ', fb:' + fb + ')');
      kthread.openSliceTS = ts;
      kthread.openSlice = state;
    },

    exynosPageFlipStateCloseSlice(ts, pipe, fb, args) {
      const kthread = this.importer.getOrCreatePseudoThread(
          'exynos_flip_state (pipe:' + pipe + ', fb:' + fb + ')');
      if (kthread.openSlice) {
        const slice = new tr.model.ThreadSlice('', kthread.openSlice,
            ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
            kthread.openSliceTS,
            args,
            ts - kthread.openSliceTS);
        kthread.thread.sliceGroup.pushSlice(slice);
      }
      kthread.openSlice = undefined;
    },

    /**
     * Parses page_flip_state events and sets up state in the importer.
     */
    pageFlipStateEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /pipe=(\d+), fb=(\d+), state=(.*)/.exec(eventBase.details);
      if (!event) return false;

      const pipe = parseInt(event[1]);
      const fb = parseInt(event[2]);
      const state = event[3];

      this.exynosPageFlipStateCloseSlice(ts, pipe, fb,
          {
            pipe,
            fb
          });
      if (state !== 'flipped') {
        this.exynosPageFlipStateOpenSlice(ts, pipe, fb, state);
      }
      return true;
    }
  };

  Parser.register(ExynosParser);

  return {
    ExynosParser,
  };
});


'use strict';

/**
 * @fileoverview Parses gesture events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses trace events generated by gesture library for touchpad.
   * @constructor
   */
  function GestureParser(importer) {
    Parser.call(this, importer);
    importer.registerEventHandler('tracing_mark_write:log',
        GestureParser.prototype.logEvent.bind(this));
    importer.registerEventHandler('tracing_mark_write:SyncInterpret',
        GestureParser.prototype.syncEvent.bind(this));
    importer.registerEventHandler('tracing_mark_write:HandleTimer',
        GestureParser.prototype.timerEvent.bind(this));
  }

  GestureParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Parse events generate by gesture library.
     * gestureOpenSlice and gestureCloseSlice are two common
     * functions to store the begin time and end time for all
     * events in gesture library
     */
    gestureOpenSlice(title, ts, opt_args) {
      const thread = this.importer.getOrCreatePseudoThread('gesture').thread;
      thread.sliceGroup.beginSlice(
          'touchpad_gesture', title, ts, opt_args);
    },

    gestureCloseSlice(title, ts) {
      const thread = this.importer.getOrCreatePseudoThread('gesture').thread;
      if (thread.sliceGroup.openSliceCount) {
        const slice = thread.sliceGroup.mostRecentlyOpenedPartialSlice;
        if (slice.title !== title) {
          this.importer.model.importWarning({
            type: 'title_match_error',
            message: 'Titles do not match. Title is ' +
                slice.title + ' in openSlice, and is ' +
                title + ' in endSlice'
          });
        } else {
          thread.sliceGroup.endSlice(ts);
        }
      }
    },

    /**
     * For log events, events will come in pairs with a tag log:
     * like this:
     * tracing_mark_write: log: start: TimerLogOutputs
     * tracing_mark_write: log: end: TimerLogOutputs
     * which represent the start and the end time of certain log behavior
     * Take these logs above for example, they are the start and end time
     * of logging Output for HandleTimer function
     */
    logEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const innerEvent =
          /^\s*(\w+):\s*(\w+)$/.exec(eventBase.details);
      switch (innerEvent[1]) {
        case 'start':
          this.gestureOpenSlice('GestureLog', ts, {name: innerEvent[2]});
          break;
        case 'end':
          this.gestureCloseSlice('GestureLog', ts);
      }
      return true;
    },

    /**
     * For SyncInterpret events, events will come in pairs with
     * a tag SyncInterpret:
     * like this:
     * tracing_mark_write: SyncInterpret: start: ClickWiggleFilterInterpreter
     * tracing_mark_write: SyncInterpret: end: ClickWiggleFilterInterpreter
     * which represent the start and the end time of SyncInterpret function
     * inside the certain interpreter in the gesture library.
     * Take the logs above for example, they are the start and end time
     * of the SyncInterpret function inside ClickWiggleFilterInterpreter
     */
    syncEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const innerEvent = /^\s*(\w+):\s*(\w+)$/.exec(eventBase.details);
      switch (innerEvent[1]) {
        case 'start':
          this.gestureOpenSlice('SyncInterpret', ts,
                                {interpreter: innerEvent[2]});
          break;
        case 'end':
          this.gestureCloseSlice('SyncInterpret', ts);
      }
      return true;
    },

    /**
     * For HandleTimer events, events will come in pairs with
     * a tag HandleTimer:
     * like this:
     * tracing_mark_write: HandleTimer: start: LookaheadFilterInterpreter
     * tracing_mark_write: HandleTimer: end: LookaheadFilterInterpreter
     * which represent the start and the end time of HandleTimer function
     * inside the certain interpreter in the gesture library.
     * Take the logs above for example, they are the start and end time
     * of the HandleTimer function inside LookaheadFilterInterpreter
     */
    timerEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const innerEvent = /^\s*(\w+):\s*(\w+)$/.exec(eventBase.details);
      switch (innerEvent[1]) {
        case 'start':
          this.gestureOpenSlice('HandleTimer', ts,
                                {interpreter: innerEvent[2]});
          break;
        case 'end':
          this.gestureCloseSlice('HandleTimer', ts);
      }
      return true;
    }
  };

  Parser.register(GestureParser);

  return {
    GestureParser,
  };
});


'use strict';

/**
 * @fileoverview Parses i2c driver events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux i2c trace events.
   * @constructor
   */
  function I2cParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('i2c_write',
        I2cParser.prototype.i2cWriteEvent.bind(this));
    importer.registerEventHandler('i2c_read',
        I2cParser.prototype.i2cReadEvent.bind(this));
    importer.registerEventHandler('i2c_reply',
        I2cParser.prototype.i2cReplyEvent.bind(this));
    importer.registerEventHandler('i2c_result',
        I2cParser.prototype.i2cResultEvent.bind(this));
  }

  // Matches the i2c_write and i2c_reply records
  const i2cWriteReplyRE = new RegExp(
      'i2c-(\\d+) #(\\d+) a=([\\da-fA-F]+) f=([\\da-fA-F]+) l=(\\d+) ' +
      '(\\[[\\da-fA-F\\-]+\\])');
  // Matches the i2c_read record
  const i2cReadRE = /i2c-(\d+) #(\d+) a=([\da-fA-F]+) f=([\da-fA-F]+) l=(\d+)/;
  // Matches the i2c_result record
  const i2cResultRE = /i2c-(\d+) n=(\d+) ret=(\d+)/;

  I2cParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Parses i2c events and sets up state in the importer.
     */
    i2cWriteEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = i2cWriteReplyRE.exec(eventBase.details);
      if (!event) return false;

      const adapterNumber = parseInt(event[1]);
      const messageNumber = event[2];
      const address = event[3];
      const flags = event[4];
      const dataLength = event[5];
      const data = event[6];
      const thread = this.importer.getOrCreatePseudoThread(
          'i2c adapter ' + adapterNumber);

      pushLastSliceIfNeeded(thread, event[1], ts);

      thread.lastEntryTitle = 'i2c write';
      thread.lastEntryTs = ts;
      thread.lastEntryArgs = {
        'Message number': messageNumber,
        'Address': address,
        'Flags': flags,
        'Data Length': dataLength,
        'Data': data
      };

      return true;
    },

    i2cReadEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = i2cReadRE.exec(eventBase.details);
      if (!event) return false;

      const adapterNumber = parseInt(event[1]);
      const messageNumber = event[2];
      const address = event[3];
      const flags = event[4];
      const dataLength = event[5];
      const thread = this.importer.getOrCreatePseudoThread(
          'i2c adapter ' + adapterNumber);

      pushLastSliceIfNeeded(thread, event[1], ts);

      thread.lastEntryTitle = 'i2c read';
      thread.lastEntryTs = ts;
      thread.lastEntryArgs = {
        'Message number': messageNumber,
        'Address': address,
        'Flags': flags,
        'Data Length': dataLength
      };

      return true;
    },

    i2cReplyEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = i2cWriteReplyRE.exec(eventBase.details);
      if (!event) return false;

      const adapterNumber = parseInt(event[1]);
      const messageNumber = event[2];
      const address = event[3];
      const flags = event[4];
      const dataLength = event[5];
      const data = event[6];
      const thread = this.importer.getOrCreatePseudoThread(
          'i2c adapter ' + adapterNumber);

      pushLastSliceIfNeeded(thread, event[1], ts);

      thread.lastEntryTitle = 'i2c reply';
      thread.lastEntryTs = ts;
      thread.lastEntryArgs = {
        'Message number': messageNumber,
        'Address': address,
        'Flags': flags,
        'Data Length': dataLength,
        'Data': data
      };

      return true;
    },

    i2cResultEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = i2cResultRE.exec(eventBase.details);
      if (!event) return false;

      const adapterNumber = parseInt(event[1]);
      const numMessages = event[2];
      const ret = event[3];
      const thread = this.importer.getOrCreatePseudoThread(
          'i2c adapter ' + adapterNumber);

      const args = thread.lastEntryArgs;
      if (args !== undefined) {
        args['Number of messages'] = numMessages;
        args.Return = ret;
      }

      pushLastSliceIfNeeded(thread, event[1], ts);

      thread.lastEntryTitle = undefined;
      thread.lastEntryTs = undefined;
      thread.lastEntryArgs = undefined;

      return true;
    },
  };

  function pushLastSliceIfNeeded(thread, id, currentTs) {
    if (thread.lastEntryTs !== undefined) {
      const duration = currentTs - thread.lastEntryTs;
      const slice = new tr.model.ThreadSlice(
            '', thread.lastEntryTitle,
            ColorScheme.getColorIdForGeneralPurposeString(id),
            thread.lastEntryTs, thread.lastEntryArgs, duration);
      thread.thread.sliceGroup.pushSlice(slice);
    }
  }

  Parser.register(I2cParser);

  return {
    I2cParser,
  };
});


'use strict';

/**
 * @fileoverview Parses i915 driver events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux i915 trace events.
   * @constructor
   */
  function I915Parser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('i915_gem_object_create',
        I915Parser.prototype.gemObjectCreateEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_bind',
        I915Parser.prototype.gemObjectBindEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_unbind',
        I915Parser.prototype.gemObjectBindEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_change_domain',
        I915Parser.prototype.gemObjectChangeDomainEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_pread',
        I915Parser.prototype.gemObjectPreadWriteEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_pwrite',
        I915Parser.prototype.gemObjectPreadWriteEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_fault',
        I915Parser.prototype.gemObjectFaultEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_clflush',
        // NB: reuse destroy handler
        I915Parser.prototype.gemObjectDestroyEvent.bind(this));
    importer.registerEventHandler('i915_gem_object_destroy',
        I915Parser.prototype.gemObjectDestroyEvent.bind(this));
    importer.registerEventHandler('i915_gem_ring_dispatch',
        I915Parser.prototype.gemRingDispatchEvent.bind(this));
    importer.registerEventHandler('i915_gem_ring_flush',
        I915Parser.prototype.gemRingFlushEvent.bind(this));
    importer.registerEventHandler('i915_gem_request',
        I915Parser.prototype.gemRequestEvent.bind(this));
    importer.registerEventHandler('i915_gem_request_add',
        I915Parser.prototype.gemRequestEvent.bind(this));
    importer.registerEventHandler('i915_gem_request_complete',
        I915Parser.prototype.gemRequestEvent.bind(this));
    importer.registerEventHandler('i915_gem_request_retire',
        I915Parser.prototype.gemRequestEvent.bind(this));
    importer.registerEventHandler('i915_gem_request_wait_begin',
        I915Parser.prototype.gemRequestEvent.bind(this));
    importer.registerEventHandler('i915_gem_request_wait_end',
        I915Parser.prototype.gemRequestEvent.bind(this));
    importer.registerEventHandler('i915_gem_ring_wait_begin',
        I915Parser.prototype.gemRingWaitEvent.bind(this));
    importer.registerEventHandler('i915_gem_ring_wait_end',
        I915Parser.prototype.gemRingWaitEvent.bind(this));
    importer.registerEventHandler('i915_reg_rw',
        I915Parser.prototype.regRWEvent.bind(this));
    importer.registerEventHandler('i915_flip_request',
        I915Parser.prototype.flipEvent.bind(this));
    importer.registerEventHandler('i915_flip_complete',
        I915Parser.prototype.flipEvent.bind(this));
    importer.registerEventHandler('intel_gpu_freq_change',
        I915Parser.prototype.gpuFrequency.bind(this));
  }

  I915Parser.prototype = {
    __proto__: Parser.prototype,

    i915FlipOpenSlice(ts, obj, plane) {
      // use i915_flip_obj_plane?
      const kthread = this.importer.getOrCreatePseudoThread('i915_flip');
      kthread.openSliceTS = ts;
      kthread.openSlice = 'flip:' + obj + '/' + plane;
    },

    i915FlipCloseSlice(ts, args) {
      const kthread = this.importer.getOrCreatePseudoThread('i915_flip');
      if (kthread.openSlice) {
        const slice = new tr.model.ThreadSlice('', kthread.openSlice,
            ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
            kthread.openSliceTS,
            args,
            ts - kthread.openSliceTS);

        kthread.thread.sliceGroup.pushSlice(slice);
      }
      kthread.openSlice = undefined;
    },

    i915GemObjectSlice(ts, eventName, obj, args) {
      const kthread = this.importer.getOrCreatePseudoThread('i915_gem');
      kthread.openSlice = eventName + ':' + obj;
      const slice = new tr.model.ThreadSlice('', kthread.openSlice,
          ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
          ts, args, 0);

      kthread.thread.sliceGroup.pushSlice(slice);
    },

    i915GemRingSlice(ts, eventName, dev, ring, args) {
      const kthread = this.importer.getOrCreatePseudoThread('i915_gem_ring');
      kthread.openSlice = eventName + ':' + dev + '.' + ring;
      const slice = new tr.model.ThreadSlice('', kthread.openSlice,
          ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
          ts, args, 0);

      kthread.thread.sliceGroup.pushSlice(slice);
    },

    i915RegSlice(ts, eventName, reg, args) {
      const kthread = this.importer.getOrCreatePseudoThread('i915_reg');
      kthread.openSlice = eventName + ':' + reg;
      const slice = new tr.model.ThreadSlice('', kthread.openSlice,
          ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
          ts, args, 0);

      kthread.thread.sliceGroup.pushSlice(slice);
    },

    i915FreqChangeSlice(ts, eventName, args) {
      const kthread = this.importer.getOrCreatePseudoThread('i915_gpu_freq');
      kthread.openSlice = eventName;
      const slice = new tr.model.ThreadSlice('', kthread.openSlice,
          ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
          ts, args, 0);

      kthread.thread.sliceGroup.pushSlice(slice);
    },

    /**
     * Parses i915 driver events and sets up state in the importer.
     */
    gemObjectCreateEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /obj=(\w+), size=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      const obj = event[1];
      const size = parseInt(event[2]);
      this.i915GemObjectSlice(ts, eventName, obj,
          {
            obj,
            size
          });
      return true;
    },

    gemObjectBindEvent(eventName, cpuNumber, pid, ts, eventBase) {
      // TODO(sleffler) mappable
      const event = /obj=(\w+), offset=(\w+), size=(\d+)/.exec(
          eventBase.details);
      if (!event) return false;

      const obj = event[1];
      const offset = event[2];
      const size = parseInt(event[3]);
      this.i915ObjectGemSlice(ts, eventName + ':' + obj,
          {
            obj,
            offset,
            size
          });
      return true;
    },

    gemObjectChangeDomainEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      const event = /obj=(\w+), read=(\w+=>\w+), write=(\w+=>\w+)/.exec(
          eventBase.details);
      if (!event) return false;

      const obj = event[1];
      const read = event[2];
      const write = event[3];
      this.i915GemObjectSlice(ts, eventName, obj,
          {
            obj,
            read,
            write
          });
      return true;
    },

    gemObjectPreadWriteEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      const event = /obj=(\w+), offset=(\d+), len=(\d+)/.exec(
          eventBase.details);
      if (!event) return false;

      const obj = event[1];
      const offset = parseInt(event[2]);
      const len = parseInt(event[3]);
      this.i915GemObjectSlice(ts, eventName, obj,
          {
            obj,
            offset,
            len
          });
      return true;
    },

    gemObjectFaultEvent(eventName, cpuNumber, pid, ts, eventBase) {
      // TODO(sleffler) writable
      const event = /obj=(\w+), (\w+) index=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      const obj = event[1];
      const type = event[2];
      const index = parseInt(event[3]);
      this.i915GemObjectSlice(ts, eventName, obj,
          {
            obj,
            type,
            index
          });
      return true;
    },

    gemObjectDestroyEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /obj=(\w+)/.exec(eventBase.details);
      if (!event) return false;

      const obj = event[1];
      this.i915GemObjectSlice(ts, eventName, obj,
          {
            obj
          });
      return true;
    },

    gemRingDispatchEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev=(\d+), ring=(\d+), seqno=(\d+)/.exec(
          eventBase.details);
      if (!event) return false;

      const dev = parseInt(event[1]);
      const ring = parseInt(event[2]);
      const seqno = parseInt(event[3]);
      this.i915GemRingSlice(ts, eventName, dev, ring,
          {
            dev,
            ring,
            seqno
          });
      return true;
    },

    gemRingFlushEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev=(\d+), ring=(\w+), invalidate=(\w+), flush=(\w+)/
          .exec(eventBase.details);
      if (!event) return false;

      const dev = parseInt(event[1]);
      const ring = parseInt(event[2]);
      const invalidate = event[3];
      const flush = event[4];
      this.i915GemRingSlice(ts, eventName, dev, ring,
          {
            dev,
            ring,
            invalidate,
            flush
          });
      return true;
    },

    gemRequestEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev=(\d+), ring=(\d+), seqno=(\d+)/.exec(
          eventBase.details);
      if (!event) return false;

      const dev = parseInt(event[1]);
      const ring = parseInt(event[2]);
      const seqno = parseInt(event[3]);
      this.i915GemRingSlice(ts, eventName, dev, ring,
          {
            dev,
            ring,
            seqno
          });
      return true;
    },

    gemRingWaitEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /dev=(\d+), ring=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      const dev = parseInt(event[1]);
      const ring = parseInt(event[2]);
      this.i915GemRingSlice(ts, eventName, dev, ring,
          {
            dev,
            ring
          });
      return true;
    },

    regRWEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /(\w+) reg=(\w+), len=(\d+), val=(\(\w+, \w+\))/
          .exec(eventBase.details);
      if (!event) return false;

      const rw = event[1];
      const reg = event[2];
      const len = event[3];
      const data = event[3];
      this.i915RegSlice(ts, rw, reg,
          {
            rw,
            reg,
            len,
            data
          });
      return true;
    },

    flipEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /plane=(\d+), obj=(\w+)/.exec(eventBase.details);
      if (!event) return false;

      const plane = parseInt(event[1]);
      const obj = event[2];
      if (eventName === 'i915_flip_request') {
        this.i915FlipOpenSlice(ts, obj, plane);
      } else {
        this.i915FlipCloseSlice(ts,
            {
              obj,
              plane
            });
      }
      return true;
    },

    gpuFrequency(eventName, cpuNumver, pid, ts, eventBase) {
      const event = /new_freq=(\d+)/.exec(eventBase.details);
      if (!event) return false;
      const freq = parseInt(event[1]);

      this.i915FreqChangeSlice(ts, eventName, {
        freq
      });
      return true;
    }
  };

  Parser.register(I915Parser);

  return {
    I915Parser,
  };
});


'use strict';

/**
 * @fileoverview Parses drm driver events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux irq trace events.
   * @constructor
   */
  function IrqParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('irq_handler_entry',
        IrqParser.prototype.irqHandlerEntryEvent.bind(this));
    importer.registerEventHandler('irq_handler_exit',
        IrqParser.prototype.irqHandlerExitEvent.bind(this));
    importer.registerEventHandler('softirq_raise',
        IrqParser.prototype.softirqRaiseEvent.bind(this));
    importer.registerEventHandler('softirq_entry',
        IrqParser.prototype.softirqEntryEvent.bind(this));
    importer.registerEventHandler('softirq_exit',
        IrqParser.prototype.softirqExitEvent.bind(this));
    importer.registerEventHandler('ipi_entry',
        IrqParser.prototype.ipiEntryEvent.bind(this));
    importer.registerEventHandler('ipi_exit',
        IrqParser.prototype.ipiExitEvent.bind(this));
    importer.registerEventHandler('preempt_disable',
        IrqParser.prototype.preemptStartEvent.bind(this));
    importer.registerEventHandler('preempt_enable',
        IrqParser.prototype.preemptEndEvent.bind(this));
    importer.registerEventHandler('irq_disable',
        IrqParser.prototype.irqoffStartEvent.bind(this));
    importer.registerEventHandler('irq_enable',
        IrqParser.prototype.irqoffEndEvent.bind(this));
  }

  // Matches the irq_handler_entry record
  const irqHandlerEntryRE = /irq=(\d+) name=(.+)/;

  // Matches the irq_handler_exit record
  const irqHandlerExitRE = /irq=(\d+) ret=(.+)/;

  // Matches the softirq_raise record
  const softirqRE = /vec=(\d+) \[action=(.+)\]/;

  // Matches the ipi_exit_
  const ipiHandlerExitRE = /\((.+)\)/;

  // Matches the preempt_disable/enable records
  const preemptirqRE = /caller=(.+) parent=(.+)/;

  IrqParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Parses irq events and sets up state in the mporter.
     */
    irqHandlerEntryEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = irqHandlerEntryRE.exec(eventBase.details);
      if (!event) return false;

      const irq = parseInt(event[1]);
      const name = event[2];

      const thread = this.importer.getOrCreatePseudoThread(
          'irqs cpu ' + cpuNumber);
      thread.lastEntryTs = ts;
      thread.irqName = name;

      return true;
    },

    irqHandlerExitEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = irqHandlerExitRE.exec(eventBase.details);
      if (!event) return false;

      const irq = parseInt(event[1]);
      const ret = event[2];
      const thread = this.importer.getOrCreatePseudoThread(
          'irqs cpu ' + cpuNumber);

      if (thread.lastEntryTs !== undefined) {
        const duration = ts - thread.lastEntryTs;
        const slice = new tr.model.ThreadSlice(
            '',
            'IRQ (' + thread.irqName + ')',
            ColorScheme.getColorIdForGeneralPurposeString(event[1]),
            thread.lastEntryTs, { ret },
            duration);
        thread.thread.sliceGroup.pushSlice(slice);
      }
      thread.lastEntryTs = undefined;
      thread.irqName = undefined;
      return true;
    },

    softirqRaiseEvent(eventName, cpuNumber, pid, ts, eventBase) {
      return true;
    },

    softirqEntryEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = softirqRE.exec(eventBase.details);
      if (!event) return false;

      const action = event[2];
      const thread = this.importer.getOrCreatePseudoThread(
          'softirq cpu ' + cpuNumber);
      thread.lastEntryTs = ts;

      return true;
    },

    softirqExitEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = softirqRE.exec(eventBase.details);
      if (!event) return false;

      const vec = parseInt(event[1]);
      const action = event[2];
      const thread = this.importer.getOrCreatePseudoThread(
          'softirq cpu ' + cpuNumber);

      if (thread.lastEntryTs !== undefined) {
        const duration = ts - thread.lastEntryTs;
        const slice = new tr.model.ThreadSlice(
            '', action,
            ColorScheme.getColorIdForGeneralPurposeString(event[1]),
            thread.lastEntryTs, { vec },
            duration);
        thread.thread.sliceGroup.pushSlice(slice);
      }
      thread.lastEntryTs = undefined;
      return true;
    },
    /**
     * Parses ipi events and sets up state in the mporter.
     */
    ipiEntryEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const thread = this.importer.getOrCreatePseudoThread(
          'irqs cpu ' + cpuNumber);
      thread.lastEntryTs = ts;

      return true;
    },

    ipiExitEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = ipiHandlerExitRE.exec(eventBase.details);
      if (!event) return false;

      const ipiName = event[1];
      const thread = this.importer.getOrCreatePseudoThread(
          'irqs cpu ' + cpuNumber);

      if (thread.lastEntryTs !== undefined) {
        const duration = ts - thread.lastEntryTs;
        const slice = new tr.model.ThreadSlice(
            '',
            'IPI (' + ipiName + ')',
            ColorScheme.getColorIdForGeneralPurposeString(ipiName),
            thread.lastEntryTs,
            {},
            duration);
        thread.thread.sliceGroup.pushSlice(slice);
      }
      thread.lastEntryTs = undefined;
      return true;
    },

    /**
     * Parses preempt disable/enable events and sets up state in the importer.
     */
    preemptStartEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = preemptirqRE.exec(eventBase.details);
      if (!event) return false;

      const thread = this.importer.getOrCreatePseudoThread(
          'preempt cpu ' + cpuNumber);
      thread.lastEntryTs = ts;

      thread.preemptStartCaller = event[1];
      thread.preemptStartParent = event[2];
      return true;
    },

    preemptEndEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = preemptirqRE.exec(eventBase.details);
      if (!event) return false;

      const thread = this.importer.getOrCreatePseudoThread(
          'preempt cpu ' + cpuNumber);

      thread.preemptEndCaller = event[1];
      thread.preemptEndParent = event[2];

      if (thread.lastEntryTs !== undefined) {
        const duration = ts - thread.lastEntryTs;
        const slice = new tr.model.ThreadSlice(
            '',
            thread.preemptStartParent + ': ' + thread.preemptStartCaller,
            ColorScheme.getColorIdForGeneralPurposeString(
                thread.preemptEndCaller),
            thread.lastEntryTs, {},
            duration);
        thread.thread.sliceGroup.pushSlice(slice);
      }
      thread.lastEntryTs = undefined;
      return true;
    },

    /**
     * Parses irqoff disable/enable events and sets up state in the importer.
     */
    irqoffStartEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = preemptirqRE.exec(eventBase.details);
      if (!event) return false;

      const thread = this.importer.getOrCreatePseudoThread(
          'irqoff cpu ' + cpuNumber);
      thread.lastEntryTs = ts;

      thread.irqoffStartCaller = event[1];
      thread.irqoffStartParent = event[2];
      return true;
    },

    irqoffEndEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = preemptirqRE.exec(eventBase.details);
      if (!event) return false;

      const thread = this.importer.getOrCreatePseudoThread(
          'irqoff cpu ' + cpuNumber);

      thread.irqoffEndCaller = event[1];
      thread.irqoffEndParent = event[2];

      if (thread.lastEntryTs !== undefined) {
        const duration = ts - thread.lastEntryTs;
        const slice = new tr.model.ThreadSlice(
            '',
            thread.irqoffStartParent + ': ' + thread.irqoffStartCaller,
            ColorScheme.getColorIdForGeneralPurposeString(
                thread.irqoffEndCaller),
            thread.lastEntryTs, {},
            duration);
        thread.thread.sliceGroup.pushSlice(slice);
      }
      thread.lastEntryTs = undefined;
      return true;
    }
  };

  Parser.register(IrqParser);

  return {
    IrqParser,
  };
});


'use strict';

/**
 * @fileoverview Parses graph_ent and graph_ret events that were inserted by
 * the Linux kernel's function graph trace.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const LinuxPerfParser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses graph_ent and graph_ret events that were inserted by the Linux
   * kernel's function graph trace.
   * @constructor
   */
  function KernelFuncParser(importer) {
    LinuxPerfParser.call(this, importer);

    importer.registerEventHandler('graph_ent',
        KernelFuncParser.prototype.traceKernelFuncEnterEvent.
            bind(this));
    importer.registerEventHandler('graph_ret',
        KernelFuncParser.prototype.traceKernelFuncReturnEvent.
            bind(this));

    this.model_ = importer.model_;
    this.ppids_ = {};
  }

  const TestExports = {};

  const funcEnterRE = new RegExp('func=(.+)');
  TestExports.funcEnterRE = funcEnterRE;

  KernelFuncParser.prototype = {
    __proto__: LinuxPerfParser.prototype,

    traceKernelFuncEnterEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      const eventData = funcEnterRE.exec(eventBase.details);
      if (!eventData) return false;

      if (eventBase.tgid === undefined) {
        return false;
      }

      const tgid = parseInt(eventBase.tgid);
      const name = eventData[1];
      const thread = this.model_.getOrCreateProcess(tgid)
        .getOrCreateThread(pid);
      thread.name = eventBase.threadName;

      const slices = thread.kernelSliceGroup;
      if (!slices.isTimestampValidForBeginOrEnd(ts)) {
        this.model_.importWarning({
          type: 'parse_error',
          message: 'Timestamps are moving backward.'
        });
        return false;
      }

      const slice = slices.beginSlice(null, name, ts, {});

      return true;
    },

    traceKernelFuncReturnEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      if (eventBase.tgid === undefined) {
        return false;
      }

      const tgid = parseInt(eventBase.tgid);
      const thread = this.model_.getOrCreateProcess(tgid)
        .getOrCreateThread(pid);
      thread.name = eventBase.threadName;

      const slices = thread.kernelSliceGroup;
      if (!slices.isTimestampValidForBeginOrEnd(ts)) {
        this.model_.importWarning({
          type: 'parse_error',
          message: 'Timestamps are moving backward.'
        });
        return false;
      }

      if (slices.openSliceCount > 0) {
        slices.endSlice(ts);
      }

      return true;
    }
  };

  LinuxPerfParser.register(KernelFuncParser);

  return {
    KernelFuncParser,
  };
});


'use strict';

/**
 * @fileoverview Parses Mali DDK/kernel events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses Mali DDK/kernel trace events.
   * @constructor
   */
  function MaliParser(importer) {
    Parser.call(this, importer);

    // kernel DVFS events
    importer.registerEventHandler('mali_dvfs_event',
        MaliParser.prototype.dvfsEventEvent.bind(this));
    importer.registerEventHandler('mali_dvfs_set_clock',
        MaliParser.prototype.dvfsSetClockEvent.bind(this));
    importer.registerEventHandler('mali_dvfs_set_voltage',
        MaliParser.prototype.dvfsSetVoltageEvent.bind(this));

    // kernel Mali hw counter events
    this.addJMCounter('mali_hwc_MESSAGES_SENT', 'Messages Sent');
    this.addJMCounter('mali_hwc_MESSAGES_RECEIVED', 'Messages Received');
    this.addJMCycles('mali_hwc_GPU_ACTIVE', 'GPU Active');
    this.addJMCycles('mali_hwc_IRQ_ACTIVE', 'IRQ Active');

    for (let i = 0; i < 7; i++) {
      const jobStr = 'JS' + i;
      const jobHWCStr = 'mali_hwc_' + jobStr;
      this.addJMCounter(jobHWCStr + '_JOBS', jobStr + ' Jobs');
      this.addJMCounter(jobHWCStr + '_TASKS', jobStr + ' Tasks');
      this.addJMCycles(jobHWCStr + '_ACTIVE', jobStr + ' Active');
      this.addJMCycles(jobHWCStr + '_WAIT_READ', jobStr + ' Wait Read');
      this.addJMCycles(jobHWCStr + '_WAIT_ISSUE', jobStr + ' Wait Issue');
      this.addJMCycles(jobHWCStr + '_WAIT_DEPEND', jobStr + ' Wait Depend');
      this.addJMCycles(jobHWCStr + '_WAIT_FINISH', jobStr + ' Wait Finish');
    }

    this.addTilerCounter('mali_hwc_TRIANGLES', 'Triangles');
    this.addTilerCounter('mali_hwc_QUADS', 'Quads');
    this.addTilerCounter('mali_hwc_POLYGONS', 'Polygons');
    this.addTilerCounter('mali_hwc_POINTS', 'Points');
    this.addTilerCounter('mali_hwc_LINES', 'Lines');
    this.addTilerCounter('mali_hwc_VCACHE_HIT', 'VCache Hit');
    this.addTilerCounter('mali_hwc_VCACHE_MISS', 'VCache Miss');
    this.addTilerCounter('mali_hwc_FRONT_FACING', 'Front Facing');
    this.addTilerCounter('mali_hwc_BACK_FACING', 'Back Facing');
    this.addTilerCounter('mali_hwc_PRIM_VISIBLE', 'Prim Visible');
    this.addTilerCounter('mali_hwc_PRIM_CULLED', 'Prim Culled');
    this.addTilerCounter('mali_hwc_PRIM_CLIPPED', 'Prim Clipped');

    this.addTilerCounter('mali_hwc_WRBUF_HIT', 'Wrbuf Hit');
    this.addTilerCounter('mali_hwc_WRBUF_MISS', 'Wrbuf Miss');
    this.addTilerCounter('mali_hwc_WRBUF_LINE', 'Wrbuf Line');
    this.addTilerCounter('mali_hwc_WRBUF_PARTIAL', 'Wrbuf Partial');
    this.addTilerCounter('mali_hwc_WRBUF_STALL', 'Wrbuf Stall');

    this.addTilerCycles('mali_hwc_ACTIVE', 'Tiler Active');
    this.addTilerCycles('mali_hwc_INDEX_WAIT', 'Index Wait');
    this.addTilerCycles('mali_hwc_INDEX_RANGE_WAIT', 'Index Range Wait');
    this.addTilerCycles('mali_hwc_VERTEX_WAIT', 'Vertex Wait');
    this.addTilerCycles('mali_hwc_PCACHE_WAIT', 'Pcache Wait');
    this.addTilerCycles('mali_hwc_WRBUF_WAIT', 'Wrbuf Wait');
    this.addTilerCycles('mali_hwc_BUS_READ', 'Bus Read');
    this.addTilerCycles('mali_hwc_BUS_WRITE', 'Bus Write');

    this.addTilerCycles('mali_hwc_TILER_UTLB_STALL', 'Tiler UTLB Stall');
    this.addTilerCycles('mali_hwc_TILER_UTLB_HIT', 'Tiler UTLB Hit');

    this.addFragCycles('mali_hwc_FRAG_ACTIVE', 'Active');
    /* NB: don't propagate spelling mistakes to labels */
    this.addFragCounter('mali_hwc_FRAG_PRIMATIVES', 'Primitives');
    this.addFragCounter('mali_hwc_FRAG_PRIMATIVES_DROPPED',
        'Primitives Dropped');
    this.addFragCycles('mali_hwc_FRAG_CYCLE_DESC', 'Descriptor Processing');
    this.addFragCycles('mali_hwc_FRAG_CYCLES_PLR', 'PLR Processing??');
    this.addFragCycles('mali_hwc_FRAG_CYCLES_VERT', 'Vertex Processing');
    this.addFragCycles('mali_hwc_FRAG_CYCLES_TRISETUP', 'Triangle Setup');
    this.addFragCycles('mali_hwc_FRAG_CYCLES_RAST', 'Rasterization???');
    this.addFragCounter('mali_hwc_FRAG_THREADS', 'Threads');
    this.addFragCounter('mali_hwc_FRAG_DUMMY_THREADS', 'Dummy Threads');
    this.addFragCounter('mali_hwc_FRAG_QUADS_RAST', 'Quads Rast');
    this.addFragCounter('mali_hwc_FRAG_QUADS_EZS_TEST', 'Quads EZS Test');
    this.addFragCounter('mali_hwc_FRAG_QUADS_EZS_KILLED', 'Quads EZS Killed');
    this.addFragCounter('mali_hwc_FRAG_QUADS_LZS_TEST', 'Quads LZS Test');
    this.addFragCounter('mali_hwc_FRAG_QUADS_LZS_KILLED', 'Quads LZS Killed');
    this.addFragCycles('mali_hwc_FRAG_CYCLE_NO_TILE', 'No Tiles');
    this.addFragCounter('mali_hwc_FRAG_NUM_TILES', 'Tiles');
    this.addFragCounter('mali_hwc_FRAG_TRANS_ELIM', 'Transactions Eliminated');

    this.addComputeCycles('mali_hwc_COMPUTE_ACTIVE', 'Active');
    this.addComputeCounter('mali_hwc_COMPUTE_TASKS', 'Tasks');
    this.addComputeCounter('mali_hwc_COMPUTE_THREADS', 'Threads Started');
    this.addComputeCycles('mali_hwc_COMPUTE_CYCLES_DESC',
        'Waiting for Descriptors');

    this.addTripipeCycles('mali_hwc_TRIPIPE_ACTIVE', 'Active');

    this.addArithCounter('mali_hwc_ARITH_WORDS', 'Instructions (/Pipes)');
    this.addArithCycles('mali_hwc_ARITH_CYCLES_REG',
        'Reg scheduling stalls (/Pipes)');
    this.addArithCycles('mali_hwc_ARITH_CYCLES_L0',
        'L0 cache miss stalls (/Pipes)');
    this.addArithCounter('mali_hwc_ARITH_FRAG_DEPEND',
        'Frag dep check failures (/Pipes)');

    this.addLSCounter('mali_hwc_LS_WORDS', 'Instruction Words Completed');
    this.addLSCounter('mali_hwc_LS_ISSUES', 'Full Pipeline Issues');
    this.addLSCounter('mali_hwc_LS_RESTARTS', 'Restarts (unpairable insts)');
    this.addLSCounter('mali_hwc_LS_REISSUES_MISS',
        'Pipeline reissue (cache miss/uTLB)');
    this.addLSCounter('mali_hwc_LS_REISSUES_VD',
        'Pipeline reissue (varying data)');
    /* TODO(sleffler) fix kernel event typo */
    this.addLSCounter('mali_hwc_LS_REISSUE_ATTRIB_MISS',
        'Pipeline reissue (attribute cache miss)');
    this.addLSCounter('mali_hwc_LS_REISSUE_NO_WB', 'Writeback not used');

    this.addTexCounter('mali_hwc_TEX_WORDS', 'Words');
    this.addTexCounter('mali_hwc_TEX_BUBBLES', 'Bubbles');
    this.addTexCounter('mali_hwc_TEX_WORDS_L0', 'Words L0');
    this.addTexCounter('mali_hwc_TEX_WORDS_DESC', 'Words Desc');
    this.addTexCounter('mali_hwc_TEX_THREADS', 'Threads');
    this.addTexCounter('mali_hwc_TEX_RECIRC_FMISS', 'Recirc due to Full Miss');
    this.addTexCounter('mali_hwc_TEX_RECIRC_DESC', 'Recirc due to Desc Miss');
    this.addTexCounter('mali_hwc_TEX_RECIRC_MULTI', 'Recirc due to Multipass');
    this.addTexCounter('mali_hwc_TEX_RECIRC_PMISS',
        'Recirc due to Partial Cache Miss');
    this.addTexCounter('mali_hwc_TEX_RECIRC_CONF',
        'Recirc due to Cache Conflict');

    this.addLSCCounter('mali_hwc_LSC_READ_HITS', 'Read Hits');
    this.addLSCCounter('mali_hwc_LSC_READ_MISSES', 'Read Misses');
    this.addLSCCounter('mali_hwc_LSC_WRITE_HITS', 'Write Hits');
    this.addLSCCounter('mali_hwc_LSC_WRITE_MISSES', 'Write Misses');
    this.addLSCCounter('mali_hwc_LSC_ATOMIC_HITS', 'Atomic Hits');
    this.addLSCCounter('mali_hwc_LSC_ATOMIC_MISSES', 'Atomic Misses');
    this.addLSCCounter('mali_hwc_LSC_LINE_FETCHES', 'Line Fetches');
    this.addLSCCounter('mali_hwc_LSC_DIRTY_LINE', 'Dirty Lines');
    this.addLSCCounter('mali_hwc_LSC_SNOOPS', 'Snoops');

    this.addAXICounter('mali_hwc_AXI_TLB_STALL', 'Address channel stall');
    this.addAXICounter('mali_hwc_AXI_TLB_MISS', 'Cache Miss');
    this.addAXICounter('mali_hwc_AXI_TLB_TRANSACTION', 'Transactions');
    this.addAXICounter('mali_hwc_LS_TLB_MISS', 'LS Cache Miss');
    this.addAXICounter('mali_hwc_LS_TLB_HIT', 'LS Cache Hit');
    this.addAXICounter('mali_hwc_AXI_BEATS_READ', 'Read Beats');
    this.addAXICounter('mali_hwc_AXI_BEATS_WRITE', 'Write Beats');

    this.addMMUCounter('mali_hwc_MMU_TABLE_WALK', 'Page Table Walks');
    this.addMMUCounter('mali_hwc_MMU_REPLAY_MISS',
        'Cache Miss from Replay Buffer');
    this.addMMUCounter('mali_hwc_MMU_REPLAY_FULL', 'Replay Buffer Full');
    this.addMMUCounter('mali_hwc_MMU_NEW_MISS', 'Cache Miss on New Request');
    this.addMMUCounter('mali_hwc_MMU_HIT', 'Cache Hit');

    this.addMMUCycles('mali_hwc_UTLB_STALL', 'UTLB Stalled');
    this.addMMUCycles('mali_hwc_UTLB_REPLAY_MISS', 'UTLB Replay Miss');
    this.addMMUCycles('mali_hwc_UTLB_REPLAY_FULL', 'UTLB Replay Full');
    this.addMMUCycles('mali_hwc_UTLB_NEW_MISS', 'UTLB New Miss');
    this.addMMUCycles('mali_hwc_UTLB_HIT', 'UTLB Hit');

    this.addL2Counter('mali_hwc_L2_READ_BEATS', 'Read Beats');
    this.addL2Counter('mali_hwc_L2_WRITE_BEATS', 'Write Beats');
    this.addL2Counter('mali_hwc_L2_ANY_LOOKUP', 'Any Lookup');
    this.addL2Counter('mali_hwc_L2_READ_LOOKUP', 'Read Lookup');
    this.addL2Counter('mali_hwc_L2_SREAD_LOOKUP', 'Shareable Read Lookup');
    this.addL2Counter('mali_hwc_L2_READ_REPLAY', 'Read Replayed');
    this.addL2Counter('mali_hwc_L2_READ_SNOOP', 'Read Snoop');
    this.addL2Counter('mali_hwc_L2_READ_HIT', 'Read Cache Hit');
    this.addL2Counter('mali_hwc_L2_CLEAN_MISS', 'CleanUnique Miss');
    this.addL2Counter('mali_hwc_L2_WRITE_LOOKUP', 'Write Lookup');
    this.addL2Counter('mali_hwc_L2_SWRITE_LOOKUP', 'Shareable Write Lookup');
    this.addL2Counter('mali_hwc_L2_WRITE_REPLAY', 'Write Replayed');
    this.addL2Counter('mali_hwc_L2_WRITE_SNOOP', 'Write Snoop');
    this.addL2Counter('mali_hwc_L2_WRITE_HIT', 'Write Cache Hit');
    this.addL2Counter('mali_hwc_L2_EXT_READ_FULL', 'ExtRD with BIU Full');
    this.addL2Counter('mali_hwc_L2_EXT_READ_HALF', 'ExtRD with BIU >1/2 Full');
    this.addL2Counter('mali_hwc_L2_EXT_WRITE_FULL', 'ExtWR with BIU Full');
    this.addL2Counter('mali_hwc_L2_EXT_WRITE_HALF', 'ExtWR with BIU >1/2 Full');

    this.addL2Counter('mali_hwc_L2_EXT_READ', 'External Read (ExtRD)');
    this.addL2Counter('mali_hwc_L2_EXT_READ_LINE', 'ExtRD (linefill)');
    this.addL2Counter('mali_hwc_L2_EXT_WRITE', 'External Write (ExtWR)');
    this.addL2Counter('mali_hwc_L2_EXT_WRITE_LINE', 'ExtWR (linefill)');
    this.addL2Counter('mali_hwc_L2_EXT_WRITE_SMALL', 'ExtWR (burst size <64B)');
    this.addL2Counter('mali_hwc_L2_EXT_BARRIER', 'External Barrier');
    this.addL2Counter('mali_hwc_L2_EXT_AR_STALL', 'Address Read stalls');
    this.addL2Counter('mali_hwc_L2_EXT_R_BUF_FULL',
        'Response Buffer full stalls');
    this.addL2Counter('mali_hwc_L2_EXT_RD_BUF_FULL',
        'Read Data Buffer full stalls');
    this.addL2Counter('mali_hwc_L2_EXT_R_RAW', 'RAW hazard stalls');
    this.addL2Counter('mali_hwc_L2_EXT_W_STALL', 'Write Data stalls');
    this.addL2Counter('mali_hwc_L2_EXT_W_BUF_FULL', 'Write Data Buffer full');
    this.addL2Counter('mali_hwc_L2_EXT_R_W_HAZARD', 'WAW or WAR hazard stalls');
    this.addL2Counter('mali_hwc_L2_TAG_HAZARD', 'Tag hazard replays');
    this.addL2Cycles('mali_hwc_L2_SNOOP_FULL', 'Snoop buffer full');
    this.addL2Cycles('mali_hwc_L2_REPLAY_FULL', 'Replay buffer full');

    // DDK events (from X server)
    importer.registerEventHandler('tracing_mark_write:mali_driver',
        MaliParser.prototype.maliDDKEvent.bind(this));

    this.model_ = importer.model_;
  }

  MaliParser.prototype = {
    __proto__: Parser.prototype,

    maliDDKOpenSlice(pid, tid, ts, func, blockinfo) {
      const thread = this.importer.model_.getOrCreateProcess(pid)
        .getOrCreateThread(tid);
      const funcArgs = /^([\w\d_]*)(?:\(\))?:?\s*(.*)$/.exec(func);
      thread.sliceGroup.beginSlice('gpu-driver', funcArgs[1], ts,
          { 'args': funcArgs[2],
            blockinfo });
    },

    maliDDKCloseSlice(pid, tid, ts, args, blockinfo) {
      const thread = this.importer.model_.getOrCreateProcess(pid)
        .getOrCreateThread(tid);
      if (!thread.sliceGroup.openSliceCount) {
        // Discard unmatched ends.
        return;
      }
      thread.sliceGroup.endSlice(ts);
    },

    /**
     * Deduce the format of Mali perf events.
     *
     * @return {RegExp} the regular expression for parsing data when the format
     * is recognized; otherwise null.
     */
    autoDetectLineRE(line) {
      // Matches Mali perf events with thread info
      const lineREWithThread =
          /^\s*\(([\w\-]*)\)\s*(\w+):\s*([\w\\\/\.\-]*@\d*):?\s*(.*)$/;
      if (lineREWithThread.test(line)) {
        return lineREWithThread;
      }

      // Matches old-style Mali perf events
      const lineRENoThread = /^s*()(\w+):\s*([\w\\\/.\-]*):?\s*(.*)$/;
      if (lineRENoThread.test(line)) {
        return lineRENoThread;
      }
      return null;
    },

    lineRE: null,

    /**
     * Parses maliDDK events and sets up state in the importer.
     * events will come in pairs with a cros_trace_print_enter
     * like this (line broken here for formatting):
     *
     * tracing_mark_write: mali_driver: (mali-012345) cros_trace_print_enter: \
     *   gles/src/texture/mali_gles_texture_slave.c@1505: gles2_texturep_upload
     *
     * and a cros_trace_print_exit like this:
     *
     * tracing_mark_write: mali_driver: (mali-012345) cros_trace_print_exit: \
     *   gles/src/texture/mali_gles_texture_slave.c@1505:
     */
    maliDDKEvent(eventName, cpuNumber, pid, ts, eventBase) {
      if (this.lineRE === null) {
        this.lineRE = this.autoDetectLineRE(eventBase.details);
        if (this.lineRE === null) return false;
      }
      const maliEvent = this.lineRE.exec(eventBase.details);
      // Old-style Mali perf events have no thread id, so make one.
      const tid = (maliEvent[1] === '' ? 'mali' : maliEvent[1]);
      switch (maliEvent[2]) {
        case 'cros_trace_print_enter':
          this.maliDDKOpenSlice(pid, tid, ts, maliEvent[4],
              maliEvent[3]);
          break;
        case 'cros_trace_print_exit':
          this.maliDDKCloseSlice(pid, tid, ts, [], maliEvent[3]);
      }
      return true;
    },

    /*
     * Kernel event support.
     */

    dvfsSample(counterName, seriesName, ts, s) {
      const value = parseInt(s);
      const counter = this.model_.kernel.
          getOrCreateCounter('DVFS', counterName);
      if (counter.numSeries === 0) {
        counter.addSeries(new tr.model.CounterSeries(seriesName,
            ColorScheme.getColorIdForGeneralPurposeString(counter.name)));
      }
      counter.series.forEach(function(series) {
        series.addCounterSample(ts, value);
      });
    },

    dvfsEventEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /utilization=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      this.dvfsSample('DVFS Utilization', 'utilization', ts, event[1]);
      return true;
    },

    dvfsSetClockEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /frequency=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      this.dvfsSample('DVFS Frequency', 'frequency', ts, event[1]);
      return true;
    },

    dvfsSetVoltageEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /voltage=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      this.dvfsSample('DVFS Voltage', 'voltage', ts, event[1]);
      return true;
    },

    hwcSample(cat, counterName, seriesName, ts, eventBase) {
      const event = /val=(\d+)/.exec(eventBase.details);
      if (!event) return false;
      const value = parseInt(event[1]);

      const counter = this.model_.kernel.
          getOrCreateCounter(cat, counterName);
      if (counter.numSeries === 0) {
        counter.addSeries(new tr.model.CounterSeries(seriesName,
            ColorScheme.getColorIdForGeneralPurposeString(counter.name)));
      }
      counter.series.forEach(function(series) {
        series.addCounterSample(ts, value);
      });
      return true;
    },

    /*
     * Job Manager block counters.
     */
    jmSample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:jm', 'JM: ' + ctrName, seriesName, ts,
          eventBase);
    },
    addJMCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.jmSample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },
    addJMCycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.jmSample(hwcTitle, 'cycles', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * Tiler block counters.
     */
    tilerSample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:tiler', 'Tiler: ' + ctrName, seriesName,
          ts, eventBase);
    },
    addTilerCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.tilerSample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },
    addTilerCycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.tilerSample(hwcTitle, 'cycles', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * Fragment counters.
     */
    fragSample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:fragment', 'Fragment: ' + ctrName,
          seriesName, ts, eventBase);
    },
    addFragCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.fragSample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },
    addFragCycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.fragSample(hwcTitle, 'cycles', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * Compute counters.
     */
    computeSample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:compute', 'Compute: ' + ctrName,
          seriesName, ts, eventBase);
    },
    addComputeCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.computeSample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },
    addComputeCycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.computeSample(hwcTitle, 'cycles', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * Tripipe counters.
     */
    addTripipeCycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.hwcSample('mali:shader', 'Tripipe: ' + hwcTitle, 'cycles',
            ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * Arith counters.
     */
    arithSample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:arith', 'Arith: ' + ctrName, seriesName, ts,
          eventBase);
    },
    addArithCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.arithSample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },
    addArithCycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.arithSample(hwcTitle, 'cycles', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * Load/Store counters.
     */
    addLSCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.hwcSample('mali:ls', 'LS: ' + hwcTitle, 'count', ts,
            eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * Texture counters.
     */
    textureSample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:texture', 'Texture: ' + ctrName,
          seriesName, ts, eventBase);
    },
    addTexCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.textureSample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * LSC counters.
     */
    addLSCCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.hwcSample('mali:lsc', 'LSC: ' + hwcTitle, 'count', ts,
            eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * TLB counters.
     */
    addAXICounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.hwcSample('mali:axi', 'AXI: ' + hwcTitle, 'count', ts,
            eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * MMU counters.
     */
    mmuSample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:mmu', 'MMU: ' + ctrName, seriesName, ts,
          eventBase);
    },
    addMMUCounter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.mmuSample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },
    addMMUCycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.mmuSample(hwcTitle, 'cycles', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },

    /*
     * L2 counters.
     */
    l2Sample(ctrName, seriesName, ts, eventBase) {
      return this.hwcSample('mali:l2', 'L2: ' + ctrName, seriesName, ts,
          eventBase);
    },
    addL2Counter(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.l2Sample(hwcTitle, 'count', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    },
    addL2Cycles(hwcEventName, hwcTitle) {
      function handler(eventName, cpuNumber, pid, ts, eventBase) {
        return this.l2Sample(hwcTitle, 'cycles', ts, eventBase);
      }
      this.importer.registerEventHandler(hwcEventName, handler.bind(this));
    }
  };

  Parser.register(MaliParser);

  return {
    MaliParser,
  };
});


'use strict';

/**
 * @fileoverview Parses drm driver events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux vmscan trace events.
   * @constructor
   */
  function MemReclaimParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('mm_vmscan_kswapd_wake',
        MemReclaimParser.prototype.kswapdWake.bind(this));
    importer.registerEventHandler('mm_vmscan_kswapd_sleep',
        MemReclaimParser.prototype.kswapdSleep.bind(this));
    importer.registerEventHandler('mm_vmscan_direct_reclaim_begin',
        MemReclaimParser.prototype.reclaimBegin.bind(this));
    importer.registerEventHandler('mm_vmscan_direct_reclaim_end',
        MemReclaimParser.prototype.reclaimEnd.bind(this));
    importer.registerEventHandler('lowmemory_kill',
        MemReclaimParser.prototype.lowmemoryKill.bind(this));
  }

  // Matches the mm_vmscan_kswapd_wake record
  //  mm_vmscan_kswapd_wake: nid=%d order=%d
  const kswapdWakeRE = /nid=(\d+) order=(\d+)/;

  // Matches the mm_vmscan_kswapd_sleep record
  //  mm_vmscan_kswapd_sleep: order=%d
  const kswapdSleepRE = /nid=(\d+)/;

  // Matches the mm_vmscan_direct_reclaim_begin record
  //  mm_vmscan_direct_reclaim_begin: order=%d may_writepage=%d gfp_flags=%s
  const reclaimBeginRE = /order=(\d+) may_writepage=\d+ gfp_flags=(.+)/;

  // Matches the mm_vmscan_direct_reclaim_end record
  //  mm_vmscan_direct_reclaim_end: nr_reclaimed=%lu
  const reclaimEndRE = /nr_reclaimed=(\d+)/;

  // Matches the lowmemory_kill record
  const lowmemoryRE =
    /([^ ]+) \((\d+)\), page cache (\d+)kB \(limit (\d+)kB\), free (-?\d+)Kb/;

  MemReclaimParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Parses memreclaim events and sets up state in the importer.
     */
    kswapdWake(eventName, cpuNumber, pid, ts, eventBase) {
      const event = kswapdWakeRE.exec(eventBase.details);
      if (!event) return false;

      const tgid = parseInt(eventBase.tgid);

      const nid = parseInt(event[1]);
      const order = parseInt(event[2]);

      const kthread = this.importer.getOrCreateKernelThread(
          eventBase.threadName, tgid, pid);

      if (kthread.openSliceTS) {
        if (order > kthread.order) {
          kthread.order = order;
        }
      } else {
        kthread.openSliceTS = ts;
        kthread.order = order;
      }
      return true;
    },

    kswapdSleep(eventName, cpuNumber, pid, ts, eventBase) {
      const tgid = parseInt(eventBase.tgid);

      const kthread = this.importer.getOrCreateKernelThread(
          eventBase.threadName, tgid, pid);

      if (kthread.openSliceTS) {
        kthread.thread.sliceGroup.pushCompleteSlice(
            'memreclaim', eventBase.threadName, kthread.openSliceTS,
            ts - kthread.openSliceTS, 0, 0,
            {
              order: kthread.order
            });
      }
      kthread.openSliceTS = undefined;
      kthread.order = undefined;
      return true;
    },

    reclaimBegin(eventName, cpuNumber, pid, ts, eventBase) {
      const event = reclaimBeginRE.exec(eventBase.details);
      if (!event) return false;

      const order = parseInt(event[1]);
      const gfp = event[2];
      const tgid = parseInt(eventBase.tgid);

      const kthread = this.importer.getOrCreateKernelThread(
          eventBase.threadName, tgid, pid);

      kthread.openSliceTS = ts;
      kthread.order = order;
      kthread.gfp = gfp;
      return true;
    },

    reclaimEnd(eventName, cpuNumber, pid, ts, eventBase) {
      const event = reclaimEndRE.exec(eventBase.details);
      if (!event) return false;

      const nrReclaimed = parseInt(event[1]);
      const tgid = parseInt(eventBase.tgid);

      const kthread = this.importer.getOrCreateKernelThread(
          eventBase.threadName, tgid, pid);

      if (kthread.openSliceTS !== undefined) {
        kthread.thread.sliceGroup.pushCompleteSlice('memreclaim',
            'direct reclaim', kthread.openSliceTS, ts - kthread.openSliceTS,
            0, 0,
            {
              order: kthread.order,
              gfp: kthread.gfp,
              nr_reclaimed: nrReclaimed
            });
      }
      kthread.openSliceTS = undefined;
      kthread.order = undefined;
      kthread.gfp = undefined;
      return true;
    },

    lowmemoryKill(eventName, cpuNumber, pid, ts, eventBase) {
      const event = lowmemoryRE.exec(eventBase.details);
      if (!event) return false;

      const tgid = parseInt(eventBase.tgid);
      const killedName = event[1];
      const killedPid = parseInt(event[2]);
      const cache = parseInt(event[3]);
      const free = parseInt(event[5]);

      const kthread = this.importer.getOrCreateKernelThread(
          eventBase.threadName, tgid, pid);

      kthread.thread.sliceGroup.pushCompleteSlice('lowmemory',
          'low memory kill', ts, 0,
          0, 0,
          {
            killed_name: killedName,
            killed_pid: killedPid,
            cache,
            free
          });
      return true;
    }
  };

  Parser.register(MemReclaimParser);

  return {
    MemReclaimParser,
  };
});


'use strict';

/**
 * @fileoverview Parses power events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux power trace events.
   * @constructor
   */
  function PowerParser(importer) {
    Parser.call(this, importer);

    // NB: old-style power events, deprecated
    importer.registerEventHandler('power_start',
        PowerParser.prototype.powerStartEvent.bind(this));
    importer.registerEventHandler('power_frequency',
        PowerParser.prototype.powerFrequencyEvent.bind(this));

    importer.registerEventHandler('cpu_frequency',
        PowerParser.prototype.cpuFrequencyEvent.bind(this));
    importer.registerEventHandler('cpu_frequency_limits',
        PowerParser.prototype.cpuFrequencyLimitsEvent.bind(this));
    importer.registerEventHandler('cpu_idle',
        PowerParser.prototype.cpuIdleEvent.bind(this));
  }

  PowerParser.prototype = {
    __proto__: Parser.prototype,

    cpuStateSlice(ts, targetCpuNumber, eventType, cpuState) {
      const targetCpu = this.importer.getOrCreateCpu(targetCpuNumber);
      if (eventType !== '1') {
        this.importer.model.importWarning({
          type: 'parse_error',
          message: 'Don\'t understand power_start events of ' +
              'type ' + eventType
        });
        return;
      }
      const powerCounter = targetCpu.getOrCreateCounter('', 'C-State');
      if (powerCounter.numSeries === 0) {
        powerCounter.addSeries(new tr.model.CounterSeries('state',
            ColorScheme.getColorIdForGeneralPurposeString(
                powerCounter.name + '.' + 'state')));
      }
      powerCounter.series.forEach(function(series) {
        series.addCounterSample(ts, cpuState);
      });
    },

    cpuIdleSlice(ts, targetCpuNumber, cpuState) {
      const targetCpu = this.importer.getOrCreateCpu(targetCpuNumber);
      const powerCounter = targetCpu.getOrCreateCounter('', 'C-State');
      if (powerCounter.numSeries === 0) {
        powerCounter.addSeries(new tr.model.CounterSeries('state',
            ColorScheme.getColorIdForGeneralPurposeString(powerCounter.name)));
      }
      // NB: 4294967295/-1 means an exit from the current state
      const val = (cpuState !== 4294967295 ? cpuState + 1 : 0);
      powerCounter.series.forEach(function(series) {
        series.addCounterSample(ts, val);
      });
    },

    cpuFrequencySlice(ts, targetCpuNumber, powerState) {
      const targetCpu = this.importer.getOrCreateCpu(targetCpuNumber);
      const powerCounter =
          targetCpu.getOrCreateCounter('', 'Clock Frequency');
      if (powerCounter.numSeries === 0) {
        powerCounter.addSeries(new tr.model.CounterSeries('state',
            ColorScheme.getColorIdForGeneralPurposeString(
                powerCounter.name + '.' + 'state')));
      }
      powerCounter.series.forEach(function(series) {
        series.addCounterSample(ts, powerState);
      });
    },

    cpuFrequencyLimitsSlice(ts, targetCpuNumber, minFreq, maxFreq) {
      const targetCpu = this.importer.getOrCreateCpu(targetCpuNumber);
      const powerCounter =
          targetCpu.getOrCreateCounter('', 'Clock Frequency Limits');
      if (powerCounter.numSeries === 0) {
        powerCounter.addSeries(new tr.model.CounterSeries('Min Frequency',
            ColorScheme.getColorIdForGeneralPurposeString(
                powerCounter.name + '.' + 'Min Frequency')));
        powerCounter.addSeries(new tr.model.CounterSeries('Max Frequency',
            ColorScheme.getColorIdForGeneralPurposeString(
                powerCounter.name + '.' + 'Max Frequency')));
      }
      powerCounter.series.forEach(function(series) {
        if (series.name === 'Min Frequency') {
          series.addCounterSample(ts, minFreq);
        }
        if (series.name === 'Max Frequency') {
          series.addCounterSample(ts, maxFreq);
        }
      });
    },

    /**
     * Parses power events and sets up state in the importer.
     */
    powerStartEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /type=(\d+) state=(\d) cpu_id=(\d+)/.exec(
          eventBase.details);
      if (!event) return false;

      const targetCpuNumber = parseInt(event[3]);
      const cpuState = parseInt(event[2]);
      this.cpuStateSlice(ts, targetCpuNumber, event[1], cpuState);
      return true;
    },

    powerFrequencyEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /type=(\d+) state=(\d+) cpu_id=(\d+)/
          .exec(eventBase.details);
      if (!event) return false;

      const targetCpuNumber = parseInt(event[3]);
      const powerState = parseInt(event[2]);
      this.cpuFrequencySlice(ts, targetCpuNumber, powerState);
      return true;
    },

    cpuFrequencyEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /state=(\d+) cpu_id=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      const targetCpuNumber = parseInt(event[2]);
      const powerState = parseInt(event[1]);
      this.cpuFrequencySlice(ts, targetCpuNumber, powerState);
      return true;
    },

    cpuFrequencyLimitsEvent(eventName, cpu, pid, ts, eventBase) {
      const event = /min=(\d+) max=(\d+) cpu_id=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      const targetCpuNumber = parseInt(event[3]);
      const minFreq = parseInt(event[1]);
      const maxFreq = parseInt(event[2]);
      this.cpuFrequencyLimitsSlice(ts, targetCpuNumber, minFreq, maxFreq);
      return true;
    },

    cpuIdleEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /state=(\d+) cpu_id=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      const targetCpuNumber = parseInt(event[2]);
      const cpuState = parseInt(event[1]);
      this.cpuIdleSlice(ts, targetCpuNumber, cpuState);
      return true;
    }
  };

  Parser.register(PowerParser);

  return {
    PowerParser,
  };
});


'use strict';

/**
 * @fileoverview Parses regulator events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux regulator trace events.
   * @constructor
   */
  function RegulatorParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('regulator_enable',
        RegulatorParser.prototype.regulatorEnableEvent.bind(this));
    importer.registerEventHandler('regulator_enable_delay',
        RegulatorParser.prototype.regulatorEnableDelayEvent.bind(this));
    importer.registerEventHandler('regulator_enable_complete',
        RegulatorParser.prototype.regulatorEnableCompleteEvent.bind(this));
    importer.registerEventHandler('regulator_disable',
        RegulatorParser.prototype.regulatorDisableEvent.bind(this));
    importer.registerEventHandler('regulator_disable_complete',
        RegulatorParser.prototype.regulatorDisableCompleteEvent.bind(this));
    importer.registerEventHandler('regulator_set_voltage',
        RegulatorParser.prototype.regulatorSetVoltageEvent.bind(this));
    importer.registerEventHandler('regulator_set_voltage_complete',
        RegulatorParser.prototype.regulatorSetVoltageCompleteEvent.bind(this));

    this.model_ = importer.model_;
  }

  // Matches the regulator_enable record
  const regulatorEnableRE = /name=(.+)/;

  // Matches the regulator_disable record
  const regulatorDisableRE = /name=(.+)/;

  // Matches the regulator_set_voltage_complete record
  const regulatorSetVoltageCompleteRE = /name=(\S+), val=(\d+)/;

  RegulatorParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Get or create a counter with one series.
     */
    getCtr_(ctrName, valueName) {
      const ctr = this.model_.kernel
        .getOrCreateCounter(null, 'vreg ' + ctrName + ' ' + valueName);
      // Initialize the counter's series fields if needed.
      if (ctr.series[0] === undefined) {
        ctr.addSeries(new tr.model.CounterSeries(valueName,
        ColorScheme.getColorIdForGeneralPurposeString(
            ctrName + '.' + valueName)));
      }
      return ctr;
    },

    /**
     * Parses regulator events and sets up state in the importer.
     */
    regulatorEnableEvent(eventName, cpuNum, pid, ts, eventBase) {
      const event = regulatorEnableRE.exec(eventBase.details);
      if (!event) return false;

      const name = event[1];

      const ctr = this.getCtr_(name, 'enabled');
      ctr.series[0].addCounterSample(ts, 1);

      return true;
    },

    regulatorEnableDelayEvent(eventName, cpuNum, pid, ts, eventBase) {
      return true;
    },

    regulatorEnableCompleteEvent(eventName, cpuNum, pid, ts,
        eventBase) {
      return true;
    },

    regulatorDisableEvent(eventName, cpuNum, pid, ts, eventBase) {
      const event = regulatorDisableRE.exec(eventBase.details);
      if (!event) return false;

      const name = event[1];

      const ctr = this.getCtr_(name, 'enabled');
      ctr.series[0].addCounterSample(ts, 0);

      return true;
    },

    regulatorDisableCompleteEvent(eventName, cpuNum, pid, ts,
        eventBase) {
      return true;
    },

    regulatorSetVoltageEvent(eventName, cpuNum, pid, ts, eventBase) {
      return true;
    },

    regulatorSetVoltageCompleteEvent(eventName, cpuNum, pid, ts,
        eventBase) {
      const event = regulatorSetVoltageCompleteRE.exec(eventBase.details);
      if (!event) return false;

      const name = event[1];
      const voltage = parseInt(event[2]);

      const ctr = this.getCtr_(name, 'voltage');
      ctr.series[0].addCounterSample(ts, voltage);

      return true;
    }

  };

  Parser.register(RegulatorParser);

  return {
    RegulatorParser,
  };
});


'use strict';

/**
 * @fileoverview Parses scheduler events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux sched trace events.
   * @constructor
   */
  function SchedParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('sched_switch',
        SchedParser.prototype.schedSwitchEvent.bind(this));
    importer.registerEventHandler('sched_wakeup',
        SchedParser.prototype.schedWakeupEvent.bind(this));
    importer.registerEventHandler('sched_blocked_reason',
        SchedParser.prototype.schedBlockedEvent.bind(this));
    importer.registerEventHandler('sched_cpu_hotplug',
        SchedParser.prototype.schedCpuHotplugEvent.bind(this));
  }

  const TestExports = {};

  // Matches the sched_switch record
  const schedSwitchRE = new RegExp(
      'prev_comm=(.+) prev_pid=(\\d+) prev_prio=(\\d+) ' +
      'prev_state=(\\S\\+?|\\S\\|\\S) ==> ' +
      'next_comm=(.+) next_pid=(\\d+) next_prio=(\\d+)');

  // Matches sched_blocked_reason record
  const schedBlockedRE = new RegExp('pid=(\\d+) iowait=(\\d) caller=(.+)');
  TestExports.schedSwitchRE = schedSwitchRE;

  // Matches the sched_wakeup record
  // success=? is optional not all kernels report it, so don't include
  // it in the capture groups
  const schedWakeupRE =
      /comm=(.+) pid=(\d+) prio=(\d+)(?: success=\d+)? target_cpu=(\d+)/;
  TestExports.schedWakeupRE = schedWakeupRE;

  SchedParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Parses scheduler events and sets up state in the CPUs of the importer.
     */
    schedSwitchEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = schedSwitchRE.exec(eventBase.details);
      if (!event) return false;

      const prevState = event[4];
      const nextComm = event[5];
      const nextPid = parseInt(event[6]);
      const nextPrio = parseInt(event[7]);

      if (eventBase.tgid !== undefined) {
        const tgid = parseInt(eventBase.tgid);
        const process = this.importer.model_.getOrCreateProcess(tgid);
        if (!process.getThread(pid)) {
          const thread = process.getOrCreateThread(pid);
          thread.name = eventBase.threadName;
        }
      }

      const nextThread = this.importer.threadsByLinuxPid[nextPid];
      let nextName;
      if (nextThread) {
        nextName = nextThread.userFriendlyName;
      } else {
        nextName = nextComm;
      }

      const cpu = this.importer.getOrCreateCpu(cpuNumber);
      cpu.switchActiveThread(
          ts,
          {stateWhenDescheduled: prevState},
          nextPid,
          nextName,
          {
            comm: nextComm,
            tid: nextPid,
            prio: nextPrio
          });

      return true;
    },

    schedWakeupEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = schedWakeupRE.exec(eventBase.details);
      if (!event) return false;

      const fromPid = pid;
      const comm = event[1];
      pid = parseInt(event[2]);
      const prio = parseInt(event[3]);
      this.importer.markPidRunnable(ts, pid, comm, prio, fromPid);
      return true;
    },

    schedCpuHotplugEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = /cpu (\d+) (.+) error=(\d+)/.exec(eventBase.details);
      if (!event) return false;

      cpuNumber = event[1];
      const state = event[2];
      const targetCpu = this.importer.getOrCreateCpu(cpuNumber);

      const powerCounter = targetCpu.getOrCreateCounter('', 'Cpu Hotplug');
      if (powerCounter.numSeries === 0) {
        powerCounter.addSeries(new tr.model.CounterSeries('State',
            tr.b.ColorScheme.getColorIdForGeneralPurposeString(
                powerCounter.name + '.' + 'State')));
      }
      powerCounter.series.forEach(function(series) {
        if (series.name === 'State') {
          series.addCounterSample(ts, state.localeCompare('offline') ? 0 : 1);
        }
      });
      return true;
    },

    schedBlockedEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = schedBlockedRE.exec(eventBase.details);
      if (!event) return false;

      pid = parseInt(event[1]);
      const iowait = parseInt(event[2]);
      const caller = event[3];

      this.importer.addPidBlockedReason(ts, pid, iowait, caller);
      return true;
    }
  };

  Parser.register(SchedParser);

  return {
    SchedParser,
    _SchedParserTestExports: TestExports
  };
});


'use strict';

/**
 * @fileoverview Parses sync events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux sync trace events.
   * @constructor
   */
  function SyncParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler(
        'sync_timeline',
        SyncParser.prototype.timelineEvent.bind(this));
    importer.registerEventHandler(
        'sync_wait',
        SyncParser.prototype.syncWaitEvent.bind(this));
    importer.registerEventHandler(
        'sync_pt',
        SyncParser.prototype.syncPtEvent.bind(this));
    this.model_ = importer.model_;
  }

  const syncTimelineRE = /name=(\S+) value=(\S*)/;
  const syncWaitRE = /(\S+) name=(\S+) state=(\d+)/;
  const syncPtRE = /name=(\S+) value=(\S*)/;

  SyncParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Parses sync events and sets up state in the importer.
     */
    timelineEvent(eventName, cpuNumber, pid,
        ts, eventBase) {
      const event = syncTimelineRE.exec(eventBase.details);
      if (!event) return false;

      const thread = this.importer.getOrCreatePseudoThread(event[1]);

      if (thread.lastActiveTs !== undefined) {
        const duration = ts - thread.lastActiveTs;
        let value = thread.lastActiveValue;
        if (value === undefined) value = ' ';
        const slice = new tr.model.ThreadSlice(
            '', value,
            ColorScheme.getColorIdForGeneralPurposeString(value),
            thread.lastActiveTs, {},
            duration);
        thread.thread.sliceGroup.pushSlice(slice);
      }
      thread.lastActiveTs = ts;
      thread.lastActiveValue = event[2];
      return true;
    },

    syncWaitEvent(eventName, cpuNumber, pid, ts,
        eventBase) {
      const event = syncWaitRE.exec(eventBase.details);
      if (!event) return false;

      if (eventBase.tgid === undefined) {
        return false;
      }

      const tgid = parseInt(eventBase.tgid);
      const thread = this.model_.getOrCreateProcess(tgid)
        .getOrCreateThread(pid);
      thread.name = eventBase.threadName;
      const slices = thread.kernelSliceGroup;
      if (!slices.isTimestampValidForBeginOrEnd(ts)) {
        this.model_.importWarning({
          type: 'parse_error',
          message: 'Timestamps are moving backward.'
        });
        return false;
      }

      const name = 'fence_wait("' + event[2] + '")';
      if (event[1] === 'begin') {
        const slice = slices.beginSlice(null, name, ts, {
          'Start state': event[3]
        });
      } else if (event[1] === 'end') {
        if (slices.openSliceCount > 0) {
          slices.endSlice(ts);
        }
      } else {
        return false;
      }

      return true;
    },

    syncPtEvent(eventName, cpuNumber, pid, ts, eventBase) {
      return !!syncPtRE.exec(eventBase.details);
    }
  };

  Parser.register(SyncParser);

  return {
    SyncParser,
  };
});


'use strict';

/**
 * @fileoverview Parses workqueue events in the Linux event trace format.
 */
tr.exportTo('tr.e.importer.linux_perf', function() {
  const ColorScheme = tr.b.ColorScheme;
  const Parser = tr.e.importer.linux_perf.Parser;

  /**
   * Parses linux workqueue trace events.
   * @constructor
   */
  function WorkqueueParser(importer) {
    Parser.call(this, importer);

    importer.registerEventHandler('workqueue_execute_start',
        WorkqueueParser.prototype.executeStartEvent.bind(this));
    importer.registerEventHandler('workqueue_execute_end',
        WorkqueueParser.prototype.executeEndEvent.bind(this));
    importer.registerEventHandler('workqueue_queue_work',
        WorkqueueParser.prototype.executeQueueWork.bind(this));
    importer.registerEventHandler('workqueue_activate_work',
        WorkqueueParser.prototype.executeActivateWork.bind(this));
  }

  // Matches the workqueue_execute_start record
  //  workqueue_execute_start: work struct c7a8a89c: function MISRWrapper
  const workqueueExecuteStartRE = /work struct (.+): function (\S+)/;

  // Matches the workqueue_execute_start record
  //  workqueue_execute_end: work struct c7a8a89c
  const workqueueExecuteEndRE = /work struct (.+)/;

  WorkqueueParser.prototype = {
    __proto__: Parser.prototype,

    /**
     * Parses workqueue events and sets up state in the importer.
     */
    executeStartEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = workqueueExecuteStartRE.exec(eventBase.details);
      if (!event) return false;

      const kthread = this.importer.getOrCreateKernelThread(
          eventBase.threadName, pid, pid);
      kthread.openSliceTS = ts;
      kthread.openSlice = event[2];
      return true;
    },

    executeEndEvent(eventName, cpuNumber, pid, ts, eventBase) {
      const event = workqueueExecuteEndRE.exec(eventBase.details);
      if (!event) return false;

      const kthread = this.importer.getOrCreateKernelThread(
          eventBase.threadName, pid, pid);
      if (kthread.openSlice) {
        const slice = new tr.model.ThreadSlice('', kthread.openSlice,
            ColorScheme.getColorIdForGeneralPurposeString(kthread.openSlice),
            kthread.openSliceTS,
            {},
            ts - kthread.openSliceTS);

        kthread.thread.sliceGroup.pushSlice(slice);
      }
      kthread.openSlice = undefined;
      return true;
    },

    executeQueueWork(eventName, cpuNumber, pid, ts, eventBase) {
      // TODO: Do something with this event?
      return true;
    },

    executeActivateWork(eventName, cpuNumber, pid, ts, eventBase) {
      // TODO: Do something with this event?
      return true;
    }

  };

  Parser.register(WorkqueueParser);

  return {
    WorkqueueParser,
  };
});


/**
 * @fileoverview Imports text files in the Linux event trace format into the
 * Model. This format is output both by sched_trace and by Linux's perf tool.
 *
 * This importer assumes the events arrive as a string. The unit tests provide
 * examples of the trace format.
 *
 * Linux scheduler traces use a definition for 'pid' that is different than
 * tracing uses. Whereas tracing uses pid to identify a specific process, a pid
 * in a linux trace refers to a specific thread within a process. Within this
 * file, we the definition used in Linux traces, as it improves the importing
 * code's readability.
 */
'use strict';

tr.exportTo('tr.e.importer.linux_perf', function() {
  const MONOTONIC_TO_FTRACE_GLOBAL_SYNC_ID =
      'linux_clock_monotonic_to_ftrace_global';

  const IMPORT_PRIORITY = 2;

  /**
   * Imports linux perf events into a specified model.
   * @constructor
   */
  function FTraceImporter(model, events) {
    this.importPriority = IMPORT_PRIORITY;
    this.model_ = model;
    this.events_ = events;
    this.wakeups_ = [];
    this.blockedReasons_ = [];
    this.kernelThreadStates_ = {};
    this.buildMapFromLinuxPidsToThreads_();
    this.lines_ = [];
    this.pseudoThreadCounter = 1;
    this.parsers_ = [];
    this.eventHandlers_ = {};
    this.haveClockSyncedMonotonicToGlobal_ = false;
    this.clockDomainId_ = tr.model.ClockDomainId.LINUX_FTRACE_GLOBAL;
  }

  const TestExports = {};

  // Matches the trace record in 3.2 and later with the print-tgid option:
  //          <idle>-0    0 [001] d...  1.23: sched_switch
  //
  // A TGID (Thread Group ID) is basically what the Linux kernel calls what
  // userland refers to as a process ID (as opposed to a Linux pid, which is
  // what userland calls a thread ID).
  const lineREWithTGID = new RegExp(
      '^\\s*(.+)-(\\d+)\\s+\\(\\s*(\\d+|-+)\\)\\s\\[(\\d+)\\]' +
      '\\s+[dX.][Nnp.][Hhs.][0-9a-f.]' +
      '\\s+(\\d+\\.\\d+):\\s+(\\S+):\\s(.*)$');
  const lineParserWithTGID = function(line) {
    const groups = lineREWithTGID.exec(line);
    if (!groups) return groups;

    let tgid = groups[3];
    if (tgid[0] === '-') tgid = undefined;

    return {
      threadName: groups[1],
      pid: groups[2],
      tgid,
      cpuNumber: groups[4],
      timestamp: groups[5],
      eventName: groups[6],
      details: groups[7]
    };
  };
  TestExports.lineParserWithTGID = lineParserWithTGID;

  // Matches the default trace record in 3.2 and later (includes irq-info):
  //          <idle>-0     [001] d...  1.23: sched_switch
  const lineREWithIRQInfo = new RegExp(
      '^\\s*(.+)-(\\d+)\\s+\\[(\\d+)\\]' +
      '\\s+[dX.][Nnp.][Hhs.][0-9a-f.]' +
      '\\s+(\\d+\\.\\d+):\\s+(\\S+):\\s(.*)$');
  const lineParserWithIRQInfo = function(line) {
    const groups = lineREWithIRQInfo.exec(line);
    if (!groups) return groups;
    return {
      threadName: groups[1],
      pid: groups[2],
      cpuNumber: groups[3],
      timestamp: groups[4],
      eventName: groups[5],
      details: groups[6]
    };
  };
  TestExports.lineParserWithIRQInfo = lineParserWithIRQInfo;

  // Matches the default trace record pre-3.2:
  //          <idle>-0     [001]  1.23: sched_switch
  const lineREWithLegacyFmt =
      /^\s*(.+)-(\d+)\s+\[(\d+)\]\s*(\d+\.\d+):\s+(\S+):\s(.*)$/;
  const lineParserWithLegacyFmt = function(line) {
    const groups = lineREWithLegacyFmt.exec(line);
    if (!groups) {
      return groups;
    }
    return {
      threadName: groups[1],
      pid: groups[2],
      cpuNumber: groups[3],
      timestamp: groups[4],
      eventName: groups[5],
      details: groups[6]
    };
  };
  TestExports.lineParserWithLegacyFmt = lineParserWithLegacyFmt;

  // Matches the trace_event_clock_sync marker:
  //  0: trace_event_clock_sync: parent_ts=19581477508
  const traceEventClockSyncRE = /trace_event_clock_sync: parent_ts=(\d+\.?\d*)/;
  TestExports.traceEventClockSyncRE = traceEventClockSyncRE;

  const realTimeClockSyncRE = /trace_event_clock_sync: realtime_ts=(\d+)/;
  const genericClockSyncRE = /trace_event_clock_sync: name=([\w\-]+)/;

  // Some kernel trace events are manually classified in slices and
  // hand-assigned a pseudo PID.
  const pseudoKernelPID = 0;

  /**
   * Deduce the format of trace data. Linux kernels prior to 3.3 used one
   * format (by default); 3.4 and later used another.  Additionally, newer
   * kernels can optionally trace the TGID.
   *
   * @return {function} the function for parsing data when the format is
   * recognized; otherwise undefined.
   */
  function autoDetectLineParser(line) {
    if (line[0] === '{') return false;
    if (lineREWithTGID.test(line)) return lineParserWithTGID;
    if (lineREWithIRQInfo.test(line)) return lineParserWithIRQInfo;
    if (lineREWithLegacyFmt.test(line)) return lineParserWithLegacyFmt;
    return undefined;
  }
  TestExports.autoDetectLineParser = autoDetectLineParser;

  /**
   * Guesses whether the provided events is a Linux perf string.
   * Looks for the magic string "# tracer" at the start of the file,
   * or the typical task-pid-cpu-timestamp-function sequence of a typical
   * trace's body.
   *
   * @return {boolean} True when events is a linux perf array.
   */
  FTraceImporter.canImport = function(events) {
    if (events instanceof tr.b.TraceStream) events = events.header;

    if (!(typeof(events) === 'string' || events instanceof String)) {
      return false;
    }

    if (FTraceImporter._extractEventsFromSystraceHTML(events, false).ok) {
      return true;
    }

    if (FTraceImporter._extractEventsFromSystraceMultiHTML(events, false).ok) {
      return true;
    }

    if (/^# tracer:/.test(events)) return true;

    const lineBreakIndex = events.indexOf('\n');
    if (lineBreakIndex > -1) events = events.substring(0, lineBreakIndex);

    if (autoDetectLineParser(events)) return true;

    return false;
  };

  FTraceImporter._extractEventsFromSystraceHTML = function(
      incomingEvents, produceResult) {
    const failure = {ok: false};
    if (produceResult === undefined) produceResult = true;

    const header = incomingEvents instanceof tr.b.TraceStream ?
        incomingEvents.header : incomingEvents;
    if (!/^<!DOCTYPE html>/.test(header)) return failure;
    const r = new tr.importer.SimpleLineReader(incomingEvents);

    // Try to find the data...
    if (!r.advanceToLineMatching(/^  <script>$/)) return failure;
    if (!r.advanceToLineMatching(/^  var linuxPerfData = "\\$/)) return failure;

    const eventsBeginAtLine = r.curLineNumber + 1;
    r.beginSavingLines();
    if (!r.advanceToLineMatching(/^  <\/script>$/)) return failure;

    let rawEvents = r.endSavingLinesAndGetResult();

    // Drop off first and last event as it contains the tag.
    rawEvents = rawEvents.slice(1, rawEvents.length - 1);

    if (!r.advanceToLineMatching(/^<\/body>$/)) return failure;
    if (!r.advanceToLineMatching(/^<\/html>$/)) return failure;

    function endsWith(str, suffix) {
      return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    function stripSuffix(str, suffix) {
      if (!endsWith(str, suffix)) return str;
      return str.substring(str, str.length - suffix.length);
    }

    // Strip off escaping in the file needed to preserve linebreaks.
    let events = [];
    if (produceResult) {
      for (let i = 0; i < rawEvents.length; i++) {
        let event = rawEvents[i];
        event = stripSuffix(event, '\\n\\');
        events.push(event);
      }
    } else {
      events = [rawEvents[rawEvents.length - 1]];
    }

    // Last event ends differently. Strip that off too,
    // treating absence of that trailing string as a failure.
    const oldLastEvent = events[events.length - 1];
    const newLastEvent = stripSuffix(oldLastEvent, '\\n";');
    if (newLastEvent === oldLastEvent) return failure;
    events[events.length - 1] = newLastEvent;

    return {ok: true,
      lines: produceResult ? events : undefined,
      eventsBeginAtLine};
  };

  FTraceImporter._extractEventsFromSystraceMultiHTML = function(
      incomingEvents, produceResult) {
    const failure = {ok: false};
    if (produceResult === undefined) produceResult = true;

    const header = incomingEvents instanceof tr.b.TraceStream ?
        incomingEvents.header : incomingEvents;
    if (!(new RegExp('^<!DOCTYPE HTML>', 'i').test(header))) return failure;

    const r = new tr.importer.SimpleLineReader(incomingEvents);

    // Try to find the Linux perf trace in any of the trace-data tags
    let events = [];
    let eventsBeginAtLine;
    while (!/^# tracer:/.test(events)) {
      if (!r.advanceToLineMatching(
          /^  <script class="trace-data" type="application\/text">$/)) {
        return failure;
      }

      eventsBeginAtLine = r.curLineNumber + 1;

      r.beginSavingLines();
      if (!r.advanceToLineMatching(/^  <\/script>$/)) return failure;

      events = r.endSavingLinesAndGetResult();

      // Drop off first and last event as it contains the tag.
      events = events.slice(1, events.length - 1);
    }

    if (!r.advanceToLineMatching(/^<\/body>$/)) return failure;
    if (!r.advanceToLineMatching(/^<\/html>$/)) return failure;

    return {
      ok: true,
      lines: produceResult ? events : undefined,
      eventsBeginAtLine,
    };
  };

  FTraceImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'FTraceImporter';
    },

    get model() {
      return this.model_;
    },

    /**
     * Imports clock sync markers into model_.
     */
    importClockSyncMarkers() {
      this.lazyInit_();
      this.forEachLine_(function(text, eventBase, cpuNumber, pid, ts) {
        const eventName = eventBase.eventName;
        if (eventName !== 'tracing_mark_write' && eventName !== '0') return;

        if (traceEventClockSyncRE.exec(eventBase.details) ||
            genericClockSyncRE.exec(eventBase.details)) {
          this.traceClockSyncEvent_(eventName, cpuNumber, pid, ts, eventBase);
        } else if (realTimeClockSyncRE.exec(eventBase.details)) {
          // TODO(charliea): Migrate this sync to ClockSyncManager.
          // This entry syncs CLOCK_REALTIME with CLOCK_MONOTONIC. Store the
          // offset between the two in the model so that importers parsing files
          // with CLOCK_REALTIME timestamps can map back to CLOCK_MONOTONIC.
          const match = realTimeClockSyncRE.exec(eventBase.details);
          this.model_.realtime_to_monotonic_offset_ms = ts - match[1];
        }
      }.bind(this));
    },

    /**
     * Imports the data in this.events_ into model_.
     */
    importEvents() {
      const modelTimeTransformer =
          this.model_.clockSyncManager.getModelTimeTransformer(
              this.clockDomainId_);

      this.importCpuData_(modelTimeTransformer);
      this.buildMapFromLinuxPidsToThreads_();
      this.buildPerThreadCpuSlicesFromCpuState_();
    },

    /**
     * Registers a linux perf event parser used by importCpuData_.
     */
    registerEventHandler(eventName, handler) {
      // TODO(sleffler) how to handle conflicts?
      this.eventHandlers_[eventName] = handler;
    },

    /**
     * @return {Cpu} A Cpu corresponding to the given cpuNumber.
     */
    getOrCreateCpu(cpuNumber) {
      return this.model_.kernel.getOrCreateCpu(cpuNumber);
    },

    /**
     * @return {TimelineThread} A thread corresponding to the kernelThreadName.
     */
    getOrCreateKernelThread(kernelThreadName, pid, tid) {
      if (!this.kernelThreadStates_[kernelThreadName]) {
        const thread = this.model_.getOrCreateProcess(pid).getOrCreateThread(
            tid);
        thread.name = kernelThreadName;
        this.kernelThreadStates_[kernelThreadName] = {
          pid,
          thread,
          openSlice: undefined,
          openSliceTS: undefined
        };
        this.threadsByLinuxPid[pid] = thread;
      }
      return this.kernelThreadStates_[kernelThreadName];
    },

    /**
     * Processes can have multiple binder threads.
     * Binder thread names are not unique across processes we therefore need to
     * keep more information in order to return the correct threads.
     */
    getOrCreateBinderKernelThread(kernelThreadName, pid, tid) {
      const key = kernelThreadName + pid + tid;
      if (!this.kernelThreadStates_[key]) {
        const thread = this.model_.getOrCreateProcess(pid).getOrCreateThread(
            tid);
        thread.name = kernelThreadName;
        this.kernelThreadStates_[key] = {
          pid,
          thread,
          openSlice: undefined,
          openSliceTS: undefined
        };
        this.threadsByLinuxPid[pid] = thread;
      }
      return this.kernelThreadStates_[key];
    },

    /**
     * @return {TimelineThread} A pseudo thread corresponding to the
     * threadName.  Pseudo threads are for events that we want to break
     * out to a separate timeline but would not otherwise happen.
     * These threads are assigned to pseudoKernelPID and given a
     * unique (incrementing) TID.
     */
    getOrCreatePseudoThread(threadName) {
      let thread = this.kernelThreadStates_[threadName];
      if (!thread) {
        thread = this.getOrCreateKernelThread(threadName, pseudoKernelPID,
            this.pseudoThreadCounter);
        this.pseudoThreadCounter++;
      }
      return thread;
    },

    /**
     * Records the fact that a pid has become runnable. This data will
     * eventually get used to derive each thread's timeSlices array.
     */
    markPidRunnable(ts, pid, comm, prio, fromPid) {
      // The the pids that get passed in to this function are Linux kernel
      // pids, which identify threads.  The rest of trace-viewer refers to
      // these as tids, so the change of nomenclature happens in the following
      // construction of the wakeup object.
      this.wakeups_.push({ts, tid: pid, fromTid: fromPid});
    },

    /**
     * Records the reason why a pid has gone into uninterruptible sleep.
     */
    addPidBlockedReason(ts, pid, iowait, caller) {
      // The the pids that get passed in to this function are Linux kernel
      // pids, which identify threads.  The rest of trace-viewer refers to
      // these as tids, so the change of nomenclature happens in the following
      // construction of the wakeup object.
      this.blockedReasons_.push({ts, tid: pid, iowait,
        caller});
    },

    /**
     * Precomputes a lookup table from linux pids back to existing
     * Threads. This is used during importing to add information to each
     * thread about whether it was running, descheduled, sleeping, et
     * cetera.
     */
    buildMapFromLinuxPidsToThreads_() {
      this.threadsByLinuxPid = {};
      this.model_.getAllThreads().forEach(
          function(thread) {
            this.threadsByLinuxPid[thread.tid] = thread;
          }.bind(this));
    },

    /**
     * Builds the timeSlices array on each thread based on our knowledge of what
     * each Cpu is doing.  This is done only for Threads that are
     * already in the model, on the assumption that not having any traced data
     * on a thread means that it is not of interest to the user.
     */
    buildPerThreadCpuSlicesFromCpuState_() {
      const SCHEDULING_STATE = tr.model.SCHEDULING_STATE;

      // Push the cpu slices to the threads that they run on.
      for (const cpuNumber in this.model_.kernel.cpus) {
        const cpu = this.model_.kernel.cpus[cpuNumber];

        for (let i = 0; i < cpu.slices.length; i++) {
          const cpuSlice = cpu.slices[i];

          const thread = this.threadsByLinuxPid[cpuSlice.args.tid];
          if (!thread) continue;

          cpuSlice.threadThatWasRunning = thread;

          if (!thread.tempCpuSlices) {
            thread.tempCpuSlices = [];
          }
          thread.tempCpuSlices.push(cpuSlice);
        }
      }

      for (const i in this.wakeups_) {
        const wakeup = this.wakeups_[i];
        const thread = this.threadsByLinuxPid[wakeup.tid];
        if (!thread) continue;
        thread.tempWakeups = thread.tempWakeups || [];
        thread.tempWakeups.push(wakeup);
      }
      for (const i in this.blockedReasons_) {
        const reason = this.blockedReasons_[i];
        const thread = this.threadsByLinuxPid[reason.tid];
        if (!thread) continue;
        thread.tempBlockedReasons = thread.tempBlockedReasons || [];
        thread.tempBlockedReasons.push(reason);
      }

      // Create slices for when the thread is not running.
      this.model_.getAllThreads().forEach(function(thread) {
        if (thread.tempCpuSlices === undefined) return;
        const origSlices = thread.tempCpuSlices;
        delete thread.tempCpuSlices;

        origSlices.sort(function(x, y) {
          return x.start - y.start;
        });

        const wakeups = thread.tempWakeups || [];
        delete thread.tempWakeups;
        wakeups.sort(function(x, y) {
          return x.ts - y.ts;
        });

        const reasons = thread.tempBlockedReasons || [];
        delete thread.tempBlockedReasons;
        reasons.sort(function(x, y) {
          return x.ts - y.ts;
        });

        // Walk the slice list and put slices between each original slice to
        // show when the thread isn't running.
        const slices = [];

        if (origSlices.length) {
          const slice = origSlices[0];

          if (wakeups.length && wakeups[0].ts < slice.start) {
            const wakeup = wakeups.shift();
            const wakeupDuration = slice.start - wakeup.ts;
            const args = {'wakeup from tid': wakeup.fromTid};
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.RUNNABLE, '',
                wakeup.ts, args, wakeupDuration));
          }

          const runningSlice = new tr.model.ThreadTimeSlice(
              thread, SCHEDULING_STATE.RUNNING, '',
              slice.start, {}, slice.duration);
          runningSlice.cpuOnWhichThreadWasRunning = slice.cpu;
          slices.push(runningSlice);
        }

        for (let i = 1; i < origSlices.length; i++) {
          let wakeup = undefined;
          const prevSlice = origSlices[i - 1];
          const nextSlice = origSlices[i];
          let midDuration = nextSlice.start - prevSlice.end;
          while (wakeups.length && wakeups[0].ts < nextSlice.start) {
            const w = wakeups.shift();
            if (wakeup === undefined && w.ts > prevSlice.end) {
              wakeup = w;
            }
          }
          let blockedReason = undefined;
          while (reasons.length && reasons[0].ts < prevSlice.end) {
            const r = reasons.shift();
          }
          if (wakeup !== undefined &&
              reasons.length &&
              reasons[0].ts < wakeup.ts) {
            blockedReason = reasons.shift();
          }

          // Push a sleep slice onto the slices list, interrupting it with a
          // wakeup if appropriate.
          const pushSleep = function(state) {
            if (wakeup !== undefined) {
              midDuration = wakeup.ts - prevSlice.end;
            }

            if (blockedReason !== undefined) {
              const args = {
                'kernel callsite when blocked:': blockedReason.caller
              };
              if (blockedReason.iowait) {
                switch (state) {
                  case SCHEDULING_STATE.UNINTR_SLEEP:
                    state = SCHEDULING_STATE.UNINTR_SLEEP_IO;
                    break;
                  case SCHEDULING_STATE.UNINTR_SLEEP_WAKE_KILL:
                    state = SCHEDULING_STATE.UNINTR_SLEEP_WAKE_KILL_IO;
                    break;
                  case SCHEDULING_STATE.UNINTR_SLEEP_WAKING:
                    state = SCHEDULING_STATE.UNINTR_SLEEP_WAKE_KILL_IO;
                    break;
                  default:
                }
              }
              slices.push(new tr.model.ThreadTimeSlice(
                  thread,
                  state, '', prevSlice.end, args, midDuration));
            } else {
              slices.push(new tr.model.ThreadTimeSlice(
                  thread,
                  state, '', prevSlice.end, {}, midDuration));
            }
            if (wakeup !== undefined) {
              const wakeupDuration = nextSlice.start - wakeup.ts;
              const args = {'wakeup from tid': wakeup.fromTid};
              slices.push(new tr.model.ThreadTimeSlice(
                  thread, SCHEDULING_STATE.RUNNABLE, '',
                  wakeup.ts, args, wakeupDuration));
              wakeup = undefined;
            }
          };

          if (prevSlice.args.stateWhenDescheduled === 'S') {
            pushSleep(SCHEDULING_STATE.SLEEPING);
          } else if (prevSlice.args.stateWhenDescheduled === 'R' ||
                     prevSlice.args.stateWhenDescheduled === 'R+') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.RUNNABLE, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 'D') {
            pushSleep(SCHEDULING_STATE.UNINTR_SLEEP);
          } else if (prevSlice.args.stateWhenDescheduled === 'T') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.STOPPED, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 't') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.DEBUG, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 'Z') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.ZOMBIE, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 'X') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.EXIT_DEAD, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 'x') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.TASK_DEAD, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 'K') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.WAKE_KILL, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 'W') {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.WAKING, '',
                prevSlice.end, {}, midDuration));
          } else if (prevSlice.args.stateWhenDescheduled === 'D|K') {
            pushSleep(SCHEDULING_STATE.UNINTR_SLEEP_WAKE_KILL);
          } else if (prevSlice.args.stateWhenDescheduled === 'D|W') {
            pushSleep(SCHEDULING_STATE.UNINTR_SLEEP_WAKING);
          } else {
            slices.push(new tr.model.ThreadTimeSlice(
                thread, SCHEDULING_STATE.UNKNOWN, '',
                prevSlice.end, {}, midDuration));
            this.model_.importWarning({
              type: 'parse_error',
              message: 'Unrecognized sleep state: ' +
                  prevSlice.args.stateWhenDescheduled
            });
          }

          const runningSlice = new tr.model.ThreadTimeSlice(
              thread, SCHEDULING_STATE.RUNNING, '',
              nextSlice.start, {}, nextSlice.duration);
          runningSlice.cpuOnWhichThreadWasRunning = prevSlice.cpu;
          slices.push(runningSlice);
        }
        thread.timeSlices = slices;
      }, this);
    },

    /**
     * Creates an instance of each registered linux perf event parser.
     * This allows the parsers to register handlers for the events they
     * understand.  We also register our own special handlers (for the
     * timestamp synchronization markers).
     */
    createParsers_() {
      // Instantiate the parsers; this will register handlers for known events
      const allTypeInfos = tr.e.importer.linux_perf.
          Parser.getAllRegisteredTypeInfos();
      const parsers = allTypeInfos.map(
          function(typeInfo) {
            return new typeInfo.constructor(this);
          }, this);

      return parsers;
    },

    registerDefaultHandlers_() {
      this.registerEventHandler('tracing_mark_write',
          FTraceImporter.prototype.traceMarkingWriteEvent_.bind(this));
      // NB: old-style trace markers; deprecated
      this.registerEventHandler('0',
          FTraceImporter.prototype.traceMarkingWriteEvent_.bind(this));
      // Register dummy clock sync handlers to avoid warnings in the log.
      this.registerEventHandler('tracing_mark_write:trace_event_clock_sync',
          function() { return true; });
      this.registerEventHandler('0:trace_event_clock_sync',
          function() { return true; });
    },

    /**
     * Processes a trace_event_clock_sync event.
     */
    traceClockSyncEvent_(eventName, cpuNumber, pid, ts, eventBase) {
      // Check to see if we have a normal clock sync marker that contains a
      // sync ID and the current time according to the "ftrace global" clock.
      let event = /name=(\w+?)\s(.+)/.exec(eventBase.details);
      if (event) {
        // TODO(alexandermont): This section of code seems to be broken. It
        // creates an "args" variable, but doesn't seem to do anything with it.
        const name = event[1];
        const pieces = event[2].split(' ');
        const args = {
          perfTs: ts
        };
        for (let i = 0; i < pieces.length; i++) {
          const parts = pieces[i].split('=');
          if (parts.length !== 2) {
            throw new Error('omgbbq');
          }
          args[parts[0]] = parts[1];
        }

        this.model_.clockSyncManager.addClockSyncMarker(
            this.clockDomainId_, name, ts);
        return true;
      }

      // Check to see if we have a "new style" clock sync marker that contains
      // only a sync ID.
      event = /name=([\w\-]+)/.exec(eventBase.details);
      if (event) {
        this.model_.clockSyncManager.addClockSyncMarker(
            this.clockDomainId_, event[1], ts);
        return true;
      }

      // Check to see if we have a special clock sync marker that contains both
      // the current "ftrace global" time and the current CLOCK_MONOTONIC time.
      event = /parent_ts=(\d+\.?\d*)/.exec(eventBase.details);
      if (!event) return false;

      let monotonicTs = event[1] * 1000;
      // A monotonic timestamp of zero is used as a sentinel value to indicate
      // that CLOCK_MONOTONIC and the ftrace global clock are identical.
      if (monotonicTs === 0) monotonicTs = ts;

      if (this.haveClockSyncedMonotonicToGlobal_) {
        // ftrace sometimes includes multiple clock syncs between the monotonic
        // and global clocks within a single trace. We protect against this by
        // only taking the first one into account.
        return true;
      }

      // We have a clock sync event that contains two timestamps: a timestamp
      // according to the ftrace 'global' clock, and that same timestamp
      // according to clock_gettime(CLOCK_MONOTONIC).
      this.model_.clockSyncManager.addClockSyncMarker(
          this.clockDomainId_,
          MONOTONIC_TO_FTRACE_GLOBAL_SYNC_ID, ts);
      this.model_.clockSyncManager.addClockSyncMarker(
          tr.model.ClockDomainId.LINUX_CLOCK_MONOTONIC,
          MONOTONIC_TO_FTRACE_GLOBAL_SYNC_ID, monotonicTs);

      this.haveClockSyncedMonotonicToGlobal_ = true;
      return true;
    },

    /**
     * Processes a trace_marking_write event.
     */
    traceMarkingWriteEvent_(eventName, cpuNumber, pid, ts, eventBase,
        threadName) {
      // Some profiles end up with a \n\ on the end of each line. Strip it
      // before we do the comparisons.
      eventBase.details = eventBase.details.replace(/\\n.*$/, '');

      const event = /^\s*(\w+):\s*(.*)$/.exec(eventBase.details);
      if (!event) {
        // Check if the event matches events traced by the Android framework
        const tag = eventBase.details.substring(0, 2);
        if (tag === 'B|' || tag === 'E' || tag === 'E|' || tag === 'X|' ||
            tag === 'C|' || tag === 'S|' || tag === 'F|') {
          eventBase.subEventName = 'android';
        } else {
          return false;
        }
      } else {
        eventBase.subEventName = event[1];
        eventBase.details = event[2];
      }

      const writeEventName = eventName + ':' + eventBase.subEventName;
      const handler = this.eventHandlers_[writeEventName];
      if (!handler) {
        this.model_.importWarning({
          type: 'parse_error',
          message: 'Unknown trace_marking_write event ' + writeEventName
        });
        return true;
      }
      return handler(writeEventName, cpuNumber, pid, ts, eventBase, threadName);
    },

    /**
     * Walks the this.events_ structure and creates Cpu objects.
     */
    importCpuData_(modelTimeTransformer) {
      this.forEachLine_(function(text, eventBase, cpuNumber, pid, ts) {
        const eventName = eventBase.eventName;
        const handler = this.eventHandlers_[eventName];
        if (!handler) {
          this.model_.importWarning({
            type: 'parse_error',
            message: 'Unknown event ' + eventName + ' (' + text + ')'
          });
          return;
        }
        ts = modelTimeTransformer(ts);
        if (!handler(eventName, cpuNumber, pid, ts, eventBase)) {
          this.model_.importWarning({
            type: 'parse_error',
            message: 'Malformed ' + eventName + ' event (' + text + ')'
          });
        }
      }.bind(this));
    },

    /**
     * Walks the this.events_ structure and populates this.lines_.
     */
    parseLines_() {
      let extractResult = FTraceImporter._extractEventsFromSystraceHTML(
          this.events_, true);
      if (!extractResult.ok) {
        extractResult = FTraceImporter._extractEventsFromSystraceMultiHTML(
            this.events_, true);
      }
      let lineParser = undefined;
      if (extractResult.ok) {
        for (const line of extractResult.lines) {
          lineParser = this.parseLine_(line, lineParser);
        }
      } else {
        const r = new tr.importer.SimpleLineReader(this.events_);
        for (const line of r) {
          lineParser = this.parseLine_(line, lineParser);
        }
      }
    },

    parseLine_(line, lineParser) {
      line = line.trim();
      if (line.length === 0) return lineParser;
      if (/^#/.test(line)) {
        const clockType = /^# clock_type=([A-Z_]+)$/.exec(line);
        // This allows the clock domain to be specified through a comment,
        // Ex. "# clock_type=LINUX_CLOCK_MONOTONIC".
        // This is used in the WALT trace agent.
        if (clockType) {
          this.clockDomainId_ = clockType[1];
        }
        return lineParser;
      }

      if (!lineParser) {
        lineParser = autoDetectLineParser(line);
        if (!lineParser) {
          this.model_.importWarning({
            type: 'parse_error',
            message: 'Cannot parse line: ' + line
          });
          return lineParser;
        }
      }

      const eventBase = lineParser(line);
      if (!eventBase) {
        this.model_.importWarning({
          type: 'parse_error',
          message: 'Unrecognized line: ' + line
        });
        return lineParser;
      }

      this.lines_.push([
        line,
        eventBase,
        parseInt(eventBase.cpuNumber),
        parseInt(eventBase.pid),
        parseFloat(eventBase.timestamp) * 1000
      ]);
      return lineParser;
    },

    /**
     * Calls |handler| for every parsed line.
     */
    forEachLine_(handler) {
      for (let i = 0; i < this.lines_.length; ++i) {
        const line = this.lines_[i];
        handler.apply(this, line);
      }
    },

    /**
     * Initializes the ftrace importer. This initialization can't be done in the
     * constructor because all trace event handlers may not have been registered
     * by that point.
     */
    lazyInit_() {
      this.parsers_ = this.createParsers_();
      this.registerDefaultHandlers_();
      this.parseLines_();
    }
  };

  tr.importer.Importer.register(FTraceImporter);

  return {
    FTraceImporter,
    _FTraceImporterTestExports: TestExports,
    IMPORT_PRIORITY,
  };
});


'use strict';

tr.exportTo('tr.e.importer.android.atrace_process_dump', function() {
  const IMPORT_PRIORITY = tr.e.importer.linux_perf.IMPORT_PRIORITY + 1;
  const HEADER = 'ATRACE_PROCESS_DUMP';

  const PROTECTION_FLAG_LETTERS = {
    '-': 0,
    'r': tr.model.VMRegion.PROTECTION_FLAG_READ,
    'w': tr.model.VMRegion.PROTECTION_FLAG_WRITE,
    'x': tr.model.VMRegion.PROTECTION_FLAG_EXECUTE,
    's': tr.model.VMRegion.PROTECTION_FLAG_MAYSHARE,
  };

  class AtraceProcessDumpImporter extends tr.importer.Importer {
    constructor(model, data) {
      super(model, data);
      this.importPriority = IMPORT_PRIORITY;
      this.model_ = model;
      this.raw_data_ = data;
      this.clock_sync_markers_ = {};
      this.snapshots_ = [];
      this.processes_ = {};
    }

    static canImport(events) {
      if (!(typeof(events) === 'string' || events instanceof String)) {
        return false;
      }
      return events.startsWith(HEADER);
    }

    get importerName() {
      return 'AtraceProcessDumpImporter';
    }

    get model() {
      return this.model_;
    }

    lazyParseData() {
      if (this.raw_data_ === undefined) {
        return;
      }
      const dump = JSON.parse(this.raw_data_.slice(HEADER.length + 1));
      this.clock_sync_markers_ = dump.clock_sync_markers;
      this.snapshots_ = dump.dump.snapshots;
      this.processes_ = dump.dump.processes;
      this.raw_data_ = undefined;
    }

    importClockSyncMarkers() {
      this.lazyParseData();
      for (const syncId in this.clock_sync_markers_) {
        const ts = parseInt(this.clock_sync_markers_[syncId]);
        this.model_.clockSyncManager.addClockSyncMarker(
            tr.model.ClockDomainId.LINUX_CLOCK_MONOTONIC, syncId, ts);
      }
    }

    setProcessMemoryDumpTotals_(pmd, processInfo) {
      pmd.totals = {
        'residentBytes': processInfo.rss * 1024,
        'platformSpecific': {
          'vm': processInfo.vm * 1024
        }
        // TODO(kraynov): Add OOM scores and make UI able to show it.
      };
      const totals = pmd.totals.platformSpecific;

      function importGpuMetric(name) {
        if (processInfo[name] !== undefined && processInfo[name] > 0) {
          totals[name] = processInfo[name] * 1024;
          totals[name + '_pss'] = processInfo[name + '_pss'] * 1024;
        }
      }
      importGpuMetric('gpu_egl');
      importGpuMetric('gpu_gl');
      importGpuMetric('gpu_etc');

      if (processInfo.pss !== undefined) {
        // Full stats.
        totals.pss = processInfo.pss * 1024;
        totals.swp = processInfo.swp * 1024;
        totals.pc = processInfo.pc * 1024;
        totals.pd = processInfo.pd * 1024;
        totals.sc = processInfo.sc * 1024;
        totals.sd = processInfo.sd * 1024;
      }
    }

    setProcessMemoryDumpVmRegions_(pmd, processInfo) {
      if (processInfo.mmaps === undefined) {
        return;
      }
      const vmRegions = [];
      for (const memoryMap of processInfo.mmaps) {
        const addr = memoryMap.vm.split('-').map(x => parseInt(x, 16));
        let flags = 0;
        for (const letter of memoryMap.flags) {
          flags |= PROTECTION_FLAG_LETTERS[letter];
        }
        const totals = {
          'proportionalResident': memoryMap.pss * 1024,
          'privateCleanResident': memoryMap.pc * 1024,
          'privateDirtyResident': memoryMap.pd * 1024,
          'sharedCleanResident': memoryMap.sc * 1024,
          'sharedDirtyResident': memoryMap.sd * 1024,
          'swapped': memoryMap.swp * 1024,
        };
        vmRegions.push(new tr.model.VMRegion(
            addr[0], addr[1] - addr[0], flags, memoryMap.file, totals));
      }
      pmd.vmRegions =
          tr.model.VMRegionClassificationNode.fromRegions(vmRegions);
    }

    importEvents() {
      this.lazyParseData();
      // Assign process and thread names.
      for (const [pid, process] of Object.entries(this.processes_)) {
        const modelProcess = this.model_.getProcess(pid);
        if (modelProcess === undefined) {
          continue;
        }
        modelProcess.name = process.name;

        const threads = process.threads;
        if (threads === undefined) {
          continue;
        }
        for (const [tid, thread] of Object.entries(threads)) {
          const modelThread = modelProcess.threads[tid];
          if (modelThread === undefined) {
            continue;
          }
          modelThread.name = thread.name;
        }
      }

      // Memory dumps.
      const memCounter =
          this.model_.kernel.getOrCreateCounter('global', 'SystemMemory');
      const memUsedSeries = new tr.model.CounterSeries('Used (KB)', 0);
      const memSwappedSeries = new tr.model.CounterSeries('Swapped (KB)', 0);
      memCounter.addSeries(memUsedSeries);
      memCounter.addSeries(memSwappedSeries);

      for (const snapshot of this.snapshots_) {
        const ts = parseInt(snapshot.ts);
        const memoryDump = snapshot.memdump;

        if (memoryDump === undefined) {
          const memInfo = snapshot.meminfo;
          if (memInfo === undefined) {
            continue;
          }

          // See Android com.android.server.am.ActivityManagerService class
          // for calculation formula in 'dumpsys meminfo'.
          //
          // The formula below excludes Cached PSS because it's too expensive
          // to calculate and it's not volatile during short systrace run.
          // Cached PSS is a total PSS of apps being primary targets for
          // OOM killer and treated by 'dumpsys meminfo' as a free memory.
          const memCaches = memInfo.Buffers + memInfo.Cached - memInfo.Mapped;
          const memUsed = memInfo.MemTotal - memInfo.MemFree - memCaches;
          const memSwapped = memInfo.SwapTotal - memInfo.SwapFree;

          memUsedSeries.addCounterSample(ts, memUsed);
          memSwappedSeries.addCounterSample(ts, memSwapped);
          continue;
        }

        const gmd = new tr.model.GlobalMemoryDump(this.model_, ts);
        this.model_.globalMemoryDumps.push(gmd);

        for (const [pid, processInfo] of Object.entries(memoryDump)) {
          if (processInfo.rss === undefined) {
            // Memory stats aren't available.
            continue;
          }
          const modelProcess = this.model_.getProcess(pid);
          if (modelProcess === undefined) {
            continue;
          }
          const pmd = new tr.model.ProcessMemoryDump(gmd, modelProcess, ts);
          gmd.processMemoryDumps[pid] = pmd;
          modelProcess.memoryDumps.push(pmd);
          this.setProcessMemoryDumpTotals_(pmd, processInfo);
          this.setProcessMemoryDumpVmRegions_(pmd, processInfo);
        }
      }
    }
  }

  tr.importer.Importer.register(AtraceProcessDumpImporter);

  return {
    AtraceProcessDumpImporter,
  };
});


'use strict';

/**
 * @fileoverview Class representing a user activity that is running
 * in the process.
 * On the Android platform, activities are mapped to Android Activities
 * running in the foreground of the process.
 * On Windows/OS X this could for example represent
 * the currently active window of the process.
 */
tr.exportTo('tr.model', function() {
  const ColorScheme = tr.b.ColorScheme;

  /**
   * @constructor
   * @param {String} name Name of the activity
   * @param {String} category Category of the activities
   * @param {String} range The time range where the activity was running
   * @param {String} args Additional arguments
   */
  function Activity(name, category, range, args) {
    tr.model.TimedEvent.call(this, range.min);
    this.title = name;
    this.category = category;
    this.colorId = ColorScheme.getColorIdForGeneralPurposeString(name);
    this.duration = range.duration;
    this.args = args;
    this.name = name;
  }

  Activity.prototype = {
    __proto__: tr.model.TimedEvent.prototype,

    shiftTimestampsForward(amount) {
      this.start += amount;
    },

    addBoundsToRange(range) {
      range.addValue(this.start);
      range.addValue(this.end);
    }
  };
  return {
    Activity,
  };
});


/**
 * @fileoverview Imports android event log data into the trace model.
 * Android event log data contains information about activities that
 * are launched/paused, processes that are started, memory usage, etc.
 *
 * The current implementation only parses activity events, with the goal of
 * determining which Activity is running in the foreground for a process.
 *
 * This importer assumes the events arrive as a string. The unit tests provide
 * examples of the trace format.
 */
'use strict';

tr.exportTo('tr.e.importer.android', function() {
  const Importer = tr.importer.Importer;

  const ACTIVITY_STATE = {
    NONE: 'none',
    CREATED: 'created',
    STARTED: 'started',
    RESUMED: 'resumed',
    PAUSED: 'paused',
    STOPPED: 'stopped',
    DESTROYED: 'destroyed'
  };

  const activityMap = {};

  /**
   * Imports android event log data (adb logcat -b events)
   * @constructor
   */
  function EventLogImporter(model, events) {
    this.model_ = model;
    this.events_ = events;
    this.importPriority = 3;
  }

  // Generic format of event log entries.
  // Sample event log entry that this matches (split over 2 lines):
  // 08-11 13:12:31.405   880  2645 I am_focused_activity: [0,com.google.android.googlequicksearchbox/com.google.android.launcher.GEL] // @suppress longLineCheck
  const eventLogActivityRE = new RegExp(
      '(\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d+)' +
      '\\s+(\\d+)\\s+(\\d+)\\s+([A-Z])\\s*' +
      '(am_\\w+)\\s*:(.*)');

  // 08-28 03:58:21.834   888  3177 I am_create_activity: [0,5972200,30,com.nxp.taginfolite/.activities.MainView,android.intent.action.MAIN,NULL,NULL,270532608] // @suppress longLineCheck
  // Store the name of the created activity only
  const amCreateRE = new RegExp('\s*\\[.*,.*,.*,(.*),.*,.*,.*,.*\\]');

  // 07-22 12:22:19.504   920  2504 I am_focused_activity: [0,com.android.systemui/.recents.RecentsActivity] // @suppress longLineCheck
  // Store the name of the focused activity only
  const amFocusedRE = new RegExp('\s*\\[\\d+,(.*)\\]');

  // 07-21 19:56:12.315   920  2261 I am_proc_start: [0,19942,10062,com.google.android.talk,broadcast,com.google.android.talk/com.google.android.apps.hangouts.realtimechat.RealTimeChatService$AlarmReceiver] // @suppress longLineCheck
  // We care about proc starts on behalf of activities, and store the activity
  const amProcStartRE = new RegExp('\s*\\[\\d+,\\d+,\\d+,.*,activity,(.*)\\]');

  // 07-22 12:21:43.490  2893  2893 I am_on_resume_called: [0,com.google.android.launcher.GEL] // @suppress longLineCheck
  // Store the activity name only
  const amOnResumeRE = new RegExp('\s*\\[\\d+,(.*)\\]');

  // 07-22 12:22:19.545  2893  2893 I am_on_paused_called: [0,com.google.android.launcher.GEL] // @suppress longLineCheck
  // Store the activity name only
  const amOnPauseRE = new RegExp('\s*\\[\\d+,(.*)\\]');

  // 08-28 03:51:54.456   888   907 I am_activity_launch_time: [0,185307115,com.google.android.googlequicksearchbox/com.google.android.launcher.GEL,1174,1174] // @suppress longLineCheck
  // Store the activity name and launch times
  const amLaunchTimeRE = new RegExp('\s*\\[\\d+,\\d+,(.*),(\\d+),(\\d+)');

  // 08-28 03:58:15.854   888   902 I am_destroy_activity: [0,203516597,29,com.android.chrome/com.google.android.apps.chrome.Main,finish-idle] // @suppress longLineCheck
  // Store the activity name only
  const amDestroyRE = new RegExp('\s*\\[\\d+,\\d+,\\d+,(.*)\\]');

  /**
   * @return {boolean} True when events is an android event log array.
   */
  EventLogImporter.canImport = function(events) {
    if (!(typeof(events) === 'string' || events instanceof String)) {
      return false;
    }

    // Prevent the importer from matching this file in vulcanized traces.
    if (/^<!DOCTYPE html>/.test(events)) return false;

    return eventLogActivityRE.test(events);
  };

  EventLogImporter.prototype = {
    __proto__: Importer.prototype,

    get importerName() {
      return 'EventLogImporter';
    },

    get model() {
      return this.model_;
    },

    /**
     * @return {string} the full activity name (including package) from
     * a component
     */
    getFullActivityName(component) {
      const componentSplit = component.split('/');
      if (componentSplit[1].startsWith('.')) {
        return componentSplit[0] + componentSplit[1];
      }

      return componentSplit[1];
    },

    /**
     * @return {string} the process name of a component
     */
    getProcName(component) {
      const componentSplit = component.split('/');
      return componentSplit[0];
    },

    findOrCreateActivity(activityName) {
      if (activityName in activityMap) {
        return activityMap[activityName];
      }
      const activity = {
        state: ACTIVITY_STATE.NONE,
        name: activityName
      };
      activityMap[activityName] = activity;
      return activity;
    },

    deleteActivity(activityName) {
      delete activityMap[activityName];
    },

    handleCreateActivity(ts, activityName) {
      const activity = this.findOrCreateActivity(activityName);
      activity.state = ACTIVITY_STATE.CREATED;
      activity.createdTs = ts;
    },

    handleFocusActivity(ts, procName, activityName) {
      const activity = this.findOrCreateActivity(activityName);
      activity.lastFocusedTs = ts;
    },

    handleProcStartForActivity(ts, activityName) {
      const activity = this.findOrCreateActivity(activityName);
      activity.procStartTs = ts;
    },

    handleOnResumeCalled(ts, pid, activityName) {
      const activity = this.findOrCreateActivity(activityName);
      activity.state = ACTIVITY_STATE.RESUMED;
      activity.lastResumeTs = ts;
      // on_resume_called shows the actual PID; use this
      // to link the activity up with a process later
      activity.pid = pid;
    },

    handleOnPauseCalled(ts, activityName) {
      const activity = this.findOrCreateActivity(activityName);
      activity.state = ACTIVITY_STATE.PAUSED;
      activity.lastPauseTs = ts;
      // Create a new AndroidActivity representing the foreground state,
      // but only if the pause happened within the model bounds
      if (ts > this.model_.bounds.min && ts < this.model_.bounds.max) {
        this.addActivityToProcess(activity);
      }
    },

    handleLaunchTime(ts, activityName, launchTime) {
      const activity = this.findOrCreateActivity(activityName);
      activity.launchTime = launchTime;
    },

    handleDestroyActivity(ts, activityName) {
      this.deleteActivity(activityName);
    },

    addActivityToProcess(activity) {
      if (activity.pid === undefined) return;
      const process = this.model_.getOrCreateProcess(activity.pid);
      // The range of the activity is the time from resume to time
      // of pause; limit the start time to the beginning of the model
      const range = tr.b.math.Range.fromExplicitRange(
          Math.max(this.model_.bounds.min, activity.lastResumeTs),
          activity.lastPauseTs);
      const newActivity = new tr.model.Activity(activity.name,
          'Android Activity', range,
          {created: activity.createdTs,
            procstart: activity.procStartTs,
            lastfocus: activity.lastFocusedTs});
      process.activities.push(newActivity);
    },

    parseAmLine_(line) {
      let match = eventLogActivityRE.exec(line);
      if (!match) return;

      // Possible activity life-cycles:
      // 1) Launch from scratch:
      //   - am_create_activity
      //   - am_focused_activity
      //   - am_proc_start
      //   - am_proc_bound
      //   - am_restart_activity
      //   - am_on_resume_called
      // 2) Re-open existing activity
      //   - am_focused_activity
      //   - am_on_resume_called

      // HACK: event log date format is "MM-DD" and doesn't contain the year;
      // to figure out the year, take the min bound of the model, convert
      // to real-time and use that as the year.
      // The Android event log will eventually contain the year once this
      // CL is in a release:
      // https://android-review.googlesource.com/#/c/168900
      const firstRealtimeTs = this.model_.bounds.min -
          this.model_.realtime_to_monotonic_offset_ms;
      const year = new Date(firstRealtimeTs).getFullYear();
      const ts = match[1].substring(0, 5) + '-' + year + ' ' +
          match[1].substring(5, match[1].length);

      const monotonicTs = Date.parse(ts) +
          this.model_.realtime_to_monotonic_offset_ms;

      const pid = match[2];
      const action = match[5];
      const data = match[6];

      if (action === 'am_create_activity') {
        match = amCreateRE.exec(data);
        if (match && match.length >= 2) {
          this.handleCreateActivity(monotonicTs,
              this.getFullActivityName(match[1]));
        }
      } else if (action === 'am_focused_activity') {
        match = amFocusedRE.exec(data);
        if (match && match.length >= 2) {
          this.handleFocusActivity(monotonicTs,
              this.getProcName(match[1]), this.getFullActivityName(match[1]));
        }
      } else if (action === 'am_proc_start') {
        match = amProcStartRE.exec(data);
        if (match && match.length >= 2) {
          this.handleProcStartForActivity(monotonicTs,
              this.getFullActivityName(match[1]));
        }
      } else if (action === 'am_on_resume_called') {
        match = amOnResumeRE.exec(data);
        if (match && match.length >= 2) {
          this.handleOnResumeCalled(monotonicTs, pid, match[1]);
        }
      } else if (action === 'am_on_paused_called') {
        match = amOnPauseRE.exec(data);
        if (match && match.length >= 2) {
          this.handleOnPauseCalled(monotonicTs, match[1]);
        }
      } else if (action === 'am_activity_launch_time') {
        match = amLaunchTimeRE.exec(data);
        this.handleLaunchTime(monotonicTs,
            this.getFullActivityName(match[1]), match[2]);
      } else if (action === 'am_destroy_activity') {
        match = amDestroyRE.exec(data);
        if (match && match.length === 2) {
          this.handleDestroyActivity(monotonicTs,
              this.getFullActivityName(match[1]));
        }
      }
    },

    importEvents() {
      // Check if we have a mapping from real-time to CLOCK_MONOTONIC
      if (isNaN(this.model_.realtime_to_monotonic_offset_ms)) {
        this.model_.importWarning({
          type: 'eveng_log_clock_sync',
          message: 'Need a trace_event_clock_sync to map realtime to import.'
        });
        return;
      }
      // Since the event log typically spans a much larger timeframe
      // than the ftrace data, we want to calculate the bounds of the existing
      // model, and dump all event log data outside of those bounds
      this.model_.updateBounds();

      const lines = this.events_.split('\n');
      lines.forEach(this.parseAmLine_, this);

      // Iterate over all created activities that are not destroyed yet
      for (const activityName in activityMap) {
        const activity = activityMap[activityName];
        // If we're still in the foreground, store the activity anyway
        if (activity.state === ACTIVITY_STATE.RESUMED) {
          // Set the pause timestamp to the end of the model bounds
          activity.lastPauseTs = this.model_.bounds.max;
          this.addActivityToProcess(activity);
        }
      }
    }
  };

  Importer.register(EventLogImporter);

  return {
    EventLogImporter,
  };
});


/**
 * @fileoverview
 */
'use strict';

tr.exportTo('tr.e.importer.android.process_data', function() {
  const Importer = tr.importer.Importer;

  const PROCESS_DUMP_HEADER = 'PROCESS DUMP';

  /**
   * Imports android process data
   * @constructor
   */
  function ProcessDataImporter(model, processData) {
    this.model_ = model;
    this.processDataLines = processData.split('\n');
    this.importPriority = 3;
  }

  /**
   * @return {boolean}
   */
  ProcessDataImporter.canImport = function(events) {
    if (!(typeof(events) === 'string' || events instanceof String)) {
      return false;
    }

    if (events.split('\n')[0] === PROCESS_DUMP_HEADER) {
      return true;
    }

    return false;
  };

  ProcessDataImporter.prototype = {
    __proto__: Importer.prototype,

    get importerName() {
      return 'ProcessDataImporter';
    },

    get model() {
      return this.model_;
    },

    parseEventData(data) {
      const allDumpedProcesses = {};

      let parseProcesses = false;
      let parseThreads = false;
      let legacy = false;

      // Skip header on line 1.
      for (let i = 1; i < data.length; i++) {
        const cols = data[i].split(/\s+/);
        if (cols[0].startsWith('USER')) {
          if (parseProcesses) {
            parseProcesses = false;
            parseThreads = true;
          } else {
            parseThreads = false;
            parseProcesses = true;
          }

          const colCount = cols.length;
          if (parseProcesses && colCount === 9) {
            legacy = false;
          } else if (parseProcesses && colCount === 8) {
            legacy = true;
          }
          continue;
        }

        if (parseProcesses) {
          const pid = Number(cols[1]);
          if (allDumpedProcesses[pid] === undefined) {
            allDumpedProcesses[pid] = {};
          }
          allDumpedProcesses[pid] = {
            'name': cols[8], pid, 'comm': cols[9]
          };
          continue;
        }

        if (parseThreads) {
          let pid;
          let tid;
          let name;

          // In legacy ps dumps, the PID is actually shown in the PPID column
          // for thread lines, but PID column for the process line
          if (legacy) {
            pid = Number(cols[1]);
            if (allDumpedProcesses[pid] !== undefined) {
              // this is a process line in the dump.
              tid = pid;
            } else {
              // Thread line, so swap.
              tid = pid;
              pid = Number(cols[2]);  // i.e. the PPID column.
            }
            name = cols.slice(8).join(' ');
          } else {
            pid = Number(cols[1]);
            tid = Number(cols[2]);
            name = cols.slice(3).join(' ');
          }

          // Thread data for a process we didn't identify, skip.
          if (allDumpedProcesses[pid] === undefined) continue;

          if (allDumpedProcesses[pid].threads === undefined) {
            allDumpedProcesses[pid].threads = {};
          }
          allDumpedProcesses[pid].threads[tid] = {tid, name};
          continue;
        }
      }
      return allDumpedProcesses;
    },

    importEvents() {
      // Merge the snapshots into a single object, indexable by PID.

      const allDumpedProcesses = this.parseEventData(this.processDataLines);

      // Update the model with the new process / thread name data.
      const modelProcesses = this.model_.getAllProcesses();
      for (let i = 0; i < modelProcesses.length; i++) {
        const modelProcess = modelProcesses[i];
        const pid = modelProcess.pid;
        const dumpedProcess = allDumpedProcesses[pid];
        if (dumpedProcess === undefined) {
          // There's a process in the model that the ps dump doesn't know about,
          // nothing we can do so skip it.
          continue;
        }

        modelProcess.name = dumpedProcess.name;
        const processDumpThreads = dumpedProcess.threads;
        if (processDumpThreads !== undefined) {
          for (const tid in modelProcess.threads) {
            const modelThread = modelProcess.threads[tid];
            if (Number(pid) === Number(tid)) {
              modelThread.name = 'UI thread';
            } else if (modelThread.name === '<...>') {
              if (processDumpThreads[tid] !== undefined) {
                // Use the stored thread name that we have.
                modelThread.name = processDumpThreads[tid].name;
              }
            }
          }
        }
      }
    }
  };

  Importer.register(ProcessDataImporter);

  return {
    ProcessDataImporter,
  };
});


/**
 * @fileoverview Imports text files in the BattOr format into the
 * Model. This format is output by the battor_agent executable and library.
 *
 * This importer assumes the events arrive as a string. The unit tests provide
 * examples of the trace format.
 */
'use strict';

tr.exportTo('tr.e.importer.battor', function() {
  /**
   * Imports a BattOr power trace into a specified model.
   * @constructor
   */
  function BattorImporter(model, events) {
    this.importPriority = 3; // runs after the linux_perf importer
    this.model_ = model;

    // The list of power samples contained within the trace.
    this.samples_ = [];
    // The clock sync markers contained within the trace.
    this.syncTimestampsById_ = new Map();

    this.parseTrace_(events);
  }

  const battorDataLineRE = new RegExp(
      '^(-?\\d+\\.\\d+)\\s+(-?\\d+\\.\\d+)\\s+(-?\\d+\\.\\d+)' +
      '(?:\\s+<(\\S+)>)?$'
  );
  const battorHeaderLineRE = /^# BattOr/;

  /**
   * Guesses whether the provided events is a BattOr string.
   * Looks for the magic string "# BattOr" at the start of the file,
   *
   * @return {boolean} True when events is a BattOr array.
   */
  BattorImporter.canImport = function(events) {
    if (!(typeof(events) === 'string' || events instanceof String)) {
      return false;
    }

    return battorHeaderLineRE.test(events);
  };

  BattorImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'BattorImporter';
    },

    get model() {
      return this.model_;
    },

    /**
     * Imports clock sync markers from the trace into into this.model_.
     */
    importClockSyncMarkers() {
      for (const [syncId, ts] of this.syncTimestampsById_) {
        this.model_.clockSyncManager.addClockSyncMarker(
            tr.model.ClockDomainId.BATTOR, syncId, ts);
      }
    },

    /**
     * Imports the events from the trace into this.model_.
     */
    importEvents() {
      if (this.model_.device.powerSeries) {
        this.model_.importWarning({
          type: 'import_error',
          message: 'Power counter exists, can not import BattOr power trace.'
        });
        return;
      }

      const modelTimeTransformer =
          this.model_.clockSyncManager.getModelTimeTransformer(
              tr.model.ClockDomainId.BATTOR);

      const powerSeries = this.model_.device.powerSeries =
          new tr.model.PowerSeries(this.model_.device);
      for (let i = 0; i < this.samples_.length; i++) {
        const sample = this.samples_[i];
        powerSeries.addPowerSample(
            modelTimeTransformer(sample.ts), sample.powerInW);
      }
    },

    /**
     * Given the BattOr trace as a string, parse it and store the results in
     * this.samples_ and this.syncTimestampsById_.
     */
    parseTrace_(trace) {
      const lines = trace.split('\n');

      for (let line of lines) {
        line = line.trim();

        if (line.length === 0) continue;

        if (line.startsWith('#')) continue;

        // Parse power sample.
        const groups = battorDataLineRE.exec(line);
        if (!groups) {
          this.model_.importWarning({
            type: 'parse_error',
            message: 'Unrecognized line in BattOr trace: ' + line
          });
          continue;
        }

        const ts = parseFloat(groups[1]);
        const voltageInV = tr.b.convertUnit(parseFloat(groups[2]),
            tr.b.UnitPrefixScale.METRIC.MILLI,
            tr.b.UnitPrefixScale.METRIC.NONE);
        const currentInA = tr.b.convertUnit(parseFloat(groups[3]),
            tr.b.UnitPrefixScale.METRIC.MILLI,
            tr.b.UnitPrefixScale.METRIC.NONE);
        const syncId = groups[4];

        if (syncId) {
          this.syncTimestampsById_.set(syncId, ts);
        }

        if (voltageInV < 0 || currentInA < 0) {
          this.model_.importWarning({
            type: 'parse_error',
            message: 'The following line in the BattOr trace has a negative ' +
                'voltage or current, neither of which are allowed: ' + line +
                '. A common cause of this is that the device is charging ' +
                'while the trace is being recorded.'
          });
          continue;
        }

        this.samples_.push(new Sample(ts, voltageInV, currentInA));
      }
    }
  };

  /**
   * A sample recorded by a BattOr.
   *
   * @param {number} ts The timestamp (in milliseconds) of the sample.
   * @param {number} voltage The voltage (in volts) at the specified time.
   * @param {number} current The current (in amps) at the specified time.
   *
   * @constructor
   */
  function Sample(ts, voltageInV, currentInA) {
    this.ts = ts;
    this.voltageInV = voltageInV;
    this.currentInA = currentInA;
  }

  Sample.prototype = {
    /** Returns the instantaneous power consumption (in Watts). */
    get powerInW() { return this.voltageInV * this.currentInA; }
  };

  tr.importer.Importer.register(BattorImporter);

  return {
    BattorImporter,
  };
});



/**
 * @fileoverview Blah.
 */
'use strict';

tr.exportTo('tr.e.importer.ddms', function() {
  const kPid = 0;
  const kCategory = 'java';
  const kMethodLutEndMarker = '\n*end\n';
  const kThreadsStart = '\n*threads\n';
  const kMethodsStart = '\n*methods\n';

  const kTraceMethodEnter = 0x00;       // method entry
  const kTraceMethodExit = 0x01;        // method exit
  const kTraceUnroll = 0x02;            // method exited by exception unrolling
  // 0x03 currently unused
  const kTraceMethodActionMask = 0x03;  // two bits

  const kTraceHeaderLength = 32;
  const kTraceMagicValue = 0x574f4c53;
  const kTraceVersionSingleClock = 2;
  const kTraceVersionDualClock = 3;
  const kTraceRecordSizeSingleClock = 10;  // using v2
  const kTraceRecordSizeDualClock = 14;  // using v3 with two timestamps

  function Reader(stringPayload) {
    this.position_ = 0;
    this.data_ = new Uint8Array(stringPayload.length);
    for (let i = 0; i < stringPayload.length; ++i) {
      this.data_[i] = stringPayload.charCodeAt(i);
    }
  }

  Reader.prototype = {
    __proto__: Object.prototype,

    uint8() {
      const result = this.data_[this.position_];
      this.position_ += 1;
      return result;
    },

    uint16() {
      let result = 0;
      result += this.uint8();
      result += this.uint8() << 8;
      return result;
    },

    uint32() {
      let result = 0;
      result += this.uint8();
      result += this.uint8() << 8;
      result += this.uint8() << 16;
      result += this.uint8() << 24;
      return result;
    },

    uint64() {
      // Javascript isn't able to manage 64-bit numeric values.
      const low = this.uint32();
      const high = this.uint32();
      const lowStr = ('0000000' + low.toString(16)).substr(-8);
      const highStr = ('0000000' + high.toString(16)).substr(-8);
      const result = highStr + lowStr;
      return result;
    },

    seekTo(position) {
      this.position_ = position;
    },

    hasMore() {
      return this.position_ < this.data_.length;
    }
  };

  /**
   * Imports DDMS method tracing events into a specified model.
   * @constructor
   */
  function DdmsImporter(model, data) {
    this.importPriority = 3;
    this.model_ = model;
    this.data_ = data;
  }

  /**
   * Guesses whether the provided events is from a DDMS method trace.
   * @return {boolean} True when events is a DDMS method trace.
   */
  DdmsImporter.canImport = function(data) {
    if (typeof(data) === 'string' || data instanceof String) {
      const header = data.slice(0, 1000);
      return header.startsWith('*version\n') &&
        header.indexOf('\nvm=') >= 0 &&
        header.indexOf(kThreadsStart) >= 0;
    }
    /* key bit */
    return false;
  };

  DdmsImporter.prototype = {
    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'DdmsImporter';
    },

    get model() {
      return this.model_;
    },

    /**
     * Imports the data in this.data_ into this.model_.
     */
    importEvents() {
      const divider = this.data_.indexOf(kMethodLutEndMarker) +
          kMethodLutEndMarker.length;
      this.metadata_ = this.data_.slice(0, divider);
      this.methods_ = {};
      this.parseThreads();
      this.parseMethods();

      const traceReader = new Reader(this.data_.slice(divider));
      const magic = traceReader.uint32();
      if (magic !== kTraceMagicValue) {
        throw Error('Failed to match magic value');
      }
      this.version_ = traceReader.uint16();
      if (this.version_ !== kTraceVersionDualClock) {
        throw Error('Unknown version');
      }
      const dataOffest = traceReader.uint16();
      const startDateTime = traceReader.uint64();
      const recordSize = traceReader.uint16();

      traceReader.seekTo(dataOffest);

      while (traceReader.hasMore()) {
        this.parseTraceEntry(traceReader);
      }
    },

    parseTraceEntry(reader) {
      const tid = reader.uint16();
      const methodPacked = reader.uint32();
      const cpuSinceStart = reader.uint32();
      const wallClockSinceStart = reader.uint32();
      let method = methodPacked & ~kTraceMethodActionMask;
      const action = methodPacked & kTraceMethodActionMask;
      const thread = this.getTid(tid);
      method = this.getMethodName(method);
      if (action === kTraceMethodEnter) {
        thread.sliceGroup.beginSlice(kCategory, method, wallClockSinceStart,
            undefined, cpuSinceStart);
      } else if (thread.sliceGroup.openSliceCount) {
        thread.sliceGroup.endSlice(wallClockSinceStart, cpuSinceStart);
      }
    },

    parseThreads() {
      let threads = this.metadata_.slice(this.metadata_.indexOf(kThreadsStart) +
          kThreadsStart.length);
      threads = threads.slice(0, threads.indexOf('\n*'));
      threads = threads.split('\n');
      threads.forEach(this.parseThread.bind(this));
    },

    parseThread(threadLine) {
      const tid = threadLine.slice(0, threadLine.indexOf('\t'));
      const thread = this.getTid(parseInt(tid));
      thread.name = threadLine.slice(threadLine.indexOf('\t') + 1);
    },

    getTid(tid) {
      return this.model_.getOrCreateProcess(kPid)
          .getOrCreateThread(tid);
    },

    parseMethods() {
      let methods = this.metadata_.slice(this.metadata_.indexOf(kMethodsStart) +
          kMethodsStart.length);
      methods = methods.slice(0, methods.indexOf('\n*'));
      methods = methods.split('\n');
      methods.forEach(this.parseMethod.bind(this));
    },

    parseMethod(methodLine) {
      const data = methodLine.split('\t');
      const methodId = parseInt(data[0]);
      const methodName = data[1] + '.' + data[2] + data[3];
      this.addMethod(methodId, methodName);
    },

    addMethod(methodId, methodName) {
      this.methods_[methodId] = methodName;
    },

    getMethodName(methodId) {
      return this.methods_[methodId];
    }
  };

  // Register the DdmsImporter to the Importer.
  tr.importer.Importer.register(DdmsImporter);

  return {
    DdmsImporter,
  };
});


'use strict';
tr.exportTo('tr.e.audits', function() {
  /**
   * Auditor that analyzes the model and annotates low memory events.
   */
  class LowMemoryAuditor extends tr.c.Auditor {

    constructor(model) {
      super();
      this.model_ = model;
    }

    runAnnotate() {
      this.model_.device.lowMemoryEvents = this.getLowMemoryEvents_();
    }

    /**
     * Returns a list of low memory killer events.
     */
    getLowMemoryEvents_() {
      const model = this.model_;
      const result = [];
      for (const process of model.getAllProcesses()) {
        for (const e of process.getDescendantEvents()) {
          // low memory killer events are 0-duration events.
          if (!(e instanceof tr.model.ThreadSlice) || e.duration !== 0) {
            continue;
          }

          if (e.category !== 'lowmemory') {
            continue;
          }

          result.push(e);
        }
      }
      return result;
    }
  }

  tr.c.Auditor.register(LowMemoryAuditor);

  return {
    LowMemoryAuditor
  };
});


'use strict';

function filterDuplicateTimestamps(timestamps) {
  const dedupedTimestamps = [];
  let lastTs = 0;
  for (const ts of timestamps) {
    if (ts - lastTs >= 1) {
      dedupedTimestamps.push(ts);
      lastTs = ts;
    }
  }
  return dedupedTimestamps;
}

tr.exportTo('tr.e.audits', function() {
  const VSYNC_COUNTER_PRECISIONS = {
    // Android. Some versions have VSYNC split out into VSYNC-app and VSYNC-sf.
    // Requires "gfx" systrace category to be enabled.
    'android.VSYNC-app': 15,
    'android.VSYNC': 15
  };

  const VSYNC_SLICE_PRECISIONS = {
    // Android.
    'RenderWidgetHostViewAndroid::OnVSync': 5,
    // Android. Very precise. Requires "gfx" systrace category to be enabled.
    'VSYNC': 10,
    // Linux. Very precise. Requires "gpu" tracing category to be enabled.
    'vblank': 10,
    // Mac. Derived from a Mac callback (CVDisplayLinkSetOutputCallback).
    'DisplayLinkMac::GetVSyncParameters': 5
  };

  const BEGIN_FRAME_SLICE_PRECISION = {
    'DisplayScheduler::BeginFrame': 10
  };

  /**
   * Auditor that analyzes the model and, if possible, adds data to it
   * indicating when vertical sync events took place.
   *
   * @constructor
   * @extends {tr.c.Auditor}
   */
  function VSyncAuditor(model) {
    tr.c.Auditor.call(this, model);
  }

  VSyncAuditor.prototype = {
    __proto__: tr.c.Auditor.prototype,

    runAnnotate() {
      this.model.device.vSyncTimestamps = this.findVSyncTimestamps(this.model);
    },

    /**
     * Returns an array of the most accurate VSync times available in the model.
     */
    findVSyncTimestamps(model) {
      let times = [];

      // Only keep the most precise VSync data.
      let maxPrecision = Number.NEGATIVE_INFINITY;
      let maxTitle = undefined;

      function useInstead(title, precisions) {
        const precision = precisions[title];
        if (precision === undefined) return false;

        if (title === maxTitle) return true;

        if (precision <= maxPrecision) {
          if (precision === maxPrecision) {
            model.importWarning({
              type: 'VSyncAuditor',
              message: 'Encountered two different VSync events (' +
                  maxTitle + ', ' + title + ') with the same precision, ' +
                  'ignoring the newer one (' + title + ')',
              showToUser: false,
            });
          }
          return false;
        }
        maxPrecision = precision;
        maxTitle = title;
        times = [];

        return true;
      }

      for (const pid in model.processes) {
        const process = model.processes[pid];
        // Traverse process counters.
        for (const cid in process.counters) {
          if (useInstead(cid, VSYNC_COUNTER_PRECISIONS)) {
            const counter = process.counters[cid];
            for (let i = 0; i < counter.series.length; i++) {
              const series = counter.series[i];
              Array.prototype.push.apply(times, series.timestamps);
            }
          }
        }

        // Traverse thread slices.
        for (const tid in process.threads) {
          const thread = process.threads[tid];
          for (let i = 0; i < thread.sliceGroup.slices.length; i++) {
            const slice = thread.sliceGroup.slices[i];
            if (useInstead(slice.title, VSYNC_SLICE_PRECISIONS)) {
              times.push(slice.start);
            } else if (useInstead(slice.title, BEGIN_FRAME_SLICE_PRECISION) &&
                       slice.args.args && slice.args.args.frame_time_us) {
              // We need to check not only that we have a Scheduler::BeginFrame
              // event, but also that we have one that has a frame time
              // associated with it.
              // Older versions of Scheduler::BeginFrame don't have one.
              times.push(slice.args.args.frame_time_us / 1000.0);
            }
          }
        }
      }
      times.sort(function(x, y) { return x - y; });
      return filterDuplicateTimestamps(times);
    }
  };

  tr.c.Auditor.register(VSyncAuditor);

  return {
    VSyncAuditor,
  };
});


'use strict';

tr.exportTo('tr.e.v8', function() {
  const ThreadSlice = tr.model.ThreadSlice;

  function V8GCStatsThreadSlice() {
    ThreadSlice.apply(this, arguments);
    this.liveObjects_ = JSON.parse(this.args.live);
    delete this.args.live;
    this.deadObjects_ = JSON.parse(this.args.dead);
    delete this.args.dead;
  }

  V8GCStatsThreadSlice.prototype = {
    __proto__: ThreadSlice.prototype,

    get liveObjects() {
      return this.liveObjects_;
    },

    get deadObjects() {
      return this.deadObjects_;
    }
  };

  ThreadSlice.subTypes.register(
      V8GCStatsThreadSlice,
      {
        categoryParts: ['disabled-by-default-v8.gc_stats'],
        name: 'v8 gc stats slice',
        pluralName: 'v8 gc stats slices'
      }
  );

  return {
    V8GCStatsThreadSlice,
  };
});


'use strict';

tr.exportTo('tr.e.v8', function() {
  const ThreadSlice = tr.model.ThreadSlice;

  function V8ICStatsThreadSlice() {
    ThreadSlice.apply(this, arguments);
    this.icStats_ = undefined;
    if (this.args['ic-stats']) {
      this.icStats_ = this.args['ic-stats'].data;
      delete this.args['ic-stats'];
    }
  }

  V8ICStatsThreadSlice.prototype = {
    __proto__: ThreadSlice.prototype,

    get icStats() {
      return this.icStats_;
    }
  };

  ThreadSlice.subTypes.register(
      V8ICStatsThreadSlice,
      {
        categoryParts: ['disabled-by-default-v8.ic_stats'],
        name: 'v8 ic stats slice',
        pluralName: 'v8 ic stats slices'
      }
  );

  return {
    V8ICStatsThreadSlice,
  };
});



'use strict';

/**
 * @fileoverview GcloudTraceImporter imports JSON data from Google Cloud Trace.
 */
tr.exportTo('tr.e.importer.gcloud_trace', function() {
  function GcloudTraceImporter(model, eventData) {
    this.importPriority = 2;
    this.eventData_ = eventData;
  }

  /**
   * @return {boolean} Whether obj looks like the JSON output from Cloud Trace.
   */
  GcloudTraceImporter.canImport = function(eventData) {
    if (typeof(eventData) !== 'string' && !(eventData instanceof String)) {
      return false;
    }

    // Slice the data so we don't potentially do a replace on a gigantic string.
    const normalizedEventData = eventData.slice(0, 20).replace(/\s/g, '');
    if (normalizedEventData.length < 14) return false;

    return normalizedEventData.slice(0, 14) === '{"projectId":"';
  };

  GcloudTraceImporter.prototype = {

    __proto__: tr.importer.Importer.prototype,

    get importerName() {
      return 'GcloudTraceImporter';
    },

    /**
     * Called by the Model to extract subtraces from the event data. The
     * subtraces are passed on to other importers that can recognize them.
     */
    extractSubtraces() {
      const traceEvents = this.createEventsForTrace();
      return traceEvents ? [traceEvents] : [];
    },

    createEventsForTrace() {
      const events = [];
      const trace = JSON.parse(this.eventData_);
      const spanLength = trace.spans.length;
      for (let i = 0; i < spanLength; i++) {
        events.push(this.createEventForSpan(trace.traceId, trace.spans[i]));
      }
      return {
        'traceEvents': events
      };
    },

    createEventForSpan(traceId, span) {
      let newArgs = {};
      if (span.labels) {
        newArgs = JSON.parse(JSON.stringify(span.labels));
      }
      newArgs['Span ID'] = span.spanId;
      newArgs['Start Time'] = span.startTime;
      newArgs['End Time'] = span.endTime;
      if (span.parentSpanId) {
        newArgs['Parent Span ID'] = span.parentSpanId;
      }
      // The timestamps are ISO-standard strings, which are parsed to millis,
      // then converted to the micros that the trace viewer expects.
      return {
        name: span.name,
        args: newArgs,
        pid: traceId,
        ts: Date.parse(span.startTime) * 1000,
        dur: (Date.parse(span.endTime) - Date.parse(span.startTime)) * 1000,
        cat: 'tracespan',
        tid: traceId,
        ph: 'X'
      };
    }
  };

  tr.importer.Importer.register(GcloudTraceImporter);

  return {
    GcloudTraceImporter,
  };
});


'use strict';

tr.exportTo('tr.mre', function() {
  function FileHandle(canonicalUrl) {
    this.canonicalUrl_ = canonicalUrl;
  }

  FileHandle.prototype = {
    get canonicalUrl() { return this.canonicalUrl_; },

    asDict() {
      const d = {
        canonical_url: this.canonicalUrl_
      };

      this.asDictInto_(d);
      if (d.type === undefined) {
        throw new Error('asDictInto_ must set type field');
      }
    },

    load() {
      throw new Error('Not implemented');
    }
  };

  FileHandle.fromDict = function(handleDict) {
    if (handleDict.type === 'url') {
      return URLFileHandle.fromDict(handleDict);
    }
    if (handleDict.type === 'in-memory') {
      return InMemoryFileHandle.fromDict(handleDict);
    }

    throw new Error('Not implemented: fromDict for ' + handleDict.type);
  };


  function URLFileHandle(canonicalUrl, urlToLoad) {
    // TODO(eakuefner): assert startswith file://
    FileHandle.call(this, canonicalUrl);
    this.urlToLoad = urlToLoad;
    this.loadAsTraceStream_ = false;
  }

  URLFileHandle.prototype = {
    __proto__: FileHandle.prototype,

    asDictInto_(handleDict) {
      handleDict.urlToLoad = this.urlToLoad;
      handleDict.type = 'url';
    },

    load() {
      try {
        return tr.b.getSync(this.urlToLoad, this.loadAsTraceStream_);
      } catch (ex) {
        const err = new Error('Could not open ' + this.urlToLoad);
        err.name = 'FileLoadingError';
        throw err;
      }
    }
  };


  URLFileHandle.fromDict = function(handleDict) {
    return new URLFileHandle(handleDict.canonical_url, handleDict.url_to_load);
  };

  function InMemoryFileHandle(fileData, canonicalUrl) {
    FileHandle.call(this, canonicalUrl);
    this.fileData = fileData;
  }

  InMemoryFileHandle.prototype = {
    __proto__: FileHandle.prototype,

    asDictInto_(handleDict) {
      handleDict.data = this.fileData;
      handleDict.type = 'in-memory';
    },

    load() {
      return this.fileData;
    }
  };

  InMemoryFileHandle.fromDict = function(handleDict) {
    return new InMemoryFileHandle(
        handleDict.data, handleDict.canonical_url);
  };

  return {
    FileHandle,
    URLFileHandle,
    InMemoryFileHandle,
  };
});


'use strict';

tr.exportTo('tr.mre', function() {
  function Job(mapFunctionHandle, opt_guid) {
    this.mapFunctionHandle_ = mapFunctionHandle;
    if (opt_guid === undefined) {
      this.guid_ = tr.b.GUID.allocateSimple();
    } else {
      this.guid_ = opt_guid;
    }
  }

  Job.prototype = {
    get mapFunctionHandle() { return this.mapFunctionHandle_; },
    get guid() { return this.guid_; },

    asDict() {
      return {
        map_function_handle: this.mapFunctionHandle_.asDict(),
        guid: this.guid_.toString()
      };
    }
  };

  Job.fromDict = function(jobDict) {
    let mapFunctionHandle = null;
    if (jobDict.map_function_handle !== null) {
      mapFunctionHandle = tr.mre.FunctionHandle.fromDict(
          jobDict.map_function_handle);
    }

    return new Job(mapFunctionHandle, jobDict.guid);
  };

  return {
    Job,
  };
});


'use strict';

tr.exportTo('tr.mre', function() {
  const Failure = tr.mre.Failure;

  function runAndConvertErrorsToFailures(result, job,
      traceHandle, cb, opt_this) {
    try {
      cb.call(opt_this);
    } catch (e) {
      const err = tr.b.normalizeException(e);
      // TODO(eakuefner): Set job once reduction is implemented.
      result.addFailure(new Failure(
          job, job.mapFunctionHandle.asUserFriendlyString(),
          traceHandle.canonicalUrl, err.typeName, err.message, err.stack));
    }
  }

  function mapSingleTrace(result, model, options, mapFunction) {
    // Map the function.
    const numPairsBeforeMapping = Object.keys(result.pairs).length;
    const numFailuresBeforeMapping = result.failures.length;
    try {
      mapFunction(result, model, options);
    } catch (ex) {
      ex.name = 'MapFunctionError';
      throw ex;
    }

    const addedPairs = (Object.keys(result.pairs).length >
        numPairsBeforeMapping);
    const addedFailures = result.failures.length > numFailuresBeforeMapping;
    if (!(addedPairs || addedFailures)) {
      const err = new Error('Mapper did not add any results!');
      err.name = 'NoResultsAddedError';
      throw err;
    }
  }

  return {
    mapSingleTrace,
    runAndConvertErrorsToFailures
  };
});


'use strict';

tr.exportTo('tr.mre', function() {
  class MreResult {
    constructor(failures, pairs) {
      if (failures === undefined) {
        failures = [];
      }
      if (pairs === undefined) {
        pairs = {};
      }
      this.failures = failures;
      this.pairs = pairs;
    }

    addFailure(failure) {
      this.failures.push(failure);
    }

    addPair(key, value) {
      if (key in this.pairs) {
        throw new Error('Key ' + key + ' already exists in result.');
      }
      this.pairs[key] = value;
    }

    asDict() {
      const d = {
        pairs: this.pairs
      };

      if (this.failures) {
        d.failures = this.failures.map(function(f) {return f.asDict();});
      }

      return d;
    }

    hadFailures() {
      return this.failures.length > 0;
    }

    static fromDict(resultDict) {
      const failures = (resultDict.failures !== undefined) ?
        resultDict.failures.map(tr.mre.Failure.fromDict) : undefined;
      const pairs = resultDict.pairs;
      return new MreResult(failures, pairs);
    }
  }

  return {
    MreResult,
  };
});



'use strict';
/* eslint-disable no-console */

tr.exportTo('tr.mre', function() {
  const Failure = tr.mre.Failure;

  function createModelFromTraceData(traceData,
      canonicalUrl,
      opt_extraImportOptions) {
    const model = new tr.Model();
    try {
      const importOptions = new tr.importer.ImportOptions();
      importOptions.pruneEmptyContainers = false;
      importOptions.showImportWarnings = false;
      if (opt_extraImportOptions !== undefined) {
        for (const property in opt_extraImportOptions) {
          if (opt_extraImportOptions.hasOwnProperty(property)) {
            importOptions[property] = opt_extraImportOptions[property];
          }
        }
      }

      const i = new tr.importer.Import(model, importOptions);
      i.importTraces([traceData]);
    } catch (ex) {
      ex.name = 'TraceImportError';
      throw ex;
    }

    model.canonicalUrl = canonicalUrl;

    return model;
  }

  function mapSingleTraceWithResult(options) {
    const result = new tr.mre.MreResult();

    tr.mre.runAndConvertErrorsToFailures(
        result, options.job, options.traceHandle,
        function() {
          const mapFunction = options.job.mapFunctionHandle.load();
          const traceData = options.traceHandle.load();
          const model = createModelFromTraceData(
              traceData, options.traceHandle.canonicalUrl,
              options.extraImportOptions);
          const opt_options = options.job.mapFunctionHandle.options;
          tr.mre.mapSingleTrace(result, model, opt_options, mapFunction);
        });
    return result;
  }

  function mapSingleTraceMain(args) {
    if (args.length !== 2 && args.length !== 3) {
      throw new Error('Must provide two or three arguments.');
    }

    const options = {
      traceHandle: tr.mre.FileHandle.fromDict(JSON.parse(args[0])),
      job: tr.mre.Job.fromDict(JSON.parse(args[1])),
      extraImportOptions: args.length === 3 ? JSON.parse(args[2]) : undefined
    };

    const result = mapSingleTraceWithResult(options);

    console.log('MRE_RESULT: ' + JSON.stringify(result.asDict()));
    return 0;
  }

  return {
    mapSingleTraceMain,
    mapSingleTraceWithResult
  };
});

// if (tr.isHeadless) {
//   quit(tr.mre.mapSingleTraceMain(sys.argv.slice(1)));
// }



'use strict';

tr.exportTo('pi.m', function() {
  const LONG_TASK_MS = 100;

  const UNINTERESTING_TASKS = [
    'MessageLoop::RunTask',
    'TaskQueueManager::DoWork',
    'TaskQueueManager::ProcessTaskFromWorkQueue',
    'TaskQueueManager::RunTask',
    'TimerBase::run',
    'ThreadProxy::BeginMainFrame',
    'ParseHTML',
    'TimerFire',
    'EventDispatch',
    'WebViewImpl::updateAllLifecyclePhases',
    'ScheduledAction::execute',
    'HTMLDocumentParser::processParsedChunkFromBackgroundParser',
    'HTMLScriptRunner::executeScriptsWaitingForLoad',
    'ResourceDispatcher::OnRequestComplete',
    'HTMLScriptRunner::execute',
    'ChannelProxy::Context::OnDispatchMessage',
    'XHRReadyStateChange',
    'RenderFrameImpl::didFinishDocumentLoad',
    'ResourceDispatcher::OnReceivedData',
    'WebViewImpl::beginFrame',
    'RenderFrameImpl::OnBeforeUnload',
    'WindowProxy::initialize',
    'Sampler::InstallJitCodeEventHandler',
    'ResourceMsg_DataReceived',
    'ResourceReceivedData',
    'RenderWidgetInputHandler::OnHandleInputEvent',
    'ProxyMain::BeginMainFrame::commit',
    'ResourceMsg_RequestComplete',
    'ExtensionMsg_Response',
    'ExtensionMsg_MessageInvoke',
    'SyncChannel::Send',
    'SingleThreadIdleTaskRunner::RunTask',
    'ResourceDispatcher::OnReceivedResponse',
    'FireAnimationFrame',
    'InputMsg_HandleInputEvent',
    'WebURLLoaderImpl::Context::OnCompletedRequest',
    'WebURLLoaderImpl::Context::OnReceivedData',
    'v8.callFunction',
    'ExtensionMsg_Loaded',
    'ProxyMain::BeginMainFrame::commit',
    'XHRLoad',
    'RenderFrameImpl::OnNavigate',
    'CommitLoad',
    'FrameMsg_Navigate',
    'ResourceFinish',
    'RenderViewImpl::OnResize',
    'HostDispatcher::OnMessageReceived',
    'HTMLScriptRunner::executeScriptsWaitingForParsing',
    'HTMLScriptRunner::executeScriptsWaitingForResources',
    'FrameMsg_JavaScriptExecuteRequest',
    'v8.callModuleMethod'
  ];

  function longRunningScriptsMapper(result, model) {
    const resultArray = [];

    iterateRendererMainThreads(model, function(thread) {
      thread.sliceGroup.topLevelSlices.forEach(function(slice) {
        const interestingSlice = findLongestInterestingSlice(slice);
        if (interestingSlice.duration < LONG_TASK_MS) return;

        const scriptURL = getScriptURL(interestingSlice);
        if (scriptURL !== undefined && scriptURL !== '') {
          const topLevelDomain = extractDomain(scriptURL);
          resultArray.push({
            key: topLevelDomain,
            float_value: interestingSlice.duration
          });
        }
      });
    });

    result.addPair('values', resultArray);
  }


  tr.mre.FunctionRegistry.register(longRunningScriptsMapper);

  return {
    longRunningScriptsMapper,
  };

  function iterateRendererMainThreads(model, cb, opt_this) {
    const modelHelper = model.getOrCreateHelper(
        tr.model.helpers.ChromeModelHelper);
    Object.values(modelHelper.rendererHelpers).forEach(
        function(rendererHelper) {
          if (!rendererHelper.mainThread) return;
          cb.call(opt_this, rendererHelper.mainThread);
        });
  }

  function getScriptURL(slice) {
    let url = undefined;

    if (slice.title === 'v8.run') {
      url = slice.args.fileName;
    } else if (slice.title === 'v8.compile') {
      url = slice.args.fileName;
    } else if (slice.title === 'FunctionCall') {
      url = slice.args.data.scriptName;
    } else if (slice.title === 'EvaluateScript') {
      url = slice.args.data.url;
    } else if (slice.title === 'HTMLScriptRunner ExecuteScript') {
      url = slice.args.data.url;
    }

    return url;
  }

  function findLongestInterestingSlice(slice) {
    if (UNINTERESTING_TASKS.indexOf(slice.title) >= 0) {
      let longestSlice = undefined;
      const subSlices = slice.subSlices;
      for (let i = 0; i < subSlices.length; ++i) {
        if (longestSlice === undefined ||
            longestSlice.duration < subSlices[i].duration) {
          longestSlice = subSlices[i];
        }
      }

      if (longestSlice !== undefined) {
        return findLongestInterestingSlice(longestSlice);
      }
    }

    return slice;
  }

  function extractDomain(url) {
    let domain;
    // Find & remove protocol (http, ftp, etc.) and get domain.
    if (url.indexOf('://') > -1) {
      domain = url.split('/')[2];
    } else {
      domain = url.split('/')[0];
    }

    // Find & remove port number.
    domain = domain.split(':')[0];

    return domain;
  }
});


