{
  "comments": [
    {
      "key": {
        "uuid": "569c0bb6_1b787b30",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-05-16T16:01:08Z",
      "side": 1,
      "message": "Probably for a follow up CL; but I\u0027m thinking that we should change the interface between Telemetry and py_trace_event so that *only* benchmark_metadata is allowed. For example on the caller side, instead of:\nhttps://cs.chromium.org/chromium/src/third_party/catapult/telemetry/telemetry/internal/platform/tracing_agent/telemetry_tracing_agent.py?rcl\u003d89ec6c772dbe1f6069051fb4210b31b5376324bf\u0026l\u003d22\n\nwe would write:\n\n  trace_event.add_benchmark_metadata(\n    benchmark_name\u003dtelemetry_info.benchmark_name,\n    benchmark_description\u003dtelemetry_info.benchmark_description,\n    ...\n  )\n\nand here on the PROTO case we basically just forward that call to perfetto_trace_writer, and in the JSON case we cache the data in a dict (i.e. move the code of the AsDict method from telemetry info to here) and finally write the dict when flushing the trace as is currently done for that case.",
      "revId": "acd6354f0ab4b96bb01bd555d12e2b98baaa7d60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec63edbd_ae7d3eb6",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-05-17T09:29:14Z",
      "side": 1,
      "message": "Ack.\n\nI will do that in a follow-up.",
      "parentUuid": "569c0bb6_1b787b30",
      "revId": "acd6354f0ab4b96bb01bd555d12e2b98baaa7d60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf3b9877_48aa8fac",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 4
      },
      "lineNbr": 217,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-05-16T16:01:08Z",
      "side": 1,
      "message": "from the AsDict implementation [1] looks like this is optional?\n\nI\u0027m happy with making it required (at the proto level), but here maybe you need some sort of .get(..., \u0027(description missing)\u0027) ?\n\n[1]: https://cs.chromium.org/chromium/src/third_party/catapult/telemetry/telemetry/internal/results/page_test_results.py?rcl\u003d89ec6c772dbe1f6069051fb4210b31b5376324bf\u0026l\u003d268",
      "revId": "acd6354f0ab4b96bb01bd555d12e2b98baaa7d60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66771c85_56920aa9",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 4
      },
      "lineNbr": 217,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-05-17T09:29:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf3b9877_48aa8fac",
      "revId": "acd6354f0ab4b96bb01bd555d12e2b98baaa7d60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "092c4d0e_f679a721",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-05-16T16:01:08Z",
      "side": 1,
      "message": "Hmm.. I couldn\u0027t find any place where we set this to something [2]. If that\u0027s the case let\u0027s try to remove this (both from telemetry_info and the proto definition). Sorry I didn\u0027t notice this earlier!\n\n[2]: https://cs.chromium.org/search/?q\u003d%5C.had_failures%5C+%3D",
      "revId": "acd6354f0ab4b96bb01bd555d12e2b98baaa7d60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cb90dad_2d4de63c",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-05-17T09:29:14Z",
      "side": 1,
      "message": "In fact, in case of failure there\u0027s no trace at all. At least TraceDataBuilder is not called, so nothing is saved. So it does not make sense indeed to have this field in metadata.",
      "parentUuid": "092c4d0e_f679a721",
      "revId": "acd6354f0ab4b96bb01bd555d12e2b98baaa7d60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ffe9b05_9a816eb6",
        "filename": "common/py_trace_event/py_trace_event/trace_event_impl/log.py",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-05-17T10:14:44Z",
      "side": 1,
      "message": "No, it is called here:\nhttps://cs.chromium.org/chromium/src/third_party/catapult/telemetry/telemetry/web_perf/timeline_based_measurement.py?rcl\u003dfd64d5d2d4a77c909aa24986a25b43f685d4504b\u0026l\u003d292\n\nAt that point tracing is still running only if some error prevented \"Measure\" from being called; so we do get the trace, although metrics are not computed on it. So, I retract my point above. Let\u0027s keep this had_failures; but make sure (on some follow up CL) that Telemetry set\u0027s this up properly.",
      "parentUuid": "7cb90dad_2d4de63c",
      "revId": "acd6354f0ab4b96bb01bd555d12e2b98baaa7d60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}