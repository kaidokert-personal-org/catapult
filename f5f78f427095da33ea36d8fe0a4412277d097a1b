{
  "comments": [
    {
      "key": {
        "uuid": "677d87d4_37349633",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 10
      },
      "lineNbr": 316,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-09-13T05:38:12Z",
      "side": 1,
      "message": "Perhaps some or all of these __call__ comments should be in the class docstring?",
      "range": {
        "startLine": 314,
        "startChar": 0,
        "endLine": 316,
        "endChar": 39
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9175435f_4bc201e9",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 10
      },
      "lineNbr": 316,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-13T07:00:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "677d87d4_37349633",
      "range": {
        "startLine": 314,
        "startChar": 0,
        "endLine": 316,
        "endChar": 39
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcc21f07_324bc37e",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-09-13T05:38:12Z",
      "side": 1,
      "message": "The \u0026 operator is redundant.\n\nJust:\n\n    missing_keys \u003d required_keys - set(properties)\n\nOr use difference_update (and use one variable rather than two):\n\n    required_keys.difference_update(properties)\n    if required_keys:",
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f7eacce_e13e1f2f",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 10
      },
      "lineNbr": 441,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-13T07:00:39Z",
      "side": 1,
      "message": "Right, I like the first form. Thanks!",
      "parentUuid": "bcc21f07_324bc37e",
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e50d1036_d143647b",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 10
      },
      "lineNbr": 461,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-09-13T05:38:12Z",
      "side": 1,
      "message": "[Nit][opinion] I think this simpler to read:\n\n    suffix \u003d (\u0027without_patch\u0027 if \u0027patch_storage\u0027 not in properties \n              else \u0027with_patch\u0027)",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 461,
        "endChar": 77
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f79ed881_eedb6c06",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 10
      },
      "lineNbr": 461,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-13T07:00:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e50d1036_d143647b",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 461,
        "endChar": 77
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1166c4c_818d0e1e",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-09-13T05:38:12Z",
      "side": 1,
      "message": "This doesn\u0027t look right — this is an assert, intended to be called *after* to verify that the mocked callable _was_ (past tense!) called exactly once.  “Assert that the mock was called exactly once” says the documentation (note the past tense).\n\nI note that the unittest.mock docs say `assert_called_once` is “New in version 3.6” — perhaps whatever version of \u0027mock\u0027 we have here is too old for this?\n\nPerhaps replace with `self.assertEqual(1, put.call_count)` later on in the test?",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 477,
        "endChar": 28
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36cafa19_522f3e54",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-13T07:00:39Z",
      "side": 1,
      "message": "Yeah, simonhatch@ had the same comment on the dependent CL. I\u0027ll change these now -- looks like I misunderstood which version of \u0027mock\u0027 we\u0027re using here. :)",
      "parentUuid": "c1166c4c_818d0e1e",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 477,
        "endChar": 28
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d9a6f82_44d85765",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-13T21:05:15Z",
      "side": 1,
      "message": "Actually it was on this CL :)",
      "parentUuid": "36cafa19_522f3e54",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 477,
        "endChar": 28
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aea9fd4_14bafbf1",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-16T05:18:28Z",
      "side": 1,
      "message": "Yep! I just found it... too many CLs! :)",
      "parentUuid": "5d9a6f82_44d85765",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 477,
        "endChar": 28
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51523d5f_3b56feaa",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 10
      },
      "lineNbr": 491,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-09-13T05:38:12Z",
      "side": 1,
      "message": "FYI only, not sure there\u0027s much we can/should do about this, but thought you\u0027d find this useful to know anyway:\n\nI found it a bit confusing that the previous test that has a mocked buildbucket_service that does nothing produces a \u0027completed\u0027 build, but this test where \u0027put\u0027 does something produces a status that\u0027s merely \u0027ongoing\u0027.  My intuition is that doing more should not result in being further from complete! :)",
      "range": {
        "startLine": 491,
        "startChar": 0,
        "endLine": 491,
        "endChar": 36
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0875df18_fc274e66",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 10
      },
      "lineNbr": 491,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-13T07:00:39Z",
      "side": 1,
      "message": "Yeah, this is a weird case which might benefit from explanation somewhere.\n\nWhen the \u0027find_isolate\u0027 build attempt was able to find a previously built target for a specific revision, we don\u0027t actually schedule the build and instead pull the data from the isolate service which we have a cache for in Pinpoint. It\u0027s \u0027completed\u0027 because there\u0027s no further action required if somehow we already found a build that had an isolate for the revision we\u0027re building for. :)",
      "parentUuid": "51523d5f_3b56feaa",
      "range": {
        "startLine": 491,
        "startChar": 0,
        "endLine": 491,
        "endChar": 36
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a24d1358_0f7d33b3",
        "filename": "dashboard/dashboard/pinpoint/models/task.py",
        "patchSetId": 10
      },
      "lineNbr": 247,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-09-13T05:38:12Z",
      "side": 1,
      "message": "I don\u0027t understand the benefit of this context manager.  E.g. in this example how is this context manager an improvement over this simpler code?\n\n  UpdateTask(job, task.id, new_state\u003d\u0027failed\u0027)\n  # Do some dependent work here.",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 247,
        "endChar": 36
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13c2bac4_717da9bb",
        "filename": "dashboard/dashboard/pinpoint/models/task.py",
        "patchSetId": 10
      },
      "lineNbr": 247,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-13T07:00:39Z",
      "side": 1,
      "message": "Yeah, I was thinking that the context manager could handle the error and not run the dependent code. Unfortunately that would have been better done with an if statement and could be surprising if a context manager became a substitute for the language feature. :)\n\nRemoved.",
      "parentUuid": "a24d1358_0f7d33b3",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 247,
        "endChar": 36
      },
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8530ec4f_ca5135d3",
        "filename": "dashboard/dashboard/pinpoint/models/task.py",
        "patchSetId": 10
      },
      "lineNbr": 266,
      "author": {
        "id": 1284623
      },
      "writtenOn": "2019-09-13T05:38:12Z",
      "side": 1,
      "message": "[opinion] I think it\u0027s marginally clearer to have the `return None` in the except block here.",
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d51dd27_89d3d6e4",
        "filename": "dashboard/dashboard/pinpoint/models/task.py",
        "patchSetId": 10
      },
      "lineNbr": 266,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-13T07:00:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8530ec4f_ca5135d3",
      "revId": "f5f78f427095da33ea36d8fe0a4412277d097a1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}