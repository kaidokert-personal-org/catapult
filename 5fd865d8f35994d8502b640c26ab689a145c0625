{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "09a6fb03_618306a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2022-09-09T21:49:01Z",
      "side": 1,
      "message": "I think that as currently implemented, the GPU tests can actually end up in a state where we retry tests that are marked with Failure if there\u0027s also an overlapping RetryOnFailure expectation, which we don\u0027t want (it won\u0027t break anything, but will end up wasting resources)\n\nWe check whether we should retry on failure here https://source.chromium.org/chromium/chromium/src/+/main:content/test/gpu/gpu_tests/gpu_integration_test.py;l\u003d433?q\u003dgpu_integration_test, and that value comes from the expectation\u0027s `should_retry_on_failure` property https://source.chromium.org/chromium/chromium/src/+/main:third_party/catapult/telemetry/telemetry/testing/serially_executed_browser_test_case.py;l\u003d232?q\u003dgetexpectationsfortest\n\nWe shouldn\u0027t be retrying on failure if the test is expected to fail, but I\u0027m not sure off-hand whether we\u0027d want to handle that case in the GPU code or here...",
      "revId": "5fd865d8f35994d8502b640c26ab689a145c0625",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61604162_da5fa64f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1524993
      },
      "writtenOn": "2022-09-10T00:30:07Z",
      "side": 1,
      "message": "Hmm... That\u0027s a good point, but I think maybe it would be best to handle that at the next layer since otherwise we would need to make `RetryOnFailure` a sort of special attribute... Alternatively, maybe `RetryOnFailure` isn\u0027t an attribute at all, and it\u0027s actually a result?\n\nEither way, I think we can follow up on this in a separate change iteratively.",
      "parentUuid": "09a6fb03_618306a1",
      "revId": "5fd865d8f35994d8502b640c26ab689a145c0625",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "217f27f0_e73bf70e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2022-09-12T16:14:20Z",
      "side": 1,
      "message": "I\u0027m okay with making the actual code changes in follow-ups, but we should decide on a way forward before landing this.\n\nIMO, it makes more sense to treat RetryOnFailure as a result, not an attribute. While \"RetryOnFailure\" sounds like an attribute, it functions more like a result since I don\u0027t think we\u0027ll ever want it mixing with other results, but it\u0027s fine to mix it with Slow.",
      "parentUuid": "61604162_da5fa64f",
      "revId": "5fd865d8f35994d8502b640c26ab689a145c0625",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "418fc80e_deaaf87c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1524993
      },
      "writtenOn": "2022-09-13T02:27:27Z",
      "side": 1,
      "message": "Hmm... I think for us, `RetryOnFailure` as a result is fine since we use the tag pretty much to mean \"retry on failure and expect a pass\", but I could see maybe a use case where intention is for a test to `Crash` or something, but it takes a retry to cause the crash? (Not sure how realistic such a use case is though...)\n\nAny inputs from the tint side?",
      "parentUuid": "217f27f0_e73bf70e",
      "revId": "5fd865d8f35994d8502b640c26ab689a145c0625",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0ed69d4_0310774f",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 5
      },
      "lineNbr": 585,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2022-09-09T21:49:01Z",
      "side": 1,
      "message": "Nit: typo",
      "range": {
        "startLine": 585,
        "startChar": 10,
        "endLine": 585,
        "endChar": 19
      },
      "revId": "5fd865d8f35994d8502b640c26ab689a145c0625",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b285e7a_e163c090",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 5
      },
      "lineNbr": 585,
      "author": {
        "id": 1524993
      },
      "writtenOn": "2022-09-10T00:30:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0ed69d4_0310774f",
      "range": {
        "startLine": 585,
        "startChar": 10,
        "endLine": 585,
        "endChar": 19
      },
      "revId": "5fd865d8f35994d8502b640c26ab689a145c0625",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}