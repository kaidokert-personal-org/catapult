{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "52f9b7f5_bcd83863",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2023-07-19T22:26:48Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa26628a_de9adb65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-07-19T22:32:07Z",
      "side": 1,
      "message": "If there is a known dependency between these pieces of code, that should be declared in the code.\n\nWhy doesn\u0027t this just use the existing model classes?",
      "revId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05a79911_e73139b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2023-07-19T22:58:26Z",
      "side": 1,
      "message": "After the alert group service go-live is done, the alert_group under dashboard/models will be removed. \n\nBut yes there is another model which will exist in both services.\n\nI did not use the existing model is because I don\u0027t want to create explicit dependencies between two services, especially those outside dashboard/. Ideally we should create a common contract (like proto) to share among all services which will access the same kind from datastore.\nOr we can update the current file structure to put the models/ in a common position. Then we will have more things to be decoupled.",
      "parentUuid": "fa26628a_de9adb65",
      "revId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b0c9e7d_b9bb020a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-07-19T23:39:34Z",
      "side": 1,
      "message": "If I unintentionally broke something in perf_issue_service by changing something defined in dashboard/dashboard/models/alert_group.py, that\u0027s a sure sign that the two pieces of code are coupled (regardless of explicit import statements), no? \n\nI don\u0027t see how making a separate copy of the existing model class removes that coupling in practice, but I do see how duplicate model classes make that coupling more difficult to detect and keep track of.\n\nThis approach has obvious downsides, but it may be a perfectly reasonable trade-off. Just so I understand what problem perf_issue_service is supposed to solve and why, is this the relevant design doc? https://docs.google.com/document/d/1hwasDnCXCaPKdXxgDLQOEDwSJR-7dMvKBKKIMGzl_us/edit#heading\u003dh.lldt5vlxjhnx\n\n[Note: If this CL is a high a priority fix to un-block some other work, feel free to remove me as a reviewer and I\u0027ll try follow up later.]",
      "parentUuid": "05a79911_e73139b3",
      "revId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "292c62cd_8d788bb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2023-07-27T18:23:46Z",
      "side": 1,
      "message": "Working on another approach:\nhttps://chromium-review.googlesource.com/c/catapult/+/4724123\nWill abandon this.",
      "revId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "101697d6_89c14948",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2023-07-27T18:23:46Z",
      "side": 1,
      "message": "Yes that is the correct doc.",
      "parentUuid": "1b0c9e7d_b9bb020a",
      "revId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c52383f84d06ddfccf810433c7e55cf1678dac73",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}