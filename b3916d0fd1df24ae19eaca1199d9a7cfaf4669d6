{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "008c8dd3_7846cb88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-08-17T19:31:30Z",
      "side": 1,
      "message": "Is the expected use case something like \"Run `sandwich.go` to start a workflow, then immediately copy the execution ID and paste it into a `sandwich.go -execution-id \u003cid\u003e` which you then repeatedly poll until the sandwich workflow completes\"?\n\nIf so, you can probably simplify this change and avoid having to write an external wrapper shell script to do the polling: add only one `-poll` flag (`flag.Bool`), and modify sandwich.go to do the polling itself using something like https://pkg.go.dev/time#Ticker \n\n[meta] We should consider moving this code into the skia.git/buildbot repo soon, either before landing this CL or before landing any changes after it.",
      "revId": "b3916d0fd1df24ae19eaca1199d9a7cfaf4669d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fcadd65_ca27b5ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2023-08-17T19:41:57Z",
      "side": 1,
      "message": "No, the idea is to run this after a few hours (or the next day). Like I run 100 jobs today and then the next morning I check on them all using this command line tool.",
      "parentUuid": "008c8dd3_7846cb88",
      "revId": "b3916d0fd1df24ae19eaca1199d9a7cfaf4669d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cecd76cd_b016a179",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-08-17T19:49:19Z",
      "side": 1,
      "message": "gotcha. let\u0027s discuss further in person today",
      "parentUuid": "9fcadd65_ca27b5ec",
      "revId": "b3916d0fd1df24ae19eaca1199d9a7cfaf4669d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a1541c7_8c5d23e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2023-08-22T18:52:07Z",
      "side": 1,
      "message": "friendly ping",
      "revId": "b3916d0fd1df24ae19eaca1199d9a7cfaf4669d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "932cccea_47d2f55b",
        "filename": "dashboard/go/src/sandwich/sandwich.go",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-08-22T19:11:03Z",
      "side": 1,
      "message": "run `go fmt -w .` in this directory",
      "range": {
        "startLine": 153,
        "startChar": 74,
        "endLine": 153,
        "endChar": 75
      },
      "revId": "b3916d0fd1df24ae19eaca1199d9a7cfaf4669d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad0bea52_4d2799e0",
        "filename": "dashboard/go/src/sandwich/sandwich.go",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2023-08-22T19:31:19Z",
      "side": 1,
      "message": "Done. Why does `git cl format --js` not work in golang?",
      "parentUuid": "932cccea_47d2f55b",
      "range": {
        "startLine": 153,
        "startChar": 74,
        "endLine": 153,
        "endChar": 75
      },
      "revId": "b3916d0fd1df24ae19eaca1199d9a7cfaf4669d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28929e7e_d89f175e",
        "filename": "dashboard/go/src/sandwich/sandwich.go",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-08-22T20:16:41Z",
      "side": 1,
      "message": "Some background: The `git cl` isn\u0027t part of git itself but rather a custom subcommand written for use with chromium git repos: https://chromium.googlesource.com/chromium/tools/depot_tools.git/+/HEAD/README.git-cl.md \n\nMore specifically, the `git cl format` sub(-sub?) command \u003chttps://chromium.googlesource.com/chromium/tools/depot_tools.git/+/refs/heads/main/git_cl.py#5838\u003e doesn\u0027t know about go because it\u0027s a pass-through to `clang-format` \u003chttps://clang.llvm.org/docs/ClangFormat.html\u003e, which doesn\u0027t know about go. That\u0027s just as well, because the go toolchain has its own formatter and clang-format shouldn\u0027t try to do that job for it.\n\nWhy `clang-format` and no support for `go fmt`? Well, depot_tools (which encompasses the `git cl` set of tools) is written primarily for use with chromium source itself, which includes lots of C++, js, Rust and python, but no go. So they don\u0027t worry about formatting go. We just happen to use depot_tools for a lot of other use cases in our repos because we\u0027re closely related to chromium/src and its dependents and use a lot of the same build system pieces (which depot_tools helps us deal with), but it\u0027s really written with a focus on \"build chrome browser binaries for a particular set of hardware/OS configurations\" rather than \"build anything, including cross-platform browser executables but also go server apps that run in the cloud\"\n\n[And FWIW, I believe `git cl format --js` just formats the javascript bits of a change, if there are any]",
      "parentUuid": "ad0bea52_4d2799e0",
      "range": {
        "startLine": 153,
        "startChar": 74,
        "endLine": 153,
        "endChar": 75
      },
      "revId": "b3916d0fd1df24ae19eaca1199d9a7cfaf4669d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}