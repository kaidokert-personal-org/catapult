{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4c7f9840_008644d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-02T13:24:11Z",
      "side": 1,
      "message": "Michael: ptal overall.\n\nDeep: ptal at tracing/tracing/extras/chrome/chrome_test_utils.html as an owner.\n\nWhat is the current state of TBMv3? At some point in the future we will need to migrate this there. Do you think such a rule-based logic is implementable there?\n\nOmer, Dominik: fyi.",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ea3aebe_4027e64b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "TBMv3 is still not available to use generally, but I\u0027m expecting it to be by Q1. We\u0027re fishfooding it internally in the Chrometto team as we fix various issues. \n\nThis rule based logic is super cool - I might try to implement this in SQL and report back what it feels like. We will also have a way to implementing metrics imperatively in C++, so if SQL is not ergonomic enough you can drop down to C++ to implement this.",
      "parentUuid": "4c7f9840_008644d1",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce6e552c_adc78acc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "Very cool! Left some comments. ",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba23bbfe_46431a30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:48:00Z",
      "side": 1,
      "message": "Ack. It\u0027s great that we will have a C++ fallback.",
      "parentUuid": "6ea3aebe_4027e64b",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67847a17_3af8a19b",
        "filename": "tracing/tracing/extras/chrome/chrome_test_utils.html",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-02T13:24:11Z",
      "side": 1,
      "message": "Review guide: this is needed for testing. Otherwise, we cannot add tests for non-main-thread cases.\n\nThe thread name matches: https://source.chromium.org/chromium/chromium/src/+/master:third_party/catapult/tracing/tracing/model/helpers/chrome_renderer_helper.html;l\u003d35;drc\u003d9f3ce85bab94e6c5f89c7615e0cc1bdcbe5c95e5",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35b8e6e8_6879c749",
        "filename": "tracing/tracing/extras/chrome/chrome_test_utils.html",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "67847a17_3af8a19b",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "080f069f_dfc65e7f",
        "filename": "tracing/tracing/extras/chrome/chrome_test_utils.html",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-12-03T15:10:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "35b8e6e8_6879c749",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 29
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21aaaba9_330b9fda",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 117,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-02T13:24:11Z",
      "side": 1,
      "message": "Review guide: I added such TODOs to all places that need to be adjusted before switching to the library.",
      "range": {
        "startLine": 117,
        "startChar": 5,
        "endLine": 117,
        "endChar": 27
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e41d05b_d91196a1",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 117,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-12-03T15:10:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "21aaaba9_330b9fda",
      "range": {
        "startLine": 117,
        "startChar": 5,
        "endLine": 117,
        "endChar": 27
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03096a58_6958f818",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 170,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-02T13:24:11Z",
      "side": 1,
      "message": "Review guide: should we keep using the prefixes for trace events?\nWe could also use categories (\"v8\" vs \"cpp.gc\") to disambiguate, but that would make rules more verbose: instead of writing \u0027V8.GCCompactor\u0027 we would write { title: \u0027V8.GCCompactor\u0027, category : \u0027v8\u0027 } in all event lists.",
      "range": {
        "startLine": 170,
        "startChar": 60,
        "endLine": 170,
        "endChar": 78
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bb670b6_42481c55",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 170,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-12-03T15:10:10Z",
      "side": 1,
      "message": "It seems okay to keep using prefixes here. IMHO, it has the added benefit to allow easy distinguishing in the viewer as well.",
      "parentUuid": "03096a58_6958f818",
      "range": {
        "startLine": 170,
        "startChar": 60,
        "endLine": 170,
        "endChar": 78
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a69523a_9afe81f2",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 321,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-02T13:24:11Z",
      "side": 1,
      "message": "Review guide: per-cycle metrics get _avg and _max, per-event metrics get _avg, _max, _sum. I am disabling _std as not useful. Any preferences here?",
      "range": {
        "startLine": 316,
        "startChar": 8,
        "endLine": 321,
        "endChar": 22
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "928b7baf_796a1789",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 321,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "\u003e\u003e \"per-cycle metrics get _avg and _max\"\ndid you mean to do \"sum: !perCycle\"?",
      "parentUuid": "6a69523a_9afe81f2",
      "range": {
        "startLine": 316,
        "startChar": 8,
        "endLine": 321,
        "endChar": 22
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7070ffa1_2b0bfd43",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 321,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:46:34Z",
      "side": 1,
      "message": "Thanks! My comment was incorrect: per-cycle metrics have sum, per-event metrics have only avg and max. (Reasoning: per-cycle metrics are more complete, they capture also the background threads).",
      "parentUuid": "928b7baf_796a1789",
      "range": {
        "startLine": 316,
        "startChar": 8,
        "endLine": 321,
        "endChar": 22
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3ffb6d6_597e5f1c",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 321,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-12-03T15:10:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7070ffa1_2b0bfd43",
      "range": {
        "startLine": 316,
        "startChar": 8,
        "endLine": 321,
        "endChar": 22
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96b501d3_3b7d9891",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 330,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "Is this technically \"more or equally general\"? If it is, could we at least note it in the comments?\n\nAlso, is the ordering of phases significant, i.e. is A:B different from B:A? If it\u0027s not, could we do something simpler to understand like this? \nphasesSet \u003d new Set(phases.split(\u0027:\u0027));\nreturn this.phases_.every(phase \u003d\u003e phasesSet.has(phase));",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9edf228f_2172cbaa",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 330,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:46:34Z",
      "side": 1,
      "message": "Great observation! Done.",
      "parentUuid": "96b501d3_3b7d9891",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "719df59f_4c300181",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 572,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-02T13:24:11Z",
      "side": 1,
      "message": "Review guide: we could also change this for check event.title prefix for e.g. V8GC.",
      "range": {
        "startLine": 572,
        "startChar": 13,
        "endLine": 572,
        "endChar": 61
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6366d4cd_54263391",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 572,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-12-03T15:10:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "719df59f_4c300181",
      "range": {
        "startLine": 572,
        "startChar": 13,
        "endLine": 572,
        "endChar": 61
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c414008c_5c92d80f",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 582,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "Should you check and throw an error if result.v8 is already set? This means a parent slice has a different v8/cpp epoch than a descendant, which would point to a bug in tracing code. If you think that class of bugs is extremely unlikely to happen you can leave it as it is.",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7a3ed0c_f2737476",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 582,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:46:34Z",
      "side": 1,
      "message": "Done. Added a check that if we already saw an epoch, then all ancestors should have the same epoch. This would allows us to set the epoch for some nested V8 events without breaking this code.",
      "parentUuid": "c414008c_5c92d80f",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436b5bd4_0631236b",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 597,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "Is there any way one cpp epoch can correspond to two different v8 epochs, perhaps in separate slices? Should this be an assertion to detect bugs?",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b254a90_e6571b0a",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 597,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:46:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "436b5bd4_0631236b",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79b883b2_cc58b2f6",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 608,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "Is it possible for cppToV8.get(epoch.cpp) to be undefined? Should we check for that?",
      "range": {
        "startLine": 608,
        "startChar": 38,
        "endLine": 608,
        "endChar": 60
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5449ad2_7127b0d5",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 608,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:46:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79b883b2_cc58b2f6",
      "range": {
        "startLine": 608,
        "startChar": 38,
        "endLine": 608,
        "endChar": 60
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a13c3fb8_fd640703",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 646,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "What does this do? How can an event be falsey?",
      "range": {
        "startLine": 646,
        "startChar": 48,
        "endLine": 646,
        "endChar": 53
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce90cc79_002151bc",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 646,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:46:34Z",
      "side": 1,
      "message": "This was a left-over from an old check. Removed.",
      "parentUuid": "a13c3fb8_fd640703",
      "range": {
        "startLine": 646,
        "startChar": 48,
        "endLine": 646,
        "endChar": 53
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcd9aba7_604201bc",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 692,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-02T13:24:11Z",
      "side": 1,
      "message": "Review guide: all functions below and almost all functions in utils.html can be removed once we compete the transition.",
      "range": {
        "startLine": 692,
        "startChar": 2,
        "endLine": 692,
        "endChar": 42
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26f2ab47_7c8589b4",
        "filename": "tracing/tracing/metrics/v8/gc_metric.html",
        "patchSetId": 12
      },
      "lineNbr": 692,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-12-03T15:10:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dcd9aba7_604201bc",
      "range": {
        "startLine": 692,
        "startChar": 2,
        "endLine": 692,
        "endChar": 42
      },
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af99fc2c_a7eef6fe",
        "filename": "tracing/tracing/metrics/v8/gc_metric_test.html",
        "patchSetId": 12
      },
      "lineNbr": 295,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2020-12-02T18:10:42Z",
      "side": 1,
      "message": "(Here and elsewhere) I think the third arg to strictEqual is the error message, not delta: https://www.chaijs.com/api/assert/#method_strictequal\n\nYou probably meant to use closeTo? https://www.chaijs.com/api/assert/#method_closeto",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c0811bf_db7d0feb",
        "filename": "tracing/tracing/metrics/v8/gc_metric_test.html",
        "patchSetId": 12
      },
      "lineNbr": 295,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-12-03T10:46:34Z",
      "side": 1,
      "message": "Thanks! Done.",
      "parentUuid": "af99fc2c_a7eef6fe",
      "revId": "ca1f3da5cda76763567e0ac3ca1d52d054a89f64",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}