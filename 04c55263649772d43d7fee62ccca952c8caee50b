{
  "comments": [
    {
      "key": {
        "uuid": "e9ff0ff7_689d19cc",
        "filename": "tracing/PRESUBMIT.py",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1002301
      },
      "writtenOn": "2020-02-03T08:31:43Z",
      "side": 1,
      "message": "I had to give the PRESUBMIT the capability to build the proto as well. You should be able to run the presubmit at any time (straight after a clone) and it should always work. In order for it to always work, it needs to generate all protos that are used by code that the presubmit looks at (like generic_set in this case).\n\nI didn\u0027t find anything magical that builds the sheriff config protos either for the presubmit, so I assume I have to do this.\n\nWe could save some duplication by importing build_steps here and having it be the source of truth for how the protoc command should look like. I\u0027m unsure, but I think it makes reasonable sense to have the presubmit import build_steps.",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 48
      },
      "revId": "04c55263649772d43d7fee62ccca952c8caee50b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d8390df_73b758aa",
        "filename": "tracing/PRESUBMIT.py",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1002301
      },
      "writtenOn": "2020-02-03T11:13:21Z",
      "side": 1,
      "message": "Never mind, this doesn\u0027t work because the bot doesn\u0027t have protoc in its PATH.\n\nHmm. We could make the presubmit bot run builds_steps.py. Actually it\u0027s enough to add a ensure_installed(protoc) like the other bots.\n\nFor local users, we could add a check in the presubmit that says \"histogram.pb2 doesn\u0027t exist\", please cd tracing/tracing \u0026\u0026 make and try again.\"\n\nThis makes me wonder though: will all the telemetry code blow up downstream? I probably need to make sure the filegroup for telemetry generates the proto.",
      "parentUuid": "e9ff0ff7_689d19cc",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 48
      },
      "revId": "04c55263649772d43d7fee62ccca952c8caee50b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81f4af37_edeb7f7d",
        "filename": "tracing/PRESUBMIT.py",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1002301
      },
      "writtenOn": "2020-02-03T12:09:59Z",
      "side": 1,
      "message": "All right, I\u0027m going to have to figure out when the proto gets generated when downstream targets use histogram.py. That\u0027s going to be exciting, because there is no infrastructure for that. Python scripts in Chromium (like tools/perf/run_benchmark) generally just use path hacks to yank in catapult python code. That doesn\u0027t work if the code hasn\u0027t been generated. You would normally do this using a GN rule, but no GN rule ever gets executed if you just run, say, tools/perf/run_benchmark. You just run it like tools/perf_run_benchmark, you don\u0027t have to do e.g. ninja -C out/Default run_benchmark \u0026\u0026 out/Default/run_benchmark. \n\nI see only these options: \n\n1) Add proper python support to GN so you can do python_library / python_binary and rewrite telemetry so you can\u0027t just invoke the script but have to build it first (months of work / disruptive)\n2) Make tracing/__init__.py invoke protoc and build the proto when the module is loaded (horrible hack)\n3) Check in the generated proto.\n4) Graceful degradation if histogram_pb2 doesn\u0027t import (telemetry doesn\u0027t use the protos anyway, so as long it stays away from the code paths using histogram_pb2 it\u0027s OK). The only code that will actually use the protos is C++ code and the webrtc upload script. The WebRTC upload script works because it has an associated build rule (https://cs.chromium.org/chromium/src/third_party/webrtc/tools_webrtc/perf/BUILD.gn) and it will not be run by humans. The bots ensure the build rule is run before the script is invoked, similar to build_steps.py in catapult.\n\nI don\u0027t like 3 because it\u0027s bad to check in generated code, but unfortunately 1) is most likely infeasible and 2) is a horrible hack. 3) is OK IMO given the circumstances, and 4) works but will be a problem again when/if telemetry tests want to use the protos. Besides 4) is quite risky, it\u0027s easy to accidentally slip a histogram_pb2 in the wrong place and then you break telemetry. I think 3 is best. What do you think of this whole mess? ðŸ˜Š",
      "parentUuid": "6d8390df_73b758aa",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 48
      },
      "revId": "04c55263649772d43d7fee62ccca952c8caee50b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9adedecc_fa20e76d",
        "filename": "tracing/PRESUBMIT.py",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2020-02-04T00:37:32Z",
      "side": 1,
      "message": "I have a simpler solution -- we don\u0027t check any proto-related things in PRESUBMIT now, and I\u0027m not going to require that to be the case either. How about we leave that alone for now and just change the steps to add the protos we need in CI?\n\nRight now if you run tests that fail because the proto is not there, we ask folks developing to run make in the correct directories. This is fine for now and it\u0027s usually a one-time thing.",
      "parentUuid": "81f4af37_edeb7f7d",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 48
      },
      "revId": "04c55263649772d43d7fee62ccca952c8caee50b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2da9da22_e426ad02",
        "filename": "tracing/PRESUBMIT.py",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1002301
      },
      "writtenOn": "2020-02-04T10:13:08Z",
      "side": 1,
      "message": "Well, the problem is that histogram.py includes histogram_pb2 today, which means we can\u0027t check that or anything that imports it.\n\nWorse, several downstream scripts import histogram.py, so they will break too. You can fix some of them with GN rules and import hacks, but this killer combo can\u0027t easily be fixed:\n\n1) tools/perf/run_benchmark should work straight from a git clone\u0027d chromium repo. You don\u0027t have to gn gen or build anything.\n2) tools/perf/run_benchmark imports histogram.py.\n3) histogram.py imports histogram_pb2.py, which is generated.\n\nYou would have to engineer a solution that ensures histogram_pb2 is built for all users of histogram.py, which is a bunch of places in the Chromium repo (run_benchmark, process_perf_results.py, etc), WebRTC Repo (webrtc_dashboard_upload.py) and downstream (histogram_util.py, probably other places)\n\nLet me flesh out the various options a bit more in the design doc.",
      "parentUuid": "9adedecc_fa20e76d",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 48
      },
      "revId": "04c55263649772d43d7fee62ccca952c8caee50b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}