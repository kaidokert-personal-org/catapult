{
  "comments": [
    {
      "key": {
        "uuid": "9b0ef1b0_f108b412",
        "filename": "dashboard/dashboard/find_anomalies_test.py",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-05T01:18:16Z",
      "side": 1,
      "message": "You can add an assertion to check that `SheriffConfigClient.Match` is called at least once.",
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3fecbdb_7c8c4c4d",
        "filename": "dashboard/dashboard/find_anomalies_test.py",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-05T01:58:04Z",
      "side": 1,
      "message": "This mock patch applied on class. So check will always success if any of test called it once. I will add a seperate test to check the log by mocking logging.info (I think it\u0027s a bit tricky but already used in other tests).",
      "parentUuid": "9b0ef1b0_f108b412",
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90584454_a5bfcdf8",
        "filename": "dashboard/dashboard/find_anomalies_test.py",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-05T02:15:16Z",
      "side": 1,
      "message": "Try this instead:\n\n(from https://docs.python.org/3/library/unittest.mock.html#patch)\n\n`@mock.patch(\u0027dashboard.sheriff_config.SheriffConfigClient\u0027)`\n\nThen in the test case, you can take an additional argument for the instance of that class being instantiated, so you can set the expectations and side-effects. Something like:\n\n```\n  def testSomeTest(self, mock_client):\n    # Set up the behaviour of mock_client in here.\n    ...\n    self.assertEqual(mock_client.Match.call_count, 1)\n```\n\nYou can see examples of this in the Pinpoint tests if you look for `mock.patch`.",
      "parentUuid": "c3fecbdb_7c8c4c4d",
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0036f522_a5ffe8ea",
        "filename": "dashboard/dashboard/find_anomalies_test.py",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-05T03:22:01Z",
      "side": 1,
      "message": "Yes, I understant I can do that. The problem is that I can\u0027t audit which test will touch the `_GetSheriffForTest` (maybe 11 tests). What I can do is either mocking the client and passing a instance in every test or mocking the client globally which will bypass the client (these tests originally is not to test the client) and adding a seperate test.",
      "parentUuid": "90584454_a5bfcdf8",
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a736eb39_3b8ac0da",
        "filename": "dashboard/dashboard/sheriff_config_client.py",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-05T01:18:16Z",
      "side": 1,
      "message": "Why do you need to do this, instead of `subscription.visibility \u003d\u003d sheriff_pb2.Subscription.INTERNAL_ONLY` ?",
      "range": {
        "startLine": 36,
        "startChar": 23,
        "endLine": 37,
        "endChar": 54
      },
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f1c7ec4_1b22952d",
        "filename": "dashboard/dashboard/sheriff_config_client.py",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-05T01:58:04Z",
      "side": 1,
      "message": "If there is more visibility type (maybe like PROTECTED), it\u0027s default private in case you forget to change this code.",
      "parentUuid": "a736eb39_3b8ac0da",
      "range": {
        "startLine": 36,
        "startChar": 23,
        "endLine": 37,
        "endChar": 54
      },
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87115008_a2bf6153",
        "filename": "dashboard/dashboard/sheriff_config_client.py",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-05T02:15:16Z",
      "side": 1,
      "message": "Well, if we added a separate case that was `ACL_CONTROLLED` then \u0027internal_only\u0027 will be true which doesn\u0027t make sense.\n\nAt any rate, there isn\u0027t really much reason for us to create a `Sheriff` object at all -- so if we just made the Match function return the subscriptions, then it should work just fine, no?",
      "parentUuid": "5f1c7ec4_1b22952d",
      "range": {
        "startLine": 36,
        "startChar": 23,
        "endLine": 37,
        "endChar": 54
      },
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45af861c_158d65e9",
        "filename": "dashboard/dashboard/sheriff_config_client.py",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-05T03:22:01Z",
      "side": 1,
      "message": "Using the ndb model and adding some glue code can make minimal changes to the code base. Because current ndb model is so widely used in the code base, it\u0027s more confusing if some part of code uses proto, some part uses ndb model. Especially it\u0027s not divided by some sort of hirearchy but spreaded because the proto interface touches this part (and you don\u0027t want to convert between them).\n\nWe can rewrite all of the ndb model sheriff code after all changes landed.",
      "parentUuid": "87115008_a2bf6153",
      "range": {
        "startLine": 36,
        "startChar": 23,
        "endLine": 37,
        "endChar": 54
      },
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e12c020a_8a22f653",
        "filename": "dashboard/dashboard/sheriff_config_client.py",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-05T02:15:16Z",
      "side": 1,
      "message": "Thinking about this more, we should just return the subscription protos directly and not even use the Sheriff ndb model (because we really don\u0027t need it anymore).",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 54,
        "endChar": 77
      },
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01dea0bf_be377dfb",
        "filename": "dashboard/dashboard/sheriff_config_client.py",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-05T03:22:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e12c020a_8a22f653",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 54,
        "endChar": 77
      },
      "revId": "bbf0aafa2906a66f65dcd36f923d5e87022e1fd7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}