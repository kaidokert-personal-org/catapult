{
  "comments": [
    {
      "key": {
        "uuid": "92df46e8_f7b42c59",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-02-08T17:33:03Z",
      "side": 1,
      "message": "+pasko PTAL\n\nThis is an example of how one of the new benchmarks would be written. Can already be test by building e.g. Chrome.apk and then running:\n\n$ ./telemetry/examples/run_benchmark --browser android-chrome android_go.example",
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e4e9a7e_2eaf9c44",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-09T15:26:15Z",
      "side": 1,
      "message": "wow, are the bots actually uploading the screenshots to cloud storage on failures? For local testing this is not necessary, since in 99.9% cases I can see what happened on the device at the desk",
      "range": {
        "startLine": 89,
        "startChar": 12,
        "endLine": 89,
        "endChar": 42
      },
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be6d1d74_317bd4dd",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-09T15:26:15Z",
      "side": 1,
      "message": "such stories look very nice!",
      "range": {
        "startLine": 106,
        "startChar": 4,
        "endLine": 106,
        "endChar": 63
      },
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "929a0684_a0999d7c",
        "filename": "telemetry/examples/run_benchmark",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-09T15:26:15Z",
      "side": 1,
      "message": "nit nit: in other places I saw usage of os.pardir instead of \u0027..\u0027, which is probably only a matter of consistency (both Windows and all POSIX systems have the same value for the constant)",
      "range": {
        "startLine": 9,
        "startChar": 62,
        "endLine": 9,
        "endChar": 64
      },
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5546eabc_795abced",
        "filename": "telemetry/examples/run_benchmark",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-02-08T17:33:03Z",
      "side": 1,
      "message": "Had to add this, so it\u0027s easier to run_benchmark without having to provide the chrome root path (otherwise it wouldn\u0027t accept --browser\u003dandroid-chrome).\n\nHope it is ok?",
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "573af755_bc7cb501",
        "filename": "telemetry/examples/run_benchmark",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2018-02-08T19:23:59Z",
      "side": 1,
      "message": "Can you document why we need this here in the code?\n\nAlso you can use https://cs.chromium.org/chromium/src/third_party/catapult/telemetry/telemetry/core/util.py?rcl\u003daa41a69e728232222f4c696dab70af09eb2213e0\u0026l\u003d46",
      "parentUuid": "5546eabc_795abced",
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0916d86a_329b9a99",
        "filename": "telemetry/telemetry/internal/backends/chrome/android_browser_finder.py",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-02-08T17:33:03Z",
      "side": 1,
      "message": "I resisted adding this, but the shared state needs to know the package/activity in order to launch the browser.",
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baf9e8d2_ff1506f6",
        "filename": "telemetry/telemetry/internal/backends/chrome/android_browser_finder.py",
        "patchSetId": 4
      },
      "lineNbr": 202,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2018-02-08T19:23:59Z",
      "side": 1,
      "message": "Hmhh, actually how does this work if we have more than one alive browser instances?",
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84b0a001_7b6ec7b7",
        "filename": "telemetry/telemetry/internal/backends/chrome/android_browser_finder.py",
        "patchSetId": 4
      },
      "lineNbr": 211,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-09T15:26:15Z",
      "side": 1,
      "message": "+1, otherwise this would make individual browser starts all be cold(ish). I think we will need a few stories with cold/warm starts mixed.\n\nAnother feature request: be able to perform actions on the browser from within a story (given that we know the browser is running) like:\n* stop an clear OS pagecache for it\n* stop and remove HTTPcache from under it\n\nIs this realistic to ask for? :)",
      "range": {
        "startLine": 211,
        "startChar": 4,
        "endLine": 211,
        "endChar": 72
      },
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f8cb2d0_6b95b405",
        "filename": "telemetry/telemetry/internal/platform/android_platform_backend.py",
        "patchSetId": 4
      },
      "lineNbr": 360,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-02-08T17:33:03Z",
      "side": 1,
      "message": "Ned, hope you don\u0027t find this too terrible? Should allow to also launch other applications (e.g. chrome_custom_tabs helper app) by building a suitable intent and (from the shared state point of view) without needed low level access all the way down to the device.",
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20da3d67_8938a937",
        "filename": "telemetry/telemetry/internal/platform/android_platform_backend.py",
        "patchSetId": 4
      },
      "lineNbr": 360,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2018-02-08T19:23:59Z",
      "side": 1,
      "message": "Hmhh, I would make another API instead of making application having multiple types. How about:\ndef LaunchIntent(...)?",
      "parentUuid": "4f8cb2d0_6b95b405",
      "revId": "3fd4467913ccc81f7404b21cdae6ba6bcdf426b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}