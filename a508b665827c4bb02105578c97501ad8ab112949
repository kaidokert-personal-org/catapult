{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "caf30f53_95ea486b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1178490
      },
      "writtenOn": "2020-11-25T18:57:53Z",
      "side": 1,
      "message": "Nice debugging session Andrey! This was not easy to catch! LGTM but I let Dean +2.",
      "revId": "a508b665827c4bb02105578c97501ad8ab112949",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44d1fe57_d4a4817d",
        "filename": "tracing/tracing/value/running_statistics.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2020-11-25T20:11:51Z",
      "side": 1,
      "message": "We really should be using https://en.cppreference.com/w/cpp/numeric/math/islessequal here to avoid having to deal with NaN issues.",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 18
      },
      "revId": "a508b665827c4bb02105578c97501ad8ab112949",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32da55ee_d058689c",
        "filename": "tracing/tracing/value/running_statistics.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1428512
      },
      "writtenOn": "2020-11-26T08:48:15Z",
      "side": 1,
      "message": "It is written that the only difference between \u003c\u003d and islessequal is that the operator may raise FE_INVALID if one or both of the arguments is NaN. I don\u0027t see why would we want to not raise an exception.\n\nOn practice, value should never be NaN. It is checked here [1]. If it is NaN - it means something is wrong. So I think we should raise.\n\nAlso, the issue I\u0027m fixing has nothing to do with the \"value\" being NaN. Its about value being zero, which leads to \"(std::log(std::abs(value)) - meanlogs_)\" being NaN (as I wrote (-inf) - (-inf)). And the issue is that NaN in histogram that we upload can\u0027t be handled by /add_histogram api.\n\n[1]: https://source.chromium.org/chromium/chromium/src/+/master:third_party/catapult/tracing/tracing/value/histogram.cc;l\u003d94",
      "parentUuid": "44d1fe57_d4a4817d",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 18
      },
      "revId": "a508b665827c4bb02105578c97501ad8ab112949",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e951120a_6e30aa02",
        "filename": "tracing/tracing/value/running_statistics.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2020-11-26T09:28:44Z",
      "side": 1,
      "message": "In Chromium and other places, we build with exceptions off. Raising an exception would cause a call to std::terminate() in those cases.\n\nBasically the risk is not worth it here and in all the places we\u0027re doing comparisons and operations with floating point. I\u0027m not asking you fix all the cases, I\u0027m suggesting since you\u0027re changing this one that we actually use something provided by the standard for safety.",
      "parentUuid": "32da55ee_d058689c",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 18
      },
      "revId": "a508b665827c4bb02105578c97501ad8ab112949",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c54f7d17_ca4e6516",
        "filename": "tracing/tracing/value/running_statistics.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1428512
      },
      "writtenOn": "2020-11-26T10:06:19Z",
      "side": 1,
      "message": "Ah, ok, I see now :). Done.",
      "parentUuid": "e951120a_6e30aa02",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 18
      },
      "revId": "a508b665827c4bb02105578c97501ad8ab112949",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdd376df_f630f648",
        "filename": "tracing/tracing/value/running_statistics.cc",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2020-11-26T23:18:15Z",
      "side": 1,
      "message": "Cool, thanks -- don\u0027t you need to include a header for that?",
      "parentUuid": "c54f7d17_ca4e6516",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 18
      },
      "revId": "a508b665827c4bb02105578c97501ad8ab112949",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}