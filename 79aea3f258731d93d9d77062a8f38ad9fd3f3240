{
  "comments": [
    {
      "key": {
        "uuid": "afa4f528_197b0189",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "I\u0027d just use ValueErrors rather than defining custom exceptions.\n\nDefining custom exceptions to me feels very un-pythonic and should only be used when you really need them.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dedbffae_7c951297",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-26T17:58:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afa4f528_197b0189",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "370fb0f3_f4b8e17f",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "Can we call this just Artifacts() instead? The \"Results\" part feels redundant.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f351d883_d866d39e",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-26T17:58:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "370fb0f3_f4b8e17f",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5216d6a_4ad41faa",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "Thinking about this, I think the entire concept of artifact type is probably unnecessary.\n\nI feel like we can and should require that each artifact has a mime type, and that each artifact has a separate (unique) name, like \u0027output_log\u0027 and \u0027error_log\u0027. If we do, I don\u0027t think that keeping a map of artifact types really tells you much, and moving from a set of triples to two sets of tuples (name -\u003e type and name -\u003e value) simplifies things, I\u0027d guess.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1ed5677_810f8958",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-24T23:12:54Z",
      "side": 1,
      "message": "Are you suggesting that we use the (unique) artifact name in place of the artifact type in the JSON results?\n\nE.g. an \"artifacts\" entry for a test would be:\n\"artifacts\": {\n  \"failure_screenshot.png\": \"path/to/failure_screenshot.png\"\n}\n\nand the \"artifact_types\" entry would be:\n\"artifact_types\": {\n  \"failure_screenshot.png\": \"image/png\"\n}\n\nThe issue I see with that is then the names have to be unique across iterations, which I don\u0027t think we want to be the case.\n\nAlternatively, we could just MIME types for the artifact types, so we get:\n\"artifacts\": {\n  \"image/png\": [\"path/to/failure_screenshot.png\", \"path/to/another_screenshot.png\"]\n}\n\"artifact_types\": {\n  \"image/png\": \"image/png\"\n}\n\nWDYT?",
      "parentUuid": "a5216d6a_4ad41faa",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1e6e1e2_6747978a",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-25T00:23:00Z",
      "side": 1,
      "message": "Good point that we need to account for iterations (I hadn\u0027t been thinking about that), but I\u0027m not seeing how the artifact_type is needed for this?\n\ni.e., I had been assuming that for TestFoo.test_bar, you\u0027d have:\n\u0027artifacts\u0027: {\u0027screenshot\u0027: \u0027TestFoo/test_bar-screenshot.png\u0027} \n\nand then in the json results, you\u0027d have:\n\n\u0027artifacts\u0027: {\n  \u0027screenshot\u0027: [\n    \u0027iteration_1/TestFoo/test_bar-screenshot.png\u0027, \n    \u0027iteration_2/TestFoo/test_bar-screenshot.png\u0027\n  ]\n}\n\nI don\u0027t see how artifact_type really helps here?",
      "parentUuid": "c1ed5677_810f8958",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd04f5cf_2c2937f7",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-25T00:45:01Z",
      "side": 1,
      "message": "It\u0027s not a question of helpfulness, but rather conforming to the JSON results specifications https://chromium.googlesource.com/chromium/src/+/master/docs/testing/json_test_results_format.md\n\n\"artifact_types\t| dict | Optional. Required if any artifacts are present for any tests. MIME Type information for artifacts in this json file. All artifacts with the same name must share the same MIME type.\"\n\nSo, I think there are three options:\n1. Keep it as-is with the artifact types\n2. Just use the MIME type for the artifact type, so tests don\u0027t have to actually provide an artifact type\n3. Ignore the specification and leave out the \"artifact_types\" field (probably not advisable, but Telemetry\u0027s getting away with it ATM)",
      "parentUuid": "d1e6e1e2_6747978a",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de135a3f_504c806b",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-25T02:58:31Z",
      "side": 1,
      "message": "Ah, that\u0027s a misunderstanding of the spec (I probably didn\u0027t word it clearly enough).\n\nThe top-level artifact_types dict is supposed to be a map from artifact names to mime types. Then the per-test artifacts dict maps artifact names to paths.\n\nThat said, if telemetry\u0027s not using the artifact_types field, I think we\u0027re free to change the spec however we need to (no one else is likely using it). I had thought telemetry was using it (and/or the per-test artifact fields) already, but maybe we never ended launching that?",
      "parentUuid": "cd04f5cf_2c2937f7",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da7acd47_58da2a40",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-06-25T09:07:10Z",
      "side": 1,
      "message": "Oh, I had never seen that artifact_types in the spec, and no Telemetry does not produce them. We only produce the per-test artifacts (mapping name to paths). I would be happy either way to remove the artifact_types dict fro the spec, or to implement in in Telemetry too (as a mapping of name to mime-types).\n\nAlso agree that the notion of artifact_type is not needed at all, and a good name is all what is needed.",
      "parentUuid": "de135a3f_504c806b",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abaa391f_5919351f",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-26T17:58:52Z",
      "side": 1,
      "message": "One more comment about artifact types:\n\nThe driving use case for adding artifacts to typ is so that the GPU tests can report Gold triage links to be shown in Milo. In general, artifacts that a test produces will be linked in Milo, but in the case of links, it makes sense to generate a link directly to what the artifact is pointing to, as otherwise the user has to click the link to the artifact and manually copy its URL for use.\n\nThe plan was to have some extra logic in the recipe if the artifact type was \"link\", but if artifact types are removed, what should be done instead? See if the file contents are URL-like using urlparse? https://docs.python.org/2/library/urlparse.html",
      "parentUuid": "da7acd47_58da2a40",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0839b424_99af6e41",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-06-27T08:46:39Z",
      "side": 1,
      "message": "Ah! I was confused about this \"link\" type, and did not understand why you needed this wrapper file with a single URL as content.\n\nThe output format already allows (or should allow) passing a URL instead of a local path as the location of the artifact. In fact, Telemetry uploads all artifacts to cloud storage and swaps out the local paths with could URLs before producing the test results output. If you already have a URL, then no need for the local file or a \"link\" type at all.\n\nThe plan was that the recipe code dealing with test results would do the artifact uploading (e.g. we have this comment in [1]); but I\u0027m not sure if that ever got implemented.\n\n[1]: https://cs.chromium.org/chromium/src/third_party/catapult/telemetry/telemetry/internal/results/page_test_results.py?rcl\u003dd16c4109ffabb35f9f1288c6f01d90bd02b740ce\u0026l\u003d720",
      "parentUuid": "abaa391f_5919351f",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fea1e59d_5eb506df",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "I think special casing the AddLink method to take the content directly instead of providing a file handle and using that content for the path should work.\n\nI think https://bugs.chromium.org/p/chromium/issues/detail?id\u003d772216 is a little different than changes I was thinking of, though. The bug makes it sound like it would be done via a merge script, while the changes I was thinking of are to the Chromium recipe itself.\n\nI think the two are somewhat orthogonal since AFAIK there isn\u0027t a good way to tell the recipe where to upload artifacts to. So, I think the merge script can do any uploading it wants to, while the recipe can handle generating clickable links to the artifacts. If an artifact has a non-URL path, we might be able to just link to it in the isolated output?",
      "parentUuid": "0839b424_99af6e41",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aea4d31_3088903b",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "Please give an example of path resulting from this.\n\nAlso, I worry that this could end up creating a lot of directories and be generally really annoying to navigate if you\u0027re trying to look at things by hand.\n\nThe web_tests use\n\n$(iteration)/$(dirname testname)/$(basename testname)-$(artifact_name) \n\n(roughly), and I think something like that\u0027d work better. The artifact type shouldn\u0027t need to be in the path, and the other differences cut out a lot of additional directories.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8730f19c_ac3b0c42",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "I\u0027d normally use public class members where possible, and definitely if it let me cut out accessor methods (I think it\u0027s better style and more pythonic to do both of these things). \n\nAlso, the style that typ is written in (and my preference for writing code generally, which I think also tends to be more pythonic) is to trust the caller to do the right thing most of the time, and only be defensive where you really need to (i.e., don\u0027t use frozen values because you\u0027re worried that a caller might mutate things).\n\nI\u0027d make all of these public, and probably call _artifact_type_map just `file_types` and _artifact_map `files`.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23ddec48_b57cfb6d",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8730f19c_ac3b0c42",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a694488d_b2a790ae",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "Do you need this to be a map of type -\u003e [file]? Can\u0027t you just do name -\u003e file?",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab88a9d8_05d4d634",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-24T23:12:54Z",
      "side": 1,
      "message": "See above comment about the artifact types.",
      "parentUuid": "a694488d_b2a790ae",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ba85a16_03cf36c9",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "I\u0027d add something about, where possible, using one of the helpers instead, and maybe add a note to say if the user doesn\u0027t find a suitable helper, ask for one to be added (somewhere? chromium-dev?)",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f77901db_3afd7725",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ba85a16_03cf36c9",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60a7d118_f4d4ea5f",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "As noted above, I think we don\u0027t really need both the artifact_type and the artifact_name? Can\u0027t you basically infer the former from the latter?",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97f5d9bc_1cf7f033",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "If you get rid of the custom exceptions, you can also get rid of the \"Raises\" clause.\n\nIn general, I try to keep docstrings as terse as I reasonable can, and only include them when they are really needed.\n\nThen again, I wouldn\u0027t call typ well-documented, so don\u0027t go too far. Though, it not being well-documented isn\u0027t intentional :).",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d256894f_93d08b95",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97f5d9bc_1cf7f033",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9922f3a2_c168cd06",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "You don\u0027t need the os.path.exists() check, makedirs() will create it if it doesn\u0027t exist, and do nothing if it does.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71056205_af3f0647",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-24T23:12:54Z",
      "side": 1,
      "message": "https://docs.python.org/2/library/os.html#os.makedirs\n\n\"Raises an error exception if the leaf directory already exists or cannot be created\".",
      "parentUuid": "9922f3a2_c168cd06",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8db8cd35_ec8e8252",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-25T00:23:00Z",
      "side": 1,
      "message": "Oh, you\u0027re right. In Python3, there\u0027s an exist_ok flag for that case. Never mind :).",
      "parentUuid": "71056205_af3f0647",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17102cb0_b8acb340",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "If you make _artifact_map a public field, you don\u0027t need this.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aa49b7c_e297ba5e",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17102cb0_b8acb340",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79d804b8_6e1b1c0a",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "If I\u0027m right in the other comments, this routine can and  should just go away.\n\nHowever, if it was going to stick around ...\n\nIf you were going to use a generator, you should use .items(), not iteritems(), for python 3 compatibility (all typ code must by python3 compatible). But, using a generator is overkill for this; I would just return a list.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adde5996_641ef95c",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "Why do you need both this and IterArtifacts()?",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88abb321_427d3f5c",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "These are docstrings that don\u0027t add much, IMO, though I\u0027m not sure that I\u0027d actually omit them, they\u0027re right on the border ...",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76e7ae51_81cd3c0b",
        "filename": "third_party/typ/typ/artifact_results.py",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "I removed the \"Args\" sections since it should be obvious. I\u0027ve kept the rest of the docstring, though, as I think that clarifying what type of data should be written to the file is at least somewhat useful.",
      "parentUuid": "88abb321_427d3f5c",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37c0cdb8_80e25691",
        "filename": "third_party/typ/typ/json_results.py",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "As elsewhere, I\u0027d just raise a ValueError() here.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a31c9442_82d7405c",
        "filename": "third_party/typ/typ/json_results.py",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37c0cdb8_80e25691",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e04719f_e523195a",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "It feels somewhat wrong for iteration to be a property of the test input (rather than a property of the test run), but given that the pool persists across multiple iterations, I guess I don\u0027t see a way to have this be elsewhere.\n\nAssuming you agree (and that\u0027s why the code is the way it is), can you add a comment to capture this idea? It\u0027s not totally obvious why this is the way this is, otherwise.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d71b273_43b39afc",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e04719f_e523195a",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47d6f13f_b0971fe8",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 198,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "Ick, this is kinda ugly; it means that tests will write artifacts to an indeterminate location.\n\nI wonder if we should make an error to call CreateArtifact() during tests if write_full_results_to wasn\u0027t specified, instead?",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ab30f66_32b33ecd",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 599,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "Why is .iteration a member variable, and not a local variable? \n\nAnd, is it redundant with retry_limit at this point? I.e., can you just get rid of retry_limit and change the loop on 586 to loop up to self.args.retry_limit ?",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5facf1ff_d934d0a7",
        "filename": "third_party/typ/typ/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 599,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ab30f66_32b33ecd",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df9b9468_80561011",
        "filename": "third_party/typ/typ/tests/json_results_test.py",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "I think you don\u0027t need this import?",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2fa80fc_b1c3018f",
        "filename": "third_party/typ/typ/tests/json_results_test.py",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df9b9468_80561011",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7f0e748_ffc07a01",
        "filename": "third_party/typ/typ/tests/json_results_test.py",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-06-24T22:06:19Z",
      "side": 1,
      "message": "I\u0027d lift this up to be a top-level class, there\u0027s no real benefit to it being nested.",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92e916a0_22b7ccc2",
        "filename": "third_party/typ/typ/tests/json_results_test.py",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-06-27T17:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7f0e748_ffc07a01",
      "revId": "79aea3f258731d93d9d77062a8f38ad9fd3f3240",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}