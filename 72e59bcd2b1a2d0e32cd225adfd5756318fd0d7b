{
  "comments": [
    {
      "key": {
        "uuid": "46653698_a58e74f8",
        "filename": "telemetry/telemetry/internal/results/results_options.py",
        "patchSetId": 17
      },
      "lineNbr": 70,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-27T23:29:52Z",
      "side": 1,
      "message": "Hmhh, why do we need this extra flag? Can you do this in a separate CL instead since this one is already big?",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d024479_6c37e212",
        "filename": "telemetry/telemetry/internal/results/results_options.py",
        "patchSetId": 17
      },
      "lineNbr": 70,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-11-28T00:54:15Z",
      "side": 1,
      "message": "I need this flag to make sure that running tests doesn\u0027t output a bunch of log files. That was the bit difficulty in making the tests work, is making sure they don\u0027t leak any files on disk when they run. That\u0027s why this is defaulted to False.\n\nI\u0027ll move this to a separate CL.",
      "parentUuid": "46653698_a58e74f8",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dd2cc36_a18fd401",
        "filename": "telemetry/telemetry/internal/results/results_options.py",
        "patchSetId": 17
      },
      "lineNbr": 70,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-28T00:57:20Z",
      "side": 1,
      "message": "Why not set output-dir to a tempdir, then rmdir that one in the tearDown method?",
      "parentUuid": "7d024479_6c37e212",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14e295b6_0a8141e3",
        "filename": "telemetry/telemetry/internal/results/results_options.py",
        "patchSetId": 17
      },
      "lineNbr": 70,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-11-28T11:08:02Z",
      "side": 1,
      "message": "+1 to using a tempdir and removing --move-artifacts. It\u0027s also a bad idea to have an option only used for testing (and we never test the case when the flag is set to True).",
      "parentUuid": "0dd2cc36_a18fd401",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eec0b08_cd4a8047",
        "filename": "telemetry/telemetry/internal/results/results_options.py",
        "patchSetId": 17
      },
      "lineNbr": 70,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-11-30T21:28:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14e295b6_0a8141e3",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16bb6e4f_790982c4",
        "filename": "telemetry/telemetry/internal/results/results_options.py",
        "patchSetId": 17
      },
      "lineNbr": 70,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-12-01T16:01:19Z",
      "side": 1,
      "message": "looks like the move artifacts option is still there?",
      "parentUuid": "9eec0b08_cd4a8047",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbb5e5f3_ec114f3a",
        "filename": "telemetry/telemetry/internal/results/results_options.py",
        "patchSetId": 17
      },
      "lineNbr": 70,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-12-01T18:50:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16bb6e4f_790982c4",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0a4bf42_9afac32e",
        "filename": "telemetry/telemetry/internal/story_runner.py",
        "patchSetId": 17
      },
      "lineNbr": 97,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-11-28T11:08:02Z",
      "side": 1,
      "message": "you still need the try-finally here, otherwise in case of errors the logs will not be added.",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "347ea05c_a3e7f378",
        "filename": "telemetry/telemetry/internal/story_runner.py",
        "patchSetId": 17
      },
      "lineNbr": 97,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-11-30T21:28:23Z",
      "side": 1,
      "message": "What errors would mean that the results wouldn\u0027t be added? AFAIK context manager deals with exceptions in the thing using it ok. But maybe it doesn\u0027t..",
      "parentUuid": "a0a4bf42_9afac32e",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf675e51_28a0893c",
        "filename": "telemetry/telemetry/internal/story_runner.py",
        "patchSetId": 17
      },
      "lineNbr": 97,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-12-01T16:01:19Z",
      "side": 1,
      "message": "Maybe the \"nested\" managers are a bit confusing here. But try e.g.:\n\n$ python\nPython 2.7.13 (default, Jan 19 2017, 14:48:08) \n[GCC 6.3.0 20170118] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\u003e\u003e\u003e import contextlib\n\u003e\u003e\u003e @contextlib.contextmanager\n... def context1():\n...   print \u0027enter: 1\u0027\n...   try:\n...     yield\n...   finally:\n...     print \u0027leave: 1\u0027\n... \n\u003e\u003e\u003e @contextlib.contextmanager\n... def context2():\n...   print \u0027enter: 2\u0027\n...   yield\n...   print \u0027leave: 2\u0027\n... \n\u003e\u003e\u003e with context1():\n...   with context2():\n...     raise KeyError\n... \nenter: 1\nenter: 2\nleave: 1\nTraceback (most recent call last):\n  File \"\u003cstdin\u003e\", line 3, in \u003cmodule\u003e\nKeyError\n\nNote we leave the first context manager, but not the second due to the missing try-finally block.",
      "parentUuid": "347ea05c_a3e7f378",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beff74ef_d133f035",
        "filename": "telemetry/telemetry/internal/story_runner.py",
        "patchSetId": 17
      },
      "lineNbr": 97,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-12-01T18:50:05Z",
      "side": 1,
      "message": "Ah I see, didn\u0027t know that. I\u0027ll fix that, thanks!",
      "parentUuid": "cf675e51_28a0893c",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a26b053_70d129d1",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1045,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-11-28T11:08:02Z",
      "side": 1,
      "message": "why not let it actually create a temp file?",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e01f8d26_ff2d9384",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1045,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-11-30T21:28:23Z",
      "side": 1,
      "message": "I like to avoid actually touching the disk in my tests, if at all possible.",
      "parentUuid": "6a26b053_70d129d1",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d79fc79_52d8ec3a",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1045,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-11-30T21:29:57Z",
      "side": 1,
      "message": "disk i/o is cheap (compared with the bottle neck with these tests are launching the actual browser)",
      "parentUuid": "e01f8d26_ff2d9384",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9d4eef7_05121832",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1045,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-11-30T21:48:40Z",
      "side": 1,
      "message": "Actually, I forgot why I needed this. If I don\u0027t mock this out, I\u0027m going to get a randomly generated temp file name, which is hard to assert about. This way, I know exactly what it\u0027s returning, and I can do asserts like line 1074. And I think plumbing the created tempfile to be visible to the code there would be a lot of work.",
      "parentUuid": "6d79fc79_52d8ec3a",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8cd32ab_e4765c69",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1045,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-12-01T16:01:19Z",
      "side": 1,
      "message": "The assert in line 1074 appears to be testing some internal detail. Maybe it\u0027s fine to leave there a mock.ANY instead of the file name?",
      "parentUuid": "e9d4eef7_05121832",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b852cb4_4b37d6dd",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1045,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-12-01T18:50:05Z",
      "side": 1,
      "message": "I didn\u0027t know about mock.ANY. I could use this.\n\nIn this case though, we do leak temp files when we run these tests. That\u0027s the advantage of the mock here, it doesn\u0027t leak any files.",
      "parentUuid": "f8cd32ab_e4765c69",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45074c66_3349a253",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1090,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-11-28T11:08:02Z",
      "side": 1,
      "message": "nit: bad indentation",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fe8da82_3cd95be8",
        "filename": "telemetry/telemetry/internal/story_runner_unittest.py",
        "patchSetId": 17
      },
      "lineNbr": 1090,
      "author": {
        "id": 1148599
      },
      "writtenOn": "2017-11-30T21:28:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45074c66_3349a253",
      "revId": "72e59bcd2b1a2d0e32cd225adfd5756318fd0d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}