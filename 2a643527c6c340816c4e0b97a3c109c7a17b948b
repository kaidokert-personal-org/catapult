{
  "comments": [
    {
      "key": {
        "uuid": "110450a7_2642e7e2",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "A Pattern identifies a set of patterns? Is it singular or plural?\n\nA Pattern describes a set of *test paths*. A test path identifies a timeseries. Test paths contain information describing the origin of a timeseries such as master, bot, test suite (benchmark), measurement, test case (story), statistic.",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f23d3a4a_b86c6f8e",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "Changed, but I\u0027m not sure exposing the concept of the timeseries and constituent parts at this point makes much sense.",
      "parentUuid": "110450a7_2642e7e2",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "704e959a_edd92e42",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "Descriptors would be more user-friendly than test path patterns.\nIn proto, Descriptors might look something like this.\n\nmessage Descriptor {\n  // Empty fields match all. For example, {suites:[\u0027speedometer\u0027]} matches all statistics for all measurements for all bots and all cases for the speedometer suite.\n  // {suites:[\u0027A\u0027,\u0027B\u0027], bots: [\u0027C\u0027, \u0027D\u0027]} matches all statistics for all measurements for all cases for those two suites on those two bots.\n  // Fields may contain glob patterns. For example, {suites:[\u0027system_health*\u0027]} matches all system_health suites.\n  // If cases are specified, then caseTags are ignored.\n\n  repeated string suites \u003d 1;\n  repeated string measurements \u003d 2;\n  repeated string bots \u003d 3;\n  repeated string cases \u003d 4;\n  repeated string caseTags \u003d 5;\n  repeated string statistics \u003d 6;\n}\nrepeated Descriptor descriptors \u003d 7;",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73544001_274e839b",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "As I mentioned elsewhere, we can make this change later, when the Dashboard doesn\u0027t use the path-based configuration that it currently supports. This also assumes we\u0027re not going to change the way we\u0027re describing benchmarks, bots, etc. -- these could just be amorphous dimensions that we could be matching on, without having to be hard-encoded in a protocol buffer.",
      "parentUuid": "704e959a_edd92e42",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c8871cc_e887f3c8",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "Why is this an enum instead of a string?\nThere are 1000 possible \u0027pct_*\u0027, 1,000,000 possible \u0027ipr_*_*\u0027, 3000 possible \u0027ci_*\u0027 statistics.\nI don\u0027t expect Tim\u0027s team to need more new statistics often, but I do expect it occasionally.\nIt seems unnecessarily burdensome to need to list statistics here.",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b75cd781_7b3d0ba2",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "This is a set of suggested, fairly common stats. Limiting the statistics to a specified set allows us to handle those appropriately. For teams that do care about the tail, it\u0027s fairly standard to look at the spread between the median and the 90th percentile when doing performance analysis (and even to the 99th percentile, and 99.9th).\n\nFor those that care about the tail, giving them the freedom to pick an arbitrary percentile imposes a burden on the code performing the anomaly detection. If instead we have a list of these percentiles we know about and support, we can keep it simple.",
      "parentUuid": "9c8871cc_e887f3c8",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eab8b4cb_b2c7200e",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-23T17:07:21Z",
      "side": 1,
      "message": "Can you tell me more about the burden on the anomaly detection algorithm?\n\nI\u0027ve already written the function to generate an arbitrary statistic from a Histogram.\nhttps://cs.chromium.org/chromium/src/third_party/catapult/tracing/tracing/value/histogram.html?q\u003dhistogram.html\u0026sq\u003dpackage:chromium\u0026dr\u0026l\u003d814\n\nCurrently, metrics configure which statistics are generated and stored as timeseries. I\u0027d like \nfor that requirement to be removed and allow the dashboard or frontend to call getStatisticScalar as needed. For example, at upload time the dashboard could match Histograms up with Subscriptions and see which statistics are monitored and just generate those in addition to a small set of common statistics.",
      "parentUuid": "b75cd781_7b3d0ba2",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4365734c_b7193abd",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T18:20:10Z",
      "side": 1,
      "message": "Here\u0027s the situation:\n\n- Today, when we attempt to generate Anomaly instances, we only see one AnomalyConfig for a given TestMetadata.\n- In this new world where each Subscription can have individual AnomalyConfig instances which specify how to deal with which percentiles, having each subscription define an arbitrarily unbounded set of potential percentiles to track, we can have an explosion of multiple percentiles we can be alerting for.\n\nThis means if we support arbitrary percentiles, we will have to generate each of those metrics and have anomaly detection run on those. It makes it unsustainable to even attempt to debug and/or test that combinatorial explosion, which is not necessary to support -- 90th, 99th, and 99.9th percentiles are plenty to determine the shape of the tail. In fact, min, median, 90pct, 99pct, 99.9pct, and max can give you a good representation of the tail of the distribution and for things measuring latency (where the variance matters a lot), knowing the tail of the distribution is why you\u0027d even care about tracking these stats in the first place. :)\n\nIn this world of N:M (subscription to metrics) matching, we\u0027d have to do a projection of all the subscriptions applied to all the metrics that match, then apply the anomaly configs as a refinement per subscription to determine the amount of work we\u0027ll do when performing anomaly detection. Giving users arbitrary percentiles just gives us another axis of unbounded growth for very little gain.\n\nDoes that help?",
      "parentUuid": "eab8b4cb_b2c7200e",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13789c42_997cccf5",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-26T15:30:30Z",
      "side": 1,
      "message": "It looks like there might be a misunderstanding of how find_anomalies works. I\u0027d like to VC to try to clear that up. Unfortunately, I have an appointment this afternoon, so maybe either Simon can chat with you this afternoon or we can meet on Monday?\n\nI confirmed with Tim that he expects to experiment with statistics more, so the ability to add statistics might be a user requirement.",
      "parentUuid": "4365734c_b7193abd",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70ef2ac6_7d38a615",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-27T11:09:49Z",
      "side": 1,
      "message": "What find_anomalies is doing today, isn\u0027t really the point -- the point is the future, when I make changes to how the anomalies are computed. Let me try again:\n\n- Today, we only generate anomalies for things that have sheriff configurations.\n\nhttps://cs.chromium.org/chromium/src/third_party/catapult/dashboard/dashboard/find_anomalies.py?l\u003d64-67\u0026rcl\u003de6d08137f66ceb950acf8b1bd42866107c2e7cf5\n\n- And then we use the anomaly config that applies for a given TestMetadata, and generate a single Anomaly.\n\nhttps://cs.chromium.org/chromium/src/third_party/catapult/dashboard/dashboard/find_anomalies.py?l\u003d69-81\u0026rcl\u003de6d08137f66ceb950acf8b1bd42866107c2e7cf5\n\n- This code will find/generate the datapoints through which anomalies will be computed against:\n\nhttps://cs.chromium.org/chromium/src/third_party/catapult/dashboard/dashboard/find_anomalies.py?l\u003d93\u0026rcl\u003de6d08137f66ceb950acf8b1bd42866107c2e7cf5\n\nThat\u0027s today. In the future, this won\u0027t actually work properly with the way we\u0027re defining the subscriptions with individual anomaly configurations. We\u0027ll have to:\n\n- For every histogram, determine which subscriptions (plural) apply to the TestMetadata to which a histogram is associated, as they are uploaded.\n\n- We then compute the anomalies for the metric+stats given the Subscription and AnomalyConfig for each of those subscriptions which might apply to the individual subscription. So this means, if a Histogram comes in and we see 3 subscriptions apply for the same set of stats, 1 of which has a default AnomalyConfig and 2 with the same AnomalyConfig that refines the subscription, then we have to compute 2 different kinds of Anomaly instances. Each AnomalyConfig will then determine whether it will only modify the settings for a set of statistics.\n\nSo now consider this state:\n\nTest: Waterfall/bot/benchmark/metric\nSubscription 1: Waterfall/bot/benchmark/*/* [MEDIAN, MEAN], AnomalyConfig: [min_points \u003d 50]\nSubscriptoin 2: Waterfall/bot/benchmark/*/* [PCT_90], AnomalyConfig: [min_relative_change: 0.1]\nSubscription 3: Waterfall/bot/benchmark/*/* [MEDIAN, MEAN, PCT_90], AnomalyConfig: [min_points \u003d 50]\n\nThis means we need to compute MEDIAN, MEAN, PCT_90 for 50 minimum points and if those generate an Anomaly, that\u0027s different from the computation of PCT_90 with default number of points but 10% minimum relative change.\n\nThis is *very* different from the way we\u0027re computing the anomalies today, which is why what the current state does doesn\u0027t matter much in the way we\u0027re thinking about how to generate anomalies in the future once we have these in place.\n\nThis is a long way to say, we\u0027re going to change find_anomalies and if we\u0027re letting folks determine arbitrary percentiles, then the combinatorial explosion in the amount of computation we need to perform is real and something we need to think about. The reason we\u0027re defining these tail percentiles first, is because it\u0027s a start, and if we find more important percentiles in the future then we can add those to limit the amount of combinatorial explosion required here.\n\nNow, if we\u0027re saying we\u0027d like folks to be able to analyse individual metrics based on the histograms we\u0027re getting over time, then I agree. We\u0027ll have a different plan to make sure that\u0027s possible, but it doesn\u0027t have to be through the dashboard\u0027s sheriff anomaly configuration for alerting.\n\nIs there something else we need to chat about here?",
      "parentUuid": "13789c42_997cccf5",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ad0b016_0ab8e871",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-27T18:44:46Z",
      "side": 1,
      "message": "Thanks, that\u0027s a bit clearer, though I still don\u0027t see why allowing arbitrary statistics necessarily leads to combinatorial explosion.\n\nThe combinatorial explosion does not happen when the anomaly config structure permits many statistics. The combinatorial explosion happens when users configure many statistics. I can imagine many ways to allow users to configure *arbitrary* statistics without allowing them to configure *too many* statistics. You could warn or raise an error if more than 5 stats are configured. Or monitor find_anomalies latency. Or use a watchdog timer to put a hard cap on the latency.\n\nIt\u0027s also possible for users to configure too many statistics even if you keep this whitelist. There are already 9 options, and it\u0027s still missing the confidence interval statistics entirely. It\u0027s easier for users to say \"let\u0027s just monitor everything\" when there are only a dozen statistics than when the stats are free-form. Good actors won\u0027t configure all 100 percentiles. Good actors do the kind of analysis that can justify picking a single percentile to maximize regression coverage while minimizing false positives or w/e, even if it\u0027s not in the 1-2-5 series. Good actors do the kind of analysis that might show that that optimal percentile is different for different measurements or stories, or has changed since last year. Good actors research new algorithms like confidence intervals.\n\nIf you\u0027re worried about cost, then manage the cost directly. The config structure is too far removed from the runtime to be the right place to manage cost. The config structure is a user interface, so user concerns need to be considered even if they don\u0027t trump other concerns.",
      "parentUuid": "70ef2ac6_7d38a615",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bd6b6ad_0d2d2b27",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-29T01:32:13Z",
      "side": 1,
      "message": "This is how it causes combinatorial explosion:\n\n- Consider the number of subscriptions that are defined.\n- Multiply that with the number of available statistics to monitor.\n- Multiply that with the number of ways to configure anomaly configurations.\n- Multiply that with the number of metrics users can subscribe to.\n\nThe things that users can configure are: available statistics to monitor, the anomaly configuration settings, and the metrics they can subscribe to.\n\nTo be completely honest, find_anomalies is one of the things I\u0027ll be rearchitecting since it by design doesn\u0027t scale. So \"just manage the costs directly\" isn\u0027t exactly something you can do when you let users configure arbitrary percentiles -- because that turns something that has a fixed worst case, to one that can have a potentially infinite worst case. Since users will be directly configuring these instead of something the team will manage (the configuration will live in places where users control).\n\nI have a larger list of things to do to change the way the anomalies are computed to be able to handle the scale we\u0027re providing for in these changes. We can discuss that in isolation, which isn\u0027t really related to this configuration proto anymore.\n\nThe \"default\" set of metrics will be the current default, which is monitoring the mean. That\u0027s mostly for backward compatibility but I can\u0027t see why we change the default to include more basic statistics (like variance of variance, geomean changes) etc.\n\nConfiguring confidence intervals is independent of the percentile to watch, since that will be a change in the way anomaly configs are done. So we\u0027re left with thinking about what set of stats can we provide which is a good *starting* set of statistics, to cap the potential for user-defined combinatorial explosion.\n\nThe \"good actors\" are the ones we\u0027re optimising for here -- by forcing the \"bad\" actors to only be the worst good actor. We\u0027re eliminating the case where the bad actors can have a vector through which they\u0027re imposing undue burden.\n\nTo be honest, I\u0027m feeling a little confused what you want me to change here. What we\u0027re doing here is:\n\n- Providing a starting set of statistics we know folks doing latency/performance analysis already know about and use (for basic stats and tail percentiles).\n- Because this is a protocol buffer we can evolve this later.\n\nI\u0027ve made a case for why I\u0027ve chosen to not support arbitrary percentiles, and I\u0027m not sure what the objection is aside from \"users might want to experiment with different percentiles\" which I also addressed with a different way of accessing the data for those users (not the majority or the critical use case).\n\nIs there still a blocker here?",
      "parentUuid": "5ad0b016_0ab8e871",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82cfa007_f0ab69f4",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "Yes! +100 to splitting immutable identifiers from human-friendly names more!\n\nSo then.... shouldn\u0027t there be an immutable identifier in either this message or SheriffConfig? I\u0027m not sure how luci config works. How will the chromeperf dashboard know that this SheriffConfig replaces an old one with a new name instead of adding a brand new SheriffConfig?",
      "range": {
        "startLine": 60,
        "startChar": 64,
        "endLine": 61,
        "endChar": 26
      },
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0b3e16b_afaf7045",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "Please remove either \u0027other\u0027.",
      "range": {
        "startLine": 61,
        "startChar": 40,
        "endLine": 61,
        "endChar": 62
      },
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b31b334b_f95dd8c8",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "The proto will be saved associated with a unique revision (provided by luci-config). Every set of configurations will be unique and we\u0027ll be storing the objects that we decode appropriately. That should be sufficient for us to refer to a specific version of the configuration from the dashboard.",
      "parentUuid": "82cfa007_f0ab69f4",
      "range": {
        "startLine": 60,
        "startChar": 64,
        "endLine": 61,
        "endChar": 26
      },
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b1fa621_f4769256",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0b3e16b_afaf7045",
      "range": {
        "startLine": 61,
        "startChar": 40,
        "endLine": 61,
        "endChar": 62
      },
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb2430c6_4954d0f4",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "Wait, shouldn\u0027t this field go in SheriffConfig instead? I thought Subscriptions were implementation details?",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8945b75f_13d14cc7",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "Each subscription is really a conglomeration of a `Sheriff` and the `AnomalyConfig`s. If you do a cross-product of Sheriff x AnomalyConfig then you\u0027ll end up with the subscriptions as defined. This way we\u0027re giving each subscription a name, similar to how each Sheriff entity has a name -- this allows us to display (for humans) which subscriptions were associated with an alert (can show up in the issues, in the emails we generate, etc.).\n\nA file will define all the Subscriptions for a given project. Because most projects will only have one SheriffConfig file that luci-config will watch for, the way we disambiguate each of the subscriptions for humans is with a name.",
      "parentUuid": "bb2430c6_4954d0f4",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64ce2a17_d68dd559",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "I\u0027m actually confused: alerts don\u0027t have CC. Bugs and email have CC.\n\nDid you mean this?\nDaily reports are emailed to this address. This email address is also CC\u0027d on bugs filed for matching alerts.\n\nThen I\u0027d expect users to ask \u0027What if I want to use separate addresses for those two different purposes? Or do one but not the other?\u0027\n\nIIRC, currently the dashboard only CCs the current user to regression bugs. Changing that is ok by me as long it\u0027s deliberate and communicated to sheriffs.",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0114d88d_85dffd06",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "I meant having the issues also CC\u0027ing the sheriffs that have a defined subscription. This means an alert email will be sent to the email address, and also CC\u0027ed to the issues filed by the dashboard. I suspect we can have a separate configuration for the issues filed, where we can specify the component, the labels, and the CC\u0027ed email addresses independently of the sheriff email target, but we don\u0027t do that today.\n\nUnfortunately in the N:M world we\u0027ll need to start somewhere. I suspect it\u0027s fairly trivial to add the bug CC\u0027s as a field too, so I\u0027ll do that now. :)",
      "parentUuid": "64ce2a17_d68dd559",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf4990f_3e4f94b5",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2019-04-17T20:50:11Z",
      "side": 1,
      "message": "Does this belong here?\nThis bit is currently controlled at the bot level.\nhttps://cs.chromium.org/chromium/src/third_party/catapult/dashboard/dashboard/change_internal_only.py",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae42dbac_1951a8e4",
        "filename": "dashboard/dashboard/proto/sheriff.proto",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-04-23T11:34:31Z",
      "side": 1,
      "message": "Yes, because we need to know when we\u0027re filing issues for a subscription that has multiple matching alerts, whether we will need to file two separate issues or whether we\u0027ll even surface the subscription to non-internal users.\n\nConsider two subscriptions, a public one, and an internal-only one. If there are alerts that come up for internal-only bots but match a public subscription, we shouldn\u0027t match that subscription. Consequently if there is an alert for a public bot which matches both subscriptions, we should file two different issues (e.g. we should not let the publicly raised issues know that there are internal-only subscribers to those).\n\nDoes that make sense? I\u0027ve updated the comment in the proto with that description.",
      "parentUuid": "3cf4990f_3e4f94b5",
      "revId": "2a643527c6c340816c4e0b97a3c109c7a17b948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}