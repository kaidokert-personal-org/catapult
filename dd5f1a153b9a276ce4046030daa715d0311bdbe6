{
  "comments": [
    {
      "key": {
        "uuid": "d37e80ae_d714355b",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 304,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-10T19:26:54Z",
      "side": 1,
      "message": "Maybe we want to make a new directory or at least new files in pinpoint with the execution engine analogs to the pinpoint quests?",
      "range": {
        "startLine": 304,
        "startChar": 6,
        "endLine": 304,
        "endChar": 25
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9f8f1cf_86265f9b",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 304,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-11T07:02:51Z",
      "side": 1,
      "message": "I\u0027m ambivalent about whether a new directory would be a good idea to do now, or later -- my intent was to further refactor this so we\u0027re sharing code between the Quest/Execution implementations and the the Task implementations. I think it might be a good idea to isolate them from each other though given how much different the structure is now...\n\nLet me do another round without the split -- any suggestions on good subdirectory naming? `pinpoint/models/tasks/` perhaps?",
      "parentUuid": "d37e80ae_d714355b",
      "range": {
        "startLine": 304,
        "startChar": 6,
        "endLine": 304,
        "endChar": 25
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "971b00bb_ac67c316",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 304,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-11T12:38:34Z",
      "side": 1,
      "message": "pinpoint/models/tasks sgtm, and can totally wait til a later cl",
      "parentUuid": "c9f8f1cf_86265f9b",
      "range": {
        "startLine": 304,
        "startChar": 6,
        "endLine": 304,
        "endChar": 25
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c75f6368_f769f0db",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 304,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-12T00:36:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "971b00bb_ac67c316",
      "range": {
        "startLine": 304,
        "startChar": 6,
        "endLine": 304,
        "endChar": 25
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8fddf7a_a945ebcb",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 385,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-10T19:26:54Z",
      "side": 1,
      "message": "Having a bit of trouble understanding why some of these have the try/except around them, what states are the task in that these updates are potentially invalid?",
      "range": {
        "startLine": 385,
        "startChar": 25,
        "endLine": 385,
        "endChar": 42
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f16c212f_628aa7cc",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 385,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-11T06:59:34Z",
      "side": 1,
      "message": "The execution engine can potentially run in multiple processes/threads/instances on the same task due to the nature of PubSub message retries and things like that, and it could be operating on the same event+task concurrently. The UpdateTask function runs in a transaction, where we enforce that a transition be in a set of transitions that are defined.\n\nNow, it could be that these two concurrent updates would be identical -- attempting to transition for example from \u0027ongoing\u0027 to \u0027cancelled\u0027 or \u0027failed\u0027. Because the transactions are scoped in the UpdateTask function, it can throw an InvalidTransition when the task is already in the \u0027cancelled\u0027 state and we\u0027re attempting to transition to \u0027cancelled\u0027 (or \u0027failed\u0027 to \u0027failed\u0027). This way we use it as a barrier to only let the process/thread/instance that successfully got the state transition to succeed to proceed with the rest of the work.\n\nThis should be documented in the UpdateTask(...) API, which mentions this.\n\nI think we can be more explicit about what the semantics are for that API in documentation?",
      "parentUuid": "b8fddf7a_a945ebcb",
      "range": {
        "startLine": 385,
        "startChar": 25,
        "endLine": 385,
        "endChar": 42
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d295d038_58c816f1",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 385,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-11T12:38:34Z",
      "side": 1,
      "message": "Right, that makes sense. I guess what I was wondering if that can happen to pretty much any of these UpdateTask calls, and then would it make sense to just have a general try/except InvalidTransition at a higher level.",
      "parentUuid": "f16c212f_628aa7cc",
      "range": {
        "startLine": 385,
        "startChar": 25,
        "endLine": 385,
        "endChar": 42
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c97525d8_48fc7cb2",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 385,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-12T00:36:47Z",
      "side": 1,
      "message": "That\u0027s an interesting thought. In this particular case though the failure is not fatal and no particular action needs to be done if there was an update conflict detected (we\u0027re just using it as a barrier). In other cases, we may perform alternative actions (like scheduling retries, etc.).\n\nOne thing I\u0027m considering is making a set of function decorators that might make this cleaner and even define context managers to show nesting/dependency. So something like:\n\n```\n@LogStateTransitionFailures\ndef SomeAction(...):\n  with UpdateSuccessful(...):\n    # Do some things dependent on the update being good.\n    with UpdateSuccessful(...):\n      # Do more things dependent on the update being good.\n```\n\nNow that I think about it, that would greatly help with readability of these implementations, and I think I have enough examples just in this evaluator/action implementation that it\u0027s worth factoring some out already.\n\nThoughts before I go too far down this road?",
      "parentUuid": "d295d038_58c816f1",
      "range": {
        "startLine": 385,
        "startChar": 25,
        "endLine": 385,
        "endChar": 42
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "249e3deb_109f6834",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 385,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-12T01:32:29Z",
      "side": 1,
      "message": "Turns out this is really easy to do, so I just did it. :)\n\nPTAL",
      "parentUuid": "c97525d8_48fc7cb2",
      "range": {
        "startLine": 385,
        "startChar": 25,
        "endLine": 385,
        "endChar": 42
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdf5cc7e_3aea76f4",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 385,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-13T21:05:15Z",
      "side": 1,
      "message": "Nice, like the decorator approach and the code comes off cleaner for it.",
      "parentUuid": "249e3deb_109f6834",
      "range": {
        "startLine": 385,
        "startChar": 25,
        "endLine": 385,
        "endChar": 42
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d28f0af_a7ad7f5e",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 388,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-11T12:38:34Z",
      "side": 1,
      "message": "nit: return None here and below for consistency?",
      "range": {
        "startLine": 388,
        "startChar": 6,
        "endLine": 388,
        "endChar": 12
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "341fce4e_05cfcfa6",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 388,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-12T00:36:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d28f0af_a7ad7f5e",
      "range": {
        "startLine": 388,
        "startChar": 6,
        "endLine": 388,
        "endChar": 12
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b37983f8_471c1769",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-10T19:26:54Z",
      "side": 1,
      "message": "should these be FromDict\u0027s?",
      "range": {
        "startLine": 539,
        "startChar": 26,
        "endLine": 539,
        "endChar": 32
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc98bab3_df7593c0",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate.py",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-11T06:59:34Z",
      "side": 1,
      "message": "Good call -- Done.",
      "parentUuid": "b37983f8_471c1769",
      "range": {
        "startLine": 539,
        "startChar": 26,
        "endLine": 539,
        "endChar": 32
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8723d0a_7517cc51",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 420,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-10T19:26:54Z",
      "side": 1,
      "message": "Feels like the testing is a little light compared to all the new logic introduced.",
      "range": {
        "startLine": 420,
        "startChar": 6,
        "endLine": 420,
        "endChar": 30
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7ca67ad_ded9c686",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 420,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-12T00:36:47Z",
      "side": 1,
      "message": "Right. I\u0027ve increased testing on the failure cases, and we\u0027re currently at 87% when I do:\n\n./bin/run_py_tests --coverage\n\nfor find_isolate.py.\n\nPTAL?\n\nPS. Example script I\u0027ve run that might be helpful in the future:\n\n```\n$ ./bin/run_py_tests --coverage --test-filter \u0027pinpoint.*\u0027 --coverage-source dashboard/pinpoint --coverage-omit \u0027*_test.py\u0027 | grep \u0027^dashboard/pinpoint\u0027\n...\ndashboard/pinpoint/models/quest/find_isolate.py                 280     36    87%\n...\n```",
      "parentUuid": "e8723d0a_7517cc51",
      "range": {
        "startLine": 420,
        "startChar": 6,
        "endLine": 420,
        "endChar": 30
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8ed1609_b74e7f8b",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 420,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-13T21:05:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a7ca67ad_ded9c686",
      "range": {
        "startLine": 420,
        "startChar": 6,
        "endLine": 420,
        "endChar": 30
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ab9f43c_c94a7508",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 450,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-10T19:26:54Z",
      "side": 1,
      "message": "nit: Doesn\u0027t change_module pull in Change/Commit/other stuff (change/__init__.py ?), at least they way it is now.",
      "range": {
        "startLine": 450,
        "startChar": 17,
        "endLine": 450,
        "endChar": 30
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9beb28d0_df9642bf",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 450,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-11T06:59:34Z",
      "side": 1,
      "message": "Ah, right -- that wasn\u0027t clear to me. I\u0027ve gotten used to the habit of importing the actual module where these were defined (instead of where they\u0027re transitively imported). :)\n\nFixed.",
      "parentUuid": "2ab9f43c_c94a7508",
      "range": {
        "startLine": 450,
        "startChar": 17,
        "endLine": 450,
        "endChar": 30
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c14c679b_f029d27e",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 475,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-10T19:26:54Z",
      "side": 1,
      "message": "Aren\u0027t these mocks, not actual functions?\n\nAlso, what\u0027s the point of calling them before any logic has actually run?",
      "range": {
        "startLine": 475,
        "startChar": 8,
        "endLine": 475,
        "endChar": 26
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b66ffb53_6c94e1c1",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 475,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-09-11T06:59:34Z",
      "side": 1,
      "message": "Setting the assertion that it will only be called once means if it\u0027s called more than once the second call will cause the mock to raise an exception (induce a failure). It\u0027s configuring the mock before it\u0027s used, so that misuse is flagged at the point where it happens.",
      "parentUuid": "c14c679b_f029d27e",
      "range": {
        "startLine": 475,
        "startChar": 8,
        "endLine": 475,
        "endChar": 26
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7abc9431_f34e347f",
        "filename": "dashboard/dashboard/pinpoint/models/quest/find_isolate_test.py",
        "patchSetId": 7
      },
      "lineNbr": 475,
      "author": {
        "id": 1116018
      },
      "writtenOn": "2019-09-11T12:38:34Z",
      "side": 1,
      "message": "My point was that this function only exists in later python versions, so these calls through run_py_tests are only mocks and not actual functions. And my understanding is that, if these worked, these should be used after the mock has been called, not before, they\u0027re not a setup step.\n\nie. this passes:\n\nmock_process_test.assert_called_once()\nmock_process_test.assert_moon_made_of_cheese()\nprint (mock_process_test.assert_called_once)\n\n# \u003cMagicMock name\u003d\u0027ProcessTestsAsync.assert_called_once\u0027 id\u003d\u00274479749136\u0027\u003e",
      "parentUuid": "b66ffb53_6c94e1c1",
      "range": {
        "startLine": 475,
        "startChar": 8,
        "endLine": 475,
        "endChar": 26
      },
      "revId": "dd5f1a153b9a276ce4046030daa715d0311bdbe6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}