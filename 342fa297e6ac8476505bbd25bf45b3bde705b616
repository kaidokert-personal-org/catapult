{
  "comments": [
    {
      "key": {
        "uuid": "42c9b5f4_61034691",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 25,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-12-10T00:10:03Z",
      "side": 1,
      "message": "Nit: I think unittests are typically broken up to test only a single case. So instead of testFindAllAvailableDevicesFails with multiple failure cases in it, you\u0027d have tests like:\n\ntestFindAllAvailableDevicesFailsNonFuchsiaBrowser\ntestFindAllAvailableDevicesFailsNonLinuxHost\ntestFindAllAvailableDevicesFailsNonx64",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 38
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d76fabf_2282d4d3",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 25,
      "author": {
        "id": 1364448
      },
      "writtenOn": "2019-12-10T02:13:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42c9b5f4_61034691",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 38
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed0cd6f4_64eec2e1",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 33,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-12-10T00:10:03Z",
      "side": 1,
      "message": "Nit: i386 since that\u0027s what x86 would be according to https://stackoverflow.com/questions/45125516/possible-values-for-uname-m, and platform.machine gets its return value from uname -m.",
      "range": {
        "startLine": 33,
        "startChar": 54,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc2e3c48_d133ee5c",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 33,
      "author": {
        "id": 1364448
      },
      "writtenOn": "2019-12-10T02:13:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed0cd6f4_64eec2e1",
      "range": {
        "startLine": 33,
        "startChar": 54,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c3d7f86_de152a84",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-12-10T00:10:03Z",
      "side": 1,
      "message": "Nit: RuntimeError",
      "range": {
        "startLine": 42,
        "startChar": 12,
        "endLine": 42,
        "endChar": 21
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23dfa4c2_03c531ee",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1364448
      },
      "writtenOn": "2019-12-10T02:13:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c3d7f86_de152a84",
      "range": {
        "startLine": 42,
        "startChar": 12,
        "endLine": 42,
        "endChar": 21
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69a8a517_7ab3e035",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 47,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-12-10T00:10:03Z",
      "side": 1,
      "message": "I believe these need to be \"with mock.patch\"",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68868ef7_b5db804d",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 47,
      "author": {
        "id": 1364448
      },
      "writtenOn": "2019-12-10T02:13:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69a8a517_7ab3e035",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd9e4f68_ad56d8ff",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2019-12-10T00:10:03Z",
      "side": 1,
      "message": "I believe patch is only meant to be used as a decorator or context manager, as per https://cpython-test-docs.readthedocs.io/en/latest/library/unittest.mock.html#unittest.mock.patch, which is why you were finding that call_count didn\u0027t exist. I think you can do either:\n\nfuchsia_device._DecompressFuchsiaSDK \u003d mock.Mock()\n...\nself.assertEquals(fuchsia_device._DeompressFuchsiaSDK.call_count, 0)\n\nor\n\nwith mock.patch(...) as decompress_mock:\n  ...\n  self.assertEquals(decompress_mock.call_count, 0)\n\nThe latter seems a bit cleaner to me, but as long as the solution works, don\u0027t care much about which you choose.",
      "range": {
        "startLine": 52,
        "startChar": 26,
        "endLine": 52,
        "endChar": 36
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f14567b_2e2022fe",
        "filename": "telemetry/telemetry/internal/platform/fuchsia_device_unittest.py",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1364448
      },
      "writtenOn": "2019-12-10T02:13:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd9e4f68_ad56d8ff",
      "range": {
        "startLine": 52,
        "startChar": 26,
        "endLine": 52,
        "endChar": 36
      },
      "revId": "342fa297e6ac8476505bbd25bf45b3bde705b616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}