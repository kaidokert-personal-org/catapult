{
  "comments": [
    {
      "key": {
        "uuid": "2e7bc577_eae6e51e",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1159599
      },
      "writtenOn": "2018-07-27T17:40:46Z",
      "side": 1,
      "message": "This definitely seems like functionality that tends to get repeated a lot while mutating Redux state. Though to me this seems like more of a general helper function than something that\u0027s necessarily specific to Redux?",
      "range": {
        "startLine": 29,
        "startChar": 2,
        "endLine": 29,
        "endChar": 20
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efa0a204_ce99f25a",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1290511
      },
      "writtenOn": "2018-07-26T20:45:42Z",
      "side": 1,
      "message": "If the for loop does not return early, then `depth` will always be the `path.length - 1`. It is then possible to prefer `const` over `let` by writing the following:\n\nconst maxDepth \u003d path.length - 1;\nfor (let depth \u003d 0; depth \u003c maxDepth; ++depth) {\n  [...]\n}\nconst key \u003d Array.isArray(node) ? parseInt(path[maxDepth]) : path[maxDepth];",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 40,
        "endChar": 46
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06faa0c1_39cbdc05",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1159599
      },
      "writtenOn": "2018-07-27T17:40:46Z",
      "side": 1,
      "message": "This chain is a little difficult for me to follow at first glance. Would it be possible to include a usage example for this?",
      "range": {
        "startLine": 68,
        "startChar": 16,
        "endLine": 68,
        "endChar": 59
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21e2b208_7368517c",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1159599
      },
      "writtenOn": "2018-07-27T17:40:46Z",
      "side": 1,
      "message": "Just an FYI that this is the pattern I ended up using in Monorail to solve a similar problem of action creators without thunk. I definitely can\u0027t vouch for this approach, but I thought we could share notes. \n\nAsync action creator here: https://cs.chromium.org/chromium/infra/appengine/monorail/elements/redux/redux-mixin.html?q\u003dredux-mixin+file:%5Einfra/appengine/monorail/elements/+package:%5Echromium$\u0026dr\u0026l\u003d56 \nFunction call here: https://cs.chromium.org/chromium/infra/appengine/monorail/elements/flt/mr-approval-page/mr-approval-page.js?l\u003d118",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 13
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42ee13b8_adb734b2",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1290511
      },
      "writtenOn": "2018-07-26T20:45:42Z",
      "side": 1,
      "message": "Perhaps we can send an exception event to Google Analytics so we can catch bugs without waiting for a bug report.",
      "range": {
        "startLine": 75,
        "startChar": 6,
        "endLine": 78,
        "endChar": 18
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "756ddab6_5ea42af9",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1290511
      },
      "writtenOn": "2018-07-26T20:45:42Z",
      "side": 1,
      "message": "Perhaps this is not needed.",
      "range": {
        "startLine": 83,
        "startChar": 14,
        "endLine": 83,
        "endChar": 27
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1390e281_0620761e",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 85,
      "author": {
        "id": 1290511
      },
      "writtenOn": "2018-07-26T20:45:42Z",
      "side": 1,
      "message": "Both of these parameters can stay undefined and will function as expected. There is no need to set defaults.",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 85,
        "endChar": 18
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50a2895c_5d5c9a4e",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1290511
      },
      "writtenOn": "2018-07-26T20:45:42Z",
      "side": 1,
      "message": "Does the order of middleware matter?",
      "range": {
        "startLine": 88,
        "startChar": 19,
        "endLine": 88,
        "endChar": 51
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46e3258e_4aaca63d",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 173,
      "author": {
        "id": 1290511
      },
      "writtenOn": "2018-07-26T20:45:42Z",
      "side": 1,
      "message": "This would be a great opportunity for the spread operator for the sake of being verbose.\n\nconst replacement \u003d (...args) \u003d\u003e {\n  [...]\n  return reducer.apply(this, args);\n  [...]\n}",
      "range": {
        "startLine": 173,
        "startChar": 35,
        "endLine": 173,
        "endChar": 44
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79f5fc7f_284ceedb",
        "filename": "dashboard/dashboard/spa/simple-redux.js",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1290511
      },
      "writtenOn": "2018-07-26T20:45:42Z",
      "side": 1,
      "message": "A comment saying this line makes `name` immutable would be helpful.",
      "range": {
        "startLine": 195,
        "startChar": 4,
        "endLine": 195,
        "endChar": 75
      },
      "revId": "def988600977763a5bf3fe5a794f83f911540706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}