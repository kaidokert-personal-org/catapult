{
  "comments": [
    {
      "key": {
        "uuid": "b4050c37_7b6c8154",
        "filename": "telemetry/telemetry/testing/browser_test_runner.py",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-17T01:22:18Z",
      "side": 1,
      "message": "why do you need to specify these, aren\u0027t they the default?",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13fba1be_cba871f2",
        "filename": "telemetry/telemetry/testing/browser_test_runner.py",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-17T01:47:41Z",
      "side": 1,
      "message": "No, it seems to use the terminal by default. You need to override that behavior by supplying the monkey patched sys.stdout and sys.stderr as named arguments",
      "parentUuid": "b4050c37_7b6c8154",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffcd7780_a9593ae8",
        "filename": "telemetry/telemetry/testing/browser_test_runner.py",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-18T00:35:41Z",
      "side": 1,
      "message": "I think I\u0027m a bit confused about who is calling this and when. \n\nIs this being called by the testcase directly (i.e., in the same process as the typ.runner object)? Or is the testcase calling a separate process which is then invoking this code?\n\nI think it\u0027s the former, right?\n\nI think that suggests that something in subprocess is getting a handle to the original sys.stdout and sys.stderr and using those instead of the ones we\u0027ve monkey-patched.\n\nCan you take a look and see if we can monkey-patch subprocess\u0027s references as well? Ideally we shouldn\u0027t have to have tests make changes like this in order to work.",
      "parentUuid": "13fba1be_cba871f2",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cab67f4a_e241d0ba",
        "filename": "telemetry/telemetry/testing/browser_test_runner.py",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-18T01:27:49Z",
      "side": 1,
      "message": "This function is being called in the same process as the typ.runner object. I believe  that subprocess is getting hold of the original sys.stdout and sys.stderr before we monkey patch the sys.stdout and sys.stderr streams in host.py. This could happen as soon as the subprocess module is imported. Ill see if we can monkey patch the subprocess\u0027s stream references.",
      "parentUuid": "ffcd7780_a9593ae8",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9a3b460_020651ce",
        "filename": "telemetry/telemetry/testing/unittest_runner.py",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-17T01:22:18Z",
      "side": 1,
      "message": "same question",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbf0868f_ee97a395",
        "filename": "telemetry/telemetry/testing/unittest_runner.py",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-17T01:47:41Z",
      "side": 1,
      "message": "same reply from browser_test_runner.py",
      "parentUuid": "a9a3b460_020651ce",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6f73593_68487e5c",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 256,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-17T01:22:18Z",
      "side": 1,
      "message": "If you\u0027re changing this to subclass from object, you don\u0027t need to call super().\n\nAlso, you should add self.output_buffer as an instance field.",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d65459e8_74c08263",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 256,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-17T01:47:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6f73593_68487e5c",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebf2d38a_4fd0ded8",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 291,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-17T01:22:18Z",
      "side": 1,
      "message": "Should this be self.stream.fileno()?",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8286c931_c31e5ced",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 291,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-17T01:47:41Z",
      "side": 1,
      "message": "No, stream holds the original sys.stdout or sys.stderr stream. Returning them will redirect the output to the terminal as what was the prevous behaviour.",
      "parentUuid": "ebf2d38a_4fd0ded8",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bae06220_e0a78677",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 291,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-18T00:35:41Z",
      "side": 1,
      "message": "I think I probably don\u0027t understand why you\u0027re needing to add fileno(); who is calling fileno()?\n\nI guess I could see why if someone called sys.stderr.fileno() and then wrote to it directly, they\u0027d bypass sys.stderr.write(), which would be bad.\n\nIs the problem that the subprocess is ending up using the underlying fds and so we\u0027re not able to shut it up?",
      "parentUuid": "8286c931_c31e5ced",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6adfbc2_d3b15cc5",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 291,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-18T01:27:49Z",
      "side": 1,
      "message": "The subprocess module is calling the fileno() function. So I believe it is using the file descriptors to write to stdout and stderr. I tried passing the _TeedStream instances as the stdout and stderr named arguments when _TeedStream was a sub class of io.StringIO, however subprocess.call would throw an exception because io.StringIO does not implement fileno. I believe the problem is that even though we monkey patch sys.stdout and sys.stderr when we call host\u0027s capture_output function, processes spawned by subprocess.call are still using the original stdout and stderr streams to write to the terminal. Therefore the child processes output is not being captured. The streams used by  subprocess.call could have been set when the subprocess module was imported, and therefore would not change when sys.stdout and sys.stderr are monkey patched.",
      "parentUuid": "bae06220_e0a78677",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "101c53be_3af9a358",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 299,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-17T01:22:18Z",
      "side": 1,
      "message": "This does the wrong thing, I think. shouldn\u0027t this be self.stream.isatty()?",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8d5c8ba_1b8038bc",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 299,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-17T01:47:41Z",
      "side": 1,
      "message": "Same answer as above. self.output_buffer.isatty() will return the isatty() result for the file object.",
      "parentUuid": "101c53be_3af9a358",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9edf00a7_a86802d7",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 299,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-18T00:35:41Z",
      "side": 1,
      "message": "I can see how this might have the same properties as the above, but this\u0027ll always return False, and that seems like it\u0027ll break other things, like .capture_output(divert\u003dFalse) will no longer act as if sys.stdout is a terminal.",
      "parentUuid": "a8d5c8ba_1b8038bc",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d996b2f1_b3c4fd91",
        "filename": "third_party/typ/typ/host.py",
        "patchSetId": 10
      },
      "lineNbr": 299,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-18T01:27:49Z",
      "side": 1,
      "message": "Ok, maybe I can make this class a subclass of io.StringIO like before and it will inherit the isatty function from that class and therefore have the same behavior from before this CL.",
      "parentUuid": "9edf00a7_a86802d7",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0ff7e31_f2b1df79",
        "filename": "third_party/typ/typ/tests/host_test.py",
        "patchSetId": 10
      },
      "lineNbr": 221,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-17T01:22:18Z",
      "side": 1,
      "message": "Nit: spelling: s/Recieve/Receive/.\n\nAlso, by convention I usually have classes that subclass from TestCase be called TestSomethingOrOther ... arguably the Test part is redundant, but I wouldn\u0027t stray from that convention in this CL (we could talk about doing it in a separate CL).",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86d960eb_92965681",
        "filename": "third_party/typ/typ/tests/host_test.py",
        "patchSetId": 10
      },
      "lineNbr": 221,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-17T01:47:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0ff7e31_f2b1df79",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f9b87cc_cc16c00c",
        "filename": "third_party/typ/typ/tests/host_test.py",
        "patchSetId": 10
      },
      "lineNbr": 228,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-17T01:22:18Z",
      "side": 1,
      "message": "If you run typ against these tests, does typ log these messages by default? Or only if you pass `-vv`?",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b199ee17_ec7d4fcb",
        "filename": "third_party/typ/typ/tests/host_test.py",
        "patchSetId": 10
      },
      "lineNbr": 228,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-17T01:47:41Z",
      "side": 1,
      "message": "Typ only logs this output by default if it is a failing test. If it is passing and you want to see output from stdout and stderr, then you need to pass in atleast -vv.",
      "parentUuid": "0f9b87cc_cc16c00c",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c28a1d19_81359f1c",
        "filename": "third_party/typ/typ/tests/host_test.py",
        "patchSetId": 10
      },
      "lineNbr": 235,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2019-05-18T00:35:41Z",
      "side": 1,
      "message": "I think I have the same questions about this that I do about the browser_test_runner change, except hopefully I at least understand that this is being called in-process from typ, so the comments about monkey-patching should definitely apply here (if I\u0027m right about subprocess having its own references to sys.stdout/sys.stderr).",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12750caf_5eaddbd9",
        "filename": "third_party/typ/typ/tests/host_test.py",
        "patchSetId": 10
      },
      "lineNbr": 235,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-05-18T01:27:49Z",
      "side": 1,
      "message": "Yes this is being called in the same process as Typ is running. The issue is the subprocess module maintains the original sys.stdout and sys.stderr streams instead of using the monkey patched ones.",
      "parentUuid": "c28a1d19_81359f1c",
      "revId": "eb97418e87931036263d524765f1959d62a1b782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}