{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4e459be6_78cab595",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 10
      },
      "lineNbr": 636,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2022-09-17T00:16:07Z",
      "side": 1,
      "message": "IIUIC, you are trying to get attributes from all globs that match a test name instead of the longest glob. That violates the rule we get expectations from the longest matching prefix.",
      "revId": "f4516746a62d7e835ed3b6843c1f31af80a86353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f0ade84_4959a154",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 10
      },
      "lineNbr": 636,
      "author": {
        "id": 1524993
      },
      "writtenOn": "2022-09-17T00:24:08Z",
      "side": 1,
      "message": "Yes, that is the whole point of this CL. The point is to differentiate results from attributes, so that they can be handled differently. Results semantics do not change, but now attributes will be bubbled down through globs when they are only attribute tagged.",
      "parentUuid": "4e459be6_78cab595",
      "revId": "f4516746a62d7e835ed3b6843c1f31af80a86353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d38b1fd9_18284506",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 10
      },
      "lineNbr": 636,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2022-09-19T15:27:17Z",
      "side": 1,
      "message": "I don\u0027t think we should make exceptions to the rule for attributes. If you want to set attributes for tests then you should write the longest matching glob for the tests you want to apply the attributes to. Or you should go through each test expectation individually and add the attribute. If those two options don\u0027t work then you should modify the test harness to make a longer timeout and extra retries for tests that match a certain criteria.",
      "parentUuid": "9f0ade84_4959a154",
      "revId": "f4516746a62d7e835ed3b6843c1f31af80a86353",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "f4516746a62d7e835ed3b6843c1f31af80a86353",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "f4516746a62d7e835ed3b6843c1f31af80a86353",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f4516746a62d7e835ed3b6843c1f31af80a86353",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f4516746a62d7e835ed3b6843c1f31af80a86353",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}