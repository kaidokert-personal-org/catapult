{
  "comments": [
    {
      "key": {
        "uuid": "954438db_24533896",
        "filename": "telemetry/telemetry/story/story_filter.py",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1149061
      },
      "writtenOn": "2019-04-18T16:05:30Z",
      "side": 1,
      "message": "This type of change is really risky since something in the caller may depend on the storyset not being modified. This is an API change.\n\nI agree that the way this is currently written is not pretty. But my bet is that someone wrote it this way for a real reason, otherwise why would they do this?",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 68
      },
      "revId": "dfe6132838261b0bdba2c2be37e44da26596b502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96b7dd21_977c4427",
        "filename": "telemetry/telemetry/story/story_filter.py",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-04-23T11:47:13Z",
      "side": 1,
      "message": "Two things change here with respect to API:\n1) Explicit behavior of FilterStorySet method.\n2) Implicit assumption that story_runner.Run method does not alter story_set.\n\nAs for the first, I did a code search before uploading the CL, and made sure that this function is only used in story_runner.py.\n\nAs for the second, story_runner.Run was marked deprecated in the previous CL, and our next step would be to completely remove it. For now it is only being used in several tests, so as long as these tests pass, I see no problem in changing its behavior.\n\nI agree that making API changes is dangerous, and should not be done without a proper reason. But on the other hand, in Python pretty much everything is public interface, either explicitly or implicitly, so we can\u0027t hope to make any refactoring without changes to it.\n\nThis particular change is necessary because the main idea of my refactoring is to do all the preparation (including story filtering) before actually running the stories. We can\u0027t make a copy of a StorySet object because it can actually be an instance of some subclass, with additional fields. So we have to make changes to it in place.",
      "parentUuid": "954438db_24533896",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 68
      },
      "revId": "dfe6132838261b0bdba2c2be37e44da26596b502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34988d94_ed281e83",
        "filename": "telemetry/telemetry/story/story_filter.py",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1149061
      },
      "writtenOn": "2019-04-23T18:08:52Z",
      "side": 1,
      "message": "I agree that making changes to the API is a reasonable thing to do. I was reacting to this changelist being used to fix crbug.com/953784. When possible, it is best to fix by reverting the change that broke things rather than by adding more API changes on top.\n\nI wonder if it would be better to have a FilteredStorySet class that is a wrapper of a StorySet. It would implement the same API, but it would save a list of stories to return from the stories property. It could provide both filtering and sorting functionality. That would allow us to remove the \"RemoveStory\" function from StorySet and then we would not be modifying a StorySet. In general, it is risky to pass around objects and modify them in a large codebase like Telemetry. I think this might be safer.",
      "parentUuid": "96b7dd21_977c4427",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 68
      },
      "revId": "dfe6132838261b0bdba2c2be37e44da26596b502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b35adb85_91f43b67",
        "filename": "telemetry/telemetry/story/story_filter.py",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-04-24T12:34:20Z",
      "side": 1,
      "message": "I see your point about modifying objects. I\u0027ve run into issues with some telemetry methods modifying the FinderOptions object passed to them, and I totally agree this can be a problem.\n\nI can\u0027t see how introducing a new class will help though. FilteredStorySet will still be an object to pass around and modify. But having two different classes for the same thing will add unnecessary complexity, because some methods will expect StorySet and some others only FilteredStorySet etc.\n\nI believe the proper way to fix this is to add a clone() method to the StorySet and override it in its subclasses. Then we can implement a filter method that returns a new object. I can file a bug about this and fix it later, after telemetry moves to chromium (because it will be much easier then, without multi-sided patches).",
      "parentUuid": "34988d94_ed281e83",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 68
      },
      "revId": "dfe6132838261b0bdba2c2be37e44da26596b502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd2de45a_68967e0e",
        "filename": "telemetry/telemetry/story/story_filter.py",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1149061
      },
      "writtenOn": "2019-04-23T18:08:52Z",
      "side": 1,
      "message": "Why not \n\nstory_set.stories \u003d included_stories\n\n?",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 43
      },
      "revId": "dfe6132838261b0bdba2c2be37e44da26596b502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d59bd48_0ac5b4b9",
        "filename": "telemetry/telemetry/story/story_filter.py",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-04-24T12:34:20Z",
      "side": 1,
      "message": "You are right, ordinary assignment is enough here. Thanks!",
      "parentUuid": "fd2de45a_68967e0e",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 43
      },
      "revId": "dfe6132838261b0bdba2c2be37e44da26596b502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba0748e7_9e82732e",
        "filename": "telemetry/telemetry/story/story_filter.py",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1328067
      },
      "writtenOn": "2019-04-24T12:48:58Z",
      "side": 1,
      "message": "No, actually, it\u0027s not enough, because stories is a property method.",
      "parentUuid": "9d59bd48_0ac5b4b9",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 43
      },
      "revId": "dfe6132838261b0bdba2c2be37e44da26596b502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}