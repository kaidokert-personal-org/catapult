{
  "comments": [
    {
      "key": {
        "uuid": "1ef96e11_1184d083",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-06-19T16:07:45Z",
      "side": 1,
      "message": "This is essentially an alias, and used only once. It would be easier to read this code _without_ such alias - less searches, less worry of it being overridden and even less lines of code.",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 31
      },
      "revId": "b2c09e865a83641cba4b26b0a83b6bb8fca76cb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c76e0a30_1e303eae",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-06-20T08:50:21Z",
      "side": 1,
      "message": "Good point. Done.",
      "parentUuid": "1ef96e11_1184d083",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 31
      },
      "revId": "b2c09e865a83641cba4b26b0a83b6bb8fca76cb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88d7db1f_270d2dae",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-06-19T16:07:45Z",
      "side": 1,
      "message": "If these workarounds work, I see no problem living with them for a few weeks, thank you!",
      "range": {
        "startLine": 78,
        "startChar": 10,
        "endLine": 78,
        "endChar": 28
      },
      "revId": "b2c09e865a83641cba4b26b0a83b6bb8fca76cb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f49563e_a6fe2563",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-06-19T16:07:45Z",
      "side": 1,
      "message": "Perhaps a derail, but I found there is something I did not ask before, and it left me guessing:\n\nManaging SharedAndroidStoryState._browser looks to me more complicated than necessary. Is there a fundamental need in having it? Is it because _possible_browser.FindExistingBrowser() can be done only once (or it is too slow to call multiple times)?\n\nBy only looking at this class one needs some guessing what the _browser lifetime assumptions are of the caller. When such state travels from one loop iteration to another (in Run()) the leak of the abstraction looks heavier than the benefits the abstraction provides. I think a simpler flow would be to do \u0027if browser: self.CloseBrowser(browser)\u0027 in AndroidGoFooStory.Run(), which would make the data flow explicit, and would remove the \u0027self._browser is not None\u0027 and such sprinkled in SharedAndroidStoryState.",
      "range": {
        "startLine": 83,
        "startChar": 8,
        "endLine": 83,
        "endChar": 28
      },
      "revId": "b2c09e865a83641cba4b26b0a83b6bb8fca76cb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "630f7836_39de2def",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-06-20T08:50:21Z",
      "side": 1,
      "message": "Yes, I agree, I also thought about this. There isn\u0027t really much point for the shared state to know anything about the browser or manage it\u0027s lifetime. The story.Run should hold and manage it\u0027s state.\n\nThe only reason why I kept it there was due to \"DumpStateUponFailure\" which is called by the test runner when things go wrong to, among other things, give the browser a chance to dump debug info which might be useful when diagnosing failures. But I couldn\u0027t easily come up with an alternative for that. Any ideas or suggestions?",
      "parentUuid": "3f49563e_a6fe2563",
      "range": {
        "startLine": 83,
        "startChar": 8,
        "endLine": 83,
        "endChar": 28
      },
      "revId": "b2c09e865a83641cba4b26b0a83b6bb8fca76cb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ac1ebd_9dcdb6d4",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-06-20T13:17:24Z",
      "side": 1,
      "message": "hmm, handling failures is important indeed!\n\nI did not know that Browser has a lot to print on failures. I find story_runner._RunStoryAndProcessErrorIfNeeded() complicated in one regard: after some failure is flying up the stack the story runner passes control down to those components (where the failure originates from) to print more information. This control flow is non-intuitive to me and as we see requires plumbing the errors in two ways. A one-way plumbing could be to allow layers down the callstack to print enough error messages and allow the story runner (i.e. up the callstack) to only wrap the higher levels.\n\nThough I realize that this refactoring may take a while ..\n\nOne way could be to give up on generalizing multiple browsers in Telemetry and allow AndroidGoFooStory to catch/print/raise exceptions related to the Browser instance. I find it less complicated because the handling of the object exceptional state happens very closely to the places where the object is actively used, without 2-way plumbing.\n\nOne downside of this approach would be that to avoid duplication of this handling in various stories, we may want to mandate using an utility to wrap a browser in try+catch as soon as we get a ref to it. It could be as much as 2 lines with a contextmanager or a longer chain of inheritance from Story. I think initially it would be better to leave it to this benchmark to handle, and then later once there is a desire to duplicate this Browser failure printing, we can figure out what\u0027s the most usable API there is.\n\nP.S: I\u0027ve seen a few failures, and those printouts from browser were not very useful to me, especially because it was not clear where they are flying from. I guess I would appreciate clearer layering ;)",
      "parentUuid": "630f7836_39de2def",
      "range": {
        "startLine": 83,
        "startChar": 8,
        "endLine": 83,
        "endChar": 28
      },
      "revId": "b2c09e865a83641cba4b26b0a83b6bb8fca76cb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f04c1831_a7d559e4",
        "filename": "telemetry/examples/benchmarks/android_go_benchmark.py",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-06-20T15:20:00Z",
      "side": 1,
      "message": "I agree with pretty much everything you said. In particular:\n\n1. Errors flying up and down the control flow is indeed messy; this causes e.g. errors sometimes showing up out of order in the logs, which can be very confusing.\n\n2. Refactoring this for the whole of Telemetry will take a while.\n\nAnyway, as we have control over the shared state here, it\u0027s a good time to try out ideas. Have a look at the latest patch.\n\nIt\u0027s still a bit awkward because of the bugs in crbug.com/854212, but at least all of the awkwardness is now encapsulated in two single methods.\n\nLet me know what you think.",
      "parentUuid": "e6ac1ebd_9dcdb6d4",
      "range": {
        "startLine": 83,
        "startChar": 8,
        "endLine": 83,
        "endChar": 28
      },
      "revId": "b2c09e865a83641cba4b26b0a83b6bb8fca76cb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}