# Copyright 2019 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  extra_asmflags = []
  extra_cflags = []
  extra_cflags_c = []
  extra_cflags_cc = []
  extra_ldflags = []
  use_PIC = true

  malloc = ""
  xcode_sysroot = ""
}

config("default") {
  asmflags = []
  cflags = []
  cflags_c = []
  cflags_cc = []
  defines = []
  ldflags = []
  libs = []

  if (werror) {
    cflags += [ "-Werror" ]
  }

  if (use_PIC) {
    cflags += [ "-fPIC" ]
  }
  cflags += [ "-fstrict-aliasing" ]
  cflags_cc += [ "-std=c++17" ]

  # The main idea is to slim the exported API, but these flags also improve link time on Mac.
  # These would make stack traces worse on Linux, so we don't just set them willy-nilly.
  if (is_component_build || is_ios || is_mac) {
    cflags += [ "-fvisibility=hidden" ]
    cflags_cc += [ "-fvisibility-inlines-hidden" ]
  }


  if (current_cpu == "arm") {
    cflags += [
      "-march=armv7-a",
      "-mfpu=neon",
      "-mthumb",
    ]
  } else if (current_cpu == "loongson3a") {
    asmflags += [ "-march=loongson3a" ]
    cflags += [
      "-march=loongson3a",

      # Causes an internal compiler error.
      "-DSKCMS_PORTABLE",
    ]
  } else if (current_cpu == "mips64el") {
    asmflags += [ "-march=mips64" ]
    cflags += [ "-march=mips64" ]
  } else if (current_cpu == "x86" && !is_win) {
    asmflags += [ "-m32" ]
    cflags += [
      "-m32",
      "-msse2",
      "-mfpmath=sse",
    ]
    ldflags += [ "-m32" ]
  }

  if (malloc != "" && !is_win) {
    cflags += [
      "-fno-builtin-malloc",
      "-fno-builtin-calloc",
      "-fno-builtin-realloc",
      "-fno-builtin-free",
    ]
    libs += [ malloc ]
  }

  if (is_linux) {
    libs += [ "pthread" ]
    if (is_debug && sanitize == "") {
      defines += [ "_GLIBCXX_DEBUG" ]
    }
  }
}

config("no_exceptions") {
}

config("warnings") {
  cflags = []
  cflags_cc = []
  cflags_objc = []
  cflags_objcc = []
  cflags += [
    "-Wall",
    "-Wextra",
    "-Winit-self",
    "-Wpointer-arith",
    "-Wsign-compare",
    "-Wvla",
    "-Wno-deprecated-declarations",
    "-Wno-maybe-uninitialized",
  ]
  cflags_cc += [
    "-Wnon-virtual-dtor",
    "-Wno-noexcept-type",

    # TODO(dogben): The following are new between GCC 6 (stretch) and GCC 8 (buster); they should
    # all be investigated.
    "-Wno-array-bounds",
    "-Wno-class-memaccess",
    "-Wno-stringop-overflow",
    "-Wno-restrict",
    "-Wno-stringop-truncation",
    "-Wno-sizeof-pointer-memaccess",
    "-Wno-parentheses",
    "-Wno-format-truncation",
  ]

  if (is_clang) {
    cflags += [
      "-fcolor-diagnostics",
      "-Weverything",
      "-Wno-unknown-warning-option",  # Let older Clangs ignore newer Clangs' warnings.
    ]

    # Shouldn't be necessary for local builds. With distributed Windows builds, files may lose
    # their case during copy, causing case-sensitivity mismatch on remote machines.
    cflags += [
      "-Wno-nonportable-include-path",
      "-Wno-nonportable-system-include-path",
    ]

    # TODO: These would all be really great warnings to turn on.
    cflags += [
      "-Wno-cast-align",
      "-Wno-cast-qual",
      "-Wno-conversion",
      "-Wno-disabled-macro-expansion",
      "-Wno-documentation",
      "-Wno-documentation-unknown-command",
      "-Wno-double-promotion",
      "-Wno-exit-time-destructors",  # TODO: OK outside libskia
      "-Wno-float-equal",
      "-Wno-format-nonliteral",
      "-Wno-global-constructors",  # TODO: OK outside libskia
      "-Wno-missing-prototypes",
      "-Wno-missing-variable-declarations",
      "-Wno-pedantic",
      "-Wno-reserved-id-macro",
      "-Wno-shadow",
      "-Wno-shift-sign-overflow",
      "-Wno-signed-enum-bitfield",
      "-Wno-switch-enum",
      "-Wno-undef",
      "-Wno-unreachable-code",
      "-Wno-unreachable-code-break",
      "-Wno-unreachable-code-return",
      "-Wno-unused-macros",
      "-Wno-unused-member-function",
      "-Wno-unused-template",
      "-Wno-zero-as-null-pointer-constant",
      "-Wno-thread-safety-negative",
    ]
    cflags_cc += [
      "-Wno-abstract-vbase-init",
      "-Wno-weak-vtables",
    ]

    # We are unlikely to want to fix these.
    cflags += [
      "-Wno-bad-function-cast",
      "-Wno-covered-switch-default",
      "-Wno-deprecated",
      "-Wno-missing-noreturn",
      "-Wno-old-style-cast",
      "-Wno-padded",
      "-Wno-newline-eof",
    ]
    cflags_cc += [
      "-Wno-c++98-compat",
      "-Wno-c++98-compat-pedantic",
      "-Wno-undefined-func-template",
      "-Wno-return-std-move-in-c++11",
    ]
    cflags_objc += [
      "-Wno-direct-ivar-access",
      "-Wno-objc-interface-ivars",
    ]
    cflags_objcc += [
      "-Wno-direct-ivar-access",
      "-Wno-objcc-interface-ivars",
    ]
  }

}
config("warnings_except_public_headers") {
  if (!is_win || is_clang) {
    cflags = [ "-Wno-unused-parameter" ]
  }
}

config("extra_flags") {
  asmflags = extra_asmflags
  cflags = extra_cflags
  cflags_c = extra_cflags_c
  cflags_cc = extra_cflags_cc
  ldflags = extra_ldflags
}

config("debug_symbols") {
   cflags = [ "-g" ]
}

config("no_rtti") {
  cflags_cc = [ "-fno-rtti" ]
}

config("optimize") {
  cflags = [ "-O3" ]
  cflags += [
    "-fdata-sections",
    "-ffunction-sections",
  ]
  ldflags = [ "-Wl,--gc-sections" ]

  if (target_cpu == "wasm") {
    # The compiler asks us to add an optimization flag to both cflags
    # and ldflags to cut down on the local variables,
    # for performance reasons.
    # The "linking" step is the conversion to javascript.
    ldflags += [ "-O3" ]
  }
}

config("NDEBUG") {
  defines = [ "NDEBUG" ]
}

config("executable") {
  if (is_linux) {
    ldflags = [
      "-rdynamic",
      "-Wl,-rpath,\$ORIGIN",
    ]
  }
}
