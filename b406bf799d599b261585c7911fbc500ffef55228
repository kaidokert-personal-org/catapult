{
  "comments": [
    {
      "key": {
        "uuid": "fb20b3e2_09e2ad1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2020-07-08T18:18:38Z",
      "side": 1,
      "message": "PTAL",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bad1d1c_87da280e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2020-07-09T21:23:15Z",
      "side": 1,
      "message": "Ping on this.",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb826b18_8b599f7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2020-07-10T05:17:06Z",
      "side": 1,
      "message": "This replicates stuff that both chrome and cros infra code does. \n\nThe local run case doesn\u0027t seem that compelling, since devs can just look at the files on the device, right?\n\n+Ben in case he has an opinion on this.",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d888636d_0383dfaa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1170419
      },
      "writtenOn": "2020-07-10T16:03:47Z",
      "side": 1,
      "message": "Yeah, we already have a mechanism in place that\u0027s capturing chrome \u0026 system logs and adding them to a task\u0027s output.\n\nWhat\u0027s this accomplishing that that isn\u0027t?",
      "parentUuid": "bb826b18_8b599f7b",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfa3b780_2d0283e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2020-07-10T18:17:41Z",
      "side": 1,
      "message": "It plays nice ResultDB, which IIRC requires that files be captured as an artifact rather than just be in the isolated outdir (i.e. it\u0027s also listed in output.json) in order to show up in the ResultDB UI.\n\n+nodir to confirm that that\u0027s actually the case.",
      "parentUuid": "d888636d_0383dfaa",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d2434fa_541fcb24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-07-14T05:29:53Z",
      "side": 1,
      "message": "I have no context of the files changed in this CL, so I can talk only about ResultDB.\n\nFiles, including logs, can be reported to ResultDB as artifacts. In that case, they will show up in the Milo build page, along with steps. There are two kinds of artifacts: 1) attached to a particular test result 2) attached to the invocation (which is a part of the test results). Currently UI supports only (1), and will support (2) when we have a use case. I am not which of the two is applicable here.\n\nUploading an artifact to ResultDB is relatively flexible: it does not depend on whether the file is in ISOLATED_OUT_DIR or not. One just points to a file declares it as an artifact - the surrounding infra will take care of uploading. The \"points to a file\" is done via a *local* HTTP request, but the request does not contain the file content - only the filename. Read more in go/result-sink. Today, it supports uploading only (1), that is artifacts attached to test results. We can consider prioritizing (2) if there is interest.",
      "parentUuid": "bfa3b780_2d0283e2",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52cbccfd_3c4f215f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2020-07-14T21:00:22Z",
      "side": 1,
      "message": "Thanks Nodir! That\u0027s more or less what I thought I remembered.\n\nAssuming we want these logs to show up in Milo for easier consumption, I think we have two options:\n\n1. Continue with this approach (failed tests report relevant logs as artifacts)\n2. Update the CrOS test runner to report the logs as artifacts instead of just copying them into a directory. I think this would require implementing artifact support for the test runner (unless it can re-use Telemetry\u0027s?), as well as supporting invocation-level artifacts in ResultDB (Nodir\u0027s [2]).\n\nI don\u0027t have a super strong preference for the long term, although the first will definitely be easier in the short term.",
      "parentUuid": "9d2434fa_541fcb24",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56552858_868b61c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2020-07-15T22:34:02Z",
      "side": 1,
      "message": "Ping on input from bpastene/achuith.",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2ecac66_e6e8a88c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1170419
      },
      "writtenOn": "2020-07-15T23:08:39Z",
      "side": 1,
      "message": "I\u0027m fine with it, especially since this seems fairly lightweight. (I assume there\u0027s already plumbing somewhere in telemetry that takes \"artifacts\" for a given test and tags it into rdb?)\n\nAnd if this proves sufficient for debugging purposes, we can remove the bulk \u0027/var/log/\u0027 dump that we do into the outdir for tasks.",
      "parentUuid": "56552858_868b61c9",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dde5c6d_dd0fe422",
        "filename": "telemetry/telemetry/internal/backends/chrome/cros_browser_backend.py",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2020-07-10T05:17:06Z",
      "side": 1,
      "message": "can you create a common function for browser and ui logs",
      "revId": "b406bf799d599b261585c7911fbc500ffef55228",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}