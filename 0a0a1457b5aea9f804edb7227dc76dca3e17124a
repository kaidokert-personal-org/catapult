{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eea510da_ac129c5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2024-06-17T23:32:56Z",
      "side": 1,
      "message": "If we\u0027re going to make spaces work in test names for GPU tests, is there really still a need for the URI encoding for Blink tests? Could we just allow spaces in the Blink test names as well?\n\nI think in both cases you\u0027re going to have to escape \u0027]\u0027, because that\u0027ll be the delimiter that indicates that you\u0027re at the end of the test name, but apart from that, I\u0027m not sure if I know of an argument for requiring encoding for the Blink tests.\n\nI assume things like TestHaus will have to (and probably already do) support spaces and other syntactic characters in test names regardless ...",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9f7cecb_41d9004a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-06-17T23:49:42Z",
      "side": 1,
      "message": "\u003e If we\u0027re going to make spaces work in test names for GPU tests, is there really still a need for the URI encoding for Blink tests?\n\nWe don\u0027t need to support spaces for GPU tests, we just need to avoid the automatic encoding/decoding that\u0027s done right now since it doesn\u0027t play nice with some GPU test names which include URI-encoded characters, but that don\u0027t expect to be decoded.\n\nAs a concrete example from the associated bug, `webgpu:shader,execution,expression,call,builtin,workgroupUniformLoad:types:type\u003d\"array%3Cu32,%204%3E\";wgsize\u003d[16,16]` was having its `%20` automatically decoded, which we don\u0027t want.\n\nI did discuss the possibility of supporting spaces directly with Weizhong, but we came to the conclusion that there wasn\u0027t a way to do that without having *some* sort of delimiter.\n\nSimply replacing the `\\S+` in the regex for the test name with `.+` (resulting in `^(?:((?:crbug.com/|skbug.com/|webkit.org/|b/)(?:[^/]*/)?\\d+\\s)*)(?:\\[ (.+) \\] )?(.+) \\[ ([^\\[.]+) \\](\\s+#.*)?$` for the full regex) did mostly work, but it mis-parses lines that have comments specifically formatted to look like expected results, e.g.\n\n```\ncrbug.com/123 Some-test.html [ Timeout ] # [ Failure ]\n```\n\nThat doesn\u0027t seem like too bad of a tradeoff IMO since it seems very unlikely that a user would do that, but it is an unhandled edge case.\n\n\u003e I think in both cases you\u0027re going to have to escape \u0027]\u0027, because that\u0027ll be the delimiter that indicates that you\u0027re at the end of the test name\n\nThat would cause issues for some GPU tests since they include `[` and `]` in their names.",
      "parentUuid": "eea510da_ac129c5c",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8877c4b_d4c8fa3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2024-06-18T20:32:43Z",
      "side": 1,
      "message": "Is ` [ ` safe as an ending delimiter for GPU tests?\n\nIf so, I think you could write `((?:[^ ]| [^\\[][^ ]| \\[[^ ])+)` for the test name if you adjusted the following string to not start with `\\[`.\n\nBut I didn\u0027t actually test that and I feel dirty writing it. I am no fan of complicated regexes and this one is already way too complicated. \n\nBut, if a GPU test might include ` [ ` then you\u0027re probably out of luck and need some encoding mechanism for it.",
      "parentUuid": "d9f7cecb_41d9004a",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "325cd4f7_b1f8b24d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-06-18T20:46:25Z",
      "side": 1,
      "message": "GPU tests can include `[`.",
      "parentUuid": "d8877c4b_d4c8fa3c",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "440ecc4f_0db5b644",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2024-06-18T21:45:23Z",
      "side": 1,
      "message": "\u003e GPU tests can include `[`.\n\nYes, you said that. This may not have been obvious from reading the comment, but I wrote space-[-space, i.e., \"\\x20[\\x20\". (Which I don\u0027t think is what you were replying with)?\n\nI\u0027m not clear from the bug: will the GPU test names be encoded somehow? Or have things been working before but that was because you weren\u0027t tripping over some character in a test name?",
      "parentUuid": "325cd4f7_b1f8b24d",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a8b157d_74098c20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-06-18T21:50:57Z",
      "side": 1,
      "message": "Ah, yeah, I completely missed the spaces.\n\nAFAIK there shouldn\u0027t be any cases of \" [ \" in GPU tests. I\u0027ll keep that in mind for the future, although I think a hook-based approach is fine for now.\n\n\u003e will the GPU test names be encoded somehow? Or have things been working before but that was because you weren\u0027t tripping over some character in a test name?\n\nWe don\u0027t plan on using any encoding. The issue has been around for a while, but we never ran into it because we never added any expectations for tests with `%20` in the name until recently.",
      "parentUuid": "440ecc4f_0db5b644",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55adf816_889b874e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2024-06-18T22:01:29Z",
      "side": 1,
      "message": "Okay, maybe I\u0027m confused about this patch then. If you\u0027re not going to encode the GPU tests and they have spaces in the name, won\u0027t you need to change the regexes that actually parse the line?",
      "parentUuid": "5a8b157d_74098c20",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54478205_1be9a034",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-06-18T22:09:36Z",
      "side": 1,
      "message": "GPU tests don\u0027t have actual spaces in them. A handful of them have URI-encoded spaces in them (`%20`), but we don\u0027t want those to be interpreted as actual spaces. When typ parses an expectation, GPU tests want it to end up with a string that\u0027s identical to what\u0027s in the file.\n\nThe purpose of this patch is so that we can move the Blink-specific behavior (automatically decoding/encoding `%20` to space) out of typ and have Blink provide hooks to do that instead.",
      "parentUuid": "55adf816_889b874e",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "414e6615_6e65e321",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2024-06-18T23:16:55Z",
      "side": 1,
      "message": "gotcha.",
      "parentUuid": "54478205_1be9a034",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70a4289e_06a83213",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2024-06-18T20:32:43Z",
      "side": 1,
      "message": "Should this be `encode_func or uri_encode_spaces`?",
      "fixSuggestions": [
        {
          "fixId": "63563093_fd573f0f",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "third_party/typ/typ/expectations_parser.py",
              "range": {
                "startLine": 532,
                "startChar": 0,
                "endLine": 533,
                "endChar": 0
              },
              "replacement": "        self._encode_func \u003d encode_func or uri_encode_spaces\n"
            }
          ]
        }
      ],
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c34b4ac8_f73c5333",
        "filename": "third_party/typ/typ/expectations_parser.py",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-06-18T20:46:25Z",
      "side": 1,
      "message": "`self._encode_func` isn\u0027t called directly in this class, and all places where it can be called in other classes has a default set already. This will all be going away shortly once Blink is moved onto the hooks, anyways, as we\u0027ll just use the presence of `None` to mean do nothing.",
      "parentUuid": "70a4289e_06a83213",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61d67de7_a76644ca",
        "filename": "third_party/typ/typ/tests/expectations_parser_test.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2024-06-18T20:32:43Z",
      "side": 1,
      "message": "I wouldn\u0027t think testing for equality between two identical calls is terribly interesting?",
      "fixSuggestions": [
        {
          "fixId": "0f0bcd5b_a1d575d1",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "third_party/typ/typ/tests/expectations_parser_test.py",
              "range": {
                "startLine": 39,
                "startChar": 0,
                "endLine": 41,
                "endChar": 0
              },
              "replacement": "        e \u003d self.create_expectation_with_values(reason\u003d\u0027crbug.com/2345\u0027)\n        other \u003d self.create_expectation_with_values(reason\u003d\u0027crbug.com/2345\u0027)\n"
            },
            {
              "path": "third_party/typ/typ/tests/expectations_parser_test.py",
              "range": {
                "startLine": 43,
                "startChar": 0,
                "endLine": 46,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3190423b_d06b8f92",
        "filename": "third_party/typ/typ/tests/expectations_parser_test.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-06-18T20:46:25Z",
      "side": 1,
      "message": "I do it to establish that the following `assertNotEqual` calls pass due only to the one argument that\u0027s changing. It\u0027s possible that the identical calls could return non-equal values, e.g. if the default `encode_func` was `lambda x: x` - while each expectation has functionally the same `encode_func`, the actual reference for each one would be unique.",
      "parentUuid": "61d67de7_a76644ca",
      "revId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0a0a1457b5aea9f804edb7227dc76dca3e17124a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}