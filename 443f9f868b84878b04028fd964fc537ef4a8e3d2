{
  "comments": [
    {
      "key": {
        "uuid": "93cbf7dc_75b48e51",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2018-03-26T14:27:57Z",
      "side": 1,
      "message": "Please add a tracking bug for the change w/\n\nBUG\u003dchromium:\u003cmonorail_bug_number\u003e",
      "revId": "443f9f868b84878b04028fd964fc537ef4a8e3d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "283b096e_ab964ba2",
        "filename": "telemetry/telemetry/internal/browser/browser_options.py",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2018-03-26T14:27:57Z",
      "side": 1,
      "message": "These are pretty substantial changes to the way that tracing agents work and I think that, realistically, we should have a VC and a will need a design sketch for any changes to the tracing agent API that are more substantial than just adding a new tracing agent.",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 154,
        "endChar": 34
      },
      "revId": "443f9f868b84878b04028fd964fc537ef4a8e3d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85089125_1150fc2a",
        "filename": "telemetry/telemetry/internal/platform/tracing_agent/simpleperf_tracing_agent.py",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2018-03-26T14:27:57Z",
      "side": 1,
      "message": "Is the problem that the simpleperf tracing agent can\u0027t be implemented in terms of the tracing agent API that\u0027s currently available? If that\u0027s the case, I think it makes sense for us to have a VC to learn more about the challenges of implementing the new API. If that\u0027s not the case, but rather then tracing agent API features are required to make the simpleperf tracing agent more useful, it probably makes sense for us to start with what can be done in the existing tracing agent API and build up from there, if you think that initial version will still be useful for you.\n\nOverall, I\u0027m really concerned that this CL makes a number of substantial changes to some pretty central Telemetry objects. There are places in Telemetry where we try to maintain a strict separation of concerns and, if we decided that these new features are worth implementing, we\u0027re going to make sure that we can do so without violating those separations.",
      "revId": "443f9f868b84878b04028fd964fc537ef4a8e3d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f736d94_e3c0eaef",
        "filename": "telemetry/telemetry/internal/platform/tracing_agent/simpleperf_tracing_agent.py",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001706
      },
      "writtenOn": "2018-03-26T16:54:37Z",
      "side": 1,
      "message": "This is an important and useful feature that has led to uncomfortable levels of excitement among my coworkers and me.  The renderer process is frequently cpu-bound and full of hot paths, recursion, and deep call stacks.  It is nearly impossible to do performance work on this code without profiling data.  Regular chrome tracing data is not granular enough for this work.\n\nCurrently, we generate profiling data in a ad-hoc manner, using manual interactions with a live browser.  However, we often find that our profiling data doesn\u0027t match up at all with perf test regressions, leaving us groping around in the dark trying to root-cause the regression.\n\nAlso, performance on Android can be very different from performance on desktop; so cpu profiles generated on desktop don\u0027t always help us find the source of a mobile-only perf regression.  Over the years, blink engineers have made many attempts to generate profiling data of the renderer process on Android, with limited success.  Currently, there is no official or sanctioned tool or flow to profile Android.  This patch produces what is mostly likely the highest-quality profiling data on the renderer process we have ever seen on Android.  In particular, because it focuses the sampling period on page navigation and/or interactions, the resulting profile has very little noise.  And because it runs on an actual non-interactive perf test, it correlates very well with perf benchmark results.\n\nOne way or another, for the benefit of humanity, I am determined to land this feature.  I\u0027ll schedule a VC.",
      "parentUuid": "85089125_1150fc2a",
      "revId": "443f9f868b84878b04028fd964fc537ef4a8e3d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7c1dcf4_0e411cc3",
        "filename": "telemetry/telemetry/internal/platform/tracing_agent/simpleperf_tracing_agent.py",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1128909
      },
      "writtenOn": "2018-03-26T14:27:57Z",
      "side": 1,
      "message": "Note that the correct Python style for internal methods in Catapult is _StartTracing, not _start_tracing",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 20
      },
      "revId": "443f9f868b84878b04028fd964fc537ef4a8e3d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}