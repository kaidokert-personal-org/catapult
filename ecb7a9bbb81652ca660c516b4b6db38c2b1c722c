{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1e1b939f_adee65f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2020-11-17T20:59:18Z",
      "side": 1,
      "message": "As noted in the downstream breakages, using `requests` for typ had the side effect of suddenly causing things that used typ to now require vpython, which isn\u0027t necessarily great.\n\nWe probably need to figure out to what extent we should assume and require vpython across the board, so that we can either safely assume it or have tooling that checks that this sort of thing doesn\u0027t regress.\n\nWe should also figure out what we need in either presubmits or the CQ to catch this sort of breakage, i.e., how did this actually get rolled in?\n\nAs a side note, anyone know if there is a way to do connection pooling with the python standard library, so that we wouldn\u0027t need requests? Or would we have to roll our own pooling code?",
      "revId": "ecb7a9bbb81652ca660c516b4b6db38c2b1c722c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb9ed452_25f76f5f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2020-11-17T21:08:18Z",
      "side": 1,
      "message": "AFAICT there isn\u0027t a way to use connection pooling with builtin modules without rolling our own solution.\n\nIf we want to soften the dependency on requests, I could have it try to use requests and fall back to httplib if it isn\u0027t available.\n\nAs for how this got rolled in, that\u0027s because it broke due to a particular script (wtp_import.py) having its own vpython spec which didn\u0027t have requests listed. This prevent vpython from using the top level Chromium spec. wtp_import isn\u0027t tested on the CQ, so it was only caught after landing.",
      "parentUuid": "1e1b939f_adee65f0",
      "revId": "ecb7a9bbb81652ca660c516b4b6db38c2b1c722c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "960c3fa7_952b1729",
        "filename": "third_party/typ/typ/result_sink.py",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1231539
      },
      "writtenOn": "2020-11-17T20:21:49Z",
      "side": 1,
      "message": "Drive-by (when you reland the CL): the indentation here should be 4 spaces.",
      "revId": "ecb7a9bbb81652ca660c516b4b6db38c2b1c722c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2a8af93_0908936e",
        "filename": "third_party/typ/typ/result_sink.py",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2020-11-17T20:59:43Z",
      "side": 1,
      "message": "N/A, as relanding the CL will remove these imports.",
      "parentUuid": "960c3fa7_952b1729",
      "revId": "ecb7a9bbb81652ca660c516b4b6db38c2b1c722c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}