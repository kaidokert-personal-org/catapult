{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c049b256_4c312deb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2021-09-30T22:09:21Z",
      "side": 1,
      "message": "Fixing the dangling alert. PTAL. ",
      "revId": "62e571a1910778feca0e4c440d36729b4f9a193b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f73f38b2_b155ac3e",
        "filename": "dashboard/dashboard/mark_recovered_alerts.py",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1181219
      },
      "writtenOn": "2021-10-01T00:18:23Z",
      "side": 1,
      "message": "_IsAlertRecovered can return False for two reasons: TestMetadata not found, or the alert hasn\u0027t recovered. So at this point, we don\u0027t know that the test was not found.\n\nMy suggestion is to move all the new code into _IsAlertRecovered, immediately after it has logged the TestMetadata not found error. It\u0027ll be necessary to pass the bug_id to that function.\n\nIn addition:\n\n* When TestMetadata is not found, alert_entity should unconditionally be marked as recovered. Regardless of whether a bug exists, or how old the bug (or alert) is, there is no point to check again for recovery.\n\n* I think we shouldn\u0027t add Performance-Regression-Recovered label to the bug, or state \"mark it as recovered\" in the text. Simply state that \"The test related to the alert below cannot be found in data store.\" The bug should be updated regardless of its age -- test disappearing is a useful info to bug owner even for new bugs.",
      "range": {
        "startLine": 133,
        "startChar": 5,
        "endLine": 133,
        "endChar": 6
      },
      "revId": "62e571a1910778feca0e4c440d36729b4f9a193b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04b1c2f4_3ddd3b64",
        "filename": "dashboard/dashboard/mark_recovered_alerts.py",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1373330
      },
      "writtenOn": "2021-10-01T00:42:02Z",
      "side": 1,
      "message": "Thanks for catching it. Will move the logic in _IsAlertRecovered().\n\nThe reason I check the bug\u0027s age is that I\u0027m not sure whether by any reason the get() will return None even when the record exists in ndb, then the alert will be incorrectly marked as recovered. Do you have any experience on the behaviors of the get()?",
      "parentUuid": "f73f38b2_b155ac3e",
      "range": {
        "startLine": 133,
        "startChar": 5,
        "endLine": 133,
        "endChar": 6
      },
      "revId": "62e571a1910778feca0e4c440d36729b4f9a193b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbaccd4b_47beafaa",
        "filename": "dashboard/dashboard/mark_recovered_alerts.py",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1181219
      },
      "writtenOn": "2021-10-01T02:47:07Z",
      "side": 1,
      "message": "In theory that shouldn\u0027t happen, but I don\u0027t know how reliable ndb is. When something goes wrong inside ndb, I\u0027d expect it to throw an exception instead of returning null, but I don\u0027t know how well-behaved ndb is. So it does make sense to be cautious. In that case, I think we should check the timestamp of the alert (alert_entity.timestamp), instead of bug creation time, as the presence of bug is optional.",
      "parentUuid": "04b1c2f4_3ddd3b64",
      "range": {
        "startLine": 133,
        "startChar": 5,
        "endLine": 133,
        "endChar": 6
      },
      "revId": "62e571a1910778feca0e4c440d36729b4f9a193b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}