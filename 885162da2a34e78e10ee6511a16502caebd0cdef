{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e9cc547f_c6704542",
        "filename": "telemetry/telemetry/internal/backends/chrome/fuchsia_browser_backend.py",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2022-10-25T09:43:16Z",
      "side": 1,
      "message": "Why would these two \"browser types\" output the debugging port to different places?  Why does migrating to CFv2 change this?",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 89,
        "endChar": 61
      },
      "revId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97a6e2db_0a8daa6d",
        "filename": "telemetry/telemetry/internal/backends/chrome/fuchsia_browser_backend.py",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1551707
      },
      "writtenOn": "2022-10-25T10:03:21Z",
      "side": 1,
      "message": "The web engine shell is now launched with `ffx test run`, which outputs a combination of its own output, the test\u0027s stdout, and the test\u0027s stderr to ffx\u0027s stdout. Once cast streaming shell is migrated to `ffx test run` it\u0027ll do the same, and these two browser types can be  collapsed into the same logic as it was before this change.",
      "parentUuid": "e9cc547f_c6704542",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 89,
        "endChar": 61
      },
      "revId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44de8356_d11ff06e",
        "filename": "telemetry/telemetry/internal/backends/chrome/fuchsia_browser_backend.py",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2022-10-25T11:47:04Z",
      "side": 1,
      "message": "\u003e The web engine shell is now launched with `ffx test run`, which outputs a combination of its own output, the test\u0027s stdout, and the test\u0027s stderr to ffx\u0027s stdout. Once cast streaming shell is migrated to `ffx test run` it\u0027ll do the same, and these two browser types can be  collapsed into the same logic as it was before this change.\n\nAnd why is the output moving from stderr to stdout?\n\nGenerally we don\u0027t want error output being routed to stdout, so the `ffx test run` behaviour sounds like a bug?",
      "parentUuid": "97a6e2db_0a8daa6d",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 89,
        "endChar": 61
      },
      "revId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ee1f65d_f79dedaa",
        "filename": "telemetry/telemetry/internal/backends/chrome/fuchsia_browser_backend.py",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1551707
      },
      "writtenOn": "2022-10-26T13:19:54Z",
      "side": 1,
      "message": "Honestly this is happening because we\u0027re misusing `ffx test run`. It\u0027s not designed for launching arbitrary programs on a target, it just happens to have the right feature set to unblock this migration.\n\nIdeally we\u0027ll be able to use something more general like `ffx component run`, but that\u0027s blocked on the CF team building out additional functionality for that (such as proper handling of stdout/stderr streams, setting command line arguments, and more). The CF team is discussing how to improve our tools here, and I\u0027ve been providing the team with Chromium\u0027s use cases here.\n\nUnfortunately I don\u0027t have a timeline for this work, and this workaround (using `ffx test run` and stdout here) will be tech debt until that\u0027s ready.\n\nIf this answer is unsatisfying to you I can look into working on more of a \"passthrough\" option for `ffx test run` and its handling of output streams, such that stderr is printed to the shell\u0027s stderr, but this change set does work without that.",
      "parentUuid": "44de8356_d11ff06e",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 89,
        "endChar": 61
      },
      "revId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43030e36_3b214e47",
        "filename": "telemetry/telemetry/internal/backends/chrome/fuchsia_browser_backend.py",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2022-10-28T13:46:37Z",
      "side": 1,
      "message": "\u003e Honestly this is happening because we\u0027re misusing `ffx test run`. It\u0027s not designed for launching arbitrary programs on a target, it just happens to have the right feature set to unblock this migration.\n\u003e \n\u003e Ideally we\u0027ll be able to use something more general like `ffx component run`, but that\u0027s blocked on the CF team building out additional functionality for that (such as proper handling of stdout/stderr streams, setting command line arguments, and more). The CF team is discussing how to improve our tools here, and I\u0027ve been providing the team with Chromium\u0027s use cases here.\n\u003e \n\u003e Unfortunately I don\u0027t have a timeline for this work, and this workaround (using `ffx test run` and stdout here) will be tech debt until that\u0027s ready.\n\u003e \n\u003e If this answer is unsatisfying to you I can look into working on more of a \"passthrough\" option for `ffx test run` and its handling of output streams, such that stderr is printed to the shell\u0027s stderr, but this change set does work without that.\n\nTech debt with a path to paying it off is fine by me - it would help to have a bug filed tracking the cleanup work, though, and to refer to that in a TODO comment here.",
      "parentUuid": "3ee1f65d_f79dedaa",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 89,
        "endChar": 61
      },
      "revId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "885162da2a34e78e10ee6511a16502caebd0cdef",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}