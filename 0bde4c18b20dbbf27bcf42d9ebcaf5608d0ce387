{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a81ca3b5_eb860d3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2023-06-15T00:11:44Z",
      "side": 1,
      "message": "LGTM with a question.",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97bacc45_e5247605",
        "filename": "dashboard/dashboard/common/workflow_client.py",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2023-06-15T00:11:44Z",
      "side": 1,
      "message": "I thought this would pass the input parameters to the Pinpoint try job that needs to run. Will this execution convert the anomaly to those input parameters?",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9fe9bd0_7e99c73f",
        "filename": "dashboard/dashboard/common/workflow_client.py",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1518167
      },
      "writtenOn": "2023-06-15T00:20:53Z",
      "side": 1,
      "message": "The responsibility to pass the appropriate parameters is on the Chromeperf side. I added a comment below specifying what the anomaly object should include that are necessary for sandwich verification.\n\nBtw, we don\u0027t need improvement direction and threshold parameters for regression detection anymore, correct?",
      "parentUuid": "97bacc45_e5247605",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbd956ed_dd23c728",
        "filename": "dashboard/dashboard/common/workflow_client.py",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1521022
      },
      "writtenOn": "2023-06-15T00:29:17Z",
      "side": 1,
      "message": "`Btw, we don\u0027t need improvement direction and threshold parameters for regression detection anymore, correct?`\n\nFor an MVP we will not. We do want those eventually.",
      "parentUuid": "f9fe9bd0_7e99c73f",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa9b6085_e43df369",
        "filename": "dashboard/dashboard/common/workflow_client.py",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1523469
      },
      "writtenOn": "2023-06-15T00:33:12Z",
      "side": 1,
      "message": "Does that mean culprit handler could find the corresponding execution info based on response.name? We stored the response.name in datastore group for each workflow somewhere between https://source.chromium.org/chromium/chromium/src/+/main:third_party/catapult/dashboard/dashboard/pinpoint/models/job.py;l\u003d666 and then the culprit handler check workflow status via the GetExecution and then update the bug for all the workflows?",
      "parentUuid": "f9fe9bd0_7e99c73f",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d090ca6_1c1a4b26",
        "filename": "dashboard/dashboard/common/workflow_client.py",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1518167
      },
      "writtenOn": "2023-06-15T00:38:31Z",
      "side": 1,
      "message": "Yes, correct. As we discussed, the job handler should save the execution names in Datastore as groups. Then the culprit handler periodically checks groups and check that their executions are complete using the GetExecution function. GetExecution should then give you all you need to know what to do next (error, state, result).",
      "parentUuid": "fa9b6085_e43df369",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83032edb_f43617e5",
        "filename": "dashboard/dashboard/common/workflow_client.py",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1121710
      },
      "writtenOn": "2023-06-15T00:28:27Z",
      "side": 1,
      "message": "Workflow API question, just to clarify: Is the value of `name` here used by the API here sort of like a unix process ID, to refer to a specific instance of a workflow process execution?\n\nSo in the unix comparison, `WORKFLOW_NAME` is the command name, and `Execution.name` is like the resulting process ID you get from starting up an instance of `WORKFLOW_NAME`?",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "572b8044_f4bbad1c",
        "filename": "dashboard/dashboard/common/workflow_client.py",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1518167
      },
      "writtenOn": "2023-06-15T00:38:31Z",
      "side": 1,
      "message": "Yes. The analogy sounds accurate. As an example, the prod workflow will have name \"projects/62121018386/locations/us-central1/workflows/sandwich-verification-workflow-prod\". Then an execution will have a name like: \"projects/62121018386/locations/us-central1/workflows/sandwich-verification-workflow-prod/executions/5a9e0c60-c1fc-4cde-a777-a0f82f3e8951\".",
      "parentUuid": "83032edb_f43617e5",
      "revId": "0bde4c18b20dbbf27bcf42d9ebcaf5608d0ce387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}