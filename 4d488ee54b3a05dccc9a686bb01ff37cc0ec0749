{
  "comments": [
    {
      "key": {
        "uuid": "1730335c_db55ed0d",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2018-03-21T02:07:36Z",
      "side": 1,
      "message": "I like the idea, though why not just make this ignore any error entirely?",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e1f5521_2628baf5",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-03-21T10:52:30Z",
      "side": 1,
      "message": "Instead of this I think we should factor out and reuse the code from here:\nhttps://cs.chromium.org/chromium/src/tools/perf/core/story_expectation_validator.py?rcl\u003d52f6eb4221430b6248fd5a59bec53bfef9fdd9a7\u0026l\u003d38",
      "parentUuid": "1730335c_db55ed0d",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b2925e9_b34c109e",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1168184
      },
      "writtenOn": "2018-03-21T20:06:12Z",
      "side": 1,
      "message": "Ned: optparse says it should not return -- it should either exit or raise an exception.\nhttps://github.com/python/cpython/blob/2.7/Lib/optparse.py#L1576\n\nJuan: There is a b.AddBenchmarkCommandLineArgs(parser) in _GetStorayTags. I have to override it because some benchmarks explicitly call optparse.error:\nhttps://cs.chromium.org/chromium/src/tools/perf/contrib/cluster_telemetry/ct_benchmarks_util.py?l\u003d20\n\nOr probably they should not do it; It\u0027s not an parsing error IMHO, is it?",
      "parentUuid": "8e1f5521_2628baf5",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "856b2d46_c658576c",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1168184
      },
      "writtenOn": "2018-03-21T20:20:30Z",
      "side": 1,
      "message": "Specifically, it\u0027s the benchmarks complaining that the required options are not specified, rather than those options are the defined in the parser. In other words, the benchmarks found the option to be None, rather than \"no such attribute in options\".",
      "parentUuid": "9b2925e9_b34c109e",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1af4fbb5_9eb845ba",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2018-03-21T02:07:36Z",
      "side": 1,
      "message": "This is another nice utility that you created. Though this general method should go in common/py_utils/py_utils/logging_util.py",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0408a7fb_8beced50",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-03-21T10:52:30Z",
      "side": 1,
      "message": "I also agree this is a nifty utility. But I wonder if it\u0027s the wrong solution for our problem. Instead, maybe the --json option should take a FILENAME argument, so we aren brittle when benchmarks (or other third party code) litter the stdout. Instead we just dump the json to the given file?",
      "parentUuid": "1af4fbb5_9eb845ba",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18358724_95dc2fdd",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1168184
      },
      "writtenOn": "2018-03-21T20:06:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0408a7fb_8beced50",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2413620_057543b7",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2018-03-21T02:07:36Z",
      "side": 1,
      "message": "I don\u0027t think setting cros_remote to be default is right.",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff27e8fb_09963920",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1168184
      },
      "writtenOn": "2018-03-21T20:06:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2413620_057543b7",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d13e8a_f4b421a6",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2018-03-21T02:07:36Z",
      "side": 1,
      "message": "you want to do \"except Exception\". The bare except also catches things like \"ctrl+c\" which isn\u0027t great.",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d0c7d9b_ac9d8dae",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1168184
      },
      "writtenOn": "2018-03-21T20:06:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48d13e8a_f4b421a6",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0c95ce5_61ce4875",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2018-03-21T10:52:30Z",
      "side": 1,
      "message": "As much as I love generators and comprehensions, this will probably be more efficient and more readable if you expand into a for loop and do story_tags.update() on each iteration.",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2026705a_6f0a4501",
        "filename": "telemetry/telemetry/benchmark_runner.py",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1168184
      },
      "writtenOn": "2018-03-21T20:06:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0c95ce5_61ce4875",
      "revId": "4d488ee54b3a05dccc9a686bb01ff37cc0ec0749",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}