{
  "comments": [
    {
      "key": {
        "uuid": "5643a5a1_5def4b1a",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-18T00:45:14Z",
      "side": 1,
      "message": "The Midpoint should be `(len(sequence) - 1) // 2` if you put it in the left part I think? In case [0, 0, 0, 0], Midpoint should return 1 to get the result [0, 0] and [0, 0]. And you don\u0027t need to handle the special case.",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9049e331_ee95be47",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-18T02:57:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5643a5a1_5def4b1a",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "480fe8b6_f604e7b6",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-18T00:45:14Z",
      "side": 1,
      "message": "Maybe `for i in xrange(min_segment_size, len(sequence) - min_segment_size)`?",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "256e54d3_906797c1",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-18T02:57:47Z",
      "side": 1,
      "message": "Yeah, we can\u0027t use `xrange` anymore because that\u0027s not in Python3 (we get a presubmit failure if we use it in the codebase).",
      "parentUuid": "480fe8b6_f604e7b6",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64fe02d3_4383f137",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-18T00:45:14Z",
      "side": 1,
      "message": "In which case it will happen?",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92c9cd9d_e0be8269",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-18T02:57:47Z",
      "side": 1,
      "message": "Good question. I\u0027ve restructured this to make it a single-pass on the estimates instead of having two passes as it is.",
      "parentUuid": "64fe02d3_4383f137",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62d8a88d_e35cf995",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-18T00:45:14Z",
      "side": 1,
      "message": "`max(len(cluster_a) - 1, 0)` is more clear for what you want to avoid.",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "600acb06_6d655232",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-18T01:20:44Z",
      "side": 1,
      "message": "Actually I think it won\u0027t happen if you always put the partition point in left. Is there any example that cluster_a is 0 and cluster_b is not?",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "403aaa0f_931ecaaf",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-18T02:57:47Z",
      "side": 1,
      "message": "It\u0027s possible that the data in b contains a change point too, while the data in a doesn\u0027t (when we\u0027re doing the permutation testing).",
      "parentUuid": "600acb06_6d655232",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2ce5360_a6f2531b",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-18T02:57:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62d8a88d_e35cf995",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aff7c881_30f6d317",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2019-12-18T00:45:14Z",
      "side": 1,
      "message": "This branch is almost the same to the `pinpoint_compare.DIFFERENT` except when `not in_a and not in_b`. Maybe move the check into `not in_a and not in_b` and merge the code?",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e40db74e_4d486cf2",
        "filename": "dashboard/dashboard/common/clustering_change_detector.py",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 1327821
      },
      "writtenOn": "2019-12-18T02:57:47Z",
      "side": 1,
      "message": "Good catch, done.",
      "parentUuid": "aff7c881_30f6d317",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "26eeefd97fe61c6afef5f55d322c38f332b7db53",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}