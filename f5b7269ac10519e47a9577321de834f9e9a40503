{
  "comments": [
    {
      "key": {
        "uuid": "95da981f_d6826e17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 20,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "Can you check if this also fixes crbug.com/844360?",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d04dcdb9_72a75366",
        "filename": "telemetry/telemetry/benchmark.py",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "Let\u0027s try to avoid as much as possible tucking extra stuff into the finder_options. Can you pass this instead as an optional second arg to the RunBenchmark command?",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c30f224_0acec10a",
        "filename": "telemetry/telemetry/benchmark.py",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2019-02-19T03:34:37Z",
      "side": 1,
      "message": "I am curious why you think this shouldn\u0027t be part of finder_options. The finder is going to use this as a filter for which browsers to look for. BrowserFinderOptions feels like the appropriate place to store this information?",
      "parentUuid": "d04dcdb9_72a75366",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bb6c24c_4872bfd9",
        "filename": "telemetry/telemetry/benchmark.py",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-19T10:01:01Z",
      "side": 1,
      "message": "finder_options (and browser_options) are already massive blobs where random properties are being stashed together. This makes it hard, e.g., to keep track of which pieces of code depend on which options. And this is made worst when values of these properties set in one place can be arbitrarily changed in some other, leading to unexpected behaviors (this has happened). In fact the split between finder and browser options was one first small step trying to address this complexity. Another step we have in mind is trying to make sure these option-blobs do not contain any mutable values and, if possible, \"freeze\" them when all options have been set to prevent any further unintended modifications.\n\nNow, having said that, and if you don\u0027t see any other easy way around it, you are right that finder_options sounds like a good place where to store this information on how to filter the list of browsers to be found. One small thing you can do to make me feel a bit less nervous is for GetSupportedPlatforms below to return a frozenset since, after this point, it shouldn\u0027t be modified any more.",
      "parentUuid": "6c30f224_0acec10a",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07caf5d8_72a394ee",
        "filename": "telemetry/telemetry/benchmark.py",
        "patchSetId": 8
      },
      "lineNbr": 113,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "nit: target_platforms.update(p.platforms) instead of the inner for loop,\n\nAlso, as in my other comment below, make this a GetSupportedPlatforms() method (with a docstring) and not a property.",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2f49f81_08665be3",
        "filename": "telemetry/telemetry/benchmark.py",
        "patchSetId": 8
      },
      "lineNbr": 113,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2019-02-19T03:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07caf5d8_72a394ee",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9266519_758a1d40",
        "filename": "telemetry/telemetry/internal/browser/browser_finder.py",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "Wondering, instead of a list of browser_finders, can this get a list of platforms?",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bf3235e_d0987b29",
        "filename": "telemetry/telemetry/internal/browser/browser_finder.py",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2019-02-19T03:34:37Z",
      "side": 1,
      "message": "FindBrowser already looks up the finders from the set of platforms. It\u0027d be better to not have to do that again in here (through ~line 104) IMO.",
      "parentUuid": "e9266519_758a1d40",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15dcff08_ebbd2599",
        "filename": "telemetry/telemetry/internal/browser/browser_finder.py",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-19T10:01:01Z",
      "side": 1,
      "message": "Ack. Not excited about this, but couldn\u0027t think of a better alternative either.",
      "parentUuid": "7bf3235e_d0987b29",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37d0ad20_bbc05d9e",
        "filename": "telemetry/telemetry/internal/browser/browser_options.py",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "If possible let\u0027s try to avoid this.",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a65daae5_104ac23c",
        "filename": "telemetry/telemetry/internal/browser/browser_options.py",
        "patchSetId": 8
      },
      "lineNbr": 357,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "I don\u0027t think these methods belong here. Instead functions in both browser_finder.py and device_finder.py should take the list (or set) of platforms and figure out themselves the right finder classes to use.",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86b4d82d_5f674b3a",
        "filename": "telemetry/telemetry/internal/browser/browser_options.py",
        "patchSetId": 8
      },
      "lineNbr": 357,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2019-02-19T03:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a65daae5_104ac23c",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ed9753c_4ae2a1b8",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 8
      },
      "lineNbr": 204,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "The part I\u0027m a bit wary about is that, on the surface, this appears to be introducing yet another thing called \"platform\" which, moreover, can be arbitrary strings.\n\nHaving said that, however, your change is probably a first step towards making that concept a bit more concrete and less sloppy. To start, let\u0027s add an explicit docstring here explaining the possible returned values match those produced by platform.GetOsName().\n\nalso nit: make this a proper method (not a property), e.g. GetSupportedPlatforms(), in particular since this returns a mutable thing. And maybe it should return a set rather than a list?",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a5537e6_8ea6182d",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 8
      },
      "lineNbr": 204,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2019-02-19T03:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ed9753c_4ae2a1b8",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e180a5f9_c9521abe",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 8
      },
      "lineNbr": 234,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-18T12:12:27Z",
      "side": 1,
      "message": "I am not 100% sure whether we should have an \u0027all\u0027 platform or, instead, define a constant in telemetry.core.platform with the names of all supported platforms. The later can also help reduce surprises on the values that one can expect to receive (e.g. in some places validate that only valid platform values are used). What do you think?",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6647faa_f3f68fb8",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 8
      },
      "lineNbr": 234,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2019-02-19T03:34:37Z",
      "side": 1,
      "message": "I haven\u0027t worked on telemetry a lot, so I don\u0027t have strong opinions either way. But at least for disabling unit-tests, I believe telemetry uses Disabled(\u0027all\u0027) to disable on all platforms. So \u0027all\u0027 here perhaps isn\u0027t entirely unexpected?\n\ntelemetry.core.platform could certainly have some convenience consts (e.g. ALL, DESKTOP etc.).",
      "parentUuid": "e180a5f9_c9521abe",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0da7e1a0_fbe82133",
        "filename": "telemetry/telemetry/story/expectations.py",
        "patchSetId": 8
      },
      "lineNbr": 234,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2019-02-19T10:01:01Z",
      "side": 1,
      "message": "Ack. For the moment let\u0027s keep it simple like this.",
      "parentUuid": "d6647faa_f3f68fb8",
      "revId": "f5b7269ac10519e47a9577321de834f9e9a40503",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}