{
  "comments": [
    {
      "key": {
        "uuid": "7c3aaf5f_30613002",
        "filename": "telemetry/telemetry/testing/run_tests_unittest.py",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1149061
      },
      "writtenOn": "2019-03-06T22:55:41Z",
      "side": 1,
      "message": "nit:This unittest is a bit difficult to understand. \n\nI think the first issue is that it\u0027s unclear from reading the test code what the test is doing and what it is expecting. I think this is a symptom of trying to make the code really short. I would prefer a test like this:\n\n  def testSkipOnlyWhenTestMatchesTestFilter_WithBrowser(self):\n    test_name \u003d \u0027unit_tests_test.AnotherFailingTest.test_fail\u0027\n    failed_tests, successful_tests, skipped_tests \u003d self.RunTest(\n        test_name, no_browser\u003dFalse, extra_args\u003d[\u0027--browser\u003dany\u0027, \u0027--skip\u003d*fail\u0027]\n    self.assertEqual(failed_tests, [])\n    self.assertEqual(successful_tests, [])\n    self.assertEqual(skipped_tests, [test_name])\n\nThis style of test makes it clear what is being checked by the test, and the reader does not have to go read RunTest to figure out what this test does. Of course, you have to write the RunTest method, but I think that is pretty doable.",
      "range": {
        "startLine": 151,
        "startChar": 7,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "380148cf60f69814494233e382a754833f5978be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae89474e_b72d8e68",
        "filename": "telemetry/telemetry/testing/run_tests_unittest.py",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-03-06T23:51:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c3aaf5f_30613002",
      "range": {
        "startLine": 151,
        "startChar": 7,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "380148cf60f69814494233e382a754833f5978be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65eb1020_2701bb2b",
        "filename": "telemetry/telemetry/testing/run_tests_unittest.py",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1149061
      },
      "writtenOn": "2019-03-07T01:10:01Z",
      "side": 1,
      "message": "But now you\u0027re doing assertions in multiple places, which is confusing as well.\n\nAnother issue is that the argument names \"failures\", \"successes\", \"skips\" don\u0027t show that these are expected values. When I read:\n\n  def runTest(\n      self, failures, successes, skips, test_name\u003d\u0027\u0027, extra_args\u003dNone,\n      no_browser\u003dTrue, expected_return_code\u003d0):\n\nI think that the only thing that you could be using for an assertion is expected_return_code. So then I think that failures, successes, skips are somehow input to the test. If you really want to keep those, then you can do\n\n  def runTest(\n      self, test_name\u003d\u0027\u0027, extra_args\u003dNone,\n      no_browser\u003dTrue, expected_return_code\u003d0, expected_failures\u003dNone,\n      expected_successes\u003dNone, expected_skips\u003dNone):\n\nSo that the arguments that are expected are near each other.",
      "parentUuid": "ae89474e_b72d8e68",
      "range": {
        "startLine": 151,
        "startChar": 7,
        "endLine": 156,
        "endChar": 44
      },
      "revId": "380148cf60f69814494233e382a754833f5978be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cf391eb_996a02c3",
        "filename": "telemetry/telemetry/testing/run_tests_unittest.py",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1149061
      },
      "writtenOn": "2019-03-06T22:55:41Z",
      "side": 1,
      "message": "nit: use lowercase o in Without since it is a single word.",
      "range": {
        "startLine": 159,
        "startChar": 47,
        "endLine": 159,
        "endChar": 48
      },
      "revId": "380148cf60f69814494233e382a754833f5978be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48c934c8_06677373",
        "filename": "telemetry/telemetry/testing/run_tests_unittest.py",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-03-06T23:51:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cf391eb_996a02c3",
      "range": {
        "startLine": 159,
        "startChar": 47,
        "endLine": 159,
        "endChar": 48
      },
      "revId": "380148cf60f69814494233e382a754833f5978be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7e2b7c4_7d31ffa9",
        "filename": "telemetry/telemetry/testing/run_tests_unittest.py",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1149061
      },
      "writtenOn": "2019-03-06T22:55:41Z",
      "side": 1,
      "message": "nit: This \"a\" is a new word, so it should be uppercase",
      "range": {
        "startLine": 167,
        "startChar": 51,
        "endLine": 167,
        "endChar": 52
      },
      "revId": "380148cf60f69814494233e382a754833f5978be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cbafa3c_41f31420",
        "filename": "telemetry/telemetry/testing/run_tests_unittest.py",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1311766
      },
      "writtenOn": "2019-03-06T23:51:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7e2b7c4_7d31ffa9",
      "range": {
        "startLine": 167,
        "startChar": 51,
        "endLine": 167,
        "endChar": 52
      },
      "revId": "380148cf60f69814494233e382a754833f5978be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}